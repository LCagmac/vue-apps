function makeMap(str, expectsLowerCase) {
  const map = Object.create(null);
  const list = str.split(",");
  for (let i2 = 0; i2 < list.length; i2++) {
    map[list[i2]] = true;
  }
  return expectsLowerCase ? (val) => !!map[val.toLowerCase()] : (val) => !!map[val];
}
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
function includeBooleanAttr(value) {
  return !!value || value === "";
}
function normalizeStyle(value) {
  if (isArray(value)) {
    const res = {};
    for (let i2 = 0; i2 < value.length; i2++) {
      const item = value[i2];
      const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString(value)) {
    return value;
  } else if (isObject(value)) {
    return value;
  }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:(.+)/;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp2 = item.split(propertyDelimiterRE);
      tmp2.length > 1 && (ret[tmp2[0].trim()] = tmp2[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value) {
  let res = "";
  if (isString(value)) {
    res = value;
  } else if (isArray(value)) {
    for (let i2 = 0; i2 < value.length; i2++) {
      const normalized = normalizeClass(value[i2]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
const toDisplayString = (val) => {
  return val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val) => {
  if (val && val.__v_isRef) {
    return replacer(_key, val.value);
  } else if (isMap(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
        entries[`${key} =>`] = val2;
        return entries;
      }, {})
    };
  } else if (isSet(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()]
    };
  } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {
    return String(val);
  }
  return val;
};
const EMPTY_OBJ = {};
const EMPTY_ARR = [];
const NOOP = () => {
};
const NO = () => false;
const onRE = /^on[^a-z]/;
const isOn = (key) => onRE.test(key);
const isModelListener = (key) => key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el) => {
  const i2 = arr.indexOf(el);
  if (i2 > -1) {
    arr.splice(i2, 1);
  }
};
const hasOwnProperty$1 = Object.prototype.hasOwnProperty;
const hasOwn = (val, key) => hasOwnProperty$1.call(val, key);
const isArray = Array.isArray;
const isMap = (val) => toTypeString(val) === "[object Map]";
const isSet = (val) => toTypeString(val) === "[object Set]";
const isFunction = (val) => typeof val === "function";
const isString = (val) => typeof val === "string";
const isSymbol = (val) => typeof val === "symbol";
const isObject = (val) => val !== null && typeof val === "object";
const isPromise = (val) => {
  return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value) => objectToString.call(value);
const toRawType = (value) => {
  return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val) => toTypeString(val) === "[object Object]";
const isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ makeMap(",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted");
const cacheStringFunction = (fn2) => {
  const cache = Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn2(str));
  };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction((str) => {
  return str.replace(camelizeRE, (_2, c2) => c2 ? c2.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
const capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
const toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);
const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
const invokeArrayFns = (fns, arg) => {
  for (let i2 = 0; i2 < fns.length; i2++) {
    fns[i2](arg);
  }
};
const def = (obj, key, value) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value
  });
};
const toNumber = (val) => {
  const n2 = parseFloat(val);
  return isNaN(n2) ? val : n2;
};
let activeEffectScope;
const effectScopeStack = [];
class EffectScope {
  constructor(detached = false) {
    this.active = true;
    this.effects = [];
    this.cleanups = [];
    if (!detached && activeEffectScope) {
      this.parent = activeEffectScope;
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
    }
  }
  run(fn2) {
    if (this.active) {
      try {
        this.on();
        return fn2();
      } finally {
        this.off();
      }
    }
  }
  on() {
    if (this.active) {
      effectScopeStack.push(this);
      activeEffectScope = this;
    }
  }
  off() {
    if (this.active) {
      effectScopeStack.pop();
      activeEffectScope = effectScopeStack[effectScopeStack.length - 1];
    }
  }
  stop(fromParent) {
    if (this.active) {
      this.effects.forEach((e2) => e2.stop());
      this.cleanups.forEach((cleanup) => cleanup());
      if (this.scopes) {
        this.scopes.forEach((e2) => e2.stop(true));
      }
      if (this.parent && !fromParent) {
        const last = this.parent.scopes.pop();
        if (last && last !== this) {
          this.parent.scopes[this.index] = last;
          last.index = this.index;
        }
      }
      this.active = false;
    }
  }
}
function recordEffectScope(effect, scope) {
  scope = scope || activeEffectScope;
  if (scope && scope.active) {
    scope.effects.push(effect);
  }
}
const createDep = (effects) => {
  const dep = new Set(effects);
  dep.w = 0;
  dep.n = 0;
  return dep;
};
const wasTracked = (dep) => (dep.w & trackOpBit) > 0;
const newTracked = (dep) => (dep.n & trackOpBit) > 0;
const initDepMarkers = ({ deps }) => {
  if (deps.length) {
    for (let i2 = 0; i2 < deps.length; i2++) {
      deps[i2].w |= trackOpBit;
    }
  }
};
const finalizeDepMarkers = (effect) => {
  const { deps } = effect;
  if (deps.length) {
    let ptr = 0;
    for (let i2 = 0; i2 < deps.length; i2++) {
      const dep = deps[i2];
      if (wasTracked(dep) && !newTracked(dep)) {
        dep.delete(effect);
      } else {
        deps[ptr++] = dep;
      }
      dep.w &= ~trackOpBit;
      dep.n &= ~trackOpBit;
    }
    deps.length = ptr;
  }
};
const targetMap = new WeakMap();
let effectTrackDepth = 0;
let trackOpBit = 1;
const maxMarkerBits = 30;
const effectStack = [];
let activeEffect;
const ITERATE_KEY = Symbol("");
const MAP_KEY_ITERATE_KEY = Symbol("");
class ReactiveEffect {
  constructor(fn2, scheduler = null, scope) {
    this.fn = fn2;
    this.scheduler = scheduler;
    this.active = true;
    this.deps = [];
    recordEffectScope(this, scope);
  }
  run() {
    if (!this.active) {
      return this.fn();
    }
    if (!effectStack.includes(this)) {
      try {
        effectStack.push(activeEffect = this);
        enableTracking();
        trackOpBit = 1 << ++effectTrackDepth;
        if (effectTrackDepth <= maxMarkerBits) {
          initDepMarkers(this);
        } else {
          cleanupEffect(this);
        }
        return this.fn();
      } finally {
        if (effectTrackDepth <= maxMarkerBits) {
          finalizeDepMarkers(this);
        }
        trackOpBit = 1 << --effectTrackDepth;
        resetTracking();
        effectStack.pop();
        const n2 = effectStack.length;
        activeEffect = n2 > 0 ? effectStack[n2 - 1] : void 0;
      }
    }
  }
  stop() {
    if (this.active) {
      cleanupEffect(this);
      if (this.onStop) {
        this.onStop();
      }
      this.active = false;
    }
  }
}
function cleanupEffect(effect) {
  const { deps } = effect;
  if (deps.length) {
    for (let i2 = 0; i2 < deps.length; i2++) {
      deps[i2].delete(effect);
    }
    deps.length = 0;
  }
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function enableTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = true;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function track(target, type, key) {
  if (!isTracking()) {
    return;
  }
  let depsMap = targetMap.get(target);
  if (!depsMap) {
    targetMap.set(target, depsMap = new Map());
  }
  let dep = depsMap.get(key);
  if (!dep) {
    depsMap.set(key, dep = createDep());
  }
  trackEffects(dep);
}
function isTracking() {
  return shouldTrack && activeEffect !== void 0;
}
function trackEffects(dep, debuggerEventExtraInfo) {
  let shouldTrack2 = false;
  if (effectTrackDepth <= maxMarkerBits) {
    if (!newTracked(dep)) {
      dep.n |= trackOpBit;
      shouldTrack2 = !wasTracked(dep);
    }
  } else {
    shouldTrack2 = !dep.has(activeEffect);
  }
  if (shouldTrack2) {
    dep.add(activeEffect);
    activeEffect.deps.push(dep);
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && isArray(target)) {
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || key2 >= newValue) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!isArray(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if (isIntegerKey(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case "set":
        if (isMap(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  if (deps.length === 1) {
    if (deps[0]) {
      {
        triggerEffects(deps[0]);
      }
    }
  } else {
    const effects = [];
    for (const dep of deps) {
      if (dep) {
        effects.push(...dep);
      }
    }
    {
      triggerEffects(createDep(effects));
    }
  }
}
function triggerEffects(dep, debuggerEventExtraInfo) {
  for (const effect of isArray(dep) ? dep : [...dep]) {
    if (effect !== activeEffect || effect.allowRecurse) {
      if (effect.scheduler) {
        effect.scheduler();
      } else {
        effect.run();
      }
    }
  }
}
const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(isSymbol));
const get = /* @__PURE__ */ createGetter();
const shallowGet = /* @__PURE__ */ createGetter(false, true);
const readonlyGet = /* @__PURE__ */ createGetter(true);
const arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
function createArrayInstrumentations() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw(this);
      for (let i2 = 0, l2 = this.length; i2 < l2; i2++) {
        track(arr, "get", i2 + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking();
      const res = toRaw(this)[key].apply(this, args);
      resetTracking();
      return res;
    };
  });
  return instrumentations;
}
function createGetter(isReadonly2 = false, shallow = false) {
  return function get2(target, key, receiver) {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
      return target;
    }
    const targetIsArray = isArray(target);
    if (!isReadonly2 && targetIsArray && hasOwn(arrayInstrumentations, key)) {
      return Reflect.get(arrayInstrumentations, key, receiver);
    }
    const res = Reflect.get(target, key, receiver);
    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef(res)) {
      const shouldUnwrap = !targetIsArray || !isIntegerKey(key);
      return shouldUnwrap ? res.value : res;
    }
    if (isObject(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  };
}
const set = /* @__PURE__ */ createSetter();
const shallowSet = /* @__PURE__ */ createSetter(true);
function createSetter(shallow = false) {
  return function set2(target, key, value, receiver) {
    let oldValue = target[key];
    if (!shallow) {
      value = toRaw(value);
      oldValue = toRaw(oldValue);
      if (!isArray(target) && isRef(oldValue) && !isRef(value)) {
        oldValue.value = value;
        return true;
      }
    }
    const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value);
      }
    }
    return result;
  };
}
function deleteProperty(target, key) {
  const hadKey = hasOwn(target, key);
  target[key];
  const result = Reflect.deleteProperty(target, key);
  if (result && hadKey) {
    trigger(target, "delete", key, void 0);
  }
  return result;
}
function has(target, key) {
  const result = Reflect.has(target, key);
  if (!isSymbol(key) || !builtInSymbols.has(key)) {
    track(target, "has", key);
  }
  return result;
}
function ownKeys(target) {
  track(target, "iterate", isArray(target) ? "length" : ITERATE_KEY);
  return Reflect.ownKeys(target);
}
const mutableHandlers = {
  get,
  set,
  deleteProperty,
  has,
  ownKeys
};
const readonlyHandlers = {
  get: readonlyGet,
  set(target, key) {
    return true;
  },
  deleteProperty(target, key) {
    return true;
  }
};
const shallowReactiveHandlers = /* @__PURE__ */ extend({}, mutableHandlers, {
  get: shallowGet,
  set: shallowSet
});
const toReactive = (value) => isObject(value) ? reactive(value) : value;
const toReadonly = (value) => isObject(value) ? readonly(value) : value;
const toShallow = (value) => value;
const getProto = (v2) => Reflect.getPrototypeOf(v2);
function get$1(target, key, isReadonly2 = false, isShallow = false) {
  target = target["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (key !== rawKey) {
    !isReadonly2 && track(rawTarget, "get", key);
  }
  !isReadonly2 && track(rawTarget, "get", rawKey);
  const { has: has2 } = getProto(rawTarget);
  const wrap = isShallow ? toShallow : isReadonly2 ? toReadonly : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has$1(key, isReadonly2 = false) {
  const target = this["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (key !== rawKey) {
    !isReadonly2 && track(rawTarget, "has", key);
  }
  !isReadonly2 && track(rawTarget, "has", rawKey);
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly2 = false) {
  target = target["__v_raw"];
  !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
  return Reflect.get(target, "size", target);
}
function add(value) {
  value = toRaw(value);
  const target = toRaw(this);
  const proto = getProto(target);
  const hadKey = proto.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger(target, "add", value, value);
  }
  return this;
}
function set$1(key, value) {
  value = toRaw(value);
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  }
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger(target, "add", key, value);
  } else if (hasChanged(value, oldValue)) {
    trigger(target, "set", key, value);
  }
  return this;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  }
  get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, "delete", key, void 0);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const result = target.clear();
  if (hadItems) {
    trigger(target, "clear", void 0, void 0);
  }
  return result;
}
function createForEach(isReadonly2, isShallow) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed["__v_raw"];
    const rawTarget = toRaw(target);
    const wrap = isShallow ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap(value), wrap(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly2, isShallow) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap = isShallow ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
    return {
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
          done
        };
      },
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    return type === "delete" ? false : this;
  };
}
function createInstrumentations() {
  const mutableInstrumentations2 = {
    get(key) {
      return get$1(this, key);
    },
    get size() {
      return size(this);
    },
    has: has$1,
    add,
    set: set$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get$1(this, key, false, true);
    },
    get size() {
      return size(this);
    },
    has: has$1,
    add,
    set: set$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get$1(this, key, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has$1.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get$1(this, key, true, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has$1.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, true)
  };
  const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod(method, false, false);
    readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
    shallowInstrumentations2[method] = createIterableMethod(method, false, true);
    shallowReadonlyInstrumentations2[method] = createIterableMethod(method, true, true);
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* @__PURE__ */ createInstrumentations();
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
  };
}
const mutableCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const reactiveMap = new WeakMap();
const shallowReactiveMap = new WeakMap();
const readonlyMap = new WeakMap();
const shallowReadonlyMap = new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value) {
  return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
}
function reactive(target) {
  if (target && target["__v_isReadonly"]) {
    return target;
  }
  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
function shallowReactive(target) {
  return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
function readonly(target) {
  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject(target)) {
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value["__v_raw"]);
  }
  return !!(value && value["__v_isReactive"]);
}
function isReadonly(value) {
  return !!(value && value["__v_isReadonly"]);
}
function isProxy(value) {
  return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
  def(value, "__v_skip", true);
  return value;
}
function trackRefValue(ref) {
  if (isTracking()) {
    ref = toRaw(ref);
    if (!ref.dep) {
      ref.dep = createDep();
    }
    {
      trackEffects(ref.dep);
    }
  }
}
function triggerRefValue(ref, newVal) {
  ref = toRaw(ref);
  if (ref.dep) {
    {
      triggerEffects(ref.dep);
    }
  }
}
function isRef(r2) {
  return Boolean(r2 && r2.__v_isRef === true);
}
function unref(ref) {
  return isRef(ref) ? ref.value : ref;
}
const shallowUnwrapHandlers = {
  get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef(oldValue) && !isRef(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class ComputedRefImpl {
  constructor(getter, _setter, isReadonly2) {
    this._setter = _setter;
    this.dep = void 0;
    this._dirty = true;
    this.__v_isRef = true;
    this.effect = new ReactiveEffect(getter, () => {
      if (!this._dirty) {
        this._dirty = true;
        triggerRefValue(this);
      }
    });
    this["__v_isReadonly"] = isReadonly2;
  }
  get value() {
    const self2 = toRaw(this);
    trackRefValue(self2);
    if (self2._dirty) {
      self2._dirty = false;
      self2._value = self2.effect.run();
    }
    return self2._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
}
function computed(getterOrOptions, debugOptions) {
  let getter;
  let setter;
  if (isFunction(getterOrOptions)) {
    getter = getterOrOptions;
    setter = NOOP;
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, isFunction(getterOrOptions) || !getterOrOptions.set);
  return cRef;
}
Promise.resolve();
const globalCompatConfig = {
  MODE: 2
};
function getCompatConfigForKey(key, instance) {
  const instanceConfig = instance && instance.type.compatConfig;
  if (instanceConfig && key in instanceConfig) {
    return instanceConfig[key];
  }
  return globalCompatConfig[key];
}
function isCompatEnabled(key, instance, enableForBuiltIn = false) {
  if (!enableForBuiltIn && instance && instance.type.__isBuiltIn) {
    return false;
  }
  const rawMode = getCompatConfigForKey("MODE", instance) || 2;
  const val = getCompatConfigForKey(key, instance);
  const mode = isFunction(rawMode) ? rawMode(instance && instance.type) : rawMode;
  if (mode === 2) {
    return val !== false;
  } else {
    return val === true || val === "suppress-warning";
  }
}
function emit(instance, event, ...rawArgs) {
  const props = instance.vnode.props || EMPTY_OBJ;
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modelArg = isModelListener2 && event.slice(7);
  if (modelArg && modelArg in props) {
    const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
    const { number, trim } = props[modifiersKey] || EMPTY_OBJ;
    if (trim) {
      args = rawArgs.map((a2) => a2.trim());
    } else if (number) {
      args = rawArgs.map(toNumber);
    }
  }
  let handlerName;
  let handler = props[handlerName = toHandlerKey(event)] || props[handlerName = toHandlerKey(camelize(event))];
  if (!handler && isModelListener2) {
    handler = props[handlerName = toHandlerKey(hyphenate(event))];
  }
  if (handler) {
    callWithAsyncErrorHandling(handler, instance, 6, args);
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling(onceHandler, instance, 6, args);
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.emitsCache;
  const cached = cache.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    cache.set(comp, null);
    return null;
  }
  if (isArray(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend(normalized, raw);
  }
  cache.set(comp, normalized);
  return normalized;
}
function isEmitListener(options, key) {
  if (!options || !isOn(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return hasOwn(options, key[0].toLowerCase() + key.slice(1)) || hasOwn(options, hyphenate(key)) || hasOwn(options, key);
}
let currentRenderingInstance = null;
let currentScopeId = null;
function setCurrentRenderingInstance(instance) {
  const prev = currentRenderingInstance;
  currentRenderingInstance = instance;
  currentScopeId = instance && instance.type.__scopeId || null;
  return prev;
}
function pushScopeId(id) {
  currentScopeId = id;
}
function popScopeId() {
  currentScopeId = null;
}
function withCtx(fn2, ctx = currentRenderingInstance, isNonScopedSlot) {
  if (!ctx)
    return fn2;
  if (fn2._n) {
    return fn2;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking(-1);
    }
    const prevInstance = setCurrentRenderingInstance(ctx);
    const res = fn2(...args);
    setCurrentRenderingInstance(prevInstance);
    if (renderFnWithContext._d) {
      setBlockTracking(1);
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
let accessedAttrs = false;
function markAttrsAccessed() {
  accessedAttrs = true;
}
function renderComponentRoot(instance) {
  const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit: emit2, render, renderCache, data, setupState, ctx, inheritAttrs } = instance;
  let result;
  const prev = setCurrentRenderingInstance(instance);
  try {
    let fallthroughAttrs;
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
      fallthroughAttrs = attrs;
    } else {
      const render2 = Component;
      if (false)
        ;
      result = normalizeVNode(render2.length > 1 ? render2(props, false ? {
        get attrs() {
          markAttrsAccessed();
          return attrs;
        },
        slots,
        emit: emit2
      } : { attrs, slots, emit: emit2 }) : render2(props, null));
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
    }
    let root = result;
    let setRoot = void 0;
    if (false)
      ;
    if (fallthroughAttrs && inheritAttrs !== false) {
      const keys = Object.keys(fallthroughAttrs);
      const { shapeFlag } = root;
      if (keys.length) {
        if (shapeFlag & (1 | 6)) {
          if (propsOptions && keys.some(isModelListener)) {
            fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
          }
          root = cloneVNode(root, fallthroughAttrs);
        } else if (false)
          ;
      }
    }
    if (false)
      ;
    if (vnode.dirs) {
      if (false)
        ;
      root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
    }
    if (vnode.transition) {
      if (false)
        ;
      root.transition = vnode.transition;
    }
    if (false)
      ;
    else {
      result = root;
    }
  } catch (err) {
    blockStack.length = 0;
    handleError(err, instance, 1);
    result = createVNode(Comment);
  }
  setCurrentRenderingInstance(prev);
  return result;
}
const getChildRoot = (vnode) => {
  const rawChildren = vnode.children;
  const dynamicChildren = vnode.dynamicChildren;
  const childRoot = filterSingleRoot(rawChildren);
  if (!childRoot) {
    return [vnode, void 0];
  }
  const index = rawChildren.indexOf(childRoot);
  const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
  const setRoot = (updatedRoot) => {
    rawChildren[index] = updatedRoot;
    if (dynamicChildren) {
      if (dynamicIndex > -1) {
        dynamicChildren[dynamicIndex] = updatedRoot;
      } else if (updatedRoot.patchFlag > 0) {
        vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
      }
    }
  };
  return [normalizeVNode(childRoot), setRoot];
};
function filterSingleRoot(children) {
  let singleRoot;
  for (let i2 = 0; i2 < children.length; i2++) {
    const child = children[i2];
    if (isVNode(child)) {
      if (child.type !== Comment || child.children === "v-if") {
        if (singleRoot) {
          return;
        } else {
          singleRoot = child;
        }
      }
    } else {
      return;
    }
  }
  return singleRoot;
}
const getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === "class" || key === "style" || isOn(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
const filterModelListeners = (attrs, props) => {
  const res = {};
  for (const key in attrs) {
    if (!isModelListener(key) || !(key.slice(9) in props)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
const isElementRoot = (vnode) => {
  return vnode.shapeFlag & (6 | 1) || vnode.type === Comment;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i2 = 0; i2 < dynamicProps.length; i2++) {
        const key = dynamicProps[i2];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i2 = 0; i2 < nextKeys.length; i2++) {
    const key = nextKeys[i2];
    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({ vnode, parent }, el) {
  while (parent && parent.subTree === vnode) {
    (vnode = parent.vnode).el = el;
    parent = parent.parent;
  }
}
const isSuspense = (type) => type.__isSuspense;
function queueEffectWithSuspense(fn2, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray(fn2)) {
      suspense.effects.push(...fn2);
    } else {
      suspense.effects.push(fn2);
    }
  } else {
    queuePostFlushCb(fn2);
  }
}
function provide(key, value) {
  if (!currentInstance)
    ;
  else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance) {
    const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction(defaultValue) ? defaultValue.call(instance.proxy) : defaultValue;
    } else
      ;
  }
}
const isAsyncWrapper = (i2) => !!i2.type.__asyncLoader;
const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
function onActivated(hook, target) {
  registerKeepAliveHook(hook, "a", target);
}
function onDeactivated(hook, target) {
  registerKeepAliveHook(hook, "da", target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    hook();
  });
  injectHook(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive(current.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
  const injected = injectHook(type, hook, keepAliveRoot, true);
  onUnmounted(() => {
    remove(keepAliveRoot[type], injected);
  }, target);
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
  if (target) {
    const hooks = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      if (target.isUnmounted) {
        return;
      }
      pauseTracking();
      setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook, target, type, args);
      unsetCurrentInstance();
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  }
}
const createHook = (lifecycle) => (hook, target = currentInstance) => (!isInSSRComponentSetup || lifecycle === "sp") && injectHook(lifecycle, hook, target);
const onBeforeMount = createHook("bm");
const onMounted = createHook("m");
const onBeforeUpdate = createHook("bu");
const onUpdated = createHook("u");
const onBeforeUnmount = createHook("bum");
const onUnmounted = createHook("um");
const onServerPrefetch = createHook("sp");
const onRenderTriggered = createHook("rtg");
const onRenderTracked = createHook("rtc");
function onErrorCaptured(hook, target = currentInstance) {
  injectHook("ec", hook, target);
}
let shouldCacheAccess = true;
function applyOptions(instance) {
  const options = resolveMergedOptions(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess = false;
  if (options.beforeCreate) {
    callHook(options.beforeCreate, instance, "bc");
  }
  const {
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    expose,
    inheritAttrs,
    components,
    directives,
    filters
  } = options;
  const checkDuplicateProperties = null;
  if (injectOptions) {
    resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction(methodHandler)) {
        {
          ctx[key] = methodHandler.bind(publicThis);
        }
      }
    }
  }
  if (dataOptions) {
    const data = dataOptions.call(publicThis, publicThis);
    if (!isObject(data))
      ;
    else {
      instance.data = reactive(data);
    }
  }
  shouldCacheAccess = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction(opt) ? opt.bind(publicThis, publicThis) : isFunction(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      const set2 = !isFunction(opt) && isFunction(opt.set) ? opt.set.bind(publicThis) : NOOP;
      const c2 = computed({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c2.value,
        set: (v2) => c2.value = v2
      });
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher(watchOptions[key], ctx, publicThis, key);
    }
  }
  if (provideOptions) {
    const provides = isFunction(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key) => {
      provide(key, provides[key]);
    });
  }
  if (created) {
    callHook(created, instance, "c");
  }
  function registerLifecycleHook(register, hook) {
    if (isArray(hook)) {
      hook.forEach((_hook) => register(_hook.bind(publicThis)));
    } else if (hook) {
      register(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount, beforeMount);
  registerLifecycleHook(onMounted, mounted);
  registerLifecycleHook(onBeforeUpdate, beforeUpdate);
  registerLifecycleHook(onUpdated, updated);
  registerLifecycleHook(onActivated, activated);
  registerLifecycleHook(onDeactivated, deactivated);
  registerLifecycleHook(onErrorCaptured, errorCaptured);
  registerLifecycleHook(onRenderTracked, renderTracked);
  registerLifecycleHook(onRenderTriggered, renderTriggered);
  registerLifecycleHook(onBeforeUnmount, beforeUnmount);
  registerLifecycleHook(onUnmounted, unmounted);
  registerLifecycleHook(onServerPrefetch, serverPrefetch);
  if (isArray(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render && instance.render === NOOP) {
    instance.render = render;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components)
    instance.components = components;
  if (directives)
    instance.directives = directives;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP, unwrapRef = false) {
  if (isArray(injectOptions)) {
    injectOptions = normalizeInject(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if (isObject(opt)) {
      if ("default" in opt) {
        injected = inject(opt.from || key, opt.default, true);
      } else {
        injected = inject(opt.from || key);
      }
    } else {
      injected = inject(opt);
    }
    if (isRef(injected)) {
      if (unwrapRef) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          get: () => injected.value,
          set: (v2) => injected.value = v2
        });
      } else {
        ctx[key] = injected;
      }
    } else {
      ctx[key] = injected;
    }
  }
}
function callHook(hook, instance, type) {
  callWithAsyncErrorHandling(isArray(hook) ? hook.map((h) => h.bind(instance.proxy)) : hook.bind(instance.proxy), instance, type);
}
function createWatcher(raw, ctx, publicThis, key) {
  const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
  if (isString(raw)) {
    const handler = ctx[raw];
    if (isFunction(handler)) {
      watch(getter, handler);
    }
  } else if (isFunction(raw)) {
    watch(getter, raw.bind(publicThis));
  } else if (isObject(raw)) {
    if (isArray(raw)) {
      raw.forEach((r2) => createWatcher(r2, ctx, publicThis, key));
    } else {
      const handler = isFunction(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction(handler)) {
        watch(getter, handler, raw);
      }
    }
  } else
    ;
}
function resolveMergedOptions(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const { mixins: globalMixins, optionsCache: cache, config: { optionMergeStrategies } } = instance.appContext;
  const cached = cache.get(base);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach((m2) => mergeOptions(resolved, m2, optionMergeStrategies, true));
    }
    mergeOptions(resolved, base, optionMergeStrategies);
  }
  cache.set(base, resolved);
  return resolved;
}
function mergeOptions(to2, from, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from;
  if (extendsOptions) {
    mergeOptions(to2, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach((m2) => mergeOptions(to2, m2, strats, true));
  }
  for (const key in from) {
    if (asMixin && key === "expose")
      ;
    else {
      const strat = internalOptionMergeStrats[key] || strats && strats[key];
      to2[key] = strat ? strat(to2[key], from[key]) : from[key];
    }
  }
  return to2;
}
const internalOptionMergeStrats = {
  data: mergeDataFn,
  props: mergeObjectOptions,
  emits: mergeObjectOptions,
  methods: mergeObjectOptions,
  computed: mergeObjectOptions,
  beforeCreate: mergeAsArray,
  created: mergeAsArray,
  beforeMount: mergeAsArray,
  mounted: mergeAsArray,
  beforeUpdate: mergeAsArray,
  updated: mergeAsArray,
  beforeDestroy: mergeAsArray,
  beforeUnmount: mergeAsArray,
  destroyed: mergeAsArray,
  unmounted: mergeAsArray,
  activated: mergeAsArray,
  deactivated: mergeAsArray,
  errorCaptured: mergeAsArray,
  serverPrefetch: mergeAsArray,
  components: mergeObjectOptions,
  directives: mergeObjectOptions,
  watch: mergeWatchOptions,
  provide: mergeDataFn,
  inject: mergeInject
};
function mergeDataFn(to2, from) {
  if (!from) {
    return to2;
  }
  if (!to2) {
    return from;
  }
  return function mergedDataFn() {
    return extend(isFunction(to2) ? to2.call(this, this) : to2, isFunction(from) ? from.call(this, this) : from);
  };
}
function mergeInject(to2, from) {
  return mergeObjectOptions(normalizeInject(to2), normalizeInject(from));
}
function normalizeInject(raw) {
  if (isArray(raw)) {
    const res = {};
    for (let i2 = 0; i2 < raw.length; i2++) {
      res[raw[i2]] = raw[i2];
    }
    return res;
  }
  return raw;
}
function mergeAsArray(to2, from) {
  return to2 ? [...new Set([].concat(to2, from))] : from;
}
function mergeObjectOptions(to2, from) {
  return to2 ? extend(extend(Object.create(null), to2), from) : from;
}
function mergeWatchOptions(to2, from) {
  if (!to2)
    return from;
  if (!from)
    return to2;
  const merged = extend(Object.create(null), to2);
  for (const key in from) {
    merged[key] = mergeAsArray(to2[key], from[key]);
  }
  return merged;
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = {};
  def(attrs, InternalObjectKey, 1);
  instance.propsDefaults = Object.create(null);
  setFullProps(instance, rawProps, props, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props)) {
      props[key] = void 0;
    }
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const { props, attrs, vnode: { patchFlag } } = instance;
  const rawCurrentProps = toRaw(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if ((optimized || patchFlag > 0) && !(patchFlag & 16)) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
        let key = propsToUpdate[i2];
        const value = rawProps[key];
        if (options) {
          if (hasOwn(attrs, key)) {
            if (value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize(key);
            props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false);
          }
        } else {
          if (value !== attrs[key]) {
            attrs[key] = value;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || !hasOwn(rawProps, key) && ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && (rawPrevProps[key] !== void 0 || rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue(options, rawCurrentProps, key, void 0, instance, true);
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn(rawProps, key)) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger(instance, "set", "$attrs");
  }
}
function setFullProps(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if (isReservedProp(key)) {
        continue;
      }
      const value = rawProps[key];
      let camelKey;
      if (options && hasOwn(options, camelKey = camelize(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        }
      } else if (!isEmitListener(instance.emitsOptions, key)) {
        if (value !== attrs[key]) {
          attrs[key] = value;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props);
    const castValues = rawCastValues || EMPTY_OBJ;
    for (let i2 = 0; i2 < needCastKeys.length; i2++) {
      const key = needCastKeys[i2];
      props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !hasOwn(castValues, key));
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn(opt, "default");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && isFunction(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value = propsDefaults[key];
        } else {
          setCurrentInstance(instance);
          value = propsDefaults[key] = defaultValue.call(null, props);
          unsetCurrentInstance();
        }
      } else {
        value = defaultValue;
      }
    }
    if (opt[0]) {
      if (isAbsent && !hasDefault) {
        value = false;
      } else if (opt[1] && (value === "" || value === hyphenate(key))) {
        value = true;
      }
    }
  }
  return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.propsCache;
  const cached = cache.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys] = normalizePropsOptions(raw2, appContext, true);
      extend(normalized, props);
      if (keys)
        needCastKeys.push(...keys);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    cache.set(comp, EMPTY_ARR);
    return EMPTY_ARR;
  }
  if (isArray(raw)) {
    for (let i2 = 0; i2 < raw.length; i2++) {
      const normalizedKey = camelize(raw[i2]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    for (const key in raw) {
      const normalizedKey = camelize(key);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray(opt) || isFunction(opt) ? { type: opt } : opt;
        if (prop) {
          const booleanIndex = getTypeIndex(Boolean, prop.type);
          const stringIndex = getTypeIndex(String, prop.type);
          prop[0] = booleanIndex > -1;
          prop[1] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  cache.set(comp, res);
  return res;
}
function validatePropName(key) {
  if (key[0] !== "$") {
    return true;
  }
  return false;
}
function getType(ctor) {
  const match = ctor && ctor.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ctor === null ? "null" : "";
}
function isSameType(a2, b2) {
  return getType(a2) === getType(b2);
}
function getTypeIndex(type, expectedTypes) {
  if (isArray(expectedTypes)) {
    return expectedTypes.findIndex((t3) => isSameType(t3, type));
  } else if (isFunction(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  return -1;
}
const isInternalKey = (key) => key[0] === "_" || key === "$stable";
const normalizeSlotValue = (value) => isArray(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
const normalizeSlot = (key, rawSlot, ctx) => {
  const normalized = withCtx((...args) => {
    return normalizeSlotValue(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey(key))
      continue;
    const value = rawSlots[key];
    if (isFunction(value)) {
      slots[key] = normalizeSlot(key, value, ctx);
    } else if (value != null) {
      const normalized = normalizeSlotValue(value);
      slots[key] = () => normalized;
    }
  }
};
const normalizeVNodeSlots = (instance, children) => {
  const normalized = normalizeSlotValue(children);
  instance.slots.default = () => normalized;
};
const initSlots = (instance, children) => {
  if (instance.vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      instance.slots = toRaw(children);
      def(children, "_", type);
    } else {
      normalizeObjectSlots(children, instance.slots = {});
    }
  } else {
    instance.slots = {};
    if (children) {
      normalizeVNodeSlots(instance, children);
    }
  }
  def(instance.slots, InternalObjectKey, 1);
};
const updateSlots = (instance, children, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ;
  if (vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      if (optimized && type === 1) {
        needDeletionCheck = false;
      } else {
        extend(slots, children);
        if (!optimized && type === 1) {
          delete slots._;
        }
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots(instance, children);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {
        delete slots[key];
      }
    }
  }
};
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i2 = 0; i2 < bindings.length; i2++) {
    const binding = bindings[i2];
    if (oldBindings) {
      binding.oldValue = oldBindings[i2].value;
    }
    let hook = binding.dir[name];
    if (hook) {
      pauseTracking();
      callWithAsyncErrorHandling(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking();
    }
  }
}
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: Object.create(null),
    optionsCache: new WeakMap(),
    propsCache: new WeakMap(),
    emitsCache: new WeakMap()
  };
}
let uid = 0;
function createAppAPI(render, hydrate) {
  return function createApp2(rootComponent, rootProps = null) {
    if (rootProps != null && !isObject(rootProps)) {
      rootProps = null;
    }
    const context = createAppContext();
    const installedPlugins = new Set();
    let isMounted = false;
    const app = context.app = {
      _uid: uid++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version,
      get config() {
        return context.config;
      },
      set config(v2) {
      },
      use(plugin, ...options) {
        if (installedPlugins.has(plugin))
          ;
        else if (plugin && isFunction(plugin.install)) {
          installedPlugins.add(plugin);
          plugin.install(app, ...options);
        } else if (isFunction(plugin)) {
          installedPlugins.add(plugin);
          plugin(app, ...options);
        } else
          ;
        return app;
      },
      mixin(mixin) {
        {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          }
        }
        return app;
      },
      component(name, component) {
        if (!component) {
          return context.components[name];
        }
        context.components[name] = component;
        return app;
      },
      directive(name, directive) {
        if (!directive) {
          return context.directives[name];
        }
        context.directives[name] = directive;
        return app;
      },
      mount(rootContainer, isHydrate, isSVG) {
        if (!isMounted) {
          const vnode = createVNode(rootComponent, rootProps);
          vnode.appContext = context;
          if (isHydrate && hydrate) {
            hydrate(vnode, rootContainer);
          } else {
            render(vnode, rootContainer, isSVG);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          return vnode.component.proxy;
        }
      },
      unmount() {
        if (isMounted) {
          render(null, app._container);
          delete app._container.__vue_app__;
        }
      },
      provide(key, value) {
        context.provides[key] = value;
        return app;
      }
    };
    return app;
  };
}
const queuePostRenderEffect = queueEffectWithSuspense;
function createRenderer(options) {
  return baseCreateRenderer(options);
}
function baseCreateRenderer(options, createHydrationFns) {
  const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, cloneNode: hostCloneNode, insertStaticContent: hostInsertStaticContent } = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type, ref, shapeFlag } = n2;
    switch (type) {
      case Text:
        processText(n1, n2, container, anchor);
        break;
      case Comment:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, isSVG);
        }
        break;
      case Fragment:
        processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        break;
      default:
        if (shapeFlag & 1) {
          processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 6) {
          processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 64) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else if (shapeFlag & 128) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else
          ;
    }
    if (ref != null && parentComponent) {
      setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
    } else {
      const el = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateComment(n2.children || ""), container, anchor);
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, isSVG) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
  };
  const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
    let next;
    while (el && el !== anchor) {
      next = hostNextSibling(el);
      hostInsert(el, container, nextSibling);
      el = next;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el, anchor }) => {
    let next;
    while (el && el !== anchor) {
      next = hostNextSibling(el);
      hostRemove(el);
      el = next;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    isSVG = isSVG || n2.type === "svg";
    if (n1 == null) {
      mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let el;
    let vnodeHook;
    const { type, props, shapeFlag, transition, patchFlag, dirs } = vnode;
    if (vnode.el && hostCloneNode !== void 0 && patchFlag === -1) {
      el = vnode.el = hostCloneNode(vnode.el);
    } else {
      el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
      if (shapeFlag & 8) {
        hostSetElementText(el, vnode.children);
      } else if (shapeFlag & 16) {
        mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== "foreignObject", slotScopeIds, optimized);
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "created");
      }
      if (props) {
        for (const key in props) {
          if (key !== "value" && !isReservedProp(key)) {
            hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
        if ("value" in props) {
          hostPatchProp(el, "value", null, props.value);
        }
        if (vnodeHook = props.onVnodeBeforeMount) {
          invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
      }
      setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
    if (needCallTransitionHooks) {
      transition.beforeEnter(el);
    }
    hostInsert(el, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el, scopeId);
    }
    if (slotScopeIds) {
      for (let i2 = 0; i2 < slotScopeIds.length; i2++) {
        hostSetScopeId(el, slotScopeIds[i2]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (vnode === subTree) {
        const parentVNode = parentComponent.vnode;
        setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {
    for (let i2 = start; i2 < children.length; i2++) {
      const child = children[i2] = optimized ? cloneIfMounted(children[i2]) : normalizeVNode(children[i2]);
      patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const el = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ;
    const newProps = n2.props || EMPTY_OBJ;
    let vnodeHook;
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
    }
    const areChildrenSVG = isSVG && n2.type !== "foreignObject";
    if (dynamicChildren) {
      patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
    } else if (!optimized) {
      patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el, "class", null, newProps.class, isSVG);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el, "style", oldProps.style, newProps.style, isSVG);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i2 = 0; i2 < propsToUpdate.length; i2++) {
            const key = propsToUpdate[i2];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || key === "value") {
              hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
    for (let i2 = 0; i2 < newChildren.length; i2++) {
      const oldVNode = oldChildren[i2];
      const newVNode = newChildren[i2];
      const container = oldVNode.el && (oldVNode.type === Fragment || !isSameVNodeType(oldVNode, newVNode) || oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : fallbackContainer;
      patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
    }
  };
  const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
    if (oldProps !== newProps) {
      for (const key in newProps) {
        if (isReservedProp(key))
          continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev && key !== "value") {
          hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
        }
      }
      if (oldProps !== EMPTY_OBJ) {
        for (const key in oldProps) {
          if (!isReservedProp(key) && !(key in newProps)) {
            hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el, "value", oldProps.value, newProps.value);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && n1.dynamicChildren) {
        patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
        if (n2.key != null || parentComponent && n2 === parentComponent.subTree) {
          traverseStaticChildren(n1, n2, true);
        }
      } else {
        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
      } else {
        mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      setupComponent(instance);
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment);
        processCommentNode(null, placeholder, container, anchor);
      }
      return;
    }
    setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        updateComponentPreRender(instance, n2, optimized);
        return;
      } else {
        instance.next = n2;
        invalidateJob(instance.update);
        instance.update();
      }
    } else {
      n2.component = n1.component;
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el, props } = initialVNode;
        const { bm, m: m2, parent } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
        effect.allowRecurse = false;
        if (bm) {
          invokeArrayFns(bm);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
          invokeVNodeHook(vnodeHook, parent, initialVNode);
        }
        effect.allowRecurse = true;
        if (el && hydrateNode) {
          const hydrateSubTree = () => {
            instance.subTree = renderComponentRoot(instance);
            hydrateNode(el, instance.subTree, instance, parentSuspense, null);
          };
          if (isAsyncWrapperVNode) {
            initialVNode.type.__asyncLoader().then(() => !instance.isUnmounted && hydrateSubTree());
          } else {
            hydrateSubTree();
          }
        } else {
          const subTree = instance.subTree = renderComponentRoot(instance);
          patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
          initialVNode.el = subTree.el;
        }
        if (m2) {
          queuePostRenderEffect(m2, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);
        }
        if (initialVNode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        initialVNode = container = anchor = null;
      } else {
        let { next, bu: bu2, u: u2, parent, vnode } = instance;
        let originNext = next;
        let vnodeHook;
        effect.allowRecurse = false;
        if (next) {
          next.el = vnode.el;
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        if (bu2) {
          invokeArrayFns(bu2);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent, next, vnode);
        }
        effect.allowRecurse = true;
        const nextTree = renderComponentRoot(instance);
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        patch(prevTree, nextTree, hostParentNode(prevTree.el), getNextHostNode(prevTree), instance, parentSuspense, isSVG);
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u2) {
          queuePostRenderEffect(u2, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);
        }
      }
    };
    const effect = new ReactiveEffect(componentUpdateFn, () => queueJob(instance.update), instance.scope);
    const update = instance.update = effect.run.bind(effect);
    update.id = instance.uid;
    effect.allowRecurse = update.allowRecurse = true;
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children, optimized);
    pauseTracking();
    flushPreFlushCbs(void 0, instance.update);
    resetTracking();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR;
    c2 = c2 || EMPTY_ARR;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i2;
    for (i2 = 0; i2 < commonLength; i2++) {
      const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
      patch(c1[i2], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
    if (oldLength > newLength) {
      unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
    } else {
      mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let i2 = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[i2];
      const n2 = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      i2++;
    }
    while (i2 <= e1 && i2 <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i2 > e1) {
      if (i2 <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i2 <= e2) {
          patch(null, c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          i2++;
        }
      }
    } else if (i2 > e2) {
      while (i2 <= e1) {
        unmount(c1[i2], parentComponent, parentSuspense, true);
        i2++;
      }
    } else {
      const s1 = i2;
      const s2 = i2;
      const keyToNewIndexMap = new Map();
      for (i2 = s2; i2 <= e2; i2++) {
        const nextChild = c2[i2] = optimized ? cloneIfMounted(c2[i2]) : normalizeVNode(c2[i2]);
        if (nextChild.key != null) {
          keyToNewIndexMap.set(nextChild.key, i2);
        }
      }
      let j2;
      let patched = 0;
      const toBePatched = e2 - s2 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i2 = 0; i2 < toBePatched; i2++)
        newIndexToOldIndexMap[i2] = 0;
      for (i2 = s1; i2 <= e1; i2++) {
        const prevChild = c1[i2];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j2 = s2; j2 <= e2; j2++) {
            if (newIndexToOldIndexMap[j2 - s2] === 0 && isSameVNodeType(prevChild, c2[j2])) {
              newIndex = j2;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s2] = i2 + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
      j2 = increasingNewIndexSequence.length - 1;
      for (i2 = toBePatched - 1; i2 >= 0; i2--) {
        const nextIndex = s2 + i2;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i2] === 0) {
          patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (moved) {
          if (j2 < 0 || i2 !== increasingNewIndexSequence[j2]) {
            move(nextChild, container, anchor, 2);
          } else {
            j2--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el, type, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor, internals);
      return;
    }
    if (type === Fragment) {
      hostInsert(el, container, anchor);
      for (let i2 = 0; i2 < children.length; i2++) {
        move(children[i2], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type === Static) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition) {
      if (moveType === 0) {
        transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        queuePostRenderEffect(() => transition.enter(el), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove3 = () => hostInsert(el, container, anchor);
        const performLeave = () => {
          leave(el, () => {
            remove3();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el, remove3, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const { type, props, ref, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;
    if (ref != null) {
      setRef(ref, null, parentSuspense, vnode, true);
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
      } else if (dynamicChildren && (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
      } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const { type, el, anchor, transition } = vnode;
    if (type === Fragment) {
      removeFragment(el, anchor);
      return;
    }
    if (type === Static) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next;
    while (cur !== end) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    const { bum, scope, update, subTree, um } = instance;
    if (bum) {
      invokeArrayFns(bum);
    }
    scope.stop();
    if (update) {
      update.active = false;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um) {
      queuePostRenderEffect(um, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
    for (let i2 = start; i2 < children.length; i2++) {
      unmount(children[i2], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    return hostNextSibling(vnode.anchor || vnode.el);
  };
  const render = (vnode, container, isSVG) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(container._vnode || null, vnode, container, null, null, null, isSVG);
    }
    flushPostFlushCbs();
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate, hydrateNode] = createHydrationFns(internals);
  }
  return {
    render,
    hydrate,
    createApp: createAppAPI(render, hydrate)
  };
}
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray(rawRef)) {
    rawRef.forEach((r2, i2) => setRef(r2, oldRawRef && (isArray(oldRawRef) ? oldRawRef[i2] : oldRawRef), parentSuspense, vnode, isUnmount));
    return;
  }
  if (isAsyncWrapper(vnode) && !isUnmount) {
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
  const value = isUnmount ? null : refValue;
  const { i: owner, r: ref } = rawRef;
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref) {
    if (isString(oldRef)) {
      refs[oldRef] = null;
      if (hasOwn(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isString(ref)) {
    const doSet = () => {
      {
        refs[ref] = value;
      }
      if (hasOwn(setupState, ref)) {
        setupState[ref] = value;
      }
    };
    if (value) {
      doSet.id = -1;
      queuePostRenderEffect(doSet, parentSuspense);
    } else {
      doSet();
    }
  } else if (isRef(ref)) {
    const doSet = () => {
      ref.value = value;
    };
    if (value) {
      doSet.id = -1;
      queuePostRenderEffect(doSet, parentSuspense);
    } else {
      doSet();
    }
  } else if (isFunction(ref)) {
    callWithErrorHandling(ref, owner, 12, [value, refs]);
  } else
    ;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
function traverseStaticChildren(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray(ch1) && isArray(ch2)) {
    for (let i2 = 0; i2 < ch1.length; i2++) {
      const c1 = ch1[i2];
      let c2 = ch2[i2];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i2] = cloneIfMounted(ch2[i2]);
          c2.el = c1.el;
        }
        if (!shallow)
          traverseStaticChildren(c1, c2);
      }
    }
  }
}
function getSequence(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i2, j2, u2, v2, c2;
  const len = arr.length;
  for (i2 = 0; i2 < len; i2++) {
    const arrI = arr[i2];
    if (arrI !== 0) {
      j2 = result[result.length - 1];
      if (arr[j2] < arrI) {
        p2[i2] = j2;
        result.push(i2);
        continue;
      }
      u2 = 0;
      v2 = result.length - 1;
      while (u2 < v2) {
        c2 = u2 + v2 >> 1;
        if (arr[result[c2]] < arrI) {
          u2 = c2 + 1;
        } else {
          v2 = c2;
        }
      }
      if (arrI < arr[result[u2]]) {
        if (u2 > 0) {
          p2[i2] = result[u2 - 1];
        }
        result[u2] = i2;
      }
    }
  }
  u2 = result.length;
  v2 = result[u2 - 1];
  while (u2-- > 0) {
    result[u2] = v2;
    v2 = p2[v2];
  }
  return result;
}
const isTeleport = (type) => type.__isTeleport;
const NULL_DYNAMIC_COMPONENT = Symbol();
const Fragment = Symbol(void 0);
const Text = Symbol(void 0);
const Comment = Symbol(void 0);
const Static = Symbol(void 0);
const blockStack = [];
let currentBlock = null;
function openBlock(disableTracking = false) {
  blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
  blockStack.pop();
  currentBlock = blockStack[blockStack.length - 1] || null;
}
let isBlockTreeEnabled = 1;
function setBlockTracking(value) {
  isBlockTreeEnabled += value;
}
function setupBlock(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
  closeBlock();
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock(createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, true));
}
function isVNode(value) {
  return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  return n1.type === n2.type && n1.key === n2.key;
}
const InternalObjectKey = `__vInternal`;
const normalizeKey = ({ key }) => key != null ? key : null;
const normalizeRef = ({ ref }) => {
  return ref != null ? isString(ref) || isRef(ref) || isFunction(ref) ? { i: currentRenderingInstance, r: ref } : ref : null;
};
function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type,
    props,
    key: props && normalizeKey(props),
    ref: props && normalizeRef(props),
    scopeId: currentScopeId,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null
  };
  if (needFullChildrenNormalization) {
    normalizeChildren(vnode, children);
    if (shapeFlag & 128) {
      type.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= isString(children) ? 8 : 16;
  }
  if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock && (vnode.patchFlag > 0 || shapeFlag & 6) && vnode.patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
const createVNode = _createVNode;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT) {
    type = Comment;
  }
  if (isVNode(type)) {
    const cloned = cloneVNode(type, props, true);
    if (children) {
      normalizeChildren(cloned, children);
    }
    return cloned;
  }
  if (isClassComponent(type)) {
    type = type.__vccOpts;
  }
  if (props) {
    props = guardReactiveProps(props);
    let { class: klass, style } = props;
    if (klass && !isString(klass)) {
      props.class = normalizeClass(klass);
    }
    if (isObject(style)) {
      if (isProxy(style) && !isArray(style)) {
        style = extend({}, style);
      }
      props.style = normalizeStyle(style);
    }
  }
  const shapeFlag = isString(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : isObject(type) ? 4 : isFunction(type) ? 2 : 0;
  return createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
}
function guardReactiveProps(props) {
  if (!props)
    return null;
  return isProxy(props) || InternalObjectKey in props ? extend({}, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
  const { props, ref, patchFlag, children } = vnode;
  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? mergeRef && ref ? isArray(ref) ? ref.concat(normalizeRef(extraProps)) : [ref, normalizeRef(extraProps)] : normalizeRef(extraProps) : ref,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition: vnode.transition,
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor
  };
  return cloned;
}
function createTextVNode(text = " ", flag = 0) {
  return createVNode(Text, null, text, flag);
}
function normalizeVNode(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode(Comment);
  } else if (isArray(child)) {
    return createVNode(Fragment, null, child.slice());
  } else if (typeof child === "object") {
    return cloneIfMounted(child);
  } else {
    return createVNode(Text, null, String(child));
  }
}
function cloneIfMounted(child) {
  return child.el === null || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
  let type = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if (isArray(children)) {
    type = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children._;
      if (!slotFlag && !(InternalObjectKey in children)) {
        children._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction(children)) {
    children = { default: children, _ctx: currentRenderingInstance };
    type = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type = 16;
      children = [createTextVNode(children)];
    } else {
      type = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type;
}
function mergeProps(...args) {
  const ret = {};
  for (let i2 = 0; i2 < args.length; i2++) {
    const toMerge = args[i2];
    for (const key in toMerge) {
      if (key === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass([ret.class, toMerge.class]);
        }
      } else if (key === "style") {
        ret.style = normalizeStyle([ret.style, toMerge.style]);
      } else if (isOn(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (existing !== incoming) {
          ret[key] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key !== "") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
const getPublicInstance = (i2) => {
  if (!i2)
    return null;
  if (isStatefulComponent(i2))
    return getExposeProxy(i2) || i2.proxy;
  return getPublicInstance(i2.parent);
};
const publicPropertiesMap = extend(Object.create(null), {
  $: (i2) => i2,
  $el: (i2) => i2.vnode.el,
  $data: (i2) => i2.data,
  $props: (i2) => i2.props,
  $attrs: (i2) => i2.attrs,
  $slots: (i2) => i2.slots,
  $refs: (i2) => i2.refs,
  $parent: (i2) => getPublicInstance(i2.parent),
  $root: (i2) => getPublicInstance(i2.root),
  $emit: (i2) => i2.emit,
  $options: (i2) => resolveMergedOptions(i2),
  $forceUpdate: (i2) => () => queueJob(i2.update),
  $nextTick: (i2) => nextTick.bind(i2.proxy),
  $watch: (i2) => instanceWatch.bind(i2)
});
const PublicInstanceProxyHandlers = {
  get({ _: instance }, key) {
    const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
    let normalizedProps;
    if (key[0] !== "$") {
      const n2 = accessCache[key];
      if (n2 !== void 0) {
        switch (n2) {
          case 0:
            return setupState[key];
          case 1:
            return data[key];
          case 3:
            return ctx[key];
          case 2:
            return props[key];
        }
      } else if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {
        accessCache[key] = 0;
        return setupState[key];
      } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
        accessCache[key] = 1;
        return data[key];
      } else if ((normalizedProps = instance.propsOptions[0]) && hasOwn(normalizedProps, key)) {
        accessCache[key] = 2;
        return props[key];
      } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
        accessCache[key] = 3;
        return ctx[key];
      } else if (shouldCacheAccess) {
        accessCache[key] = 4;
      }
    }
    const publicGetter = publicPropertiesMap[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === "$attrs") {
        track(instance, "get", key);
      }
      return publicGetter(instance);
    } else if ((cssModule = type.__cssModules) && (cssModule = cssModule[key])) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
      accessCache[key] = 3;
      return ctx[key];
    } else if (globalProperties = appContext.config.globalProperties, hasOwn(globalProperties, key)) {
      {
        return globalProperties[key];
      }
    } else
      ;
  },
  set({ _: instance }, key, value) {
    const { data, setupState, ctx } = instance;
    if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {
      setupState[key] = value;
    } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
      data[key] = value;
    } else if (hasOwn(instance.props, key)) {
      return false;
    }
    if (key[0] === "$" && key.slice(1) in instance) {
      return false;
    } else {
      {
        ctx[key] = value;
      }
    }
    return true;
  },
  has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {
    let normalizedProps;
    return accessCache[key] !== void 0 || data !== EMPTY_OBJ && hasOwn(data, key) || setupState !== EMPTY_OBJ && hasOwn(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key) || hasOwn(ctx, key) || hasOwn(publicPropertiesMap, key) || hasOwn(appContext.config.globalProperties, key);
  }
};
const emptyAppContext = createAppContext();
let uid$1 = 0;
function createComponentInstance(vnode, parent, suspense) {
  const type = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid$1++,
    vnode,
    type,
    parent,
    appContext,
    root: null,
    next: null,
    subTree: null,
    update: null,
    scope: new EffectScope(true),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    components: null,
    directives: null,
    propsOptions: normalizePropsOptions(type, appContext),
    emitsOptions: normalizeEmitsOptions(type, appContext),
    emit: null,
    emitted: null,
    propsDefaults: EMPTY_OBJ,
    inheritAttrs: type.inheritAttrs,
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  {
    instance.ctx = { _: instance };
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance = null;
const setCurrentInstance = (instance) => {
  currentInstance = instance;
  instance.scope.on();
};
const unsetCurrentInstance = () => {
  currentInstance && currentInstance.scope.off();
  currentInstance = null;
};
function isStatefulComponent(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
  isInSSRComponentSetup = isSSR;
  const { props, children } = instance.vnode;
  const isStateful = isStatefulComponent(instance);
  initProps(instance, props, isStateful, isSSR);
  initSlots(instance, children);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isInSSRComponentSetup = false;
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  const Component = instance.type;
  instance.accessCache = Object.create(null);
  instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
  const { setup } = Component;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
    setCurrentInstance(instance);
    pauseTracking();
    const setupResult = callWithErrorHandling(setup, instance, 0, [instance.props, setupContext]);
    resetTracking();
    unsetCurrentInstance();
    if (isPromise(setupResult)) {
      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult);
        }).catch((e2) => {
          handleError(e2, instance, 0);
        });
      } else {
        instance.asyncDep = setupResult;
      }
    } else {
      handleSetupResult(instance, setupResult);
    }
  } else {
    finishComponentSetup(instance);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction(setupResult)) {
    {
      instance.render = setupResult;
    }
  } else if (isObject(setupResult)) {
    instance.setupState = proxyRefs(setupResult);
  } else
    ;
  finishComponentSetup(instance);
}
function finishComponentSetup(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    instance.render = Component.render || NOOP;
  }
  {
    setCurrentInstance(instance);
    pauseTracking();
    applyOptions(instance);
    resetTracking();
    unsetCurrentInstance();
  }
}
function createAttrsProxy(instance) {
  return new Proxy(instance.attrs, {
    get(target, key) {
      track(instance, "get", "$attrs");
      return target[key];
    }
  });
}
function createSetupContext(instance) {
  const expose = (exposed) => {
    instance.exposed = exposed || {};
  };
  let attrs;
  {
    return {
      get attrs() {
        return attrs || (attrs = createAttrsProxy(instance));
      },
      slots: instance.slots,
      emit: instance.emit,
      expose
    };
  }
}
function getExposeProxy(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
      get(target, key) {
        if (key in target) {
          return target[key];
        } else if (key in publicPropertiesMap) {
          return publicPropertiesMap[key](instance);
        }
      }
    }));
  }
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str) => str.replace(classifyRE, (c2) => c2.toUpperCase()).replace(/[-_]/g, "");
function getComponentName(Component) {
  return isFunction(Component) ? Component.displayName || Component.name : Component.name;
}
function formatComponentName(instance, Component, isRoot = false) {
  let name = getComponentName(Component);
  if (!name && Component.__file) {
    const match = Component.__file.match(/([^/\\]+)\.\w+$/);
    if (match) {
      name = match[1];
    }
  }
  if (!name && instance && instance.parent) {
    const inferFromRegistry = (registry) => {
      for (const key in registry) {
        if (registry[key] === Component) {
          return key;
        }
      }
    };
    name = inferFromRegistry(instance.components || instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
  }
  return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
  return isFunction(value) && "__vccOpts" in value;
}
const stack = [];
function warn(msg, ...args) {
  pauseTracking();
  const instance = stack.length ? stack[stack.length - 1].component : null;
  const appWarnHandler = instance && instance.appContext.config.warnHandler;
  const trace = getComponentTrace();
  if (appWarnHandler) {
    callWithErrorHandling(appWarnHandler, instance, 11, [
      msg + args.join(""),
      instance && instance.proxy,
      trace.map(({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`).join("\n"),
      trace
    ]);
  } else {
    const warnArgs = [`[Vue warn]: ${msg}`, ...args];
    if (trace.length && true) {
      warnArgs.push(`
`, ...formatTrace(trace));
    }
    console.warn(...warnArgs);
  }
  resetTracking();
}
function getComponentTrace() {
  let currentVNode = stack[stack.length - 1];
  if (!currentVNode) {
    return [];
  }
  const normalizedStack = [];
  while (currentVNode) {
    const last = normalizedStack[0];
    if (last && last.vnode === currentVNode) {
      last.recurseCount++;
    } else {
      normalizedStack.push({
        vnode: currentVNode,
        recurseCount: 0
      });
    }
    const parentInstance = currentVNode.component && currentVNode.component.parent;
    currentVNode = parentInstance && parentInstance.vnode;
  }
  return normalizedStack;
}
function formatTrace(trace) {
  const logs = [];
  trace.forEach((entry, i2) => {
    logs.push(...i2 === 0 ? [] : [`
`], ...formatTraceEntry(entry));
  });
  return logs;
}
function formatTraceEntry({ vnode, recurseCount }) {
  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
  const isRoot = vnode.component ? vnode.component.parent == null : false;
  const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;
  const close = `>` + postfix;
  return vnode.props ? [open, ...formatProps(vnode.props), close] : [open + close];
}
function formatProps(props) {
  const res = [];
  const keys = Object.keys(props);
  keys.slice(0, 3).forEach((key) => {
    res.push(...formatProp(key, props[key]));
  });
  if (keys.length > 3) {
    res.push(` ...`);
  }
  return res;
}
function formatProp(key, value, raw) {
  if (isString(value)) {
    value = JSON.stringify(value);
    return raw ? value : [`${key}=${value}`];
  } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
    return raw ? value : [`${key}=${value}`];
  } else if (isRef(value)) {
    value = formatProp(key, toRaw(value.value), true);
    return raw ? value : [`${key}=Ref<`, value, `>`];
  } else if (isFunction(value)) {
    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
  } else {
    value = toRaw(value);
    return raw ? value : [`${key}=`, value];
  }
}
function callWithErrorHandling(fn2, instance, type, args) {
  let res;
  try {
    res = args ? fn2(...args) : fn2();
  } catch (err) {
    handleError(err, instance, type);
  }
  return res;
}
function callWithAsyncErrorHandling(fn2, instance, type, args) {
  if (isFunction(fn2)) {
    const res = callWithErrorHandling(fn2, instance, type, args);
    if (res && isPromise(res)) {
      res.catch((err) => {
        handleError(err, instance, type);
      });
    }
    return res;
  }
  const values = [];
  for (let i2 = 0; i2 < fn2.length; i2++) {
    values.push(callWithAsyncErrorHandling(fn2[i2], instance, type, args));
  }
  return values;
}
function handleError(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = type;
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i2 = 0; i2 < errorCapturedHooks.length; i2++) {
          if (errorCapturedHooks[i2](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      callWithErrorHandling(appErrorHandler, null, 10, [err, exposedInstance, errorInfo]);
      return;
    }
  }
  logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
  {
    console.error(err);
  }
}
let isFlushing = false;
let isFlushPending = false;
const queue = [];
let flushIndex = 0;
const pendingPreFlushCbs = [];
let activePreFlushCbs = null;
let preFlushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = Promise.resolve();
let currentFlushPromise = null;
let currentPreFlushParentJob = null;
const RECURSION_LIMIT = 100;
function nextTick(fn2) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn2 ? p2.then(this ? fn2.bind(this) : fn2) : p2;
}
function findInsertionIndex(id) {
  let start = flushIndex + 1;
  let end = queue.length;
  while (start < end) {
    const middle = start + end >>> 1;
    const middleJobId = getId(queue[middle]);
    middleJobId < id ? start = middle + 1 : end = middle;
  }
  return start;
}
function queueJob(job) {
  if ((!queue.length || !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) && job !== currentPreFlushParentJob) {
    if (job.id == null) {
      queue.push(job);
    } else {
      queue.splice(findInsertionIndex(job.id), 0, job);
    }
    queueFlush();
  }
}
function queueFlush() {
  if (!isFlushing && !isFlushPending) {
    isFlushPending = true;
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function invalidateJob(job) {
  const i2 = queue.indexOf(job);
  if (i2 > flushIndex) {
    queue.splice(i2, 1);
  }
}
function queueCb(cb, activeQueue, pendingQueue, index) {
  if (!isArray(cb)) {
    if (!activeQueue || !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) {
      pendingQueue.push(cb);
    }
  } else {
    pendingQueue.push(...cb);
  }
  queueFlush();
}
function queuePreFlushCb(cb) {
  queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);
}
function queuePostFlushCb(cb) {
  queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);
}
function flushPreFlushCbs(seen, parentJob = null) {
  if (pendingPreFlushCbs.length) {
    currentPreFlushParentJob = parentJob;
    activePreFlushCbs = [...new Set(pendingPreFlushCbs)];
    pendingPreFlushCbs.length = 0;
    for (preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++) {
      activePreFlushCbs[preFlushIndex]();
    }
    activePreFlushCbs = null;
    preFlushIndex = 0;
    currentPreFlushParentJob = null;
    flushPreFlushCbs(seen, parentJob);
  }
}
function flushPostFlushCbs(seen) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)];
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    activePostFlushCbs.sort((a2, b2) => getId(a2) - getId(b2));
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      activePostFlushCbs[postFlushIndex]();
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
const getId = (job) => job.id == null ? Infinity : job.id;
function flushJobs(seen) {
  isFlushPending = false;
  isFlushing = true;
  flushPreFlushCbs(seen);
  queue.sort((a2, b2) => getId(a2) - getId(b2));
  try {
    for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
      const job = queue[flushIndex];
      if (job && job.active !== false) {
        if (false)
          ;
        callWithErrorHandling(job, null, 14);
      }
    }
  } finally {
    flushIndex = 0;
    queue.length = 0;
    flushPostFlushCbs();
    isFlushing = false;
    currentFlushPromise = null;
    if (queue.length || pendingPreFlushCbs.length || pendingPostFlushCbs.length) {
      flushJobs(seen);
    }
  }
}
function checkRecursiveUpdates(seen, fn2) {
  if (!seen.has(fn2)) {
    seen.set(fn2, 1);
  } else {
    const count = seen.get(fn2);
    if (count > RECURSION_LIMIT) {
      const instance = fn2.ownerInstance;
      const componentName = instance && getComponentName(instance.type);
      warn(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`);
      return true;
    } else {
      seen.set(fn2, count + 1);
    }
  }
}
const INITIAL_WATCHER_VALUE = {};
function watch(source, cb, options) {
  return doWatch(source, cb, options);
}
function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {
  const instance = currentInstance;
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef(source)) {
    getter = () => source.value;
    forceTrigger = !!source._shallow;
  } else if (isReactive(source)) {
    getter = () => source;
    deep = true;
  } else if (isArray(source)) {
    isMultiSource = true;
    forceTrigger = source.some(isReactive);
    getter = () => source.map((s2) => {
      if (isRef(s2)) {
        return s2.value;
      } else if (isReactive(s2)) {
        return traverse(s2);
      } else if (isFunction(s2)) {
        return callWithErrorHandling(s2, instance, 2);
      } else
        ;
    });
  } else if (isFunction(source)) {
    if (cb) {
      getter = () => callWithErrorHandling(source, instance, 2);
    } else {
      getter = () => {
        if (instance && instance.isUnmounted) {
          return;
        }
        if (cleanup) {
          cleanup();
        }
        return callWithAsyncErrorHandling(source, instance, 3, [onInvalidate]);
      };
    }
  } else {
    getter = NOOP;
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse(baseGetter());
  }
  let cleanup;
  let onInvalidate = (fn2) => {
    cleanup = effect.onStop = () => {
      callWithErrorHandling(fn2, instance, 4);
    };
  };
  let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;
  const job = () => {
    if (!effect.active) {
      return;
    }
    if (cb) {
      const newValue = effect.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v2, i2) => hasChanged(v2, oldValue[i2])) : hasChanged(newValue, oldValue)) || false) {
        if (cleanup) {
          cleanup();
        }
        callWithAsyncErrorHandling(cb, instance, 3, [
          newValue,
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : oldValue,
          onInvalidate
        ]);
        oldValue = newValue;
      }
    } else {
      effect.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === "sync") {
    scheduler = job;
  } else if (flush === "post") {
    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
  } else {
    scheduler = () => {
      if (!instance || instance.isMounted) {
        queuePreFlushCb(job);
      } else {
        job();
      }
    };
  }
  const effect = new ReactiveEffect(getter, scheduler);
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = effect.run();
    }
  } else if (flush === "post") {
    queuePostRenderEffect(effect.run.bind(effect), instance && instance.suspense);
  } else {
    effect.run();
  }
  return () => {
    effect.stop();
    if (instance && instance.scope) {
      remove(instance.scope.effects, effect);
    }
  };
}
function instanceWatch(source, value, options) {
  const publicThis = this.proxy;
  const getter = isString(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb;
  if (isFunction(value)) {
    cb = value;
  } else {
    cb = value.handler;
    options = value;
  }
  const cur = currentInstance;
  setCurrentInstance(this);
  const res = doWatch(getter, cb.bind(publicThis), options);
  if (cur) {
    setCurrentInstance(cur);
  } else {
    unsetCurrentInstance();
  }
  return res;
}
function createPathGetter(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i2 = 0; i2 < segments.length && cur; i2++) {
      cur = cur[segments[i2]];
    }
    return cur;
  };
}
function traverse(value, seen = new Set()) {
  if (!isObject(value) || value["__v_skip"]) {
    return value;
  }
  seen = seen || new Set();
  if (seen.has(value)) {
    return value;
  }
  seen.add(value);
  if (isRef(value)) {
    traverse(value.value, seen);
  } else if (isArray(value)) {
    for (let i2 = 0; i2 < value.length; i2++) {
      traverse(value[i2], seen);
    }
  } else if (isSet(value) || isMap(value)) {
    value.forEach((v2) => {
      traverse(v2, seen);
    });
  } else if (isPlainObject(value)) {
    for (const key in value) {
      traverse(value[key], seen);
    }
  }
  return value;
}
const version = "3.2.11";
const svgNS = "http://www.w3.org/2000/svg";
const doc = typeof document !== "undefined" ? document : null;
const staticTemplateCache = new Map();
const nodeOps = {
  insert: (child, parent, anchor) => {
    parent.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent = child.parentNode;
    if (parent) {
      parent.removeChild(child);
    }
  },
  createElement: (tag, isSVG, is2, props) => {
    const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is2 ? { is: is2 } : void 0);
    if (tag === "select" && props && props.multiple != null) {
      el.setAttribute("multiple", props.multiple);
    }
    return el;
  },
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el, text) => {
    el.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el, id) {
    el.setAttribute(id, "");
  },
  cloneNode(el) {
    const cloned = el.cloneNode(true);
    if (`_value` in el) {
      cloned._value = el._value;
    }
    return cloned;
  },
  insertStaticContent(content, parent, anchor, isSVG) {
    const before = anchor ? anchor.previousSibling : parent.lastChild;
    let template = staticTemplateCache.get(content);
    if (!template) {
      const t3 = doc.createElement("template");
      t3.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
      template = t3.content;
      if (isSVG) {
        const wrapper = template.firstChild;
        while (wrapper.firstChild) {
          template.appendChild(wrapper.firstChild);
        }
        template.removeChild(wrapper);
      }
      staticTemplateCache.set(content, template);
    }
    parent.insertBefore(template.cloneNode(true), anchor);
    return [
      before ? before.nextSibling : parent.firstChild,
      anchor ? anchor.previousSibling : parent.lastChild
    ];
  }
};
function patchClass(el, value, isSVG) {
  const transitionClasses = el._vtc;
  if (transitionClasses) {
    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value == null) {
    el.removeAttribute("class");
  } else if (isSVG) {
    el.setAttribute("class", value);
  } else {
    el.className = value;
  }
}
function patchStyle(el, prev, next) {
  const style = el.style;
  const currentDisplay = style.display;
  if (!next) {
    el.removeAttribute("style");
  } else if (isString(next)) {
    if (prev !== next) {
      style.cssText = next;
    }
  } else {
    for (const key in next) {
      setStyle(style, key, next[key]);
    }
    if (prev && !isString(prev)) {
      for (const key in prev) {
        if (next[key] == null) {
          setStyle(style, key, "");
        }
      }
    }
  }
  if ("_vod" in el) {
    style.display = currentDisplay;
  }
}
const importantRE = /\s*!important$/;
function setStyle(style, name, val) {
  if (isArray(val)) {
    val.forEach((v2) => setStyle(style, name, v2));
  } else {
    if (name.startsWith("--")) {
      style.setProperty(name, val);
    } else {
      const prefixed = autoPrefix(style, name);
      if (importantRE.test(val)) {
        style.setProperty(hyphenate(prefixed), val.replace(importantRE, ""), "important");
      } else {
        style[prefixed] = val;
      }
    }
  }
}
const prefixes = ["Webkit", "Moz", "ms"];
const prefixCache = {};
function autoPrefix(style, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name = camelize(rawName);
  if (name !== "filter" && name in style) {
    return prefixCache[rawName] = name;
  }
  name = capitalize(name);
  for (let i2 = 0; i2 < prefixes.length; i2++) {
    const prefixed = prefixes[i2] + name;
    if (prefixed in style) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}
const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el, key, value, isSVG, instance) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value == null) {
      el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    const isBoolean = isSpecialBooleanAttr(key);
    if (value == null || isBoolean && !includeBooleanAttr(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, isBoolean ? "" : value);
    }
  }
}
function patchDOMProp(el, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key === "innerHTML" || key === "textContent") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el[key] = value == null ? "" : value;
    return;
  }
  if (key === "value" && el.tagName !== "PROGRESS") {
    el._value = value;
    const newValue = value == null ? "" : value;
    if (el.value !== newValue) {
      el.value = newValue;
    }
    if (value == null) {
      el.removeAttribute(key);
    }
    return;
  }
  if (value === "" || value == null) {
    const type = typeof el[key];
    if (type === "boolean") {
      el[key] = includeBooleanAttr(value);
      return;
    } else if (value == null && type === "string") {
      el[key] = "";
      el.removeAttribute(key);
      return;
    } else if (type === "number") {
      try {
        el[key] = 0;
      } catch (_a2) {
      }
      el.removeAttribute(key);
      return;
    }
  }
  try {
    el[key] = value;
  } catch (e2) {
  }
}
let _getNow = Date.now;
let skipTimestampCheck = false;
if (typeof window !== "undefined") {
  if (_getNow() > document.createEvent("Event").timeStamp) {
    _getNow = () => performance.now();
  }
  const ffMatch = navigator.userAgent.match(/firefox\/(\d+)/i);
  skipTimestampCheck = !!(ffMatch && Number(ffMatch[1]) <= 53);
}
let cachedNow = 0;
const p$1 = Promise.resolve();
const reset = () => {
  cachedNow = 0;
};
const getNow = () => cachedNow || (p$1.then(reset), cachedNow = _getNow());
function addEventListener(el, event, handler, options) {
  el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
  el.removeEventListener(event, handler, options);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
  const invokers = el._vei || (el._vei = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(nextValue, instance);
      addEventListener(el, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener(el, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
  let options;
  if (optionsModifierRE.test(name)) {
    options = {};
    let m2;
    while (m2 = name.match(optionsModifierRE)) {
      name = name.slice(0, name.length - m2[0].length);
      options[m2[0].toLowerCase()] = true;
    }
  }
  return [hyphenate(name.slice(2)), options];
}
function createInvoker(initialValue, instance) {
  const invoker = (e2) => {
    const timeStamp = e2.timeStamp || _getNow();
    if (skipTimestampCheck || timeStamp >= invoker.attached - 1) {
      callWithAsyncErrorHandling(patchStopImmediatePropagation(e2, invoker.value), instance, 5, [e2]);
    }
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function patchStopImmediatePropagation(e2, value) {
  if (isArray(value)) {
    const originalStop = e2.stopImmediatePropagation;
    e2.stopImmediatePropagation = () => {
      originalStop.call(e2);
      e2._stopped = true;
    };
    return value.map((fn2) => (e3) => !e3._stopped && fn2(e3));
  } else {
    return value;
  }
}
const nativeOnRE = /^on[a-z]/;
const patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
  if (key === "class") {
    patchClass(el, nextValue, isSVG);
  } else if (key === "style") {
    patchStyle(el, prevValue, nextValue);
  } else if (isOn(key)) {
    if (!isModelListener(key)) {
      patchEvent(el, key, prevValue, nextValue, parentComponent);
    }
  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {
    patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
  } else {
    if (key === "true-value") {
      el._trueValue = nextValue;
    } else if (key === "false-value") {
      el._falseValue = nextValue;
    }
    patchAttr(el, key, nextValue, isSVG);
  }
};
function shouldSetAsProp(el, key, value, isSVG) {
  if (isSVG) {
    if (key === "innerHTML" || key === "textContent") {
      return true;
    }
    if (key in el && nativeOnRE.test(key) && isFunction(value)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el.tagName === "TEXTAREA") {
    return false;
  }
  if (nativeOnRE.test(key) && isString(value)) {
    return false;
  }
  return key in el;
}
const rendererOptions = extend({ patchProp }, nodeOps);
let renderer;
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
const createApp = (...args) => {
  const app = ensureRenderer().createApp(...args);
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container)
      return;
    const component = app._component;
    if (!isFunction(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    container.innerHTML = "";
    const proxy = mount(container, false, container instanceof SVGElement);
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app;
};
function normalizeContainer(container) {
  if (isString(container)) {
    const res = document.querySelector(container);
    return res;
  }
  return container;
}
const REVISION = "122";
const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
const CullFaceNone = 0;
const CullFaceBack = 1;
const CullFaceFront = 2;
const CullFaceFrontBack = 3;
const BasicShadowMap = 0;
const PCFShadowMap = 1;
const PCFSoftShadowMap = 2;
const VSMShadowMap = 3;
const FrontSide = 0;
const BackSide = 1;
const DoubleSide = 2;
const FlatShading = 1;
const SmoothShading = 2;
const NoBlending = 0;
const NormalBlending = 1;
const AdditiveBlending = 2;
const SubtractiveBlending = 3;
const MultiplyBlending = 4;
const CustomBlending = 5;
const AddEquation = 100;
const SubtractEquation = 101;
const ReverseSubtractEquation = 102;
const MinEquation = 103;
const MaxEquation = 104;
const ZeroFactor = 200;
const OneFactor = 201;
const SrcColorFactor = 202;
const OneMinusSrcColorFactor = 203;
const SrcAlphaFactor = 204;
const OneMinusSrcAlphaFactor = 205;
const DstAlphaFactor = 206;
const OneMinusDstAlphaFactor = 207;
const DstColorFactor = 208;
const OneMinusDstColorFactor = 209;
const SrcAlphaSaturateFactor = 210;
const NeverDepth = 0;
const AlwaysDepth = 1;
const LessDepth = 2;
const LessEqualDepth = 3;
const EqualDepth = 4;
const GreaterEqualDepth = 5;
const GreaterDepth = 6;
const NotEqualDepth = 7;
const MultiplyOperation = 0;
const MixOperation = 1;
const AddOperation = 2;
const NoToneMapping = 0;
const LinearToneMapping = 1;
const ReinhardToneMapping = 2;
const CineonToneMapping = 3;
const ACESFilmicToneMapping = 4;
const CustomToneMapping = 5;
const UVMapping = 300;
const CubeReflectionMapping = 301;
const CubeRefractionMapping = 302;
const EquirectangularReflectionMapping = 303;
const EquirectangularRefractionMapping = 304;
const CubeUVReflectionMapping = 306;
const CubeUVRefractionMapping = 307;
const RepeatWrapping = 1e3;
const ClampToEdgeWrapping = 1001;
const MirroredRepeatWrapping = 1002;
const NearestFilter = 1003;
const NearestMipmapNearestFilter = 1004;
const NearestMipMapNearestFilter = 1004;
const NearestMipmapLinearFilter = 1005;
const NearestMipMapLinearFilter = 1005;
const LinearFilter = 1006;
const LinearMipmapNearestFilter = 1007;
const LinearMipMapNearestFilter = 1007;
const LinearMipmapLinearFilter = 1008;
const LinearMipMapLinearFilter = 1008;
const UnsignedByteType = 1009;
const ByteType = 1010;
const ShortType = 1011;
const UnsignedShortType = 1012;
const IntType = 1013;
const UnsignedIntType = 1014;
const FloatType = 1015;
const HalfFloatType = 1016;
const UnsignedShort4444Type = 1017;
const UnsignedShort5551Type = 1018;
const UnsignedShort565Type = 1019;
const UnsignedInt248Type = 1020;
const AlphaFormat = 1021;
const RGBFormat = 1022;
const RGBAFormat = 1023;
const LuminanceFormat = 1024;
const LuminanceAlphaFormat = 1025;
const RGBEFormat = RGBAFormat;
const DepthFormat = 1026;
const DepthStencilFormat = 1027;
const RedFormat = 1028;
const RedIntegerFormat = 1029;
const RGFormat = 1030;
const RGIntegerFormat = 1031;
const RGBIntegerFormat = 1032;
const RGBAIntegerFormat = 1033;
const RGB_S3TC_DXT1_Format = 33776;
const RGBA_S3TC_DXT1_Format = 33777;
const RGBA_S3TC_DXT3_Format = 33778;
const RGBA_S3TC_DXT5_Format = 33779;
const RGB_PVRTC_4BPPV1_Format = 35840;
const RGB_PVRTC_2BPPV1_Format = 35841;
const RGBA_PVRTC_4BPPV1_Format = 35842;
const RGBA_PVRTC_2BPPV1_Format = 35843;
const RGB_ETC1_Format = 36196;
const RGB_ETC2_Format = 37492;
const RGBA_ETC2_EAC_Format = 37496;
const RGBA_ASTC_4x4_Format = 37808;
const RGBA_ASTC_5x4_Format = 37809;
const RGBA_ASTC_5x5_Format = 37810;
const RGBA_ASTC_6x5_Format = 37811;
const RGBA_ASTC_6x6_Format = 37812;
const RGBA_ASTC_8x5_Format = 37813;
const RGBA_ASTC_8x6_Format = 37814;
const RGBA_ASTC_8x8_Format = 37815;
const RGBA_ASTC_10x5_Format = 37816;
const RGBA_ASTC_10x6_Format = 37817;
const RGBA_ASTC_10x8_Format = 37818;
const RGBA_ASTC_10x10_Format = 37819;
const RGBA_ASTC_12x10_Format = 37820;
const RGBA_ASTC_12x12_Format = 37821;
const RGBA_BPTC_Format = 36492;
const SRGB8_ALPHA8_ASTC_4x4_Format = 37840;
const SRGB8_ALPHA8_ASTC_5x4_Format = 37841;
const SRGB8_ALPHA8_ASTC_5x5_Format = 37842;
const SRGB8_ALPHA8_ASTC_6x5_Format = 37843;
const SRGB8_ALPHA8_ASTC_6x6_Format = 37844;
const SRGB8_ALPHA8_ASTC_8x5_Format = 37845;
const SRGB8_ALPHA8_ASTC_8x6_Format = 37846;
const SRGB8_ALPHA8_ASTC_8x8_Format = 37847;
const SRGB8_ALPHA8_ASTC_10x5_Format = 37848;
const SRGB8_ALPHA8_ASTC_10x6_Format = 37849;
const SRGB8_ALPHA8_ASTC_10x8_Format = 37850;
const SRGB8_ALPHA8_ASTC_10x10_Format = 37851;
const SRGB8_ALPHA8_ASTC_12x10_Format = 37852;
const SRGB8_ALPHA8_ASTC_12x12_Format = 37853;
const LoopOnce = 2200;
const LoopRepeat = 2201;
const LoopPingPong = 2202;
const InterpolateDiscrete = 2300;
const InterpolateLinear = 2301;
const InterpolateSmooth = 2302;
const ZeroCurvatureEnding = 2400;
const ZeroSlopeEnding = 2401;
const WrapAroundEnding = 2402;
const NormalAnimationBlendMode = 2500;
const AdditiveAnimationBlendMode = 2501;
const TrianglesDrawMode = 0;
const TriangleStripDrawMode = 1;
const TriangleFanDrawMode = 2;
const LinearEncoding = 3e3;
const sRGBEncoding = 3001;
const GammaEncoding = 3007;
const RGBEEncoding = 3002;
const LogLuvEncoding = 3003;
const RGBM7Encoding = 3004;
const RGBM16Encoding = 3005;
const RGBDEncoding = 3006;
const BasicDepthPacking = 3200;
const RGBADepthPacking = 3201;
const TangentSpaceNormalMap = 0;
const ObjectSpaceNormalMap = 1;
const ZeroStencilOp = 0;
const KeepStencilOp = 7680;
const ReplaceStencilOp = 7681;
const IncrementStencilOp = 7682;
const DecrementStencilOp = 7683;
const IncrementWrapStencilOp = 34055;
const DecrementWrapStencilOp = 34056;
const InvertStencilOp = 5386;
const NeverStencilFunc = 512;
const LessStencilFunc = 513;
const EqualStencilFunc = 514;
const LessEqualStencilFunc = 515;
const GreaterStencilFunc = 516;
const NotEqualStencilFunc = 517;
const GreaterEqualStencilFunc = 518;
const AlwaysStencilFunc = 519;
const StaticDrawUsage = 35044;
const DynamicDrawUsage = 35048;
const StreamDrawUsage = 35040;
const StaticReadUsage = 35045;
const DynamicReadUsage = 35049;
const StreamReadUsage = 35041;
const StaticCopyUsage = 35046;
const DynamicCopyUsage = 35050;
const StreamCopyUsage = 35042;
const GLSL1 = "100";
const GLSL3 = "300 es";
function EventDispatcher() {
}
Object.assign(EventDispatcher.prototype, {
  addEventListener: function(type, listener) {
    if (this._listeners === void 0)
      this._listeners = {};
    const listeners = this._listeners;
    if (listeners[type] === void 0) {
      listeners[type] = [];
    }
    if (listeners[type].indexOf(listener) === -1) {
      listeners[type].push(listener);
    }
  },
  hasEventListener: function(type, listener) {
    if (this._listeners === void 0)
      return false;
    const listeners = this._listeners;
    return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
  },
  removeEventListener: function(type, listener) {
    if (this._listeners === void 0)
      return;
    const listeners = this._listeners;
    const listenerArray = listeners[type];
    if (listenerArray !== void 0) {
      const index = listenerArray.indexOf(listener);
      if (index !== -1) {
        listenerArray.splice(index, 1);
      }
    }
  },
  dispatchEvent: function(event) {
    if (this._listeners === void 0)
      return;
    const listeners = this._listeners;
    const listenerArray = listeners[event.type];
    if (listenerArray !== void 0) {
      event.target = this;
      const array = listenerArray.slice(0);
      for (let i2 = 0, l2 = array.length; i2 < l2; i2++) {
        array[i2].call(this, event);
      }
    }
  }
});
const _lut = [];
for (let i2 = 0; i2 < 256; i2++) {
  _lut[i2] = (i2 < 16 ? "0" : "") + i2.toString(16);
}
let _seed = 1234567;
const MathUtils = {
  DEG2RAD: Math.PI / 180,
  RAD2DEG: 180 / Math.PI,
  generateUUID: function() {
    const d0 = Math.random() * 4294967295 | 0;
    const d1 = Math.random() * 4294967295 | 0;
    const d2 = Math.random() * 4294967295 | 0;
    const d3 = Math.random() * 4294967295 | 0;
    const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
    return uuid.toUpperCase();
  },
  clamp: function(value, min, max) {
    return Math.max(min, Math.min(max, value));
  },
  euclideanModulo: function(n2, m2) {
    return (n2 % m2 + m2) % m2;
  },
  mapLinear: function(x2, a1, a2, b1, b2) {
    return b1 + (x2 - a1) * (b2 - b1) / (a2 - a1);
  },
  lerp: function(x2, y2, t3) {
    return (1 - t3) * x2 + t3 * y2;
  },
  smoothstep: function(x2, min, max) {
    if (x2 <= min)
      return 0;
    if (x2 >= max)
      return 1;
    x2 = (x2 - min) / (max - min);
    return x2 * x2 * (3 - 2 * x2);
  },
  smootherstep: function(x2, min, max) {
    if (x2 <= min)
      return 0;
    if (x2 >= max)
      return 1;
    x2 = (x2 - min) / (max - min);
    return x2 * x2 * x2 * (x2 * (x2 * 6 - 15) + 10);
  },
  randInt: function(low, high) {
    return low + Math.floor(Math.random() * (high - low + 1));
  },
  randFloat: function(low, high) {
    return low + Math.random() * (high - low);
  },
  randFloatSpread: function(range) {
    return range * (0.5 - Math.random());
  },
  seededRandom: function(s2) {
    if (s2 !== void 0)
      _seed = s2 % 2147483647;
    _seed = _seed * 16807 % 2147483647;
    return (_seed - 1) / 2147483646;
  },
  degToRad: function(degrees) {
    return degrees * MathUtils.DEG2RAD;
  },
  radToDeg: function(radians) {
    return radians * MathUtils.RAD2DEG;
  },
  isPowerOfTwo: function(value) {
    return (value & value - 1) === 0 && value !== 0;
  },
  ceilPowerOfTwo: function(value) {
    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
  },
  floorPowerOfTwo: function(value) {
    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
  },
  setQuaternionFromProperEuler: function(q2, a2, b2, c2, order) {
    const cos = Math.cos;
    const sin = Math.sin;
    const c22 = cos(b2 / 2);
    const s2 = sin(b2 / 2);
    const c13 = cos((a2 + c2) / 2);
    const s13 = sin((a2 + c2) / 2);
    const c1_3 = cos((a2 - c2) / 2);
    const s1_3 = sin((a2 - c2) / 2);
    const c3_1 = cos((c2 - a2) / 2);
    const s3_1 = sin((c2 - a2) / 2);
    switch (order) {
      case "XYX":
        q2.set(c22 * s13, s2 * c1_3, s2 * s1_3, c22 * c13);
        break;
      case "YZY":
        q2.set(s2 * s1_3, c22 * s13, s2 * c1_3, c22 * c13);
        break;
      case "ZXZ":
        q2.set(s2 * c1_3, s2 * s1_3, c22 * s13, c22 * c13);
        break;
      case "XZX":
        q2.set(c22 * s13, s2 * s3_1, s2 * c3_1, c22 * c13);
        break;
      case "YXY":
        q2.set(s2 * c3_1, c22 * s13, s2 * s3_1, c22 * c13);
        break;
      case "ZYZ":
        q2.set(s2 * s3_1, s2 * c3_1, c22 * s13, c22 * c13);
        break;
      default:
        console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
    }
  }
};
class Vector2 {
  constructor(x2 = 0, y2 = 0) {
    Object.defineProperty(this, "isVector2", { value: true });
    this.x = x2;
    this.y = y2;
  }
  get width() {
    return this.x;
  }
  set width(value) {
    this.x = value;
  }
  get height() {
    return this.y;
  }
  set height(value) {
    this.y = value;
  }
  set(x2, y2) {
    this.x = x2;
    this.y = y2;
    return this;
  }
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    return this;
  }
  setX(x2) {
    this.x = x2;
    return this;
  }
  setY(y2) {
    this.y = y2;
    return this;
  }
  setComponent(index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      default:
        throw new Error("index is out of range: " + index);
    }
    return this;
  }
  getComponent(index) {
    switch (index) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + index);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(v2) {
    this.x = v2.x;
    this.y = v2.y;
    return this;
  }
  add(v2, w2) {
    if (w2 !== void 0) {
      console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
      return this.addVectors(v2, w2);
    }
    this.x += v2.x;
    this.y += v2.y;
    return this;
  }
  addScalar(s2) {
    this.x += s2;
    this.y += s2;
    return this;
  }
  addVectors(a2, b2) {
    this.x = a2.x + b2.x;
    this.y = a2.y + b2.y;
    return this;
  }
  addScaledVector(v2, s2) {
    this.x += v2.x * s2;
    this.y += v2.y * s2;
    return this;
  }
  sub(v2, w2) {
    if (w2 !== void 0) {
      console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
      return this.subVectors(v2, w2);
    }
    this.x -= v2.x;
    this.y -= v2.y;
    return this;
  }
  subScalar(s2) {
    this.x -= s2;
    this.y -= s2;
    return this;
  }
  subVectors(a2, b2) {
    this.x = a2.x - b2.x;
    this.y = a2.y - b2.y;
    return this;
  }
  multiply(v2) {
    this.x *= v2.x;
    this.y *= v2.y;
    return this;
  }
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    return this;
  }
  divide(v2) {
    this.x /= v2.x;
    this.y /= v2.y;
    return this;
  }
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  applyMatrix3(m2) {
    const x2 = this.x, y2 = this.y;
    const e2 = m2.elements;
    this.x = e2[0] * x2 + e2[3] * y2 + e2[6];
    this.y = e2[1] * x2 + e2[4] * y2 + e2[7];
    return this;
  }
  min(v2) {
    this.x = Math.min(this.x, v2.x);
    this.y = Math.min(this.y, v2.y);
    return this;
  }
  max(v2) {
    this.x = Math.max(this.x, v2.x);
    this.y = Math.max(this.y, v2.y);
    return this;
  }
  clamp(min, max) {
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    return this;
  }
  clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    return this;
  }
  clampLength(min, max) {
    const length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    return this;
  }
  roundToZero() {
    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  }
  dot(v2) {
    return this.x * v2.x + this.y * v2.y;
  }
  cross(v2) {
    return this.x * v2.y - this.y * v2.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    const angle = Math.atan2(-this.y, -this.x) + Math.PI;
    return angle;
  }
  distanceTo(v2) {
    return Math.sqrt(this.distanceToSquared(v2));
  }
  distanceToSquared(v2) {
    const dx = this.x - v2.x, dy = this.y - v2.y;
    return dx * dx + dy * dy;
  }
  manhattanDistanceTo(v2) {
    return Math.abs(this.x - v2.x) + Math.abs(this.y - v2.y);
  }
  setLength(length) {
    return this.normalize().multiplyScalar(length);
  }
  lerp(v2, alpha) {
    this.x += (v2.x - this.x) * alpha;
    this.y += (v2.y - this.y) * alpha;
    return this;
  }
  lerpVectors(v1, v2, alpha) {
    this.x = v1.x + (v2.x - v1.x) * alpha;
    this.y = v1.y + (v2.y - v1.y) * alpha;
    return this;
  }
  equals(v2) {
    return v2.x === this.x && v2.y === this.y;
  }
  fromArray(array, offset = 0) {
    this.x = array[offset];
    this.y = array[offset + 1];
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this.x;
    array[offset + 1] = this.y;
    return array;
  }
  fromBufferAttribute(attribute, index, offset) {
    if (offset !== void 0) {
      console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");
    }
    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    return this;
  }
  rotateAround(center, angle) {
    const c2 = Math.cos(angle), s2 = Math.sin(angle);
    const x2 = this.x - center.x;
    const y2 = this.y - center.y;
    this.x = x2 * c2 - y2 * s2 + center.x;
    this.y = x2 * s2 + y2 * c2 + center.y;
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    return this;
  }
}
class Matrix3 {
  constructor() {
    Object.defineProperty(this, "isMatrix3", { value: true });
    this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ];
    if (arguments.length > 0) {
      console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
    }
  }
  set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
    const te2 = this.elements;
    te2[0] = n11;
    te2[1] = n21;
    te2[2] = n31;
    te2[3] = n12;
    te2[4] = n22;
    te2[5] = n32;
    te2[6] = n13;
    te2[7] = n23;
    te2[8] = n33;
    return this;
  }
  identity() {
    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
    return this;
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
  copy(m2) {
    const te2 = this.elements;
    const me2 = m2.elements;
    te2[0] = me2[0];
    te2[1] = me2[1];
    te2[2] = me2[2];
    te2[3] = me2[3];
    te2[4] = me2[4];
    te2[5] = me2[5];
    te2[6] = me2[6];
    te2[7] = me2[7];
    te2[8] = me2[8];
    return this;
  }
  extractBasis(xAxis, yAxis, zAxis) {
    xAxis.setFromMatrix3Column(this, 0);
    yAxis.setFromMatrix3Column(this, 1);
    zAxis.setFromMatrix3Column(this, 2);
    return this;
  }
  setFromMatrix4(m2) {
    const me2 = m2.elements;
    this.set(me2[0], me2[4], me2[8], me2[1], me2[5], me2[9], me2[2], me2[6], me2[10]);
    return this;
  }
  multiply(m2) {
    return this.multiplyMatrices(this, m2);
  }
  premultiply(m2) {
    return this.multiplyMatrices(m2, this);
  }
  multiplyMatrices(a2, b2) {
    const ae2 = a2.elements;
    const be2 = b2.elements;
    const te2 = this.elements;
    const a11 = ae2[0], a12 = ae2[3], a13 = ae2[6];
    const a21 = ae2[1], a22 = ae2[4], a23 = ae2[7];
    const a31 = ae2[2], a32 = ae2[5], a33 = ae2[8];
    const b11 = be2[0], b12 = be2[3], b13 = be2[6];
    const b21 = be2[1], b22 = be2[4], b23 = be2[7];
    const b31 = be2[2], b32 = be2[5], b33 = be2[8];
    te2[0] = a11 * b11 + a12 * b21 + a13 * b31;
    te2[3] = a11 * b12 + a12 * b22 + a13 * b32;
    te2[6] = a11 * b13 + a12 * b23 + a13 * b33;
    te2[1] = a21 * b11 + a22 * b21 + a23 * b31;
    te2[4] = a21 * b12 + a22 * b22 + a23 * b32;
    te2[7] = a21 * b13 + a22 * b23 + a23 * b33;
    te2[2] = a31 * b11 + a32 * b21 + a33 * b31;
    te2[5] = a31 * b12 + a32 * b22 + a33 * b32;
    te2[8] = a31 * b13 + a32 * b23 + a33 * b33;
    return this;
  }
  multiplyScalar(s2) {
    const te2 = this.elements;
    te2[0] *= s2;
    te2[3] *= s2;
    te2[6] *= s2;
    te2[1] *= s2;
    te2[4] *= s2;
    te2[7] *= s2;
    te2[2] *= s2;
    te2[5] *= s2;
    te2[8] *= s2;
    return this;
  }
  determinant() {
    const te2 = this.elements;
    const a2 = te2[0], b2 = te2[1], c2 = te2[2], d = te2[3], e2 = te2[4], f2 = te2[5], g2 = te2[6], h = te2[7], i2 = te2[8];
    return a2 * e2 * i2 - a2 * f2 * h - b2 * d * i2 + b2 * f2 * g2 + c2 * d * h - c2 * e2 * g2;
  }
  getInverse(matrix, throwOnDegenerate) {
    if (throwOnDegenerate !== void 0) {
      console.warn("THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.");
    }
    const me2 = matrix.elements, te2 = this.elements, n11 = me2[0], n21 = me2[1], n31 = me2[2], n12 = me2[3], n22 = me2[4], n32 = me2[5], n13 = me2[6], n23 = me2[7], n33 = me2[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
    if (det === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const detInv = 1 / det;
    te2[0] = t11 * detInv;
    te2[1] = (n31 * n23 - n33 * n21) * detInv;
    te2[2] = (n32 * n21 - n31 * n22) * detInv;
    te2[3] = t12 * detInv;
    te2[4] = (n33 * n11 - n31 * n13) * detInv;
    te2[5] = (n31 * n12 - n32 * n11) * detInv;
    te2[6] = t13 * detInv;
    te2[7] = (n21 * n13 - n23 * n11) * detInv;
    te2[8] = (n22 * n11 - n21 * n12) * detInv;
    return this;
  }
  transpose() {
    let tmp2;
    const m2 = this.elements;
    tmp2 = m2[1];
    m2[1] = m2[3];
    m2[3] = tmp2;
    tmp2 = m2[2];
    m2[2] = m2[6];
    m2[6] = tmp2;
    tmp2 = m2[5];
    m2[5] = m2[7];
    m2[7] = tmp2;
    return this;
  }
  getNormalMatrix(matrix4) {
    return this.setFromMatrix4(matrix4).getInverse(this).transpose();
  }
  transposeIntoArray(r2) {
    const m2 = this.elements;
    r2[0] = m2[0];
    r2[1] = m2[3];
    r2[2] = m2[6];
    r2[3] = m2[1];
    r2[4] = m2[4];
    r2[5] = m2[7];
    r2[6] = m2[2];
    r2[7] = m2[5];
    r2[8] = m2[8];
    return this;
  }
  setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
    const c2 = Math.cos(rotation);
    const s2 = Math.sin(rotation);
    this.set(sx * c2, sx * s2, -sx * (c2 * cx + s2 * cy) + cx + tx, -sy * s2, sy * c2, -sy * (-s2 * cx + c2 * cy) + cy + ty, 0, 0, 1);
  }
  scale(sx, sy) {
    const te2 = this.elements;
    te2[0] *= sx;
    te2[3] *= sx;
    te2[6] *= sx;
    te2[1] *= sy;
    te2[4] *= sy;
    te2[7] *= sy;
    return this;
  }
  rotate(theta) {
    const c2 = Math.cos(theta);
    const s2 = Math.sin(theta);
    const te2 = this.elements;
    const a11 = te2[0], a12 = te2[3], a13 = te2[6];
    const a21 = te2[1], a22 = te2[4], a23 = te2[7];
    te2[0] = c2 * a11 + s2 * a21;
    te2[3] = c2 * a12 + s2 * a22;
    te2[6] = c2 * a13 + s2 * a23;
    te2[1] = -s2 * a11 + c2 * a21;
    te2[4] = -s2 * a12 + c2 * a22;
    te2[7] = -s2 * a13 + c2 * a23;
    return this;
  }
  translate(tx, ty) {
    const te2 = this.elements;
    te2[0] += tx * te2[2];
    te2[3] += tx * te2[5];
    te2[6] += tx * te2[8];
    te2[1] += ty * te2[2];
    te2[4] += ty * te2[5];
    te2[7] += ty * te2[8];
    return this;
  }
  equals(matrix) {
    const te2 = this.elements;
    const me2 = matrix.elements;
    for (let i2 = 0; i2 < 9; i2++) {
      if (te2[i2] !== me2[i2])
        return false;
    }
    return true;
  }
  fromArray(array, offset = 0) {
    for (let i2 = 0; i2 < 9; i2++) {
      this.elements[i2] = array[i2 + offset];
    }
    return this;
  }
  toArray(array = [], offset = 0) {
    const te2 = this.elements;
    array[offset] = te2[0];
    array[offset + 1] = te2[1];
    array[offset + 2] = te2[2];
    array[offset + 3] = te2[3];
    array[offset + 4] = te2[4];
    array[offset + 5] = te2[5];
    array[offset + 6] = te2[6];
    array[offset + 7] = te2[7];
    array[offset + 8] = te2[8];
    return array;
  }
}
let _canvas;
const ImageUtils = {
  getDataURL: function(image) {
    if (/^data:/i.test(image.src)) {
      return image.src;
    }
    if (typeof HTMLCanvasElement == "undefined") {
      return image.src;
    }
    let canvas;
    if (image instanceof HTMLCanvasElement) {
      canvas = image;
    } else {
      if (_canvas === void 0)
        _canvas = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
      _canvas.width = image.width;
      _canvas.height = image.height;
      const context = _canvas.getContext("2d");
      if (image instanceof ImageData) {
        context.putImageData(image, 0, 0);
      } else {
        context.drawImage(image, 0, 0, image.width, image.height);
      }
      canvas = _canvas;
    }
    if (canvas.width > 2048 || canvas.height > 2048) {
      return canvas.toDataURL("image/jpeg", 0.6);
    } else {
      return canvas.toDataURL("image/png");
    }
  }
};
let textureId = 0;
function Texture(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
  Object.defineProperty(this, "id", { value: textureId++ });
  this.uuid = MathUtils.generateUUID();
  this.name = "";
  this.image = image !== void 0 ? image : Texture.DEFAULT_IMAGE;
  this.mipmaps = [];
  this.mapping = mapping !== void 0 ? mapping : Texture.DEFAULT_MAPPING;
  this.wrapS = wrapS !== void 0 ? wrapS : ClampToEdgeWrapping;
  this.wrapT = wrapT !== void 0 ? wrapT : ClampToEdgeWrapping;
  this.magFilter = magFilter !== void 0 ? magFilter : LinearFilter;
  this.minFilter = minFilter !== void 0 ? minFilter : LinearMipmapLinearFilter;
  this.anisotropy = anisotropy !== void 0 ? anisotropy : 1;
  this.format = format !== void 0 ? format : RGBAFormat;
  this.internalFormat = null;
  this.type = type !== void 0 ? type : UnsignedByteType;
  this.offset = new Vector2(0, 0);
  this.repeat = new Vector2(1, 1);
  this.center = new Vector2(0, 0);
  this.rotation = 0;
  this.matrixAutoUpdate = true;
  this.matrix = new Matrix3();
  this.generateMipmaps = true;
  this.premultiplyAlpha = false;
  this.flipY = true;
  this.unpackAlignment = 4;
  this.encoding = encoding !== void 0 ? encoding : LinearEncoding;
  this.version = 0;
  this.onUpdate = null;
}
Texture.DEFAULT_IMAGE = void 0;
Texture.DEFAULT_MAPPING = UVMapping;
Texture.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: Texture,
  isTexture: true,
  updateMatrix: function() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  },
  clone: function() {
    return new this.constructor().copy(this);
  },
  copy: function(source) {
    this.name = source.name;
    this.image = source.image;
    this.mipmaps = source.mipmaps.slice(0);
    this.mapping = source.mapping;
    this.wrapS = source.wrapS;
    this.wrapT = source.wrapT;
    this.magFilter = source.magFilter;
    this.minFilter = source.minFilter;
    this.anisotropy = source.anisotropy;
    this.format = source.format;
    this.internalFormat = source.internalFormat;
    this.type = source.type;
    this.offset.copy(source.offset);
    this.repeat.copy(source.repeat);
    this.center.copy(source.center);
    this.rotation = source.rotation;
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    this.matrix.copy(source.matrix);
    this.generateMipmaps = source.generateMipmaps;
    this.premultiplyAlpha = source.premultiplyAlpha;
    this.flipY = source.flipY;
    this.unpackAlignment = source.unpackAlignment;
    this.encoding = source.encoding;
    return this;
  },
  toJSON: function(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    if (!isRootObject && meta.textures[this.uuid] !== void 0) {
      return meta.textures[this.uuid];
    }
    const output = {
      metadata: {
        version: 4.5,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      mapping: this.mapping,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      type: this.type,
      encoding: this.encoding,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    if (this.image !== void 0) {
      const image = this.image;
      if (image.uuid === void 0) {
        image.uuid = MathUtils.generateUUID();
      }
      if (!isRootObject && meta.images[image.uuid] === void 0) {
        let url;
        if (Array.isArray(image)) {
          url = [];
          for (let i2 = 0, l2 = image.length; i2 < l2; i2++) {
            url.push(ImageUtils.getDataURL(image[i2]));
          }
        } else {
          url = ImageUtils.getDataURL(image);
        }
        meta.images[image.uuid] = {
          uuid: image.uuid,
          url
        };
      }
      output.image = image.uuid;
    }
    if (!isRootObject) {
      meta.textures[this.uuid] = output;
    }
    return output;
  },
  dispose: function() {
    this.dispatchEvent({ type: "dispose" });
  },
  transformUv: function(uv) {
    if (this.mapping !== UVMapping)
      return uv;
    uv.applyMatrix3(this.matrix);
    if (uv.x < 0 || uv.x > 1) {
      switch (this.wrapS) {
        case RepeatWrapping:
          uv.x = uv.x - Math.floor(uv.x);
          break;
        case ClampToEdgeWrapping:
          uv.x = uv.x < 0 ? 0 : 1;
          break;
        case MirroredRepeatWrapping:
          if (Math.abs(Math.floor(uv.x) % 2) === 1) {
            uv.x = Math.ceil(uv.x) - uv.x;
          } else {
            uv.x = uv.x - Math.floor(uv.x);
          }
          break;
      }
    }
    if (uv.y < 0 || uv.y > 1) {
      switch (this.wrapT) {
        case RepeatWrapping:
          uv.y = uv.y - Math.floor(uv.y);
          break;
        case ClampToEdgeWrapping:
          uv.y = uv.y < 0 ? 0 : 1;
          break;
        case MirroredRepeatWrapping:
          if (Math.abs(Math.floor(uv.y) % 2) === 1) {
            uv.y = Math.ceil(uv.y) - uv.y;
          } else {
            uv.y = uv.y - Math.floor(uv.y);
          }
          break;
      }
    }
    if (this.flipY) {
      uv.y = 1 - uv.y;
    }
    return uv;
  }
});
Object.defineProperty(Texture.prototype, "needsUpdate", {
  set: function(value) {
    if (value === true)
      this.version++;
  }
});
class Vector4 {
  constructor(x2 = 0, y2 = 0, z2 = 0, w2 = 1) {
    Object.defineProperty(this, "isVector4", { value: true });
    this.x = x2;
    this.y = y2;
    this.z = z2;
    this.w = w2;
  }
  get width() {
    return this.z;
  }
  set width(value) {
    this.z = value;
  }
  get height() {
    return this.w;
  }
  set height(value) {
    this.w = value;
  }
  set(x2, y2, z2, w2) {
    this.x = x2;
    this.y = y2;
    this.z = z2;
    this.w = w2;
    return this;
  }
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    this.z = scalar;
    this.w = scalar;
    return this;
  }
  setX(x2) {
    this.x = x2;
    return this;
  }
  setY(y2) {
    this.y = y2;
    return this;
  }
  setZ(z2) {
    this.z = z2;
    return this;
  }
  setW(w2) {
    this.w = w2;
    return this;
  }
  setComponent(index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      case 2:
        this.z = value;
        break;
      case 3:
        this.w = value;
        break;
      default:
        throw new Error("index is out of range: " + index);
    }
    return this;
  }
  getComponent(index) {
    switch (index) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + index);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  copy(v2) {
    this.x = v2.x;
    this.y = v2.y;
    this.z = v2.z;
    this.w = v2.w !== void 0 ? v2.w : 1;
    return this;
  }
  add(v2, w2) {
    if (w2 !== void 0) {
      console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
      return this.addVectors(v2, w2);
    }
    this.x += v2.x;
    this.y += v2.y;
    this.z += v2.z;
    this.w += v2.w;
    return this;
  }
  addScalar(s2) {
    this.x += s2;
    this.y += s2;
    this.z += s2;
    this.w += s2;
    return this;
  }
  addVectors(a2, b2) {
    this.x = a2.x + b2.x;
    this.y = a2.y + b2.y;
    this.z = a2.z + b2.z;
    this.w = a2.w + b2.w;
    return this;
  }
  addScaledVector(v2, s2) {
    this.x += v2.x * s2;
    this.y += v2.y * s2;
    this.z += v2.z * s2;
    this.w += v2.w * s2;
    return this;
  }
  sub(v2, w2) {
    if (w2 !== void 0) {
      console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
      return this.subVectors(v2, w2);
    }
    this.x -= v2.x;
    this.y -= v2.y;
    this.z -= v2.z;
    this.w -= v2.w;
    return this;
  }
  subScalar(s2) {
    this.x -= s2;
    this.y -= s2;
    this.z -= s2;
    this.w -= s2;
    return this;
  }
  subVectors(a2, b2) {
    this.x = a2.x - b2.x;
    this.y = a2.y - b2.y;
    this.z = a2.z - b2.z;
    this.w = a2.w - b2.w;
    return this;
  }
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    this.w *= scalar;
    return this;
  }
  applyMatrix4(m2) {
    const x2 = this.x, y2 = this.y, z2 = this.z, w2 = this.w;
    const e2 = m2.elements;
    this.x = e2[0] * x2 + e2[4] * y2 + e2[8] * z2 + e2[12] * w2;
    this.y = e2[1] * x2 + e2[5] * y2 + e2[9] * z2 + e2[13] * w2;
    this.z = e2[2] * x2 + e2[6] * y2 + e2[10] * z2 + e2[14] * w2;
    this.w = e2[3] * x2 + e2[7] * y2 + e2[11] * z2 + e2[15] * w2;
    return this;
  }
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  setAxisAngleFromQuaternion(q2) {
    this.w = 2 * Math.acos(q2.w);
    const s2 = Math.sqrt(1 - q2.w * q2.w);
    if (s2 < 1e-4) {
      this.x = 1;
      this.y = 0;
      this.z = 0;
    } else {
      this.x = q2.x / s2;
      this.y = q2.y / s2;
      this.z = q2.z / s2;
    }
    return this;
  }
  setAxisAngleFromRotationMatrix(m2) {
    let angle, x2, y2, z2;
    const epsilon = 0.01, epsilon2 = 0.1, te2 = m2.elements, m11 = te2[0], m12 = te2[4], m13 = te2[8], m21 = te2[1], m22 = te2[5], m23 = te2[9], m31 = te2[2], m32 = te2[6], m33 = te2[10];
    if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
      if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
        this.set(1, 0, 0, 0);
        return this;
      }
      angle = Math.PI;
      const xx = (m11 + 1) / 2;
      const yy = (m22 + 1) / 2;
      const zz = (m33 + 1) / 2;
      const xy = (m12 + m21) / 4;
      const xz = (m13 + m31) / 4;
      const yz = (m23 + m32) / 4;
      if (xx > yy && xx > zz) {
        if (xx < epsilon) {
          x2 = 0;
          y2 = 0.707106781;
          z2 = 0.707106781;
        } else {
          x2 = Math.sqrt(xx);
          y2 = xy / x2;
          z2 = xz / x2;
        }
      } else if (yy > zz) {
        if (yy < epsilon) {
          x2 = 0.707106781;
          y2 = 0;
          z2 = 0.707106781;
        } else {
          y2 = Math.sqrt(yy);
          x2 = xy / y2;
          z2 = yz / y2;
        }
      } else {
        if (zz < epsilon) {
          x2 = 0.707106781;
          y2 = 0.707106781;
          z2 = 0;
        } else {
          z2 = Math.sqrt(zz);
          x2 = xz / z2;
          y2 = yz / z2;
        }
      }
      this.set(x2, y2, z2, angle);
      return this;
    }
    let s2 = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
    if (Math.abs(s2) < 1e-3)
      s2 = 1;
    this.x = (m32 - m23) / s2;
    this.y = (m13 - m31) / s2;
    this.z = (m21 - m12) / s2;
    this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
    return this;
  }
  min(v2) {
    this.x = Math.min(this.x, v2.x);
    this.y = Math.min(this.y, v2.y);
    this.z = Math.min(this.z, v2.z);
    this.w = Math.min(this.w, v2.w);
    return this;
  }
  max(v2) {
    this.x = Math.max(this.x, v2.x);
    this.y = Math.max(this.y, v2.y);
    this.z = Math.max(this.z, v2.z);
    this.w = Math.max(this.w, v2.w);
    return this;
  }
  clamp(min, max) {
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    this.z = Math.max(min.z, Math.min(max.z, this.z));
    this.w = Math.max(min.w, Math.min(max.w, this.w));
    return this;
  }
  clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    this.z = Math.max(minVal, Math.min(maxVal, this.z));
    this.w = Math.max(minVal, Math.min(maxVal, this.w));
    return this;
  }
  clampLength(min, max) {
    const length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    this.w = Math.floor(this.w);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    this.w = Math.ceil(this.w);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    this.w = Math.round(this.w);
    return this;
  }
  roundToZero() {
    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
    this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    this.w = -this.w;
    return this;
  }
  dot(v2) {
    return this.x * v2.x + this.y * v2.y + this.z * v2.z + this.w * v2.w;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(length) {
    return this.normalize().multiplyScalar(length);
  }
  lerp(v2, alpha) {
    this.x += (v2.x - this.x) * alpha;
    this.y += (v2.y - this.y) * alpha;
    this.z += (v2.z - this.z) * alpha;
    this.w += (v2.w - this.w) * alpha;
    return this;
  }
  lerpVectors(v1, v2, alpha) {
    this.x = v1.x + (v2.x - v1.x) * alpha;
    this.y = v1.y + (v2.y - v1.y) * alpha;
    this.z = v1.z + (v2.z - v1.z) * alpha;
    this.w = v1.w + (v2.w - v1.w) * alpha;
    return this;
  }
  equals(v2) {
    return v2.x === this.x && v2.y === this.y && v2.z === this.z && v2.w === this.w;
  }
  fromArray(array, offset = 0) {
    this.x = array[offset];
    this.y = array[offset + 1];
    this.z = array[offset + 2];
    this.w = array[offset + 3];
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this.x;
    array[offset + 1] = this.y;
    array[offset + 2] = this.z;
    array[offset + 3] = this.w;
    return array;
  }
  fromBufferAttribute(attribute, index, offset) {
    if (offset !== void 0) {
      console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");
    }
    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    this.z = attribute.getZ(index);
    this.w = attribute.getW(index);
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    this.z = Math.random();
    this.w = Math.random();
    return this;
  }
}
function WebGLRenderTarget(width, height, options) {
  this.width = width;
  this.height = height;
  this.scissor = new Vector4(0, 0, width, height);
  this.scissorTest = false;
  this.viewport = new Vector4(0, 0, width, height);
  options = options || {};
  this.texture = new Texture(void 0, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
  this.texture.image = {};
  this.texture.image.width = width;
  this.texture.image.height = height;
  this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
  this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
  this.depthBuffer = options.depthBuffer !== void 0 ? options.depthBuffer : true;
  this.stencilBuffer = options.stencilBuffer !== void 0 ? options.stencilBuffer : false;
  this.depthTexture = options.depthTexture !== void 0 ? options.depthTexture : null;
}
WebGLRenderTarget.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: WebGLRenderTarget,
  isWebGLRenderTarget: true,
  setSize: function(width, height) {
    if (this.width !== width || this.height !== height) {
      this.width = width;
      this.height = height;
      this.texture.image.width = width;
      this.texture.image.height = height;
      this.dispose();
    }
    this.viewport.set(0, 0, width, height);
    this.scissor.set(0, 0, width, height);
  },
  clone: function() {
    return new this.constructor().copy(this);
  },
  copy: function(source) {
    this.width = source.width;
    this.height = source.height;
    this.viewport.copy(source.viewport);
    this.texture = source.texture.clone();
    this.depthBuffer = source.depthBuffer;
    this.stencilBuffer = source.stencilBuffer;
    this.depthTexture = source.depthTexture;
    return this;
  },
  dispose: function() {
    this.dispatchEvent({ type: "dispose" });
  }
});
function WebGLMultisampleRenderTarget(width, height, options) {
  WebGLRenderTarget.call(this, width, height, options);
  this.samples = 4;
}
WebGLMultisampleRenderTarget.prototype = Object.assign(Object.create(WebGLRenderTarget.prototype), {
  constructor: WebGLMultisampleRenderTarget,
  isWebGLMultisampleRenderTarget: true,
  copy: function(source) {
    WebGLRenderTarget.prototype.copy.call(this, source);
    this.samples = source.samples;
    return this;
  }
});
class Quaternion {
  constructor(x2 = 0, y2 = 0, z2 = 0, w2 = 1) {
    Object.defineProperty(this, "isQuaternion", { value: true });
    this._x = x2;
    this._y = y2;
    this._z = z2;
    this._w = w2;
  }
  static slerp(qa2, qb, qm, t3) {
    return qm.copy(qa2).slerp(qb, t3);
  }
  static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t3) {
    let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
    const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
    if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
      let s2 = 1 - t3;
      const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
      if (sqrSin > Number.EPSILON) {
        const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
        s2 = Math.sin(s2 * len) / sin;
        t3 = Math.sin(t3 * len) / sin;
      }
      const tDir = t3 * dir;
      x0 = x0 * s2 + x1 * tDir;
      y0 = y0 * s2 + y1 * tDir;
      z0 = z0 * s2 + z1 * tDir;
      w0 = w0 * s2 + w1 * tDir;
      if (s2 === 1 - t3) {
        const f2 = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
        x0 *= f2;
        y0 *= f2;
        z0 *= f2;
        w0 *= f2;
      }
    }
    dst[dstOffset] = x0;
    dst[dstOffset + 1] = y0;
    dst[dstOffset + 2] = z0;
    dst[dstOffset + 3] = w0;
  }
  static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
    const x0 = src0[srcOffset0];
    const y0 = src0[srcOffset0 + 1];
    const z0 = src0[srcOffset0 + 2];
    const w0 = src0[srcOffset0 + 3];
    const x1 = src1[srcOffset1];
    const y1 = src1[srcOffset1 + 1];
    const z1 = src1[srcOffset1 + 2];
    const w1 = src1[srcOffset1 + 3];
    dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
    dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
    dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
    dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
    return dst;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
    this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
    this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(value) {
    this._z = value;
    this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(value) {
    this._w = value;
    this._onChangeCallback();
  }
  set(x2, y2, z2, w2) {
    this._x = x2;
    this._y = y2;
    this._z = z2;
    this._w = w2;
    this._onChangeCallback();
    return this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(quaternion) {
    this._x = quaternion.x;
    this._y = quaternion.y;
    this._z = quaternion.z;
    this._w = quaternion.w;
    this._onChangeCallback();
    return this;
  }
  setFromEuler(euler, update) {
    if (!(euler && euler.isEuler)) {
      throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
    }
    const x2 = euler._x, y2 = euler._y, z2 = euler._z, order = euler._order;
    const cos = Math.cos;
    const sin = Math.sin;
    const c1 = cos(x2 / 2);
    const c2 = cos(y2 / 2);
    const c3 = cos(z2 / 2);
    const s1 = sin(x2 / 2);
    const s2 = sin(y2 / 2);
    const s3 = sin(z2 / 2);
    switch (order) {
      case "XYZ":
        this._x = s1 * c2 * c3 + c1 * s2 * s3;
        this._y = c1 * s2 * c3 - s1 * c2 * s3;
        this._z = c1 * c2 * s3 + s1 * s2 * c3;
        this._w = c1 * c2 * c3 - s1 * s2 * s3;
        break;
      case "YXZ":
        this._x = s1 * c2 * c3 + c1 * s2 * s3;
        this._y = c1 * s2 * c3 - s1 * c2 * s3;
        this._z = c1 * c2 * s3 - s1 * s2 * c3;
        this._w = c1 * c2 * c3 + s1 * s2 * s3;
        break;
      case "ZXY":
        this._x = s1 * c2 * c3 - c1 * s2 * s3;
        this._y = c1 * s2 * c3 + s1 * c2 * s3;
        this._z = c1 * c2 * s3 + s1 * s2 * c3;
        this._w = c1 * c2 * c3 - s1 * s2 * s3;
        break;
      case "ZYX":
        this._x = s1 * c2 * c3 - c1 * s2 * s3;
        this._y = c1 * s2 * c3 + s1 * c2 * s3;
        this._z = c1 * c2 * s3 - s1 * s2 * c3;
        this._w = c1 * c2 * c3 + s1 * s2 * s3;
        break;
      case "YZX":
        this._x = s1 * c2 * c3 + c1 * s2 * s3;
        this._y = c1 * s2 * c3 + s1 * c2 * s3;
        this._z = c1 * c2 * s3 - s1 * s2 * c3;
        this._w = c1 * c2 * c3 - s1 * s2 * s3;
        break;
      case "XZY":
        this._x = s1 * c2 * c3 - c1 * s2 * s3;
        this._y = c1 * s2 * c3 - s1 * c2 * s3;
        this._z = c1 * c2 * s3 + s1 * s2 * c3;
        this._w = c1 * c2 * c3 + s1 * s2 * s3;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
    }
    if (update !== false)
      this._onChangeCallback();
    return this;
  }
  setFromAxisAngle(axis, angle) {
    const halfAngle = angle / 2, s2 = Math.sin(halfAngle);
    this._x = axis.x * s2;
    this._y = axis.y * s2;
    this._z = axis.z * s2;
    this._w = Math.cos(halfAngle);
    this._onChangeCallback();
    return this;
  }
  setFromRotationMatrix(m2) {
    const te2 = m2.elements, m11 = te2[0], m12 = te2[4], m13 = te2[8], m21 = te2[1], m22 = te2[5], m23 = te2[9], m31 = te2[2], m32 = te2[6], m33 = te2[10], trace = m11 + m22 + m33;
    if (trace > 0) {
      const s2 = 0.5 / Math.sqrt(trace + 1);
      this._w = 0.25 / s2;
      this._x = (m32 - m23) * s2;
      this._y = (m13 - m31) * s2;
      this._z = (m21 - m12) * s2;
    } else if (m11 > m22 && m11 > m33) {
      const s2 = 2 * Math.sqrt(1 + m11 - m22 - m33);
      this._w = (m32 - m23) / s2;
      this._x = 0.25 * s2;
      this._y = (m12 + m21) / s2;
      this._z = (m13 + m31) / s2;
    } else if (m22 > m33) {
      const s2 = 2 * Math.sqrt(1 + m22 - m11 - m33);
      this._w = (m13 - m31) / s2;
      this._x = (m12 + m21) / s2;
      this._y = 0.25 * s2;
      this._z = (m23 + m32) / s2;
    } else {
      const s2 = 2 * Math.sqrt(1 + m33 - m11 - m22);
      this._w = (m21 - m12) / s2;
      this._x = (m13 + m31) / s2;
      this._y = (m23 + m32) / s2;
      this._z = 0.25 * s2;
    }
    this._onChangeCallback();
    return this;
  }
  setFromUnitVectors(vFrom, vTo) {
    const EPS = 1e-6;
    let r2 = vFrom.dot(vTo) + 1;
    if (r2 < EPS) {
      r2 = 0;
      if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
        this._x = -vFrom.y;
        this._y = vFrom.x;
        this._z = 0;
        this._w = r2;
      } else {
        this._x = 0;
        this._y = -vFrom.z;
        this._z = vFrom.y;
        this._w = r2;
      }
    } else {
      this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
      this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
      this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
      this._w = r2;
    }
    return this.normalize();
  }
  angleTo(q2) {
    return 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q2), -1, 1)));
  }
  rotateTowards(q2, step) {
    const angle = this.angleTo(q2);
    if (angle === 0)
      return this;
    const t3 = Math.min(1, step / angle);
    this.slerp(q2, t3);
    return this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  inverse() {
    return this.conjugate();
  }
  conjugate() {
    this._x *= -1;
    this._y *= -1;
    this._z *= -1;
    this._onChangeCallback();
    return this;
  }
  dot(v2) {
    return this._x * v2._x + this._y * v2._y + this._z * v2._z + this._w * v2._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let l2 = this.length();
    if (l2 === 0) {
      this._x = 0;
      this._y = 0;
      this._z = 0;
      this._w = 1;
    } else {
      l2 = 1 / l2;
      this._x = this._x * l2;
      this._y = this._y * l2;
      this._z = this._z * l2;
      this._w = this._w * l2;
    }
    this._onChangeCallback();
    return this;
  }
  multiply(q2, p2) {
    if (p2 !== void 0) {
      console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.");
      return this.multiplyQuaternions(q2, p2);
    }
    return this.multiplyQuaternions(this, q2);
  }
  premultiply(q2) {
    return this.multiplyQuaternions(q2, this);
  }
  multiplyQuaternions(a2, b2) {
    const qax = a2._x, qay = a2._y, qaz = a2._z, qaw = a2._w;
    const qbx = b2._x, qby = b2._y, qbz = b2._z, qbw = b2._w;
    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
    this._onChangeCallback();
    return this;
  }
  slerp(qb, t3) {
    if (t3 === 0)
      return this;
    if (t3 === 1)
      return this.copy(qb);
    const x2 = this._x, y2 = this._y, z2 = this._z, w2 = this._w;
    let cosHalfTheta = w2 * qb._w + x2 * qb._x + y2 * qb._y + z2 * qb._z;
    if (cosHalfTheta < 0) {
      this._w = -qb._w;
      this._x = -qb._x;
      this._y = -qb._y;
      this._z = -qb._z;
      cosHalfTheta = -cosHalfTheta;
    } else {
      this.copy(qb);
    }
    if (cosHalfTheta >= 1) {
      this._w = w2;
      this._x = x2;
      this._y = y2;
      this._z = z2;
      return this;
    }
    const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
    if (sqrSinHalfTheta <= Number.EPSILON) {
      const s2 = 1 - t3;
      this._w = s2 * w2 + t3 * this._w;
      this._x = s2 * x2 + t3 * this._x;
      this._y = s2 * y2 + t3 * this._y;
      this._z = s2 * z2 + t3 * this._z;
      this.normalize();
      this._onChangeCallback();
      return this;
    }
    const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
    const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
    const ratioA = Math.sin((1 - t3) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t3 * halfTheta) / sinHalfTheta;
    this._w = w2 * ratioA + this._w * ratioB;
    this._x = x2 * ratioA + this._x * ratioB;
    this._y = y2 * ratioA + this._y * ratioB;
    this._z = z2 * ratioA + this._z * ratioB;
    this._onChangeCallback();
    return this;
  }
  equals(quaternion) {
    return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
  }
  fromArray(array, offset = 0) {
    this._x = array[offset];
    this._y = array[offset + 1];
    this._z = array[offset + 2];
    this._w = array[offset + 3];
    this._onChangeCallback();
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this._x;
    array[offset + 1] = this._y;
    array[offset + 2] = this._z;
    array[offset + 3] = this._w;
    return array;
  }
  fromBufferAttribute(attribute, index) {
    this._x = attribute.getX(index);
    this._y = attribute.getY(index);
    this._z = attribute.getZ(index);
    this._w = attribute.getW(index);
    return this;
  }
  _onChange(callback) {
    this._onChangeCallback = callback;
    return this;
  }
  _onChangeCallback() {
  }
}
class Vector3 {
  constructor(x2 = 0, y2 = 0, z2 = 0) {
    Object.defineProperty(this, "isVector3", { value: true });
    this.x = x2;
    this.y = y2;
    this.z = z2;
  }
  set(x2, y2, z2) {
    if (z2 === void 0)
      z2 = this.z;
    this.x = x2;
    this.y = y2;
    this.z = z2;
    return this;
  }
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    this.z = scalar;
    return this;
  }
  setX(x2) {
    this.x = x2;
    return this;
  }
  setY(y2) {
    this.y = y2;
    return this;
  }
  setZ(z2) {
    this.z = z2;
    return this;
  }
  setComponent(index, value) {
    switch (index) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      case 2:
        this.z = value;
        break;
      default:
        throw new Error("index is out of range: " + index);
    }
    return this;
  }
  getComponent(index) {
    switch (index) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + index);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(v2) {
    this.x = v2.x;
    this.y = v2.y;
    this.z = v2.z;
    return this;
  }
  add(v2, w2) {
    if (w2 !== void 0) {
      console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");
      return this.addVectors(v2, w2);
    }
    this.x += v2.x;
    this.y += v2.y;
    this.z += v2.z;
    return this;
  }
  addScalar(s2) {
    this.x += s2;
    this.y += s2;
    this.z += s2;
    return this;
  }
  addVectors(a2, b2) {
    this.x = a2.x + b2.x;
    this.y = a2.y + b2.y;
    this.z = a2.z + b2.z;
    return this;
  }
  addScaledVector(v2, s2) {
    this.x += v2.x * s2;
    this.y += v2.y * s2;
    this.z += v2.z * s2;
    return this;
  }
  sub(v2, w2) {
    if (w2 !== void 0) {
      console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");
      return this.subVectors(v2, w2);
    }
    this.x -= v2.x;
    this.y -= v2.y;
    this.z -= v2.z;
    return this;
  }
  subScalar(s2) {
    this.x -= s2;
    this.y -= s2;
    this.z -= s2;
    return this;
  }
  subVectors(a2, b2) {
    this.x = a2.x - b2.x;
    this.y = a2.y - b2.y;
    this.z = a2.z - b2.z;
    return this;
  }
  multiply(v2, w2) {
    if (w2 !== void 0) {
      console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.");
      return this.multiplyVectors(v2, w2);
    }
    this.x *= v2.x;
    this.y *= v2.y;
    this.z *= v2.z;
    return this;
  }
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    return this;
  }
  multiplyVectors(a2, b2) {
    this.x = a2.x * b2.x;
    this.y = a2.y * b2.y;
    this.z = a2.z * b2.z;
    return this;
  }
  applyEuler(euler) {
    if (!(euler && euler.isEuler)) {
      console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");
    }
    return this.applyQuaternion(_quaternion.setFromEuler(euler));
  }
  applyAxisAngle(axis, angle) {
    return this.applyQuaternion(_quaternion.setFromAxisAngle(axis, angle));
  }
  applyMatrix3(m2) {
    const x2 = this.x, y2 = this.y, z2 = this.z;
    const e2 = m2.elements;
    this.x = e2[0] * x2 + e2[3] * y2 + e2[6] * z2;
    this.y = e2[1] * x2 + e2[4] * y2 + e2[7] * z2;
    this.z = e2[2] * x2 + e2[5] * y2 + e2[8] * z2;
    return this;
  }
  applyNormalMatrix(m2) {
    return this.applyMatrix3(m2).normalize();
  }
  applyMatrix4(m2) {
    const x2 = this.x, y2 = this.y, z2 = this.z;
    const e2 = m2.elements;
    const w2 = 1 / (e2[3] * x2 + e2[7] * y2 + e2[11] * z2 + e2[15]);
    this.x = (e2[0] * x2 + e2[4] * y2 + e2[8] * z2 + e2[12]) * w2;
    this.y = (e2[1] * x2 + e2[5] * y2 + e2[9] * z2 + e2[13]) * w2;
    this.z = (e2[2] * x2 + e2[6] * y2 + e2[10] * z2 + e2[14]) * w2;
    return this;
  }
  applyQuaternion(q2) {
    const x2 = this.x, y2 = this.y, z2 = this.z;
    const qx = q2.x, qy = q2.y, qz = q2.z, qw = q2.w;
    const ix = qw * x2 + qy * z2 - qz * y2;
    const iy = qw * y2 + qz * x2 - qx * z2;
    const iz = qw * z2 + qx * y2 - qy * x2;
    const iw = -qx * x2 - qy * y2 - qz * z2;
    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return this;
  }
  project(camera) {
    return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
  }
  unproject(camera) {
    return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
  }
  transformDirection(m2) {
    const x2 = this.x, y2 = this.y, z2 = this.z;
    const e2 = m2.elements;
    this.x = e2[0] * x2 + e2[4] * y2 + e2[8] * z2;
    this.y = e2[1] * x2 + e2[5] * y2 + e2[9] * z2;
    this.z = e2[2] * x2 + e2[6] * y2 + e2[10] * z2;
    return this.normalize();
  }
  divide(v2) {
    this.x /= v2.x;
    this.y /= v2.y;
    this.z /= v2.z;
    return this;
  }
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  min(v2) {
    this.x = Math.min(this.x, v2.x);
    this.y = Math.min(this.y, v2.y);
    this.z = Math.min(this.z, v2.z);
    return this;
  }
  max(v2) {
    this.x = Math.max(this.x, v2.x);
    this.y = Math.max(this.y, v2.y);
    this.z = Math.max(this.z, v2.z);
    return this;
  }
  clamp(min, max) {
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    this.z = Math.max(min.z, Math.min(max.z, this.z));
    return this;
  }
  clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    this.z = Math.max(minVal, Math.min(maxVal, this.z));
    return this;
  }
  clampLength(min, max) {
    const length = this.length();
    return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    return this;
  }
  roundToZero() {
    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    return this;
  }
  dot(v2) {
    return this.x * v2.x + this.y * v2.y + this.z * v2.z;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(length) {
    return this.normalize().multiplyScalar(length);
  }
  lerp(v2, alpha) {
    this.x += (v2.x - this.x) * alpha;
    this.y += (v2.y - this.y) * alpha;
    this.z += (v2.z - this.z) * alpha;
    return this;
  }
  lerpVectors(v1, v2, alpha) {
    this.x = v1.x + (v2.x - v1.x) * alpha;
    this.y = v1.y + (v2.y - v1.y) * alpha;
    this.z = v1.z + (v2.z - v1.z) * alpha;
    return this;
  }
  cross(v2, w2) {
    if (w2 !== void 0) {
      console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.");
      return this.crossVectors(v2, w2);
    }
    return this.crossVectors(this, v2);
  }
  crossVectors(a2, b2) {
    const ax = a2.x, ay = a2.y, az = a2.z;
    const bx = b2.x, by = b2.y, bz = b2.z;
    this.x = ay * bz - az * by;
    this.y = az * bx - ax * bz;
    this.z = ax * by - ay * bx;
    return this;
  }
  projectOnVector(v2) {
    const denominator = v2.lengthSq();
    if (denominator === 0)
      return this.set(0, 0, 0);
    const scalar = v2.dot(this) / denominator;
    return this.copy(v2).multiplyScalar(scalar);
  }
  projectOnPlane(planeNormal) {
    _vector.copy(this).projectOnVector(planeNormal);
    return this.sub(_vector);
  }
  reflect(normal) {
    return this.sub(_vector.copy(normal).multiplyScalar(2 * this.dot(normal)));
  }
  angleTo(v2) {
    const denominator = Math.sqrt(this.lengthSq() * v2.lengthSq());
    if (denominator === 0)
      return Math.PI / 2;
    const theta = this.dot(v2) / denominator;
    return Math.acos(MathUtils.clamp(theta, -1, 1));
  }
  distanceTo(v2) {
    return Math.sqrt(this.distanceToSquared(v2));
  }
  distanceToSquared(v2) {
    const dx = this.x - v2.x, dy = this.y - v2.y, dz = this.z - v2.z;
    return dx * dx + dy * dy + dz * dz;
  }
  manhattanDistanceTo(v2) {
    return Math.abs(this.x - v2.x) + Math.abs(this.y - v2.y) + Math.abs(this.z - v2.z);
  }
  setFromSpherical(s2) {
    return this.setFromSphericalCoords(s2.radius, s2.phi, s2.theta);
  }
  setFromSphericalCoords(radius, phi, theta) {
    const sinPhiRadius = Math.sin(phi) * radius;
    this.x = sinPhiRadius * Math.sin(theta);
    this.y = Math.cos(phi) * radius;
    this.z = sinPhiRadius * Math.cos(theta);
    return this;
  }
  setFromCylindrical(c2) {
    return this.setFromCylindricalCoords(c2.radius, c2.theta, c2.y);
  }
  setFromCylindricalCoords(radius, theta, y2) {
    this.x = radius * Math.sin(theta);
    this.y = y2;
    this.z = radius * Math.cos(theta);
    return this;
  }
  setFromMatrixPosition(m2) {
    const e2 = m2.elements;
    this.x = e2[12];
    this.y = e2[13];
    this.z = e2[14];
    return this;
  }
  setFromMatrixScale(m2) {
    const sx = this.setFromMatrixColumn(m2, 0).length();
    const sy = this.setFromMatrixColumn(m2, 1).length();
    const sz = this.setFromMatrixColumn(m2, 2).length();
    this.x = sx;
    this.y = sy;
    this.z = sz;
    return this;
  }
  setFromMatrixColumn(m2, index) {
    return this.fromArray(m2.elements, index * 4);
  }
  setFromMatrix3Column(m2, index) {
    return this.fromArray(m2.elements, index * 3);
  }
  equals(v2) {
    return v2.x === this.x && v2.y === this.y && v2.z === this.z;
  }
  fromArray(array, offset = 0) {
    this.x = array[offset];
    this.y = array[offset + 1];
    this.z = array[offset + 2];
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this.x;
    array[offset + 1] = this.y;
    array[offset + 2] = this.z;
    return array;
  }
  fromBufferAttribute(attribute, index, offset) {
    if (offset !== void 0) {
      console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");
    }
    this.x = attribute.getX(index);
    this.y = attribute.getY(index);
    this.z = attribute.getZ(index);
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    this.z = Math.random();
    return this;
  }
}
const _vector = /* @__PURE__ */ new Vector3();
const _quaternion = /* @__PURE__ */ new Quaternion();
class Box3 {
  constructor(min, max) {
    Object.defineProperty(this, "isBox3", { value: true });
    this.min = min !== void 0 ? min : new Vector3(Infinity, Infinity, Infinity);
    this.max = max !== void 0 ? max : new Vector3(-Infinity, -Infinity, -Infinity);
  }
  set(min, max) {
    this.min.copy(min);
    this.max.copy(max);
    return this;
  }
  setFromArray(array) {
    let minX = Infinity;
    let minY = Infinity;
    let minZ = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    let maxZ = -Infinity;
    for (let i2 = 0, l2 = array.length; i2 < l2; i2 += 3) {
      const x2 = array[i2];
      const y2 = array[i2 + 1];
      const z2 = array[i2 + 2];
      if (x2 < minX)
        minX = x2;
      if (y2 < minY)
        minY = y2;
      if (z2 < minZ)
        minZ = z2;
      if (x2 > maxX)
        maxX = x2;
      if (y2 > maxY)
        maxY = y2;
      if (z2 > maxZ)
        maxZ = z2;
    }
    this.min.set(minX, minY, minZ);
    this.max.set(maxX, maxY, maxZ);
    return this;
  }
  setFromBufferAttribute(attribute) {
    let minX = Infinity;
    let minY = Infinity;
    let minZ = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    let maxZ = -Infinity;
    for (let i2 = 0, l2 = attribute.count; i2 < l2; i2++) {
      const x2 = attribute.getX(i2);
      const y2 = attribute.getY(i2);
      const z2 = attribute.getZ(i2);
      if (x2 < minX)
        minX = x2;
      if (y2 < minY)
        minY = y2;
      if (z2 < minZ)
        minZ = z2;
      if (x2 > maxX)
        maxX = x2;
      if (y2 > maxY)
        maxY = y2;
      if (z2 > maxZ)
        maxZ = z2;
    }
    this.min.set(minX, minY, minZ);
    this.max.set(maxX, maxY, maxZ);
    return this;
  }
  setFromPoints(points) {
    this.makeEmpty();
    for (let i2 = 0, il = points.length; i2 < il; i2++) {
      this.expandByPoint(points[i2]);
    }
    return this;
  }
  setFromCenterAndSize(center, size2) {
    const halfSize = _vector$1.copy(size2).multiplyScalar(0.5);
    this.min.copy(center).sub(halfSize);
    this.max.copy(center).add(halfSize);
    return this;
  }
  setFromObject(object) {
    this.makeEmpty();
    return this.expandByObject(object);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(box) {
    this.min.copy(box.min);
    this.max.copy(box.max);
    return this;
  }
  makeEmpty() {
    this.min.x = this.min.y = this.min.z = Infinity;
    this.max.x = this.max.y = this.max.z = -Infinity;
    return this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(target) {
    if (target === void 0) {
      console.warn("THREE.Box3: .getCenter() target is now required");
      target = new Vector3();
    }
    return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(target) {
    if (target === void 0) {
      console.warn("THREE.Box3: .getSize() target is now required");
      target = new Vector3();
    }
    return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
  }
  expandByPoint(point) {
    this.min.min(point);
    this.max.max(point);
    return this;
  }
  expandByVector(vector) {
    this.min.sub(vector);
    this.max.add(vector);
    return this;
  }
  expandByScalar(scalar) {
    this.min.addScalar(-scalar);
    this.max.addScalar(scalar);
    return this;
  }
  expandByObject(object) {
    object.updateWorldMatrix(false, false);
    const geometry = object.geometry;
    if (geometry !== void 0) {
      if (geometry.boundingBox === null) {
        geometry.computeBoundingBox();
      }
      _box.copy(geometry.boundingBox);
      _box.applyMatrix4(object.matrixWorld);
      this.union(_box);
    }
    const children = object.children;
    for (let i2 = 0, l2 = children.length; i2 < l2; i2++) {
      this.expandByObject(children[i2]);
    }
    return this;
  }
  containsPoint(point) {
    return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
  }
  containsBox(box) {
    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
  }
  getParameter(point, target) {
    if (target === void 0) {
      console.warn("THREE.Box3: .getParameter() target is now required");
      target = new Vector3();
    }
    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));
  }
  intersectsBox(box) {
    return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
  }
  intersectsSphere(sphere) {
    this.clampPoint(sphere.center, _vector$1);
    return _vector$1.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
  }
  intersectsPlane(plane) {
    let min, max;
    if (plane.normal.x > 0) {
      min = plane.normal.x * this.min.x;
      max = plane.normal.x * this.max.x;
    } else {
      min = plane.normal.x * this.max.x;
      max = plane.normal.x * this.min.x;
    }
    if (plane.normal.y > 0) {
      min += plane.normal.y * this.min.y;
      max += plane.normal.y * this.max.y;
    } else {
      min += plane.normal.y * this.max.y;
      max += plane.normal.y * this.min.y;
    }
    if (plane.normal.z > 0) {
      min += plane.normal.z * this.min.z;
      max += plane.normal.z * this.max.z;
    } else {
      min += plane.normal.z * this.max.z;
      max += plane.normal.z * this.min.z;
    }
    return min <= -plane.constant && max >= -plane.constant;
  }
  intersectsTriangle(triangle) {
    if (this.isEmpty()) {
      return false;
    }
    this.getCenter(_center);
    _extents.subVectors(this.max, _center);
    _v0.subVectors(triangle.a, _center);
    _v1.subVectors(triangle.b, _center);
    _v2.subVectors(triangle.c, _center);
    _f0.subVectors(_v1, _v0);
    _f1.subVectors(_v2, _v1);
    _f2.subVectors(_v0, _v2);
    let axes = [
      0,
      -_f0.z,
      _f0.y,
      0,
      -_f1.z,
      _f1.y,
      0,
      -_f2.z,
      _f2.y,
      _f0.z,
      0,
      -_f0.x,
      _f1.z,
      0,
      -_f1.x,
      _f2.z,
      0,
      -_f2.x,
      -_f0.y,
      _f0.x,
      0,
      -_f1.y,
      _f1.x,
      0,
      -_f2.y,
      _f2.x,
      0
    ];
    if (!satForAxes(axes, _v0, _v1, _v2, _extents)) {
      return false;
    }
    axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    if (!satForAxes(axes, _v0, _v1, _v2, _extents)) {
      return false;
    }
    _triangleNormal.crossVectors(_f0, _f1);
    axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
    return satForAxes(axes, _v0, _v1, _v2, _extents);
  }
  clampPoint(point, target) {
    if (target === void 0) {
      console.warn("THREE.Box3: .clampPoint() target is now required");
      target = new Vector3();
    }
    return target.copy(point).clamp(this.min, this.max);
  }
  distanceToPoint(point) {
    const clampedPoint = _vector$1.copy(point).clamp(this.min, this.max);
    return clampedPoint.sub(point).length();
  }
  getBoundingSphere(target) {
    if (target === void 0) {
      console.error("THREE.Box3: .getBoundingSphere() target is now required");
    }
    this.getCenter(target.center);
    target.radius = this.getSize(_vector$1).length() * 0.5;
    return target;
  }
  intersect(box) {
    this.min.max(box.min);
    this.max.min(box.max);
    if (this.isEmpty())
      this.makeEmpty();
    return this;
  }
  union(box) {
    this.min.min(box.min);
    this.max.max(box.max);
    return this;
  }
  applyMatrix4(matrix) {
    if (this.isEmpty())
      return this;
    _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
    _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
    _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
    _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
    _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
    _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
    _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
    _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
    this.setFromPoints(_points);
    return this;
  }
  translate(offset) {
    this.min.add(offset);
    this.max.add(offset);
    return this;
  }
  equals(box) {
    return box.min.equals(this.min) && box.max.equals(this.max);
  }
}
function satForAxes(axes, v0, v1, v2, extents) {
  for (let i2 = 0, j2 = axes.length - 3; i2 <= j2; i2 += 3) {
    _testAxis.fromArray(axes, i2);
    const r2 = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
    const p0 = v0.dot(_testAxis);
    const p1 = v1.dot(_testAxis);
    const p2 = v2.dot(_testAxis);
    if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r2) {
      return false;
    }
  }
  return true;
}
const _points = [
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3(),
  /* @__PURE__ */ new Vector3()
];
const _vector$1 = /* @__PURE__ */ new Vector3();
const _box = /* @__PURE__ */ new Box3();
const _v0 = /* @__PURE__ */ new Vector3();
const _v1 = /* @__PURE__ */ new Vector3();
const _v2 = /* @__PURE__ */ new Vector3();
const _f0 = /* @__PURE__ */ new Vector3();
const _f1 = /* @__PURE__ */ new Vector3();
const _f2 = /* @__PURE__ */ new Vector3();
const _center = /* @__PURE__ */ new Vector3();
const _extents = /* @__PURE__ */ new Vector3();
const _triangleNormal = /* @__PURE__ */ new Vector3();
const _testAxis = /* @__PURE__ */ new Vector3();
const _box$1 = /* @__PURE__ */ new Box3();
class Sphere {
  constructor(center, radius) {
    this.center = center !== void 0 ? center : new Vector3();
    this.radius = radius !== void 0 ? radius : -1;
  }
  set(center, radius) {
    this.center.copy(center);
    this.radius = radius;
    return this;
  }
  setFromPoints(points, optionalCenter) {
    const center = this.center;
    if (optionalCenter !== void 0) {
      center.copy(optionalCenter);
    } else {
      _box$1.setFromPoints(points).getCenter(center);
    }
    let maxRadiusSq = 0;
    for (let i2 = 0, il = points.length; i2 < il; i2++) {
      maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i2]));
    }
    this.radius = Math.sqrt(maxRadiusSq);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(sphere) {
    this.center.copy(sphere.center);
    this.radius = sphere.radius;
    return this;
  }
  isEmpty() {
    return this.radius < 0;
  }
  makeEmpty() {
    this.center.set(0, 0, 0);
    this.radius = -1;
    return this;
  }
  containsPoint(point) {
    return point.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  distanceToPoint(point) {
    return point.distanceTo(this.center) - this.radius;
  }
  intersectsSphere(sphere) {
    const radiusSum = this.radius + sphere.radius;
    return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
  }
  intersectsBox(box) {
    return box.intersectsSphere(this);
  }
  intersectsPlane(plane) {
    return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
  }
  clampPoint(point, target) {
    const deltaLengthSq = this.center.distanceToSquared(point);
    if (target === void 0) {
      console.warn("THREE.Sphere: .clampPoint() target is now required");
      target = new Vector3();
    }
    target.copy(point);
    if (deltaLengthSq > this.radius * this.radius) {
      target.sub(this.center).normalize();
      target.multiplyScalar(this.radius).add(this.center);
    }
    return target;
  }
  getBoundingBox(target) {
    if (target === void 0) {
      console.warn("THREE.Sphere: .getBoundingBox() target is now required");
      target = new Box3();
    }
    if (this.isEmpty()) {
      target.makeEmpty();
      return target;
    }
    target.set(this.center, this.center);
    target.expandByScalar(this.radius);
    return target;
  }
  applyMatrix4(matrix) {
    this.center.applyMatrix4(matrix);
    this.radius = this.radius * matrix.getMaxScaleOnAxis();
    return this;
  }
  translate(offset) {
    this.center.add(offset);
    return this;
  }
  equals(sphere) {
    return sphere.center.equals(this.center) && sphere.radius === this.radius;
  }
}
const _vector$2 = /* @__PURE__ */ new Vector3();
const _segCenter = /* @__PURE__ */ new Vector3();
const _segDir = /* @__PURE__ */ new Vector3();
const _diff = /* @__PURE__ */ new Vector3();
const _edge1 = /* @__PURE__ */ new Vector3();
const _edge2 = /* @__PURE__ */ new Vector3();
const _normal = /* @__PURE__ */ new Vector3();
class Ray {
  constructor(origin, direction) {
    this.origin = origin !== void 0 ? origin : new Vector3();
    this.direction = direction !== void 0 ? direction : new Vector3(0, 0, -1);
  }
  set(origin, direction) {
    this.origin.copy(origin);
    this.direction.copy(direction);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(ray) {
    this.origin.copy(ray.origin);
    this.direction.copy(ray.direction);
    return this;
  }
  at(t3, target) {
    if (target === void 0) {
      console.warn("THREE.Ray: .at() target is now required");
      target = new Vector3();
    }
    return target.copy(this.direction).multiplyScalar(t3).add(this.origin);
  }
  lookAt(v2) {
    this.direction.copy(v2).sub(this.origin).normalize();
    return this;
  }
  recast(t3) {
    this.origin.copy(this.at(t3, _vector$2));
    return this;
  }
  closestPointToPoint(point, target) {
    if (target === void 0) {
      console.warn("THREE.Ray: .closestPointToPoint() target is now required");
      target = new Vector3();
    }
    target.subVectors(point, this.origin);
    const directionDistance = target.dot(this.direction);
    if (directionDistance < 0) {
      return target.copy(this.origin);
    }
    return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
  }
  distanceToPoint(point) {
    return Math.sqrt(this.distanceSqToPoint(point));
  }
  distanceSqToPoint(point) {
    const directionDistance = _vector$2.subVectors(point, this.origin).dot(this.direction);
    if (directionDistance < 0) {
      return this.origin.distanceToSquared(point);
    }
    _vector$2.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
    return _vector$2.distanceToSquared(point);
  }
  distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
    _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
    _segDir.copy(v1).sub(v0).normalize();
    _diff.copy(this.origin).sub(_segCenter);
    const segExtent = v0.distanceTo(v1) * 0.5;
    const a01 = -this.direction.dot(_segDir);
    const b0 = _diff.dot(this.direction);
    const b1 = -_diff.dot(_segDir);
    const c2 = _diff.lengthSq();
    const det = Math.abs(1 - a01 * a01);
    let s0, s1, sqrDist, extDet;
    if (det > 0) {
      s0 = a01 * b1 - b0;
      s1 = a01 * b0 - b1;
      extDet = segExtent * det;
      if (s0 >= 0) {
        if (s1 >= -extDet) {
          if (s1 <= extDet) {
            const invDet = 1 / det;
            s0 *= invDet;
            s1 *= invDet;
            sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c2;
          } else {
            s1 = segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c2;
          }
        } else {
          s1 = -segExtent;
          s0 = Math.max(0, -(a01 * s1 + b0));
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c2;
        }
      } else {
        if (s1 <= -extDet) {
          s0 = Math.max(0, -(-a01 * segExtent + b0));
          s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c2;
        } else if (s1 <= extDet) {
          s0 = 0;
          s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = s1 * (s1 + 2 * b1) + c2;
        } else {
          s0 = Math.max(0, -(a01 * segExtent + b0));
          s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c2;
        }
      }
    } else {
      s1 = a01 > 0 ? -segExtent : segExtent;
      s0 = Math.max(0, -(a01 * s1 + b0));
      sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c2;
    }
    if (optionalPointOnRay) {
      optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);
    }
    if (optionalPointOnSegment) {
      optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);
    }
    return sqrDist;
  }
  intersectSphere(sphere, target) {
    _vector$2.subVectors(sphere.center, this.origin);
    const tca = _vector$2.dot(this.direction);
    const d2 = _vector$2.dot(_vector$2) - tca * tca;
    const radius2 = sphere.radius * sphere.radius;
    if (d2 > radius2)
      return null;
    const thc = Math.sqrt(radius2 - d2);
    const t0 = tca - thc;
    const t1 = tca + thc;
    if (t0 < 0 && t1 < 0)
      return null;
    if (t0 < 0)
      return this.at(t1, target);
    return this.at(t0, target);
  }
  intersectsSphere(sphere) {
    return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
  }
  distanceToPlane(plane) {
    const denominator = plane.normal.dot(this.direction);
    if (denominator === 0) {
      if (plane.distanceToPoint(this.origin) === 0) {
        return 0;
      }
      return null;
    }
    const t3 = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
    return t3 >= 0 ? t3 : null;
  }
  intersectPlane(plane, target) {
    const t3 = this.distanceToPlane(plane);
    if (t3 === null) {
      return null;
    }
    return this.at(t3, target);
  }
  intersectsPlane(plane) {
    const distToPoint = plane.distanceToPoint(this.origin);
    if (distToPoint === 0) {
      return true;
    }
    const denominator = plane.normal.dot(this.direction);
    if (denominator * distToPoint < 0) {
      return true;
    }
    return false;
  }
  intersectBox(box, target) {
    let tmin, tmax, tymin, tymax, tzmin, tzmax;
    const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
    const origin = this.origin;
    if (invdirx >= 0) {
      tmin = (box.min.x - origin.x) * invdirx;
      tmax = (box.max.x - origin.x) * invdirx;
    } else {
      tmin = (box.max.x - origin.x) * invdirx;
      tmax = (box.min.x - origin.x) * invdirx;
    }
    if (invdiry >= 0) {
      tymin = (box.min.y - origin.y) * invdiry;
      tymax = (box.max.y - origin.y) * invdiry;
    } else {
      tymin = (box.max.y - origin.y) * invdiry;
      tymax = (box.min.y - origin.y) * invdiry;
    }
    if (tmin > tymax || tymin > tmax)
      return null;
    if (tymin > tmin || tmin !== tmin)
      tmin = tymin;
    if (tymax < tmax || tmax !== tmax)
      tmax = tymax;
    if (invdirz >= 0) {
      tzmin = (box.min.z - origin.z) * invdirz;
      tzmax = (box.max.z - origin.z) * invdirz;
    } else {
      tzmin = (box.max.z - origin.z) * invdirz;
      tzmax = (box.min.z - origin.z) * invdirz;
    }
    if (tmin > tzmax || tzmin > tmax)
      return null;
    if (tzmin > tmin || tmin !== tmin)
      tmin = tzmin;
    if (tzmax < tmax || tmax !== tmax)
      tmax = tzmax;
    if (tmax < 0)
      return null;
    return this.at(tmin >= 0 ? tmin : tmax, target);
  }
  intersectsBox(box) {
    return this.intersectBox(box, _vector$2) !== null;
  }
  intersectTriangle(a2, b2, c2, backfaceCulling, target) {
    _edge1.subVectors(b2, a2);
    _edge2.subVectors(c2, a2);
    _normal.crossVectors(_edge1, _edge2);
    let DdN = this.direction.dot(_normal);
    let sign2;
    if (DdN > 0) {
      if (backfaceCulling)
        return null;
      sign2 = 1;
    } else if (DdN < 0) {
      sign2 = -1;
      DdN = -DdN;
    } else {
      return null;
    }
    _diff.subVectors(this.origin, a2);
    const DdQxE2 = sign2 * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
    if (DdQxE2 < 0) {
      return null;
    }
    const DdE1xQ = sign2 * this.direction.dot(_edge1.cross(_diff));
    if (DdE1xQ < 0) {
      return null;
    }
    if (DdQxE2 + DdE1xQ > DdN) {
      return null;
    }
    const QdN = -sign2 * _diff.dot(_normal);
    if (QdN < 0) {
      return null;
    }
    return this.at(QdN / DdN, target);
  }
  applyMatrix4(matrix4) {
    this.origin.applyMatrix4(matrix4);
    this.direction.transformDirection(matrix4);
    return this;
  }
  equals(ray) {
    return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
  }
}
class Matrix4 {
  constructor() {
    Object.defineProperty(this, "isMatrix4", { value: true });
    this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ];
    if (arguments.length > 0) {
      console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
    }
  }
  set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
    const te2 = this.elements;
    te2[0] = n11;
    te2[4] = n12;
    te2[8] = n13;
    te2[12] = n14;
    te2[1] = n21;
    te2[5] = n22;
    te2[9] = n23;
    te2[13] = n24;
    te2[2] = n31;
    te2[6] = n32;
    te2[10] = n33;
    te2[14] = n34;
    te2[3] = n41;
    te2[7] = n42;
    te2[11] = n43;
    te2[15] = n44;
    return this;
  }
  identity() {
    this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  }
  clone() {
    return new Matrix4().fromArray(this.elements);
  }
  copy(m2) {
    const te2 = this.elements;
    const me2 = m2.elements;
    te2[0] = me2[0];
    te2[1] = me2[1];
    te2[2] = me2[2];
    te2[3] = me2[3];
    te2[4] = me2[4];
    te2[5] = me2[5];
    te2[6] = me2[6];
    te2[7] = me2[7];
    te2[8] = me2[8];
    te2[9] = me2[9];
    te2[10] = me2[10];
    te2[11] = me2[11];
    te2[12] = me2[12];
    te2[13] = me2[13];
    te2[14] = me2[14];
    te2[15] = me2[15];
    return this;
  }
  copyPosition(m2) {
    const te2 = this.elements, me2 = m2.elements;
    te2[12] = me2[12];
    te2[13] = me2[13];
    te2[14] = me2[14];
    return this;
  }
  extractBasis(xAxis, yAxis, zAxis) {
    xAxis.setFromMatrixColumn(this, 0);
    yAxis.setFromMatrixColumn(this, 1);
    zAxis.setFromMatrixColumn(this, 2);
    return this;
  }
  makeBasis(xAxis, yAxis, zAxis) {
    this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
    return this;
  }
  extractRotation(m2) {
    const te2 = this.elements;
    const me2 = m2.elements;
    const scaleX = 1 / _v1$1.setFromMatrixColumn(m2, 0).length();
    const scaleY = 1 / _v1$1.setFromMatrixColumn(m2, 1).length();
    const scaleZ = 1 / _v1$1.setFromMatrixColumn(m2, 2).length();
    te2[0] = me2[0] * scaleX;
    te2[1] = me2[1] * scaleX;
    te2[2] = me2[2] * scaleX;
    te2[3] = 0;
    te2[4] = me2[4] * scaleY;
    te2[5] = me2[5] * scaleY;
    te2[6] = me2[6] * scaleY;
    te2[7] = 0;
    te2[8] = me2[8] * scaleZ;
    te2[9] = me2[9] * scaleZ;
    te2[10] = me2[10] * scaleZ;
    te2[11] = 0;
    te2[12] = 0;
    te2[13] = 0;
    te2[14] = 0;
    te2[15] = 1;
    return this;
  }
  makeRotationFromEuler(euler) {
    if (!(euler && euler.isEuler)) {
      console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
    }
    const te2 = this.elements;
    const x2 = euler.x, y2 = euler.y, z2 = euler.z;
    const a2 = Math.cos(x2), b2 = Math.sin(x2);
    const c2 = Math.cos(y2), d = Math.sin(y2);
    const e2 = Math.cos(z2), f2 = Math.sin(z2);
    if (euler.order === "XYZ") {
      const ae2 = a2 * e2, af = a2 * f2, be2 = b2 * e2, bf = b2 * f2;
      te2[0] = c2 * e2;
      te2[4] = -c2 * f2;
      te2[8] = d;
      te2[1] = af + be2 * d;
      te2[5] = ae2 - bf * d;
      te2[9] = -b2 * c2;
      te2[2] = bf - ae2 * d;
      te2[6] = be2 + af * d;
      te2[10] = a2 * c2;
    } else if (euler.order === "YXZ") {
      const ce2 = c2 * e2, cf = c2 * f2, de2 = d * e2, df = d * f2;
      te2[0] = ce2 + df * b2;
      te2[4] = de2 * b2 - cf;
      te2[8] = a2 * d;
      te2[1] = a2 * f2;
      te2[5] = a2 * e2;
      te2[9] = -b2;
      te2[2] = cf * b2 - de2;
      te2[6] = df + ce2 * b2;
      te2[10] = a2 * c2;
    } else if (euler.order === "ZXY") {
      const ce2 = c2 * e2, cf = c2 * f2, de2 = d * e2, df = d * f2;
      te2[0] = ce2 - df * b2;
      te2[4] = -a2 * f2;
      te2[8] = de2 + cf * b2;
      te2[1] = cf + de2 * b2;
      te2[5] = a2 * e2;
      te2[9] = df - ce2 * b2;
      te2[2] = -a2 * d;
      te2[6] = b2;
      te2[10] = a2 * c2;
    } else if (euler.order === "ZYX") {
      const ae2 = a2 * e2, af = a2 * f2, be2 = b2 * e2, bf = b2 * f2;
      te2[0] = c2 * e2;
      te2[4] = be2 * d - af;
      te2[8] = ae2 * d + bf;
      te2[1] = c2 * f2;
      te2[5] = bf * d + ae2;
      te2[9] = af * d - be2;
      te2[2] = -d;
      te2[6] = b2 * c2;
      te2[10] = a2 * c2;
    } else if (euler.order === "YZX") {
      const ac = a2 * c2, ad = a2 * d, bc = b2 * c2, bd = b2 * d;
      te2[0] = c2 * e2;
      te2[4] = bd - ac * f2;
      te2[8] = bc * f2 + ad;
      te2[1] = f2;
      te2[5] = a2 * e2;
      te2[9] = -b2 * e2;
      te2[2] = -d * e2;
      te2[6] = ad * f2 + bc;
      te2[10] = ac - bd * f2;
    } else if (euler.order === "XZY") {
      const ac = a2 * c2, ad = a2 * d, bc = b2 * c2, bd = b2 * d;
      te2[0] = c2 * e2;
      te2[4] = -f2;
      te2[8] = d * e2;
      te2[1] = ac * f2 + bd;
      te2[5] = a2 * e2;
      te2[9] = ad * f2 - bc;
      te2[2] = bc * f2 - ad;
      te2[6] = b2 * e2;
      te2[10] = bd * f2 + ac;
    }
    te2[3] = 0;
    te2[7] = 0;
    te2[11] = 0;
    te2[12] = 0;
    te2[13] = 0;
    te2[14] = 0;
    te2[15] = 1;
    return this;
  }
  makeRotationFromQuaternion(q2) {
    return this.compose(_zero, q2, _one);
  }
  lookAt(eye, target, up) {
    const te2 = this.elements;
    _z.subVectors(eye, target);
    if (_z.lengthSq() === 0) {
      _z.z = 1;
    }
    _z.normalize();
    _x.crossVectors(up, _z);
    if (_x.lengthSq() === 0) {
      if (Math.abs(up.z) === 1) {
        _z.x += 1e-4;
      } else {
        _z.z += 1e-4;
      }
      _z.normalize();
      _x.crossVectors(up, _z);
    }
    _x.normalize();
    _y.crossVectors(_z, _x);
    te2[0] = _x.x;
    te2[4] = _y.x;
    te2[8] = _z.x;
    te2[1] = _x.y;
    te2[5] = _y.y;
    te2[9] = _z.y;
    te2[2] = _x.z;
    te2[6] = _y.z;
    te2[10] = _z.z;
    return this;
  }
  multiply(m2, n2) {
    if (n2 !== void 0) {
      console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.");
      return this.multiplyMatrices(m2, n2);
    }
    return this.multiplyMatrices(this, m2);
  }
  premultiply(m2) {
    return this.multiplyMatrices(m2, this);
  }
  multiplyMatrices(a2, b2) {
    const ae2 = a2.elements;
    const be2 = b2.elements;
    const te2 = this.elements;
    const a11 = ae2[0], a12 = ae2[4], a13 = ae2[8], a14 = ae2[12];
    const a21 = ae2[1], a22 = ae2[5], a23 = ae2[9], a24 = ae2[13];
    const a31 = ae2[2], a32 = ae2[6], a33 = ae2[10], a34 = ae2[14];
    const a41 = ae2[3], a42 = ae2[7], a43 = ae2[11], a44 = ae2[15];
    const b11 = be2[0], b12 = be2[4], b13 = be2[8], b14 = be2[12];
    const b21 = be2[1], b22 = be2[5], b23 = be2[9], b24 = be2[13];
    const b31 = be2[2], b32 = be2[6], b33 = be2[10], b34 = be2[14];
    const b41 = be2[3], b42 = be2[7], b43 = be2[11], b44 = be2[15];
    te2[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    te2[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    te2[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    te2[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    te2[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    te2[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    te2[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    te2[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    te2[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    te2[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    te2[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    te2[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    te2[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    te2[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    te2[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    te2[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
    return this;
  }
  multiplyScalar(s2) {
    const te2 = this.elements;
    te2[0] *= s2;
    te2[4] *= s2;
    te2[8] *= s2;
    te2[12] *= s2;
    te2[1] *= s2;
    te2[5] *= s2;
    te2[9] *= s2;
    te2[13] *= s2;
    te2[2] *= s2;
    te2[6] *= s2;
    te2[10] *= s2;
    te2[14] *= s2;
    te2[3] *= s2;
    te2[7] *= s2;
    te2[11] *= s2;
    te2[15] *= s2;
    return this;
  }
  determinant() {
    const te2 = this.elements;
    const n11 = te2[0], n12 = te2[4], n13 = te2[8], n14 = te2[12];
    const n21 = te2[1], n22 = te2[5], n23 = te2[9], n24 = te2[13];
    const n31 = te2[2], n32 = te2[6], n33 = te2[10], n34 = te2[14];
    const n41 = te2[3], n42 = te2[7], n43 = te2[11], n44 = te2[15];
    return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
  }
  transpose() {
    const te2 = this.elements;
    let tmp2;
    tmp2 = te2[1];
    te2[1] = te2[4];
    te2[4] = tmp2;
    tmp2 = te2[2];
    te2[2] = te2[8];
    te2[8] = tmp2;
    tmp2 = te2[6];
    te2[6] = te2[9];
    te2[9] = tmp2;
    tmp2 = te2[3];
    te2[3] = te2[12];
    te2[12] = tmp2;
    tmp2 = te2[7];
    te2[7] = te2[13];
    te2[13] = tmp2;
    tmp2 = te2[11];
    te2[11] = te2[14];
    te2[14] = tmp2;
    return this;
  }
  setPosition(x2, y2, z2) {
    const te2 = this.elements;
    if (x2.isVector3) {
      te2[12] = x2.x;
      te2[13] = x2.y;
      te2[14] = x2.z;
    } else {
      te2[12] = x2;
      te2[13] = y2;
      te2[14] = z2;
    }
    return this;
  }
  getInverse(m2, throwOnDegenerate) {
    if (throwOnDegenerate !== void 0) {
      console.warn("THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.");
    }
    const te2 = this.elements, me2 = m2.elements, n11 = me2[0], n21 = me2[1], n31 = me2[2], n41 = me2[3], n12 = me2[4], n22 = me2[5], n32 = me2[6], n42 = me2[7], n13 = me2[8], n23 = me2[9], n33 = me2[10], n43 = me2[11], n14 = me2[12], n24 = me2[13], n34 = me2[14], n44 = me2[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
    const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
    if (det === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const detInv = 1 / det;
    te2[0] = t11 * detInv;
    te2[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
    te2[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
    te2[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
    te2[4] = t12 * detInv;
    te2[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
    te2[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
    te2[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
    te2[8] = t13 * detInv;
    te2[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
    te2[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
    te2[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
    te2[12] = t14 * detInv;
    te2[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
    te2[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
    te2[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
    return this;
  }
  scale(v2) {
    const te2 = this.elements;
    const x2 = v2.x, y2 = v2.y, z2 = v2.z;
    te2[0] *= x2;
    te2[4] *= y2;
    te2[8] *= z2;
    te2[1] *= x2;
    te2[5] *= y2;
    te2[9] *= z2;
    te2[2] *= x2;
    te2[6] *= y2;
    te2[10] *= z2;
    te2[3] *= x2;
    te2[7] *= y2;
    te2[11] *= z2;
    return this;
  }
  getMaxScaleOnAxis() {
    const te2 = this.elements;
    const scaleXSq = te2[0] * te2[0] + te2[1] * te2[1] + te2[2] * te2[2];
    const scaleYSq = te2[4] * te2[4] + te2[5] * te2[5] + te2[6] * te2[6];
    const scaleZSq = te2[8] * te2[8] + te2[9] * te2[9] + te2[10] * te2[10];
    return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
  }
  makeTranslation(x2, y2, z2) {
    this.set(1, 0, 0, x2, 0, 1, 0, y2, 0, 0, 1, z2, 0, 0, 0, 1);
    return this;
  }
  makeRotationX(theta) {
    const c2 = Math.cos(theta), s2 = Math.sin(theta);
    this.set(1, 0, 0, 0, 0, c2, -s2, 0, 0, s2, c2, 0, 0, 0, 0, 1);
    return this;
  }
  makeRotationY(theta) {
    const c2 = Math.cos(theta), s2 = Math.sin(theta);
    this.set(c2, 0, s2, 0, 0, 1, 0, 0, -s2, 0, c2, 0, 0, 0, 0, 1);
    return this;
  }
  makeRotationZ(theta) {
    const c2 = Math.cos(theta), s2 = Math.sin(theta);
    this.set(c2, -s2, 0, 0, s2, c2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    return this;
  }
  makeRotationAxis(axis, angle) {
    const c2 = Math.cos(angle);
    const s2 = Math.sin(angle);
    const t3 = 1 - c2;
    const x2 = axis.x, y2 = axis.y, z2 = axis.z;
    const tx = t3 * x2, ty = t3 * y2;
    this.set(tx * x2 + c2, tx * y2 - s2 * z2, tx * z2 + s2 * y2, 0, tx * y2 + s2 * z2, ty * y2 + c2, ty * z2 - s2 * x2, 0, tx * z2 - s2 * y2, ty * z2 + s2 * x2, t3 * z2 * z2 + c2, 0, 0, 0, 0, 1);
    return this;
  }
  makeScale(x2, y2, z2) {
    this.set(x2, 0, 0, 0, 0, y2, 0, 0, 0, 0, z2, 0, 0, 0, 0, 1);
    return this;
  }
  makeShear(x2, y2, z2) {
    this.set(1, y2, z2, 0, x2, 1, z2, 0, x2, y2, 1, 0, 0, 0, 0, 1);
    return this;
  }
  compose(position, quaternion, scale) {
    const te2 = this.elements;
    const x2 = quaternion._x, y2 = quaternion._y, z2 = quaternion._z, w2 = quaternion._w;
    const x22 = x2 + x2, y22 = y2 + y2, z22 = z2 + z2;
    const xx = x2 * x22, xy = x2 * y22, xz = x2 * z22;
    const yy = y2 * y22, yz = y2 * z22, zz = z2 * z22;
    const wx = w2 * x22, wy = w2 * y22, wz = w2 * z22;
    const sx = scale.x, sy = scale.y, sz = scale.z;
    te2[0] = (1 - (yy + zz)) * sx;
    te2[1] = (xy + wz) * sx;
    te2[2] = (xz - wy) * sx;
    te2[3] = 0;
    te2[4] = (xy - wz) * sy;
    te2[5] = (1 - (xx + zz)) * sy;
    te2[6] = (yz + wx) * sy;
    te2[7] = 0;
    te2[8] = (xz + wy) * sz;
    te2[9] = (yz - wx) * sz;
    te2[10] = (1 - (xx + yy)) * sz;
    te2[11] = 0;
    te2[12] = position.x;
    te2[13] = position.y;
    te2[14] = position.z;
    te2[15] = 1;
    return this;
  }
  decompose(position, quaternion, scale) {
    const te2 = this.elements;
    let sx = _v1$1.set(te2[0], te2[1], te2[2]).length();
    const sy = _v1$1.set(te2[4], te2[5], te2[6]).length();
    const sz = _v1$1.set(te2[8], te2[9], te2[10]).length();
    const det = this.determinant();
    if (det < 0)
      sx = -sx;
    position.x = te2[12];
    position.y = te2[13];
    position.z = te2[14];
    _m1.copy(this);
    const invSX = 1 / sx;
    const invSY = 1 / sy;
    const invSZ = 1 / sz;
    _m1.elements[0] *= invSX;
    _m1.elements[1] *= invSX;
    _m1.elements[2] *= invSX;
    _m1.elements[4] *= invSY;
    _m1.elements[5] *= invSY;
    _m1.elements[6] *= invSY;
    _m1.elements[8] *= invSZ;
    _m1.elements[9] *= invSZ;
    _m1.elements[10] *= invSZ;
    quaternion.setFromRotationMatrix(_m1);
    scale.x = sx;
    scale.y = sy;
    scale.z = sz;
    return this;
  }
  makePerspective(left, right, top, bottom, near, far) {
    if (far === void 0) {
      console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
    }
    const te2 = this.elements;
    const x2 = 2 * near / (right - left);
    const y2 = 2 * near / (top - bottom);
    const a2 = (right + left) / (right - left);
    const b2 = (top + bottom) / (top - bottom);
    const c2 = -(far + near) / (far - near);
    const d = -2 * far * near / (far - near);
    te2[0] = x2;
    te2[4] = 0;
    te2[8] = a2;
    te2[12] = 0;
    te2[1] = 0;
    te2[5] = y2;
    te2[9] = b2;
    te2[13] = 0;
    te2[2] = 0;
    te2[6] = 0;
    te2[10] = c2;
    te2[14] = d;
    te2[3] = 0;
    te2[7] = 0;
    te2[11] = -1;
    te2[15] = 0;
    return this;
  }
  makeOrthographic(left, right, top, bottom, near, far) {
    const te2 = this.elements;
    const w2 = 1 / (right - left);
    const h = 1 / (top - bottom);
    const p2 = 1 / (far - near);
    const x2 = (right + left) * w2;
    const y2 = (top + bottom) * h;
    const z2 = (far + near) * p2;
    te2[0] = 2 * w2;
    te2[4] = 0;
    te2[8] = 0;
    te2[12] = -x2;
    te2[1] = 0;
    te2[5] = 2 * h;
    te2[9] = 0;
    te2[13] = -y2;
    te2[2] = 0;
    te2[6] = 0;
    te2[10] = -2 * p2;
    te2[14] = -z2;
    te2[3] = 0;
    te2[7] = 0;
    te2[11] = 0;
    te2[15] = 1;
    return this;
  }
  equals(matrix) {
    const te2 = this.elements;
    const me2 = matrix.elements;
    for (let i2 = 0; i2 < 16; i2++) {
      if (te2[i2] !== me2[i2])
        return false;
    }
    return true;
  }
  fromArray(array, offset = 0) {
    for (let i2 = 0; i2 < 16; i2++) {
      this.elements[i2] = array[i2 + offset];
    }
    return this;
  }
  toArray(array = [], offset = 0) {
    const te2 = this.elements;
    array[offset] = te2[0];
    array[offset + 1] = te2[1];
    array[offset + 2] = te2[2];
    array[offset + 3] = te2[3];
    array[offset + 4] = te2[4];
    array[offset + 5] = te2[5];
    array[offset + 6] = te2[6];
    array[offset + 7] = te2[7];
    array[offset + 8] = te2[8];
    array[offset + 9] = te2[9];
    array[offset + 10] = te2[10];
    array[offset + 11] = te2[11];
    array[offset + 12] = te2[12];
    array[offset + 13] = te2[13];
    array[offset + 14] = te2[14];
    array[offset + 15] = te2[15];
    return array;
  }
}
const _v1$1 = /* @__PURE__ */ new Vector3();
const _m1 = /* @__PURE__ */ new Matrix4();
const _zero = /* @__PURE__ */ new Vector3(0, 0, 0);
const _one = /* @__PURE__ */ new Vector3(1, 1, 1);
const _x = /* @__PURE__ */ new Vector3();
const _y = /* @__PURE__ */ new Vector3();
const _z = /* @__PURE__ */ new Vector3();
class Euler {
  constructor(x2 = 0, y2 = 0, z2 = 0, order = Euler.DefaultOrder) {
    Object.defineProperty(this, "isEuler", { value: true });
    this._x = x2;
    this._y = y2;
    this._z = z2;
    this._order = order;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
    this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
    this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(value) {
    this._z = value;
    this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(value) {
    this._order = value;
    this._onChangeCallback();
  }
  set(x2, y2, z2, order) {
    this._x = x2;
    this._y = y2;
    this._z = z2;
    this._order = order || this._order;
    this._onChangeCallback();
    return this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(euler) {
    this._x = euler._x;
    this._y = euler._y;
    this._z = euler._z;
    this._order = euler._order;
    this._onChangeCallback();
    return this;
  }
  setFromRotationMatrix(m2, order, update) {
    const clamp = MathUtils.clamp;
    const te2 = m2.elements;
    const m11 = te2[0], m12 = te2[4], m13 = te2[8];
    const m21 = te2[1], m22 = te2[5], m23 = te2[9];
    const m31 = te2[2], m32 = te2[6], m33 = te2[10];
    order = order || this._order;
    switch (order) {
      case "XYZ":
        this._y = Math.asin(clamp(m13, -1, 1));
        if (Math.abs(m13) < 0.9999999) {
          this._x = Math.atan2(-m23, m33);
          this._z = Math.atan2(-m12, m11);
        } else {
          this._x = Math.atan2(m32, m22);
          this._z = 0;
        }
        break;
      case "YXZ":
        this._x = Math.asin(-clamp(m23, -1, 1));
        if (Math.abs(m23) < 0.9999999) {
          this._y = Math.atan2(m13, m33);
          this._z = Math.atan2(m21, m22);
        } else {
          this._y = Math.atan2(-m31, m11);
          this._z = 0;
        }
        break;
      case "ZXY":
        this._x = Math.asin(clamp(m32, -1, 1));
        if (Math.abs(m32) < 0.9999999) {
          this._y = Math.atan2(-m31, m33);
          this._z = Math.atan2(-m12, m22);
        } else {
          this._y = 0;
          this._z = Math.atan2(m21, m11);
        }
        break;
      case "ZYX":
        this._y = Math.asin(-clamp(m31, -1, 1));
        if (Math.abs(m31) < 0.9999999) {
          this._x = Math.atan2(m32, m33);
          this._z = Math.atan2(m21, m11);
        } else {
          this._x = 0;
          this._z = Math.atan2(-m12, m22);
        }
        break;
      case "YZX":
        this._z = Math.asin(clamp(m21, -1, 1));
        if (Math.abs(m21) < 0.9999999) {
          this._x = Math.atan2(-m23, m22);
          this._y = Math.atan2(-m31, m11);
        } else {
          this._x = 0;
          this._y = Math.atan2(m13, m33);
        }
        break;
      case "XZY":
        this._z = Math.asin(-clamp(m12, -1, 1));
        if (Math.abs(m12) < 0.9999999) {
          this._x = Math.atan2(m32, m22);
          this._y = Math.atan2(m13, m11);
        } else {
          this._x = Math.atan2(-m23, m33);
          this._y = 0;
        }
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
    }
    this._order = order;
    if (update !== false)
      this._onChangeCallback();
    return this;
  }
  setFromQuaternion(q2, order, update) {
    _matrix.makeRotationFromQuaternion(q2);
    return this.setFromRotationMatrix(_matrix, order, update);
  }
  setFromVector3(v2, order) {
    return this.set(v2.x, v2.y, v2.z, order || this._order);
  }
  reorder(newOrder) {
    _quaternion$1.setFromEuler(this);
    return this.setFromQuaternion(_quaternion$1, newOrder);
  }
  equals(euler) {
    return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
  }
  fromArray(array) {
    this._x = array[0];
    this._y = array[1];
    this._z = array[2];
    if (array[3] !== void 0)
      this._order = array[3];
    this._onChangeCallback();
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this._x;
    array[offset + 1] = this._y;
    array[offset + 2] = this._z;
    array[offset + 3] = this._order;
    return array;
  }
  toVector3(optionalResult) {
    if (optionalResult) {
      return optionalResult.set(this._x, this._y, this._z);
    } else {
      return new Vector3(this._x, this._y, this._z);
    }
  }
  _onChange(callback) {
    this._onChangeCallback = callback;
    return this;
  }
  _onChangeCallback() {
  }
}
Euler.DefaultOrder = "XYZ";
Euler.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"];
const _matrix = /* @__PURE__ */ new Matrix4();
const _quaternion$1 = /* @__PURE__ */ new Quaternion();
class Layers {
  constructor() {
    this.mask = 1 | 0;
  }
  set(channel) {
    this.mask = 1 << channel | 0;
  }
  enable(channel) {
    this.mask |= 1 << channel | 0;
  }
  enableAll() {
    this.mask = 4294967295 | 0;
  }
  toggle(channel) {
    this.mask ^= 1 << channel | 0;
  }
  disable(channel) {
    this.mask &= ~(1 << channel | 0);
  }
  disableAll() {
    this.mask = 0;
  }
  test(layers) {
    return (this.mask & layers.mask) !== 0;
  }
}
let _object3DId = 0;
const _v1$2 = new Vector3();
const _q1 = new Quaternion();
const _m1$1 = new Matrix4();
const _target = new Vector3();
const _position = new Vector3();
const _scale = new Vector3();
const _quaternion$2 = new Quaternion();
const _xAxis = new Vector3(1, 0, 0);
const _yAxis = new Vector3(0, 1, 0);
const _zAxis = new Vector3(0, 0, 1);
const _addedEvent = { type: "added" };
const _removedEvent = { type: "removed" };
function Object3D() {
  Object.defineProperty(this, "id", { value: _object3DId++ });
  this.uuid = MathUtils.generateUUID();
  this.name = "";
  this.type = "Object3D";
  this.parent = null;
  this.children = [];
  this.up = Object3D.DefaultUp.clone();
  const position = new Vector3();
  const rotation = new Euler();
  const quaternion = new Quaternion();
  const scale = new Vector3(1, 1, 1);
  function onRotationChange() {
    quaternion.setFromEuler(rotation, false);
  }
  function onQuaternionChange() {
    rotation.setFromQuaternion(quaternion, void 0, false);
  }
  rotation._onChange(onRotationChange);
  quaternion._onChange(onQuaternionChange);
  Object.defineProperties(this, {
    position: {
      configurable: true,
      enumerable: true,
      value: position
    },
    rotation: {
      configurable: true,
      enumerable: true,
      value: rotation
    },
    quaternion: {
      configurable: true,
      enumerable: true,
      value: quaternion
    },
    scale: {
      configurable: true,
      enumerable: true,
      value: scale
    },
    modelViewMatrix: {
      value: new Matrix4()
    },
    normalMatrix: {
      value: new Matrix3()
    }
  });
  this.matrix = new Matrix4();
  this.matrixWorld = new Matrix4();
  this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
  this.matrixWorldNeedsUpdate = false;
  this.layers = new Layers();
  this.visible = true;
  this.castShadow = false;
  this.receiveShadow = false;
  this.frustumCulled = true;
  this.renderOrder = 0;
  this.userData = {};
}
Object3D.DefaultUp = new Vector3(0, 1, 0);
Object3D.DefaultMatrixAutoUpdate = true;
Object3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: Object3D,
  isObject3D: true,
  onBeforeRender: function() {
  },
  onAfterRender: function() {
  },
  applyMatrix4: function(matrix) {
    if (this.matrixAutoUpdate)
      this.updateMatrix();
    this.matrix.premultiply(matrix);
    this.matrix.decompose(this.position, this.quaternion, this.scale);
  },
  applyQuaternion: function(q2) {
    this.quaternion.premultiply(q2);
    return this;
  },
  setRotationFromAxisAngle: function(axis, angle) {
    this.quaternion.setFromAxisAngle(axis, angle);
  },
  setRotationFromEuler: function(euler) {
    this.quaternion.setFromEuler(euler, true);
  },
  setRotationFromMatrix: function(m2) {
    this.quaternion.setFromRotationMatrix(m2);
  },
  setRotationFromQuaternion: function(q2) {
    this.quaternion.copy(q2);
  },
  rotateOnAxis: function(axis, angle) {
    _q1.setFromAxisAngle(axis, angle);
    this.quaternion.multiply(_q1);
    return this;
  },
  rotateOnWorldAxis: function(axis, angle) {
    _q1.setFromAxisAngle(axis, angle);
    this.quaternion.premultiply(_q1);
    return this;
  },
  rotateX: function(angle) {
    return this.rotateOnAxis(_xAxis, angle);
  },
  rotateY: function(angle) {
    return this.rotateOnAxis(_yAxis, angle);
  },
  rotateZ: function(angle) {
    return this.rotateOnAxis(_zAxis, angle);
  },
  translateOnAxis: function(axis, distance) {
    _v1$2.copy(axis).applyQuaternion(this.quaternion);
    this.position.add(_v1$2.multiplyScalar(distance));
    return this;
  },
  translateX: function(distance) {
    return this.translateOnAxis(_xAxis, distance);
  },
  translateY: function(distance) {
    return this.translateOnAxis(_yAxis, distance);
  },
  translateZ: function(distance) {
    return this.translateOnAxis(_zAxis, distance);
  },
  localToWorld: function(vector) {
    return vector.applyMatrix4(this.matrixWorld);
  },
  worldToLocal: function(vector) {
    return vector.applyMatrix4(_m1$1.getInverse(this.matrixWorld));
  },
  lookAt: function(x2, y2, z2) {
    if (x2.isVector3) {
      _target.copy(x2);
    } else {
      _target.set(x2, y2, z2);
    }
    const parent = this.parent;
    this.updateWorldMatrix(true, false);
    _position.setFromMatrixPosition(this.matrixWorld);
    if (this.isCamera || this.isLight) {
      _m1$1.lookAt(_position, _target, this.up);
    } else {
      _m1$1.lookAt(_target, _position, this.up);
    }
    this.quaternion.setFromRotationMatrix(_m1$1);
    if (parent) {
      _m1$1.extractRotation(parent.matrixWorld);
      _q1.setFromRotationMatrix(_m1$1);
      this.quaternion.premultiply(_q1.inverse());
    }
  },
  add: function(object) {
    if (arguments.length > 1) {
      for (let i2 = 0; i2 < arguments.length; i2++) {
        this.add(arguments[i2]);
      }
      return this;
    }
    if (object === this) {
      console.error("THREE.Object3D.add: object can't be added as a child of itself.", object);
      return this;
    }
    if (object && object.isObject3D) {
      if (object.parent !== null) {
        object.parent.remove(object);
      }
      object.parent = this;
      this.children.push(object);
      object.dispatchEvent(_addedEvent);
    } else {
      console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object);
    }
    return this;
  },
  remove: function(object) {
    if (arguments.length > 1) {
      for (let i2 = 0; i2 < arguments.length; i2++) {
        this.remove(arguments[i2]);
      }
      return this;
    }
    const index = this.children.indexOf(object);
    if (index !== -1) {
      object.parent = null;
      this.children.splice(index, 1);
      object.dispatchEvent(_removedEvent);
    }
    return this;
  },
  clear: function() {
    for (let i2 = 0; i2 < this.children.length; i2++) {
      const object = this.children[i2];
      object.parent = null;
      object.dispatchEvent(_removedEvent);
    }
    this.children.length = 0;
    return this;
  },
  attach: function(object) {
    this.updateWorldMatrix(true, false);
    _m1$1.getInverse(this.matrixWorld);
    if (object.parent !== null) {
      object.parent.updateWorldMatrix(true, false);
      _m1$1.multiply(object.parent.matrixWorld);
    }
    object.applyMatrix4(_m1$1);
    object.updateWorldMatrix(false, false);
    this.add(object);
    return this;
  },
  getObjectById: function(id) {
    return this.getObjectByProperty("id", id);
  },
  getObjectByName: function(name) {
    return this.getObjectByProperty("name", name);
  },
  getObjectByProperty: function(name, value) {
    if (this[name] === value)
      return this;
    for (let i2 = 0, l2 = this.children.length; i2 < l2; i2++) {
      const child = this.children[i2];
      const object = child.getObjectByProperty(name, value);
      if (object !== void 0) {
        return object;
      }
    }
    return void 0;
  },
  getWorldPosition: function(target) {
    if (target === void 0) {
      console.warn("THREE.Object3D: .getWorldPosition() target is now required");
      target = new Vector3();
    }
    this.updateWorldMatrix(true, false);
    return target.setFromMatrixPosition(this.matrixWorld);
  },
  getWorldQuaternion: function(target) {
    if (target === void 0) {
      console.warn("THREE.Object3D: .getWorldQuaternion() target is now required");
      target = new Quaternion();
    }
    this.updateWorldMatrix(true, false);
    this.matrixWorld.decompose(_position, target, _scale);
    return target;
  },
  getWorldScale: function(target) {
    if (target === void 0) {
      console.warn("THREE.Object3D: .getWorldScale() target is now required");
      target = new Vector3();
    }
    this.updateWorldMatrix(true, false);
    this.matrixWorld.decompose(_position, _quaternion$2, target);
    return target;
  },
  getWorldDirection: function(target) {
    if (target === void 0) {
      console.warn("THREE.Object3D: .getWorldDirection() target is now required");
      target = new Vector3();
    }
    this.updateWorldMatrix(true, false);
    const e2 = this.matrixWorld.elements;
    return target.set(e2[8], e2[9], e2[10]).normalize();
  },
  raycast: function() {
  },
  traverse: function(callback) {
    callback(this);
    const children = this.children;
    for (let i2 = 0, l2 = children.length; i2 < l2; i2++) {
      children[i2].traverse(callback);
    }
  },
  traverseVisible: function(callback) {
    if (this.visible === false)
      return;
    callback(this);
    const children = this.children;
    for (let i2 = 0, l2 = children.length; i2 < l2; i2++) {
      children[i2].traverseVisible(callback);
    }
  },
  traverseAncestors: function(callback) {
    const parent = this.parent;
    if (parent !== null) {
      callback(parent);
      parent.traverseAncestors(callback);
    }
  },
  updateMatrix: function() {
    this.matrix.compose(this.position, this.quaternion, this.scale);
    this.matrixWorldNeedsUpdate = true;
  },
  updateMatrixWorld: function(force) {
    if (this.matrixAutoUpdate)
      this.updateMatrix();
    if (this.matrixWorldNeedsUpdate || force) {
      if (this.parent === null) {
        this.matrixWorld.copy(this.matrix);
      } else {
        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
      }
      this.matrixWorldNeedsUpdate = false;
      force = true;
    }
    const children = this.children;
    for (let i2 = 0, l2 = children.length; i2 < l2; i2++) {
      children[i2].updateMatrixWorld(force);
    }
  },
  updateWorldMatrix: function(updateParents, updateChildren) {
    const parent = this.parent;
    if (updateParents === true && parent !== null) {
      parent.updateWorldMatrix(true, false);
    }
    if (this.matrixAutoUpdate)
      this.updateMatrix();
    if (this.parent === null) {
      this.matrixWorld.copy(this.matrix);
    } else {
      this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
    }
    if (updateChildren === true) {
      const children = this.children;
      for (let i2 = 0, l2 = children.length; i2 < l2; i2++) {
        children[i2].updateWorldMatrix(false, true);
      }
    }
  },
  toJSON: function(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    const output = {};
    if (isRootObject) {
      meta = {
        geometries: {},
        materials: {},
        textures: {},
        images: {},
        shapes: {}
      };
      output.metadata = {
        version: 4.5,
        type: "Object",
        generator: "Object3D.toJSON"
      };
    }
    const object = {};
    object.uuid = this.uuid;
    object.type = this.type;
    if (this.name !== "")
      object.name = this.name;
    if (this.castShadow === true)
      object.castShadow = true;
    if (this.receiveShadow === true)
      object.receiveShadow = true;
    if (this.visible === false)
      object.visible = false;
    if (this.frustumCulled === false)
      object.frustumCulled = false;
    if (this.renderOrder !== 0)
      object.renderOrder = this.renderOrder;
    if (JSON.stringify(this.userData) !== "{}")
      object.userData = this.userData;
    object.layers = this.layers.mask;
    object.matrix = this.matrix.toArray();
    if (this.matrixAutoUpdate === false)
      object.matrixAutoUpdate = false;
    if (this.isInstancedMesh) {
      object.type = "InstancedMesh";
      object.count = this.count;
      object.instanceMatrix = this.instanceMatrix.toJSON();
    }
    function serialize(library, element) {
      if (library[element.uuid] === void 0) {
        library[element.uuid] = element.toJSON(meta);
      }
      return element.uuid;
    }
    if (this.isMesh || this.isLine || this.isPoints) {
      object.geometry = serialize(meta.geometries, this.geometry);
      const parameters = this.geometry.parameters;
      if (parameters !== void 0 && parameters.shapes !== void 0) {
        const shapes = parameters.shapes;
        if (Array.isArray(shapes)) {
          for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
            const shape = shapes[i2];
            serialize(meta.shapes, shape);
          }
        } else {
          serialize(meta.shapes, shapes);
        }
      }
    }
    if (this.material !== void 0) {
      if (Array.isArray(this.material)) {
        const uuids = [];
        for (let i2 = 0, l2 = this.material.length; i2 < l2; i2++) {
          uuids.push(serialize(meta.materials, this.material[i2]));
        }
        object.material = uuids;
      } else {
        object.material = serialize(meta.materials, this.material);
      }
    }
    if (this.children.length > 0) {
      object.children = [];
      for (let i2 = 0; i2 < this.children.length; i2++) {
        object.children.push(this.children[i2].toJSON(meta).object);
      }
    }
    if (isRootObject) {
      const geometries = extractFromCache(meta.geometries);
      const materials = extractFromCache(meta.materials);
      const textures = extractFromCache(meta.textures);
      const images = extractFromCache(meta.images);
      const shapes = extractFromCache(meta.shapes);
      if (geometries.length > 0)
        output.geometries = geometries;
      if (materials.length > 0)
        output.materials = materials;
      if (textures.length > 0)
        output.textures = textures;
      if (images.length > 0)
        output.images = images;
      if (shapes.length > 0)
        output.shapes = shapes;
    }
    output.object = object;
    return output;
    function extractFromCache(cache) {
      const values = [];
      for (const key in cache) {
        const data = cache[key];
        delete data.metadata;
        values.push(data);
      }
      return values;
    }
  },
  clone: function(recursive) {
    return new this.constructor().copy(this, recursive);
  },
  copy: function(source, recursive) {
    if (recursive === void 0)
      recursive = true;
    this.name = source.name;
    this.up.copy(source.up);
    this.position.copy(source.position);
    this.rotation.order = source.rotation.order;
    this.quaternion.copy(source.quaternion);
    this.scale.copy(source.scale);
    this.matrix.copy(source.matrix);
    this.matrixWorld.copy(source.matrixWorld);
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
    this.layers.mask = source.layers.mask;
    this.visible = source.visible;
    this.castShadow = source.castShadow;
    this.receiveShadow = source.receiveShadow;
    this.frustumCulled = source.frustumCulled;
    this.renderOrder = source.renderOrder;
    this.userData = JSON.parse(JSON.stringify(source.userData));
    if (recursive === true) {
      for (let i2 = 0; i2 < source.children.length; i2++) {
        const child = source.children[i2];
        this.add(child.clone());
      }
    }
    return this;
  }
});
const _vector1 = /* @__PURE__ */ new Vector3();
const _vector2 = /* @__PURE__ */ new Vector3();
const _normalMatrix = /* @__PURE__ */ new Matrix3();
class Plane {
  constructor(normal, constant) {
    Object.defineProperty(this, "isPlane", { value: true });
    this.normal = normal !== void 0 ? normal : new Vector3(1, 0, 0);
    this.constant = constant !== void 0 ? constant : 0;
  }
  set(normal, constant) {
    this.normal.copy(normal);
    this.constant = constant;
    return this;
  }
  setComponents(x2, y2, z2, w2) {
    this.normal.set(x2, y2, z2);
    this.constant = w2;
    return this;
  }
  setFromNormalAndCoplanarPoint(normal, point) {
    this.normal.copy(normal);
    this.constant = -point.dot(this.normal);
    return this;
  }
  setFromCoplanarPoints(a2, b2, c2) {
    const normal = _vector1.subVectors(c2, b2).cross(_vector2.subVectors(a2, b2)).normalize();
    this.setFromNormalAndCoplanarPoint(normal, a2);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(plane) {
    this.normal.copy(plane.normal);
    this.constant = plane.constant;
    return this;
  }
  normalize() {
    const inverseNormalLength = 1 / this.normal.length();
    this.normal.multiplyScalar(inverseNormalLength);
    this.constant *= inverseNormalLength;
    return this;
  }
  negate() {
    this.constant *= -1;
    this.normal.negate();
    return this;
  }
  distanceToPoint(point) {
    return this.normal.dot(point) + this.constant;
  }
  distanceToSphere(sphere) {
    return this.distanceToPoint(sphere.center) - sphere.radius;
  }
  projectPoint(point, target) {
    if (target === void 0) {
      console.warn("THREE.Plane: .projectPoint() target is now required");
      target = new Vector3();
    }
    return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);
  }
  intersectLine(line, target) {
    if (target === void 0) {
      console.warn("THREE.Plane: .intersectLine() target is now required");
      target = new Vector3();
    }
    const direction = line.delta(_vector1);
    const denominator = this.normal.dot(direction);
    if (denominator === 0) {
      if (this.distanceToPoint(line.start) === 0) {
        return target.copy(line.start);
      }
      return void 0;
    }
    const t3 = -(line.start.dot(this.normal) + this.constant) / denominator;
    if (t3 < 0 || t3 > 1) {
      return void 0;
    }
    return target.copy(direction).multiplyScalar(t3).add(line.start);
  }
  intersectsLine(line) {
    const startSign = this.distanceToPoint(line.start);
    const endSign = this.distanceToPoint(line.end);
    return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
  }
  intersectsBox(box) {
    return box.intersectsPlane(this);
  }
  intersectsSphere(sphere) {
    return sphere.intersectsPlane(this);
  }
  coplanarPoint(target) {
    if (target === void 0) {
      console.warn("THREE.Plane: .coplanarPoint() target is now required");
      target = new Vector3();
    }
    return target.copy(this.normal).multiplyScalar(-this.constant);
  }
  applyMatrix4(matrix, optionalNormalMatrix) {
    const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
    const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
    const normal = this.normal.applyMatrix3(normalMatrix).normalize();
    this.constant = -referencePoint.dot(normal);
    return this;
  }
  translate(offset) {
    this.constant -= offset.dot(this.normal);
    return this;
  }
  equals(plane) {
    return plane.normal.equals(this.normal) && plane.constant === this.constant;
  }
}
const _v0$1 = /* @__PURE__ */ new Vector3();
const _v1$3 = /* @__PURE__ */ new Vector3();
const _v2$1 = /* @__PURE__ */ new Vector3();
const _v3 = /* @__PURE__ */ new Vector3();
const _vab = /* @__PURE__ */ new Vector3();
const _vac = /* @__PURE__ */ new Vector3();
const _vbc = /* @__PURE__ */ new Vector3();
const _vap = /* @__PURE__ */ new Vector3();
const _vbp = /* @__PURE__ */ new Vector3();
const _vcp = /* @__PURE__ */ new Vector3();
class Triangle {
  constructor(a2, b2, c2) {
    this.a = a2 !== void 0 ? a2 : new Vector3();
    this.b = b2 !== void 0 ? b2 : new Vector3();
    this.c = c2 !== void 0 ? c2 : new Vector3();
  }
  static getNormal(a2, b2, c2, target) {
    if (target === void 0) {
      console.warn("THREE.Triangle: .getNormal() target is now required");
      target = new Vector3();
    }
    target.subVectors(c2, b2);
    _v0$1.subVectors(a2, b2);
    target.cross(_v0$1);
    const targetLengthSq = target.lengthSq();
    if (targetLengthSq > 0) {
      return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
    }
    return target.set(0, 0, 0);
  }
  static getBarycoord(point, a2, b2, c2, target) {
    _v0$1.subVectors(c2, a2);
    _v1$3.subVectors(b2, a2);
    _v2$1.subVectors(point, a2);
    const dot00 = _v0$1.dot(_v0$1);
    const dot01 = _v0$1.dot(_v1$3);
    const dot02 = _v0$1.dot(_v2$1);
    const dot11 = _v1$3.dot(_v1$3);
    const dot12 = _v1$3.dot(_v2$1);
    const denom = dot00 * dot11 - dot01 * dot01;
    if (target === void 0) {
      console.warn("THREE.Triangle: .getBarycoord() target is now required");
      target = new Vector3();
    }
    if (denom === 0) {
      return target.set(-2, -1, -1);
    }
    const invDenom = 1 / denom;
    const u2 = (dot11 * dot02 - dot01 * dot12) * invDenom;
    const v2 = (dot00 * dot12 - dot01 * dot02) * invDenom;
    return target.set(1 - u2 - v2, v2, u2);
  }
  static containsPoint(point, a2, b2, c2) {
    this.getBarycoord(point, a2, b2, c2, _v3);
    return _v3.x >= 0 && _v3.y >= 0 && _v3.x + _v3.y <= 1;
  }
  static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {
    this.getBarycoord(point, p1, p2, p3, _v3);
    target.set(0, 0);
    target.addScaledVector(uv1, _v3.x);
    target.addScaledVector(uv2, _v3.y);
    target.addScaledVector(uv3, _v3.z);
    return target;
  }
  static isFrontFacing(a2, b2, c2, direction) {
    _v0$1.subVectors(c2, b2);
    _v1$3.subVectors(a2, b2);
    return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;
  }
  set(a2, b2, c2) {
    this.a.copy(a2);
    this.b.copy(b2);
    this.c.copy(c2);
    return this;
  }
  setFromPointsAndIndices(points, i0, i1, i2) {
    this.a.copy(points[i0]);
    this.b.copy(points[i1]);
    this.c.copy(points[i2]);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(triangle) {
    this.a.copy(triangle.a);
    this.b.copy(triangle.b);
    this.c.copy(triangle.c);
    return this;
  }
  getArea() {
    _v0$1.subVectors(this.c, this.b);
    _v1$3.subVectors(this.a, this.b);
    return _v0$1.cross(_v1$3).length() * 0.5;
  }
  getMidpoint(target) {
    if (target === void 0) {
      console.warn("THREE.Triangle: .getMidpoint() target is now required");
      target = new Vector3();
    }
    return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  getNormal(target) {
    return Triangle.getNormal(this.a, this.b, this.c, target);
  }
  getPlane(target) {
    if (target === void 0) {
      console.warn("THREE.Triangle: .getPlane() target is now required");
      target = new Plane();
    }
    return target.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  getBarycoord(point, target) {
    return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
  }
  getUV(point, uv1, uv2, uv3, target) {
    return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
  }
  containsPoint(point) {
    return Triangle.containsPoint(point, this.a, this.b, this.c);
  }
  isFrontFacing(direction) {
    return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
  }
  intersectsBox(box) {
    return box.intersectsTriangle(this);
  }
  closestPointToPoint(p2, target) {
    if (target === void 0) {
      console.warn("THREE.Triangle: .closestPointToPoint() target is now required");
      target = new Vector3();
    }
    const a2 = this.a, b2 = this.b, c2 = this.c;
    let v2, w2;
    _vab.subVectors(b2, a2);
    _vac.subVectors(c2, a2);
    _vap.subVectors(p2, a2);
    const d1 = _vab.dot(_vap);
    const d2 = _vac.dot(_vap);
    if (d1 <= 0 && d2 <= 0) {
      return target.copy(a2);
    }
    _vbp.subVectors(p2, b2);
    const d3 = _vab.dot(_vbp);
    const d4 = _vac.dot(_vbp);
    if (d3 >= 0 && d4 <= d3) {
      return target.copy(b2);
    }
    const vc = d1 * d4 - d3 * d2;
    if (vc <= 0 && d1 >= 0 && d3 <= 0) {
      v2 = d1 / (d1 - d3);
      return target.copy(a2).addScaledVector(_vab, v2);
    }
    _vcp.subVectors(p2, c2);
    const d5 = _vab.dot(_vcp);
    const d6 = _vac.dot(_vcp);
    if (d6 >= 0 && d5 <= d6) {
      return target.copy(c2);
    }
    const vb = d5 * d2 - d1 * d6;
    if (vb <= 0 && d2 >= 0 && d6 <= 0) {
      w2 = d2 / (d2 - d6);
      return target.copy(a2).addScaledVector(_vac, w2);
    }
    const va2 = d3 * d6 - d5 * d4;
    if (va2 <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
      _vbc.subVectors(c2, b2);
      w2 = (d4 - d3) / (d4 - d3 + (d5 - d6));
      return target.copy(b2).addScaledVector(_vbc, w2);
    }
    const denom = 1 / (va2 + vb + vc);
    v2 = vb * denom;
    w2 = vc * denom;
    return target.copy(a2).addScaledVector(_vab, v2).addScaledVector(_vac, w2);
  }
  equals(triangle) {
    return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
  }
}
const _colorKeywords = {
  "aliceblue": 15792383,
  "antiquewhite": 16444375,
  "aqua": 65535,
  "aquamarine": 8388564,
  "azure": 15794175,
  "beige": 16119260,
  "bisque": 16770244,
  "black": 0,
  "blanchedalmond": 16772045,
  "blue": 255,
  "blueviolet": 9055202,
  "brown": 10824234,
  "burlywood": 14596231,
  "cadetblue": 6266528,
  "chartreuse": 8388352,
  "chocolate": 13789470,
  "coral": 16744272,
  "cornflowerblue": 6591981,
  "cornsilk": 16775388,
  "crimson": 14423100,
  "cyan": 65535,
  "darkblue": 139,
  "darkcyan": 35723,
  "darkgoldenrod": 12092939,
  "darkgray": 11119017,
  "darkgreen": 25600,
  "darkgrey": 11119017,
  "darkkhaki": 12433259,
  "darkmagenta": 9109643,
  "darkolivegreen": 5597999,
  "darkorange": 16747520,
  "darkorchid": 10040012,
  "darkred": 9109504,
  "darksalmon": 15308410,
  "darkseagreen": 9419919,
  "darkslateblue": 4734347,
  "darkslategray": 3100495,
  "darkslategrey": 3100495,
  "darkturquoise": 52945,
  "darkviolet": 9699539,
  "deeppink": 16716947,
  "deepskyblue": 49151,
  "dimgray": 6908265,
  "dimgrey": 6908265,
  "dodgerblue": 2003199,
  "firebrick": 11674146,
  "floralwhite": 16775920,
  "forestgreen": 2263842,
  "fuchsia": 16711935,
  "gainsboro": 14474460,
  "ghostwhite": 16316671,
  "gold": 16766720,
  "goldenrod": 14329120,
  "gray": 8421504,
  "green": 32768,
  "greenyellow": 11403055,
  "grey": 8421504,
  "honeydew": 15794160,
  "hotpink": 16738740,
  "indianred": 13458524,
  "indigo": 4915330,
  "ivory": 16777200,
  "khaki": 15787660,
  "lavender": 15132410,
  "lavenderblush": 16773365,
  "lawngreen": 8190976,
  "lemonchiffon": 16775885,
  "lightblue": 11393254,
  "lightcoral": 15761536,
  "lightcyan": 14745599,
  "lightgoldenrodyellow": 16448210,
  "lightgray": 13882323,
  "lightgreen": 9498256,
  "lightgrey": 13882323,
  "lightpink": 16758465,
  "lightsalmon": 16752762,
  "lightseagreen": 2142890,
  "lightskyblue": 8900346,
  "lightslategray": 7833753,
  "lightslategrey": 7833753,
  "lightsteelblue": 11584734,
  "lightyellow": 16777184,
  "lime": 65280,
  "limegreen": 3329330,
  "linen": 16445670,
  "magenta": 16711935,
  "maroon": 8388608,
  "mediumaquamarine": 6737322,
  "mediumblue": 205,
  "mediumorchid": 12211667,
  "mediumpurple": 9662683,
  "mediumseagreen": 3978097,
  "mediumslateblue": 8087790,
  "mediumspringgreen": 64154,
  "mediumturquoise": 4772300,
  "mediumvioletred": 13047173,
  "midnightblue": 1644912,
  "mintcream": 16121850,
  "mistyrose": 16770273,
  "moccasin": 16770229,
  "navajowhite": 16768685,
  "navy": 128,
  "oldlace": 16643558,
  "olive": 8421376,
  "olivedrab": 7048739,
  "orange": 16753920,
  "orangered": 16729344,
  "orchid": 14315734,
  "palegoldenrod": 15657130,
  "palegreen": 10025880,
  "paleturquoise": 11529966,
  "palevioletred": 14381203,
  "papayawhip": 16773077,
  "peachpuff": 16767673,
  "peru": 13468991,
  "pink": 16761035,
  "plum": 14524637,
  "powderblue": 11591910,
  "purple": 8388736,
  "rebeccapurple": 6697881,
  "red": 16711680,
  "rosybrown": 12357519,
  "royalblue": 4286945,
  "saddlebrown": 9127187,
  "salmon": 16416882,
  "sandybrown": 16032864,
  "seagreen": 3050327,
  "seashell": 16774638,
  "sienna": 10506797,
  "silver": 12632256,
  "skyblue": 8900331,
  "slateblue": 6970061,
  "slategray": 7372944,
  "slategrey": 7372944,
  "snow": 16775930,
  "springgreen": 65407,
  "steelblue": 4620980,
  "tan": 13808780,
  "teal": 32896,
  "thistle": 14204888,
  "tomato": 16737095,
  "turquoise": 4251856,
  "violet": 15631086,
  "wheat": 16113331,
  "white": 16777215,
  "whitesmoke": 16119285,
  "yellow": 16776960,
  "yellowgreen": 10145074
};
const _hslA = { h: 0, s: 0, l: 0 };
const _hslB = { h: 0, s: 0, l: 0 };
function hue2rgb(p2, q2, t3) {
  if (t3 < 0)
    t3 += 1;
  if (t3 > 1)
    t3 -= 1;
  if (t3 < 1 / 6)
    return p2 + (q2 - p2) * 6 * t3;
  if (t3 < 1 / 2)
    return q2;
  if (t3 < 2 / 3)
    return p2 + (q2 - p2) * 6 * (2 / 3 - t3);
  return p2;
}
function SRGBToLinear(c2) {
  return c2 < 0.04045 ? c2 * 0.0773993808 : Math.pow(c2 * 0.9478672986 + 0.0521327014, 2.4);
}
function LinearToSRGB(c2) {
  return c2 < 31308e-7 ? c2 * 12.92 : 1.055 * Math.pow(c2, 0.41666) - 0.055;
}
class Color {
  constructor(r2, g2, b2) {
    Object.defineProperty(this, "isColor", { value: true });
    if (g2 === void 0 && b2 === void 0) {
      return this.set(r2);
    }
    return this.setRGB(r2, g2, b2);
  }
  set(value) {
    if (value && value.isColor) {
      this.copy(value);
    } else if (typeof value === "number") {
      this.setHex(value);
    } else if (typeof value === "string") {
      this.setStyle(value);
    }
    return this;
  }
  setScalar(scalar) {
    this.r = scalar;
    this.g = scalar;
    this.b = scalar;
    return this;
  }
  setHex(hex) {
    hex = Math.floor(hex);
    this.r = (hex >> 16 & 255) / 255;
    this.g = (hex >> 8 & 255) / 255;
    this.b = (hex & 255) / 255;
    return this;
  }
  setRGB(r2, g2, b2) {
    this.r = r2;
    this.g = g2;
    this.b = b2;
    return this;
  }
  setHSL(h, s2, l2) {
    h = MathUtils.euclideanModulo(h, 1);
    s2 = MathUtils.clamp(s2, 0, 1);
    l2 = MathUtils.clamp(l2, 0, 1);
    if (s2 === 0) {
      this.r = this.g = this.b = l2;
    } else {
      const p2 = l2 <= 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
      const q2 = 2 * l2 - p2;
      this.r = hue2rgb(q2, p2, h + 1 / 3);
      this.g = hue2rgb(q2, p2, h);
      this.b = hue2rgb(q2, p2, h - 1 / 3);
    }
    return this;
  }
  setStyle(style) {
    function handleAlpha(string) {
      if (string === void 0)
        return;
      if (parseFloat(string) < 1) {
        console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
      }
    }
    let m2;
    if (m2 = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(style)) {
      let color;
      const name = m2[1];
      const components = m2[2];
      switch (name) {
        case "rgb":
        case "rgba":
          if (color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
            this.r = Math.min(255, parseInt(color[1], 10)) / 255;
            this.g = Math.min(255, parseInt(color[2], 10)) / 255;
            this.b = Math.min(255, parseInt(color[3], 10)) / 255;
            handleAlpha(color[5]);
            return this;
          }
          if (color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
            this.r = Math.min(100, parseInt(color[1], 10)) / 100;
            this.g = Math.min(100, parseInt(color[2], 10)) / 100;
            this.b = Math.min(100, parseInt(color[3], 10)) / 100;
            handleAlpha(color[5]);
            return this;
          }
          break;
        case "hsl":
        case "hsla":
          if (color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)) {
            const h = parseFloat(color[1]) / 360;
            const s2 = parseInt(color[2], 10) / 100;
            const l2 = parseInt(color[3], 10) / 100;
            handleAlpha(color[5]);
            return this.setHSL(h, s2, l2);
          }
          break;
      }
    } else if (m2 = /^\#([A-Fa-f0-9]+)$/.exec(style)) {
      const hex = m2[1];
      const size2 = hex.length;
      if (size2 === 3) {
        this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
        this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;
        this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;
        return this;
      } else if (size2 === 6) {
        this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;
        this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;
        this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;
        return this;
      }
    }
    if (style && style.length > 0) {
      return this.setColorName(style);
    }
    return this;
  }
  setColorName(style) {
    const hex = _colorKeywords[style];
    if (hex !== void 0) {
      this.setHex(hex);
    } else {
      console.warn("THREE.Color: Unknown color " + style);
    }
    return this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(color) {
    this.r = color.r;
    this.g = color.g;
    this.b = color.b;
    return this;
  }
  copyGammaToLinear(color, gammaFactor) {
    if (gammaFactor === void 0)
      gammaFactor = 2;
    this.r = Math.pow(color.r, gammaFactor);
    this.g = Math.pow(color.g, gammaFactor);
    this.b = Math.pow(color.b, gammaFactor);
    return this;
  }
  copyLinearToGamma(color, gammaFactor) {
    if (gammaFactor === void 0)
      gammaFactor = 2;
    const safeInverse = gammaFactor > 0 ? 1 / gammaFactor : 1;
    this.r = Math.pow(color.r, safeInverse);
    this.g = Math.pow(color.g, safeInverse);
    this.b = Math.pow(color.b, safeInverse);
    return this;
  }
  convertGammaToLinear(gammaFactor) {
    this.copyGammaToLinear(this, gammaFactor);
    return this;
  }
  convertLinearToGamma(gammaFactor) {
    this.copyLinearToGamma(this, gammaFactor);
    return this;
  }
  copySRGBToLinear(color) {
    this.r = SRGBToLinear(color.r);
    this.g = SRGBToLinear(color.g);
    this.b = SRGBToLinear(color.b);
    return this;
  }
  copyLinearToSRGB(color) {
    this.r = LinearToSRGB(color.r);
    this.g = LinearToSRGB(color.g);
    this.b = LinearToSRGB(color.b);
    return this;
  }
  convertSRGBToLinear() {
    this.copySRGBToLinear(this);
    return this;
  }
  convertLinearToSRGB() {
    this.copyLinearToSRGB(this);
    return this;
  }
  getHex() {
    return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;
  }
  getHexString() {
    return ("000000" + this.getHex().toString(16)).slice(-6);
  }
  getHSL(target) {
    if (target === void 0) {
      console.warn("THREE.Color: .getHSL() target is now required");
      target = { h: 0, s: 0, l: 0 };
    }
    const r2 = this.r, g2 = this.g, b2 = this.b;
    const max = Math.max(r2, g2, b2);
    const min = Math.min(r2, g2, b2);
    let hue, saturation;
    const lightness = (min + max) / 2;
    if (min === max) {
      hue = 0;
      saturation = 0;
    } else {
      const delta = max - min;
      saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
      switch (max) {
        case r2:
          hue = (g2 - b2) / delta + (g2 < b2 ? 6 : 0);
          break;
        case g2:
          hue = (b2 - r2) / delta + 2;
          break;
        case b2:
          hue = (r2 - g2) / delta + 4;
          break;
      }
      hue /= 6;
    }
    target.h = hue;
    target.s = saturation;
    target.l = lightness;
    return target;
  }
  getStyle() {
    return "rgb(" + (this.r * 255 | 0) + "," + (this.g * 255 | 0) + "," + (this.b * 255 | 0) + ")";
  }
  offsetHSL(h, s2, l2) {
    this.getHSL(_hslA);
    _hslA.h += h;
    _hslA.s += s2;
    _hslA.l += l2;
    this.setHSL(_hslA.h, _hslA.s, _hslA.l);
    return this;
  }
  add(color) {
    this.r += color.r;
    this.g += color.g;
    this.b += color.b;
    return this;
  }
  addColors(color1, color2) {
    this.r = color1.r + color2.r;
    this.g = color1.g + color2.g;
    this.b = color1.b + color2.b;
    return this;
  }
  addScalar(s2) {
    this.r += s2;
    this.g += s2;
    this.b += s2;
    return this;
  }
  sub(color) {
    this.r = Math.max(0, this.r - color.r);
    this.g = Math.max(0, this.g - color.g);
    this.b = Math.max(0, this.b - color.b);
    return this;
  }
  multiply(color) {
    this.r *= color.r;
    this.g *= color.g;
    this.b *= color.b;
    return this;
  }
  multiplyScalar(s2) {
    this.r *= s2;
    this.g *= s2;
    this.b *= s2;
    return this;
  }
  lerp(color, alpha) {
    this.r += (color.r - this.r) * alpha;
    this.g += (color.g - this.g) * alpha;
    this.b += (color.b - this.b) * alpha;
    return this;
  }
  lerpHSL(color, alpha) {
    this.getHSL(_hslA);
    color.getHSL(_hslB);
    const h = MathUtils.lerp(_hslA.h, _hslB.h, alpha);
    const s2 = MathUtils.lerp(_hslA.s, _hslB.s, alpha);
    const l2 = MathUtils.lerp(_hslA.l, _hslB.l, alpha);
    this.setHSL(h, s2, l2);
    return this;
  }
  equals(c2) {
    return c2.r === this.r && c2.g === this.g && c2.b === this.b;
  }
  fromArray(array, offset = 0) {
    this.r = array[offset];
    this.g = array[offset + 1];
    this.b = array[offset + 2];
    return this;
  }
  toArray(array = [], offset = 0) {
    array[offset] = this.r;
    array[offset + 1] = this.g;
    array[offset + 2] = this.b;
    return array;
  }
  fromBufferAttribute(attribute, index) {
    this.r = attribute.getX(index);
    this.g = attribute.getY(index);
    this.b = attribute.getZ(index);
    if (attribute.normalized === true) {
      this.r /= 255;
      this.g /= 255;
      this.b /= 255;
    }
    return this;
  }
  toJSON() {
    return this.getHex();
  }
}
Color.NAMES = _colorKeywords;
Color.prototype.r = 1;
Color.prototype.g = 1;
Color.prototype.b = 1;
class Face3 {
  constructor(a2, b2, c2, normal, color, materialIndex) {
    this.a = a2;
    this.b = b2;
    this.c = c2;
    this.normal = normal && normal.isVector3 ? normal : new Vector3();
    this.vertexNormals = Array.isArray(normal) ? normal : [];
    this.color = color && color.isColor ? color : new Color();
    this.vertexColors = Array.isArray(color) ? color : [];
    this.materialIndex = materialIndex !== void 0 ? materialIndex : 0;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.a = source.a;
    this.b = source.b;
    this.c = source.c;
    this.normal.copy(source.normal);
    this.color.copy(source.color);
    this.materialIndex = source.materialIndex;
    for (let i2 = 0, il = source.vertexNormals.length; i2 < il; i2++) {
      this.vertexNormals[i2] = source.vertexNormals[i2].clone();
    }
    for (let i2 = 0, il = source.vertexColors.length; i2 < il; i2++) {
      this.vertexColors[i2] = source.vertexColors[i2].clone();
    }
    return this;
  }
}
let materialId = 0;
function Material() {
  Object.defineProperty(this, "id", { value: materialId++ });
  this.uuid = MathUtils.generateUUID();
  this.name = "";
  this.type = "Material";
  this.fog = true;
  this.blending = NormalBlending;
  this.side = FrontSide;
  this.flatShading = false;
  this.vertexColors = false;
  this.opacity = 1;
  this.transparent = false;
  this.blendSrc = SrcAlphaFactor;
  this.blendDst = OneMinusSrcAlphaFactor;
  this.blendEquation = AddEquation;
  this.blendSrcAlpha = null;
  this.blendDstAlpha = null;
  this.blendEquationAlpha = null;
  this.depthFunc = LessEqualDepth;
  this.depthTest = true;
  this.depthWrite = true;
  this.stencilWriteMask = 255;
  this.stencilFunc = AlwaysStencilFunc;
  this.stencilRef = 0;
  this.stencilFuncMask = 255;
  this.stencilFail = KeepStencilOp;
  this.stencilZFail = KeepStencilOp;
  this.stencilZPass = KeepStencilOp;
  this.stencilWrite = false;
  this.clippingPlanes = null;
  this.clipIntersection = false;
  this.clipShadows = false;
  this.shadowSide = null;
  this.colorWrite = true;
  this.precision = null;
  this.polygonOffset = false;
  this.polygonOffsetFactor = 0;
  this.polygonOffsetUnits = 0;
  this.dithering = false;
  this.alphaTest = 0;
  this.premultipliedAlpha = false;
  this.visible = true;
  this.toneMapped = true;
  this.userData = {};
  this.version = 0;
}
Material.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: Material,
  isMaterial: true,
  onBeforeCompile: function() {
  },
  customProgramCacheKey: function() {
    return this.onBeforeCompile.toString();
  },
  setValues: function(values) {
    if (values === void 0)
      return;
    for (const key in values) {
      const newValue = values[key];
      if (newValue === void 0) {
        console.warn("THREE.Material: '" + key + "' parameter is undefined.");
        continue;
      }
      if (key === "shading") {
        console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
        this.flatShading = newValue === FlatShading ? true : false;
        continue;
      }
      const currentValue = this[key];
      if (currentValue === void 0) {
        console.warn("THREE." + this.type + ": '" + key + "' is not a property of this material.");
        continue;
      }
      if (currentValue && currentValue.isColor) {
        currentValue.set(newValue);
      } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
        currentValue.copy(newValue);
      } else {
        this[key] = newValue;
      }
    }
  },
  toJSON: function(meta) {
    const isRoot = meta === void 0 || typeof meta === "string";
    if (isRoot) {
      meta = {
        textures: {},
        images: {}
      };
    }
    const data = {
      metadata: {
        version: 4.5,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== "")
      data.name = this.name;
    if (this.color && this.color.isColor)
      data.color = this.color.getHex();
    if (this.roughness !== void 0)
      data.roughness = this.roughness;
    if (this.metalness !== void 0)
      data.metalness = this.metalness;
    if (this.sheen && this.sheen.isColor)
      data.sheen = this.sheen.getHex();
    if (this.emissive && this.emissive.isColor)
      data.emissive = this.emissive.getHex();
    if (this.emissiveIntensity && this.emissiveIntensity !== 1)
      data.emissiveIntensity = this.emissiveIntensity;
    if (this.specular && this.specular.isColor)
      data.specular = this.specular.getHex();
    if (this.shininess !== void 0)
      data.shininess = this.shininess;
    if (this.clearcoat !== void 0)
      data.clearcoat = this.clearcoat;
    if (this.clearcoatRoughness !== void 0)
      data.clearcoatRoughness = this.clearcoatRoughness;
    if (this.clearcoatMap && this.clearcoatMap.isTexture) {
      data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
    }
    if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
      data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
    }
    if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
      data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
      data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
    }
    if (this.map && this.map.isTexture)
      data.map = this.map.toJSON(meta).uuid;
    if (this.matcap && this.matcap.isTexture)
      data.matcap = this.matcap.toJSON(meta).uuid;
    if (this.alphaMap && this.alphaMap.isTexture)
      data.alphaMap = this.alphaMap.toJSON(meta).uuid;
    if (this.lightMap && this.lightMap.isTexture)
      data.lightMap = this.lightMap.toJSON(meta).uuid;
    if (this.aoMap && this.aoMap.isTexture) {
      data.aoMap = this.aoMap.toJSON(meta).uuid;
      data.aoMapIntensity = this.aoMapIntensity;
    }
    if (this.bumpMap && this.bumpMap.isTexture) {
      data.bumpMap = this.bumpMap.toJSON(meta).uuid;
      data.bumpScale = this.bumpScale;
    }
    if (this.normalMap && this.normalMap.isTexture) {
      data.normalMap = this.normalMap.toJSON(meta).uuid;
      data.normalMapType = this.normalMapType;
      data.normalScale = this.normalScale.toArray();
    }
    if (this.displacementMap && this.displacementMap.isTexture) {
      data.displacementMap = this.displacementMap.toJSON(meta).uuid;
      data.displacementScale = this.displacementScale;
      data.displacementBias = this.displacementBias;
    }
    if (this.roughnessMap && this.roughnessMap.isTexture)
      data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
    if (this.metalnessMap && this.metalnessMap.isTexture)
      data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
    if (this.emissiveMap && this.emissiveMap.isTexture)
      data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
    if (this.specularMap && this.specularMap.isTexture)
      data.specularMap = this.specularMap.toJSON(meta).uuid;
    if (this.envMap && this.envMap.isTexture) {
      data.envMap = this.envMap.toJSON(meta).uuid;
      data.reflectivity = this.reflectivity;
      data.refractionRatio = this.refractionRatio;
      if (this.combine !== void 0)
        data.combine = this.combine;
      if (this.envMapIntensity !== void 0)
        data.envMapIntensity = this.envMapIntensity;
    }
    if (this.gradientMap && this.gradientMap.isTexture) {
      data.gradientMap = this.gradientMap.toJSON(meta).uuid;
    }
    if (this.size !== void 0)
      data.size = this.size;
    if (this.sizeAttenuation !== void 0)
      data.sizeAttenuation = this.sizeAttenuation;
    if (this.blending !== NormalBlending)
      data.blending = this.blending;
    if (this.flatShading === true)
      data.flatShading = this.flatShading;
    if (this.side !== FrontSide)
      data.side = this.side;
    if (this.vertexColors)
      data.vertexColors = true;
    if (this.opacity < 1)
      data.opacity = this.opacity;
    if (this.transparent === true)
      data.transparent = this.transparent;
    data.depthFunc = this.depthFunc;
    data.depthTest = this.depthTest;
    data.depthWrite = this.depthWrite;
    data.stencilWrite = this.stencilWrite;
    data.stencilWriteMask = this.stencilWriteMask;
    data.stencilFunc = this.stencilFunc;
    data.stencilRef = this.stencilRef;
    data.stencilFuncMask = this.stencilFuncMask;
    data.stencilFail = this.stencilFail;
    data.stencilZFail = this.stencilZFail;
    data.stencilZPass = this.stencilZPass;
    if (this.rotation && this.rotation !== 0)
      data.rotation = this.rotation;
    if (this.polygonOffset === true)
      data.polygonOffset = true;
    if (this.polygonOffsetFactor !== 0)
      data.polygonOffsetFactor = this.polygonOffsetFactor;
    if (this.polygonOffsetUnits !== 0)
      data.polygonOffsetUnits = this.polygonOffsetUnits;
    if (this.linewidth && this.linewidth !== 1)
      data.linewidth = this.linewidth;
    if (this.dashSize !== void 0)
      data.dashSize = this.dashSize;
    if (this.gapSize !== void 0)
      data.gapSize = this.gapSize;
    if (this.scale !== void 0)
      data.scale = this.scale;
    if (this.dithering === true)
      data.dithering = true;
    if (this.alphaTest > 0)
      data.alphaTest = this.alphaTest;
    if (this.premultipliedAlpha === true)
      data.premultipliedAlpha = this.premultipliedAlpha;
    if (this.wireframe === true)
      data.wireframe = this.wireframe;
    if (this.wireframeLinewidth > 1)
      data.wireframeLinewidth = this.wireframeLinewidth;
    if (this.wireframeLinecap !== "round")
      data.wireframeLinecap = this.wireframeLinecap;
    if (this.wireframeLinejoin !== "round")
      data.wireframeLinejoin = this.wireframeLinejoin;
    if (this.morphTargets === true)
      data.morphTargets = true;
    if (this.morphNormals === true)
      data.morphNormals = true;
    if (this.skinning === true)
      data.skinning = true;
    if (this.visible === false)
      data.visible = false;
    if (this.toneMapped === false)
      data.toneMapped = false;
    if (JSON.stringify(this.userData) !== "{}")
      data.userData = this.userData;
    function extractFromCache(cache) {
      const values = [];
      for (const key in cache) {
        const data2 = cache[key];
        delete data2.metadata;
        values.push(data2);
      }
      return values;
    }
    if (isRoot) {
      const textures = extractFromCache(meta.textures);
      const images = extractFromCache(meta.images);
      if (textures.length > 0)
        data.textures = textures;
      if (images.length > 0)
        data.images = images;
    }
    return data;
  },
  clone: function() {
    return new this.constructor().copy(this);
  },
  copy: function(source) {
    this.name = source.name;
    this.fog = source.fog;
    this.blending = source.blending;
    this.side = source.side;
    this.flatShading = source.flatShading;
    this.vertexColors = source.vertexColors;
    this.opacity = source.opacity;
    this.transparent = source.transparent;
    this.blendSrc = source.blendSrc;
    this.blendDst = source.blendDst;
    this.blendEquation = source.blendEquation;
    this.blendSrcAlpha = source.blendSrcAlpha;
    this.blendDstAlpha = source.blendDstAlpha;
    this.blendEquationAlpha = source.blendEquationAlpha;
    this.depthFunc = source.depthFunc;
    this.depthTest = source.depthTest;
    this.depthWrite = source.depthWrite;
    this.stencilWriteMask = source.stencilWriteMask;
    this.stencilFunc = source.stencilFunc;
    this.stencilRef = source.stencilRef;
    this.stencilFuncMask = source.stencilFuncMask;
    this.stencilFail = source.stencilFail;
    this.stencilZFail = source.stencilZFail;
    this.stencilZPass = source.stencilZPass;
    this.stencilWrite = source.stencilWrite;
    const srcPlanes = source.clippingPlanes;
    let dstPlanes = null;
    if (srcPlanes !== null) {
      const n2 = srcPlanes.length;
      dstPlanes = new Array(n2);
      for (let i2 = 0; i2 !== n2; ++i2) {
        dstPlanes[i2] = srcPlanes[i2].clone();
      }
    }
    this.clippingPlanes = dstPlanes;
    this.clipIntersection = source.clipIntersection;
    this.clipShadows = source.clipShadows;
    this.shadowSide = source.shadowSide;
    this.colorWrite = source.colorWrite;
    this.precision = source.precision;
    this.polygonOffset = source.polygonOffset;
    this.polygonOffsetFactor = source.polygonOffsetFactor;
    this.polygonOffsetUnits = source.polygonOffsetUnits;
    this.dithering = source.dithering;
    this.alphaTest = source.alphaTest;
    this.premultipliedAlpha = source.premultipliedAlpha;
    this.visible = source.visible;
    this.toneMapped = source.toneMapped;
    this.userData = JSON.parse(JSON.stringify(source.userData));
    return this;
  },
  dispose: function() {
    this.dispatchEvent({ type: "dispose" });
  }
});
Object.defineProperty(Material.prototype, "needsUpdate", {
  set: function(value) {
    if (value === true)
      this.version++;
  }
});
function MeshBasicMaterial(parameters) {
  Material.call(this);
  this.type = "MeshBasicMaterial";
  this.color = new Color(16777215);
  this.map = null;
  this.lightMap = null;
  this.lightMapIntensity = 1;
  this.aoMap = null;
  this.aoMapIntensity = 1;
  this.specularMap = null;
  this.alphaMap = null;
  this.envMap = null;
  this.combine = MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = 0.98;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = "round";
  this.wireframeLinejoin = "round";
  this.skinning = false;
  this.morphTargets = false;
  this.setValues(parameters);
}
MeshBasicMaterial.prototype = Object.create(Material.prototype);
MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;
MeshBasicMaterial.prototype.isMeshBasicMaterial = true;
MeshBasicMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.map = source.map;
  this.lightMap = source.lightMap;
  this.lightMapIntensity = source.lightMapIntensity;
  this.aoMap = source.aoMap;
  this.aoMapIntensity = source.aoMapIntensity;
  this.specularMap = source.specularMap;
  this.alphaMap = source.alphaMap;
  this.envMap = source.envMap;
  this.combine = source.combine;
  this.reflectivity = source.reflectivity;
  this.refractionRatio = source.refractionRatio;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.wireframeLinecap = source.wireframeLinecap;
  this.wireframeLinejoin = source.wireframeLinejoin;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  return this;
};
const _vector$3 = new Vector3();
const _vector2$1 = new Vector2();
function BufferAttribute(array, itemSize, normalized) {
  if (Array.isArray(array)) {
    throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
  }
  this.name = "";
  this.array = array;
  this.itemSize = itemSize;
  this.count = array !== void 0 ? array.length / itemSize : 0;
  this.normalized = normalized === true;
  this.usage = StaticDrawUsage;
  this.updateRange = { offset: 0, count: -1 };
  this.version = 0;
}
Object.defineProperty(BufferAttribute.prototype, "needsUpdate", {
  set: function(value) {
    if (value === true)
      this.version++;
  }
});
Object.assign(BufferAttribute.prototype, {
  isBufferAttribute: true,
  onUploadCallback: function() {
  },
  setUsage: function(value) {
    this.usage = value;
    return this;
  },
  copy: function(source) {
    this.name = source.name;
    this.array = new source.array.constructor(source.array);
    this.itemSize = source.itemSize;
    this.count = source.count;
    this.normalized = source.normalized;
    this.usage = source.usage;
    return this;
  },
  copyAt: function(index1, attribute, index2) {
    index1 *= this.itemSize;
    index2 *= attribute.itemSize;
    for (let i2 = 0, l2 = this.itemSize; i2 < l2; i2++) {
      this.array[index1 + i2] = attribute.array[index2 + i2];
    }
    return this;
  },
  copyArray: function(array) {
    this.array.set(array);
    return this;
  },
  copyColorsArray: function(colors) {
    const array = this.array;
    let offset = 0;
    for (let i2 = 0, l2 = colors.length; i2 < l2; i2++) {
      let color = colors[i2];
      if (color === void 0) {
        console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i2);
        color = new Color();
      }
      array[offset++] = color.r;
      array[offset++] = color.g;
      array[offset++] = color.b;
    }
    return this;
  },
  copyVector2sArray: function(vectors) {
    const array = this.array;
    let offset = 0;
    for (let i2 = 0, l2 = vectors.length; i2 < l2; i2++) {
      let vector = vectors[i2];
      if (vector === void 0) {
        console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i2);
        vector = new Vector2();
      }
      array[offset++] = vector.x;
      array[offset++] = vector.y;
    }
    return this;
  },
  copyVector3sArray: function(vectors) {
    const array = this.array;
    let offset = 0;
    for (let i2 = 0, l2 = vectors.length; i2 < l2; i2++) {
      let vector = vectors[i2];
      if (vector === void 0) {
        console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i2);
        vector = new Vector3();
      }
      array[offset++] = vector.x;
      array[offset++] = vector.y;
      array[offset++] = vector.z;
    }
    return this;
  },
  copyVector4sArray: function(vectors) {
    const array = this.array;
    let offset = 0;
    for (let i2 = 0, l2 = vectors.length; i2 < l2; i2++) {
      let vector = vectors[i2];
      if (vector === void 0) {
        console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i2);
        vector = new Vector4();
      }
      array[offset++] = vector.x;
      array[offset++] = vector.y;
      array[offset++] = vector.z;
      array[offset++] = vector.w;
    }
    return this;
  },
  applyMatrix3: function(m2) {
    if (this.itemSize === 2) {
      for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
        _vector2$1.fromBufferAttribute(this, i2);
        _vector2$1.applyMatrix3(m2);
        this.setXY(i2, _vector2$1.x, _vector2$1.y);
      }
    } else if (this.itemSize === 3) {
      for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
        _vector$3.fromBufferAttribute(this, i2);
        _vector$3.applyMatrix3(m2);
        this.setXYZ(i2, _vector$3.x, _vector$3.y, _vector$3.z);
      }
    }
    return this;
  },
  applyMatrix4: function(m2) {
    for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
      _vector$3.x = this.getX(i2);
      _vector$3.y = this.getY(i2);
      _vector$3.z = this.getZ(i2);
      _vector$3.applyMatrix4(m2);
      this.setXYZ(i2, _vector$3.x, _vector$3.y, _vector$3.z);
    }
    return this;
  },
  applyNormalMatrix: function(m2) {
    for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
      _vector$3.x = this.getX(i2);
      _vector$3.y = this.getY(i2);
      _vector$3.z = this.getZ(i2);
      _vector$3.applyNormalMatrix(m2);
      this.setXYZ(i2, _vector$3.x, _vector$3.y, _vector$3.z);
    }
    return this;
  },
  transformDirection: function(m2) {
    for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
      _vector$3.x = this.getX(i2);
      _vector$3.y = this.getY(i2);
      _vector$3.z = this.getZ(i2);
      _vector$3.transformDirection(m2);
      this.setXYZ(i2, _vector$3.x, _vector$3.y, _vector$3.z);
    }
    return this;
  },
  set: function(value, offset) {
    if (offset === void 0)
      offset = 0;
    this.array.set(value, offset);
    return this;
  },
  getX: function(index) {
    return this.array[index * this.itemSize];
  },
  setX: function(index, x2) {
    this.array[index * this.itemSize] = x2;
    return this;
  },
  getY: function(index) {
    return this.array[index * this.itemSize + 1];
  },
  setY: function(index, y2) {
    this.array[index * this.itemSize + 1] = y2;
    return this;
  },
  getZ: function(index) {
    return this.array[index * this.itemSize + 2];
  },
  setZ: function(index, z2) {
    this.array[index * this.itemSize + 2] = z2;
    return this;
  },
  getW: function(index) {
    return this.array[index * this.itemSize + 3];
  },
  setW: function(index, w2) {
    this.array[index * this.itemSize + 3] = w2;
    return this;
  },
  setXY: function(index, x2, y2) {
    index *= this.itemSize;
    this.array[index + 0] = x2;
    this.array[index + 1] = y2;
    return this;
  },
  setXYZ: function(index, x2, y2, z2) {
    index *= this.itemSize;
    this.array[index + 0] = x2;
    this.array[index + 1] = y2;
    this.array[index + 2] = z2;
    return this;
  },
  setXYZW: function(index, x2, y2, z2, w2) {
    index *= this.itemSize;
    this.array[index + 0] = x2;
    this.array[index + 1] = y2;
    this.array[index + 2] = z2;
    this.array[index + 3] = w2;
    return this;
  },
  onUpload: function(callback) {
    this.onUploadCallback = callback;
    return this;
  },
  clone: function() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  },
  toJSON: function() {
    return {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.prototype.slice.call(this.array),
      normalized: this.normalized
    };
  }
});
function Int8BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Int8Array(array), itemSize, normalized);
}
Int8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;
function Uint8BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Uint8Array(array), itemSize, normalized);
}
Uint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;
function Uint8ClampedBufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Uint8ClampedArray(array), itemSize, normalized);
}
Uint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;
function Int16BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Int16Array(array), itemSize, normalized);
}
Int16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;
function Uint16BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);
}
Uint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;
function Int32BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Int32Array(array), itemSize, normalized);
}
Int32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;
function Uint32BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Uint32Array(array), itemSize, normalized);
}
Uint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;
function Float32BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Float32Array(array), itemSize, normalized);
}
Float32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;
function Float64BufferAttribute(array, itemSize, normalized) {
  BufferAttribute.call(this, new Float64Array(array), itemSize, normalized);
}
Float64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);
Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;
class DirectGeometry {
  constructor() {
    this.vertices = [];
    this.normals = [];
    this.colors = [];
    this.uvs = [];
    this.uvs2 = [];
    this.groups = [];
    this.morphTargets = {};
    this.skinWeights = [];
    this.skinIndices = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    this.verticesNeedUpdate = false;
    this.normalsNeedUpdate = false;
    this.colorsNeedUpdate = false;
    this.uvsNeedUpdate = false;
    this.groupsNeedUpdate = false;
  }
  computeGroups(geometry) {
    const groups = [];
    let group, i2;
    let materialIndex = void 0;
    const faces = geometry.faces;
    for (i2 = 0; i2 < faces.length; i2++) {
      const face = faces[i2];
      if (face.materialIndex !== materialIndex) {
        materialIndex = face.materialIndex;
        if (group !== void 0) {
          group.count = i2 * 3 - group.start;
          groups.push(group);
        }
        group = {
          start: i2 * 3,
          materialIndex
        };
      }
    }
    if (group !== void 0) {
      group.count = i2 * 3 - group.start;
      groups.push(group);
    }
    this.groups = groups;
  }
  fromGeometry(geometry) {
    const faces = geometry.faces;
    const vertices = geometry.vertices;
    const faceVertexUvs = geometry.faceVertexUvs;
    const hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;
    const hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0;
    const morphTargets = geometry.morphTargets;
    const morphTargetsLength = morphTargets.length;
    let morphTargetsPosition;
    if (morphTargetsLength > 0) {
      morphTargetsPosition = [];
      for (let i2 = 0; i2 < morphTargetsLength; i2++) {
        morphTargetsPosition[i2] = {
          name: morphTargets[i2].name,
          data: []
        };
      }
      this.morphTargets.position = morphTargetsPosition;
    }
    const morphNormals = geometry.morphNormals;
    const morphNormalsLength = morphNormals.length;
    let morphTargetsNormal;
    if (morphNormalsLength > 0) {
      morphTargetsNormal = [];
      for (let i2 = 0; i2 < morphNormalsLength; i2++) {
        morphTargetsNormal[i2] = {
          name: morphNormals[i2].name,
          data: []
        };
      }
      this.morphTargets.normal = morphTargetsNormal;
    }
    const skinIndices = geometry.skinIndices;
    const skinWeights = geometry.skinWeights;
    const hasSkinIndices = skinIndices.length === vertices.length;
    const hasSkinWeights = skinWeights.length === vertices.length;
    if (vertices.length > 0 && faces.length === 0) {
      console.error("THREE.DirectGeometry: Faceless geometries are not supported.");
    }
    for (let i2 = 0; i2 < faces.length; i2++) {
      const face = faces[i2];
      this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);
      const vertexNormals = face.vertexNormals;
      if (vertexNormals.length === 3) {
        this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);
      } else {
        const normal = face.normal;
        this.normals.push(normal, normal, normal);
      }
      const vertexColors = face.vertexColors;
      if (vertexColors.length === 3) {
        this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);
      } else {
        const color = face.color;
        this.colors.push(color, color, color);
      }
      if (hasFaceVertexUv === true) {
        const vertexUvs = faceVertexUvs[0][i2];
        if (vertexUvs !== void 0) {
          this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);
        } else {
          console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", i2);
          this.uvs.push(new Vector2(), new Vector2(), new Vector2());
        }
      }
      if (hasFaceVertexUv2 === true) {
        const vertexUvs = faceVertexUvs[1][i2];
        if (vertexUvs !== void 0) {
          this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);
        } else {
          console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", i2);
          this.uvs2.push(new Vector2(), new Vector2(), new Vector2());
        }
      }
      for (let j2 = 0; j2 < morphTargetsLength; j2++) {
        const morphTarget = morphTargets[j2].vertices;
        morphTargetsPosition[j2].data.push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);
      }
      for (let j2 = 0; j2 < morphNormalsLength; j2++) {
        const morphNormal = morphNormals[j2].vertexNormals[i2];
        morphTargetsNormal[j2].data.push(morphNormal.a, morphNormal.b, morphNormal.c);
      }
      if (hasSkinIndices) {
        this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);
      }
      if (hasSkinWeights) {
        this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);
      }
    }
    this.computeGroups(geometry);
    this.verticesNeedUpdate = geometry.verticesNeedUpdate;
    this.normalsNeedUpdate = geometry.normalsNeedUpdate;
    this.colorsNeedUpdate = geometry.colorsNeedUpdate;
    this.uvsNeedUpdate = geometry.uvsNeedUpdate;
    this.groupsNeedUpdate = geometry.groupsNeedUpdate;
    if (geometry.boundingSphere !== null) {
      this.boundingSphere = geometry.boundingSphere.clone();
    }
    if (geometry.boundingBox !== null) {
      this.boundingBox = geometry.boundingBox.clone();
    }
    return this;
  }
}
function arrayMax(array) {
  if (array.length === 0)
    return -Infinity;
  let max = array[0];
  for (let i2 = 1, l2 = array.length; i2 < l2; ++i2) {
    if (array[i2] > max)
      max = array[i2];
  }
  return max;
}
let _bufferGeometryId = 1;
const _m1$2 = new Matrix4();
const _obj = new Object3D();
const _offset = new Vector3();
const _box$2 = new Box3();
const _boxMorphTargets = new Box3();
const _vector$4 = new Vector3();
function BufferGeometry() {
  Object.defineProperty(this, "id", { value: _bufferGeometryId += 2 });
  this.uuid = MathUtils.generateUUID();
  this.name = "";
  this.type = "BufferGeometry";
  this.index = null;
  this.attributes = {};
  this.morphAttributes = {};
  this.morphTargetsRelative = false;
  this.groups = [];
  this.boundingBox = null;
  this.boundingSphere = null;
  this.drawRange = { start: 0, count: Infinity };
  this.userData = {};
}
BufferGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: BufferGeometry,
  isBufferGeometry: true,
  getIndex: function() {
    return this.index;
  },
  setIndex: function(index) {
    if (Array.isArray(index)) {
      this.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);
    } else {
      this.index = index;
    }
    return this;
  },
  getAttribute: function(name) {
    return this.attributes[name];
  },
  setAttribute: function(name, attribute) {
    this.attributes[name] = attribute;
    return this;
  },
  deleteAttribute: function(name) {
    delete this.attributes[name];
    return this;
  },
  addGroup: function(start, count, materialIndex) {
    this.groups.push({
      start,
      count,
      materialIndex: materialIndex !== void 0 ? materialIndex : 0
    });
  },
  clearGroups: function() {
    this.groups = [];
  },
  setDrawRange: function(start, count) {
    this.drawRange.start = start;
    this.drawRange.count = count;
  },
  applyMatrix4: function(matrix) {
    const position = this.attributes.position;
    if (position !== void 0) {
      position.applyMatrix4(matrix);
      position.needsUpdate = true;
    }
    const normal = this.attributes.normal;
    if (normal !== void 0) {
      const normalMatrix = new Matrix3().getNormalMatrix(matrix);
      normal.applyNormalMatrix(normalMatrix);
      normal.needsUpdate = true;
    }
    const tangent = this.attributes.tangent;
    if (tangent !== void 0) {
      tangent.transformDirection(matrix);
      tangent.needsUpdate = true;
    }
    if (this.boundingBox !== null) {
      this.computeBoundingBox();
    }
    if (this.boundingSphere !== null) {
      this.computeBoundingSphere();
    }
    return this;
  },
  rotateX: function(angle) {
    _m1$2.makeRotationX(angle);
    this.applyMatrix4(_m1$2);
    return this;
  },
  rotateY: function(angle) {
    _m1$2.makeRotationY(angle);
    this.applyMatrix4(_m1$2);
    return this;
  },
  rotateZ: function(angle) {
    _m1$2.makeRotationZ(angle);
    this.applyMatrix4(_m1$2);
    return this;
  },
  translate: function(x2, y2, z2) {
    _m1$2.makeTranslation(x2, y2, z2);
    this.applyMatrix4(_m1$2);
    return this;
  },
  scale: function(x2, y2, z2) {
    _m1$2.makeScale(x2, y2, z2);
    this.applyMatrix4(_m1$2);
    return this;
  },
  lookAt: function(vector) {
    _obj.lookAt(vector);
    _obj.updateMatrix();
    this.applyMatrix4(_obj.matrix);
    return this;
  },
  center: function() {
    this.computeBoundingBox();
    this.boundingBox.getCenter(_offset).negate();
    this.translate(_offset.x, _offset.y, _offset.z);
    return this;
  },
  setFromObject: function(object) {
    const geometry = object.geometry;
    if (object.isPoints || object.isLine) {
      const positions = new Float32BufferAttribute(geometry.vertices.length * 3, 3);
      const colors = new Float32BufferAttribute(geometry.colors.length * 3, 3);
      this.setAttribute("position", positions.copyVector3sArray(geometry.vertices));
      this.setAttribute("color", colors.copyColorsArray(geometry.colors));
      if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {
        const lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);
        this.setAttribute("lineDistance", lineDistances.copyArray(geometry.lineDistances));
      }
      if (geometry.boundingSphere !== null) {
        this.boundingSphere = geometry.boundingSphere.clone();
      }
      if (geometry.boundingBox !== null) {
        this.boundingBox = geometry.boundingBox.clone();
      }
    } else if (object.isMesh) {
      if (geometry && geometry.isGeometry) {
        this.fromGeometry(geometry);
      }
    }
    return this;
  },
  setFromPoints: function(points) {
    const position = [];
    for (let i2 = 0, l2 = points.length; i2 < l2; i2++) {
      const point = points[i2];
      position.push(point.x, point.y, point.z || 0);
    }
    this.setAttribute("position", new Float32BufferAttribute(position, 3));
    return this;
  },
  updateFromObject: function(object) {
    let geometry = object.geometry;
    if (object.isMesh) {
      let direct = geometry.__directGeometry;
      if (geometry.elementsNeedUpdate === true) {
        direct = void 0;
        geometry.elementsNeedUpdate = false;
      }
      if (direct === void 0) {
        return this.fromGeometry(geometry);
      }
      direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
      direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
      direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
      direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
      direct.groupsNeedUpdate = geometry.groupsNeedUpdate;
      geometry.verticesNeedUpdate = false;
      geometry.normalsNeedUpdate = false;
      geometry.colorsNeedUpdate = false;
      geometry.uvsNeedUpdate = false;
      geometry.groupsNeedUpdate = false;
      geometry = direct;
    }
    if (geometry.verticesNeedUpdate === true) {
      const attribute = this.attributes.position;
      if (attribute !== void 0) {
        attribute.copyVector3sArray(geometry.vertices);
        attribute.needsUpdate = true;
      }
      geometry.verticesNeedUpdate = false;
    }
    if (geometry.normalsNeedUpdate === true) {
      const attribute = this.attributes.normal;
      if (attribute !== void 0) {
        attribute.copyVector3sArray(geometry.normals);
        attribute.needsUpdate = true;
      }
      geometry.normalsNeedUpdate = false;
    }
    if (geometry.colorsNeedUpdate === true) {
      const attribute = this.attributes.color;
      if (attribute !== void 0) {
        attribute.copyColorsArray(geometry.colors);
        attribute.needsUpdate = true;
      }
      geometry.colorsNeedUpdate = false;
    }
    if (geometry.uvsNeedUpdate) {
      const attribute = this.attributes.uv;
      if (attribute !== void 0) {
        attribute.copyVector2sArray(geometry.uvs);
        attribute.needsUpdate = true;
      }
      geometry.uvsNeedUpdate = false;
    }
    if (geometry.lineDistancesNeedUpdate) {
      const attribute = this.attributes.lineDistance;
      if (attribute !== void 0) {
        attribute.copyArray(geometry.lineDistances);
        attribute.needsUpdate = true;
      }
      geometry.lineDistancesNeedUpdate = false;
    }
    if (geometry.groupsNeedUpdate) {
      geometry.computeGroups(object.geometry);
      this.groups = geometry.groups;
      geometry.groupsNeedUpdate = false;
    }
    return this;
  },
  fromGeometry: function(geometry) {
    geometry.__directGeometry = new DirectGeometry().fromGeometry(geometry);
    return this.fromDirectGeometry(geometry.__directGeometry);
  },
  fromDirectGeometry: function(geometry) {
    const positions = new Float32Array(geometry.vertices.length * 3);
    this.setAttribute("position", new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));
    if (geometry.normals.length > 0) {
      const normals = new Float32Array(geometry.normals.length * 3);
      this.setAttribute("normal", new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));
    }
    if (geometry.colors.length > 0) {
      const colors = new Float32Array(geometry.colors.length * 3);
      this.setAttribute("color", new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));
    }
    if (geometry.uvs.length > 0) {
      const uvs = new Float32Array(geometry.uvs.length * 2);
      this.setAttribute("uv", new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));
    }
    if (geometry.uvs2.length > 0) {
      const uvs2 = new Float32Array(geometry.uvs2.length * 2);
      this.setAttribute("uv2", new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));
    }
    this.groups = geometry.groups;
    for (const name in geometry.morphTargets) {
      const array = [];
      const morphTargets = geometry.morphTargets[name];
      for (let i2 = 0, l2 = morphTargets.length; i2 < l2; i2++) {
        const morphTarget = morphTargets[i2];
        const attribute = new Float32BufferAttribute(morphTarget.data.length * 3, 3);
        attribute.name = morphTarget.name;
        array.push(attribute.copyVector3sArray(morphTarget.data));
      }
      this.morphAttributes[name] = array;
    }
    if (geometry.skinIndices.length > 0) {
      const skinIndices = new Float32BufferAttribute(geometry.skinIndices.length * 4, 4);
      this.setAttribute("skinIndex", skinIndices.copyVector4sArray(geometry.skinIndices));
    }
    if (geometry.skinWeights.length > 0) {
      const skinWeights = new Float32BufferAttribute(geometry.skinWeights.length * 4, 4);
      this.setAttribute("skinWeight", skinWeights.copyVector4sArray(geometry.skinWeights));
    }
    if (geometry.boundingSphere !== null) {
      this.boundingSphere = geometry.boundingSphere.clone();
    }
    if (geometry.boundingBox !== null) {
      this.boundingBox = geometry.boundingBox.clone();
    }
    return this;
  },
  computeBoundingBox: function() {
    if (this.boundingBox === null) {
      this.boundingBox = new Box3();
    }
    const position = this.attributes.position;
    const morphAttributesPosition = this.morphAttributes.position;
    if (position && position.isGLBufferAttribute) {
      console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
      this.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(Infinity, Infinity, Infinity));
      return;
    }
    if (position !== void 0) {
      this.boundingBox.setFromBufferAttribute(position);
      if (morphAttributesPosition) {
        for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
          const morphAttribute = morphAttributesPosition[i2];
          _box$2.setFromBufferAttribute(morphAttribute);
          if (this.morphTargetsRelative) {
            _vector$4.addVectors(this.boundingBox.min, _box$2.min);
            this.boundingBox.expandByPoint(_vector$4);
            _vector$4.addVectors(this.boundingBox.max, _box$2.max);
            this.boundingBox.expandByPoint(_vector$4);
          } else {
            this.boundingBox.expandByPoint(_box$2.min);
            this.boundingBox.expandByPoint(_box$2.max);
          }
        }
      }
    } else {
      this.boundingBox.makeEmpty();
    }
    if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
      console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }
  },
  computeBoundingSphere: function() {
    if (this.boundingSphere === null) {
      this.boundingSphere = new Sphere();
    }
    const position = this.attributes.position;
    const morphAttributesPosition = this.morphAttributes.position;
    if (position && position.isGLBufferAttribute) {
      console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
      this.boundingSphere.set(new Vector3(), Infinity);
      return;
    }
    if (position) {
      const center = this.boundingSphere.center;
      _box$2.setFromBufferAttribute(position);
      if (morphAttributesPosition) {
        for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
          const morphAttribute = morphAttributesPosition[i2];
          _boxMorphTargets.setFromBufferAttribute(morphAttribute);
          if (this.morphTargetsRelative) {
            _vector$4.addVectors(_box$2.min, _boxMorphTargets.min);
            _box$2.expandByPoint(_vector$4);
            _vector$4.addVectors(_box$2.max, _boxMorphTargets.max);
            _box$2.expandByPoint(_vector$4);
          } else {
            _box$2.expandByPoint(_boxMorphTargets.min);
            _box$2.expandByPoint(_boxMorphTargets.max);
          }
        }
      }
      _box$2.getCenter(center);
      let maxRadiusSq = 0;
      for (let i2 = 0, il = position.count; i2 < il; i2++) {
        _vector$4.fromBufferAttribute(position, i2);
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));
      }
      if (morphAttributesPosition) {
        for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
          const morphAttribute = morphAttributesPosition[i2];
          const morphTargetsRelative = this.morphTargetsRelative;
          for (let j2 = 0, jl = morphAttribute.count; j2 < jl; j2++) {
            _vector$4.fromBufferAttribute(morphAttribute, j2);
            if (morphTargetsRelative) {
              _offset.fromBufferAttribute(position, j2);
              _vector$4.add(_offset);
            }
            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));
          }
        }
      }
      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
      if (isNaN(this.boundingSphere.radius)) {
        console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
      }
    }
  },
  computeFaceNormals: function() {
  },
  computeVertexNormals: function() {
    const index = this.index;
    const positionAttribute = this.getAttribute("position");
    if (positionAttribute !== void 0) {
      let normalAttribute = this.getAttribute("normal");
      if (normalAttribute === void 0) {
        normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
        this.setAttribute("normal", normalAttribute);
      } else {
        for (let i2 = 0, il = normalAttribute.count; i2 < il; i2++) {
          normalAttribute.setXYZ(i2, 0, 0, 0);
        }
      }
      const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
      const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
      const cb = new Vector3(), ab = new Vector3();
      if (index) {
        for (let i2 = 0, il = index.count; i2 < il; i2 += 3) {
          const vA = index.getX(i2 + 0);
          const vB = index.getX(i2 + 1);
          const vC = index.getX(i2 + 2);
          pA.fromBufferAttribute(positionAttribute, vA);
          pB.fromBufferAttribute(positionAttribute, vB);
          pC.fromBufferAttribute(positionAttribute, vC);
          cb.subVectors(pC, pB);
          ab.subVectors(pA, pB);
          cb.cross(ab);
          nA.fromBufferAttribute(normalAttribute, vA);
          nB.fromBufferAttribute(normalAttribute, vB);
          nC.fromBufferAttribute(normalAttribute, vC);
          nA.add(cb);
          nB.add(cb);
          nC.add(cb);
          normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
          normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
          normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
        }
      } else {
        for (let i2 = 0, il = positionAttribute.count; i2 < il; i2 += 3) {
          pA.fromBufferAttribute(positionAttribute, i2 + 0);
          pB.fromBufferAttribute(positionAttribute, i2 + 1);
          pC.fromBufferAttribute(positionAttribute, i2 + 2);
          cb.subVectors(pC, pB);
          ab.subVectors(pA, pB);
          cb.cross(ab);
          normalAttribute.setXYZ(i2 + 0, cb.x, cb.y, cb.z);
          normalAttribute.setXYZ(i2 + 1, cb.x, cb.y, cb.z);
          normalAttribute.setXYZ(i2 + 2, cb.x, cb.y, cb.z);
        }
      }
      this.normalizeNormals();
      normalAttribute.needsUpdate = true;
    }
  },
  merge: function(geometry, offset) {
    if (!(geometry && geometry.isBufferGeometry)) {
      console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", geometry);
      return;
    }
    if (offset === void 0) {
      offset = 0;
      console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.");
    }
    const attributes = this.attributes;
    for (const key in attributes) {
      if (geometry.attributes[key] === void 0)
        continue;
      const attribute1 = attributes[key];
      const attributeArray1 = attribute1.array;
      const attribute2 = geometry.attributes[key];
      const attributeArray2 = attribute2.array;
      const attributeOffset = attribute2.itemSize * offset;
      const length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);
      for (let i2 = 0, j2 = attributeOffset; i2 < length; i2++, j2++) {
        attributeArray1[j2] = attributeArray2[i2];
      }
    }
    return this;
  },
  normalizeNormals: function() {
    const normals = this.attributes.normal;
    for (let i2 = 0, il = normals.count; i2 < il; i2++) {
      _vector$4.fromBufferAttribute(normals, i2);
      _vector$4.normalize();
      normals.setXYZ(i2, _vector$4.x, _vector$4.y, _vector$4.z);
    }
  },
  toNonIndexed: function() {
    function convertBufferAttribute(attribute, indices2) {
      const array = attribute.array;
      const itemSize = attribute.itemSize;
      const normalized = attribute.normalized;
      const array2 = new array.constructor(indices2.length * itemSize);
      let index = 0, index2 = 0;
      for (let i2 = 0, l2 = indices2.length; i2 < l2; i2++) {
        index = indices2[i2] * itemSize;
        for (let j2 = 0; j2 < itemSize; j2++) {
          array2[index2++] = array[index++];
        }
      }
      return new BufferAttribute(array2, itemSize, normalized);
    }
    if (this.index === null) {
      console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.");
      return this;
    }
    const geometry2 = new BufferGeometry();
    const indices = this.index.array;
    const attributes = this.attributes;
    for (const name in attributes) {
      const attribute = attributes[name];
      const newAttribute = convertBufferAttribute(attribute, indices);
      geometry2.setAttribute(name, newAttribute);
    }
    const morphAttributes = this.morphAttributes;
    for (const name in morphAttributes) {
      const morphArray = [];
      const morphAttribute = morphAttributes[name];
      for (let i2 = 0, il = morphAttribute.length; i2 < il; i2++) {
        const attribute = morphAttribute[i2];
        const newAttribute = convertBufferAttribute(attribute, indices);
        morphArray.push(newAttribute);
      }
      geometry2.morphAttributes[name] = morphArray;
    }
    geometry2.morphTargetsRelative = this.morphTargetsRelative;
    const groups = this.groups;
    for (let i2 = 0, l2 = groups.length; i2 < l2; i2++) {
      const group = groups[i2];
      geometry2.addGroup(group.start, group.count, group.materialIndex);
    }
    return geometry2;
  },
  toJSON: function() {
    const data = {
      metadata: {
        version: 4.5,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== "")
      data.name = this.name;
    if (Object.keys(this.userData).length > 0)
      data.userData = this.userData;
    if (this.parameters !== void 0) {
      const parameters = this.parameters;
      for (const key in parameters) {
        if (parameters[key] !== void 0)
          data[key] = parameters[key];
      }
      return data;
    }
    data.data = { attributes: {} };
    const index = this.index;
    if (index !== null) {
      data.data.index = {
        type: index.array.constructor.name,
        array: Array.prototype.slice.call(index.array)
      };
    }
    const attributes = this.attributes;
    for (const key in attributes) {
      const attribute = attributes[key];
      const attributeData = attribute.toJSON(data.data);
      if (attribute.name !== "")
        attributeData.name = attribute.name;
      data.data.attributes[key] = attributeData;
    }
    const morphAttributes = {};
    let hasMorphAttributes = false;
    for (const key in this.morphAttributes) {
      const attributeArray = this.morphAttributes[key];
      const array = [];
      for (let i2 = 0, il = attributeArray.length; i2 < il; i2++) {
        const attribute = attributeArray[i2];
        const attributeData = attribute.toJSON(data.data);
        if (attribute.name !== "")
          attributeData.name = attribute.name;
        array.push(attributeData);
      }
      if (array.length > 0) {
        morphAttributes[key] = array;
        hasMorphAttributes = true;
      }
    }
    if (hasMorphAttributes) {
      data.data.morphAttributes = morphAttributes;
      data.data.morphTargetsRelative = this.morphTargetsRelative;
    }
    const groups = this.groups;
    if (groups.length > 0) {
      data.data.groups = JSON.parse(JSON.stringify(groups));
    }
    const boundingSphere = this.boundingSphere;
    if (boundingSphere !== null) {
      data.data.boundingSphere = {
        center: boundingSphere.center.toArray(),
        radius: boundingSphere.radius
      };
    }
    return data;
  },
  clone: function() {
    return new BufferGeometry().copy(this);
  },
  copy: function(source) {
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.groups = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    const data = {};
    this.name = source.name;
    const index = source.index;
    if (index !== null) {
      this.setIndex(index.clone(data));
    }
    const attributes = source.attributes;
    for (const name in attributes) {
      const attribute = attributes[name];
      this.setAttribute(name, attribute.clone(data));
    }
    const morphAttributes = source.morphAttributes;
    for (const name in morphAttributes) {
      const array = [];
      const morphAttribute = morphAttributes[name];
      for (let i2 = 0, l2 = morphAttribute.length; i2 < l2; i2++) {
        array.push(morphAttribute[i2].clone(data));
      }
      this.morphAttributes[name] = array;
    }
    this.morphTargetsRelative = source.morphTargetsRelative;
    const groups = source.groups;
    for (let i2 = 0, l2 = groups.length; i2 < l2; i2++) {
      const group = groups[i2];
      this.addGroup(group.start, group.count, group.materialIndex);
    }
    const boundingBox = source.boundingBox;
    if (boundingBox !== null) {
      this.boundingBox = boundingBox.clone();
    }
    const boundingSphere = source.boundingSphere;
    if (boundingSphere !== null) {
      this.boundingSphere = boundingSphere.clone();
    }
    this.drawRange.start = source.drawRange.start;
    this.drawRange.count = source.drawRange.count;
    this.userData = source.userData;
    return this;
  },
  dispose: function() {
    this.dispatchEvent({ type: "dispose" });
  }
});
const _inverseMatrix = new Matrix4();
const _ray = new Ray();
const _sphere = new Sphere();
const _vA = new Vector3();
const _vB = new Vector3();
const _vC = new Vector3();
const _tempA = new Vector3();
const _tempB = new Vector3();
const _tempC = new Vector3();
const _morphA = new Vector3();
const _morphB = new Vector3();
const _morphC = new Vector3();
const _uvA = new Vector2();
const _uvB = new Vector2();
const _uvC = new Vector2();
const _intersectionPoint = new Vector3();
const _intersectionPointWorld = new Vector3();
function Mesh(geometry, material) {
  Object3D.call(this);
  this.type = "Mesh";
  this.geometry = geometry !== void 0 ? geometry : new BufferGeometry();
  this.material = material !== void 0 ? material : new MeshBasicMaterial();
  this.updateMorphTargets();
}
Mesh.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Mesh,
  isMesh: true,
  copy: function(source) {
    Object3D.prototype.copy.call(this, source);
    if (source.morphTargetInfluences !== void 0) {
      this.morphTargetInfluences = source.morphTargetInfluences.slice();
    }
    if (source.morphTargetDictionary !== void 0) {
      this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
    }
    this.material = source.material;
    this.geometry = source.geometry;
    return this;
  },
  updateMorphTargets: function() {
    const geometry = this.geometry;
    if (geometry.isBufferGeometry) {
      const morphAttributes = geometry.morphAttributes;
      const keys = Object.keys(morphAttributes);
      if (keys.length > 0) {
        const morphAttribute = morphAttributes[keys[0]];
        if (morphAttribute !== void 0) {
          this.morphTargetInfluences = [];
          this.morphTargetDictionary = {};
          for (let m2 = 0, ml = morphAttribute.length; m2 < ml; m2++) {
            const name = morphAttribute[m2].name || String(m2);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[name] = m2;
          }
        }
      }
    } else {
      const morphTargets = geometry.morphTargets;
      if (morphTargets !== void 0 && morphTargets.length > 0) {
        console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
      }
    }
  },
  raycast: function(raycaster, intersects2) {
    const geometry = this.geometry;
    const material = this.material;
    const matrixWorld = this.matrixWorld;
    if (material === void 0)
      return;
    if (geometry.boundingSphere === null)
      geometry.computeBoundingSphere();
    _sphere.copy(geometry.boundingSphere);
    _sphere.applyMatrix4(matrixWorld);
    if (raycaster.ray.intersectsSphere(_sphere) === false)
      return;
    _inverseMatrix.getInverse(matrixWorld);
    _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);
    if (geometry.boundingBox !== null) {
      if (_ray.intersectsBox(geometry.boundingBox) === false)
        return;
    }
    let intersection;
    if (geometry.isBufferGeometry) {
      const index = geometry.index;
      const position = geometry.attributes.position;
      const morphPosition = geometry.morphAttributes.position;
      const morphTargetsRelative = geometry.morphTargetsRelative;
      const uv = geometry.attributes.uv;
      const uv2 = geometry.attributes.uv2;
      const groups = geometry.groups;
      const drawRange = geometry.drawRange;
      if (index !== null) {
        if (Array.isArray(material)) {
          for (let i2 = 0, il = groups.length; i2 < il; i2++) {
            const group = groups[i2];
            const groupMaterial = material[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(group.start + group.count, drawRange.start + drawRange.count);
            for (let j2 = start, jl = end; j2 < jl; j2 += 3) {
              const a2 = index.getX(j2);
              const b2 = index.getX(j2 + 1);
              const c2 = index.getX(j2 + 2);
              intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a2, b2, c2);
              if (intersection) {
                intersection.faceIndex = Math.floor(j2 / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects2.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(index.count, drawRange.start + drawRange.count);
          for (let i2 = start, il = end; i2 < il; i2 += 3) {
            const a2 = index.getX(i2);
            const b2 = index.getX(i2 + 1);
            const c2 = index.getX(i2 + 2);
            intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a2, b2, c2);
            if (intersection) {
              intersection.faceIndex = Math.floor(i2 / 3);
              intersects2.push(intersection);
            }
          }
        }
      } else if (position !== void 0) {
        if (Array.isArray(material)) {
          for (let i2 = 0, il = groups.length; i2 < il; i2++) {
            const group = groups[i2];
            const groupMaterial = material[group.materialIndex];
            const start = Math.max(group.start, drawRange.start);
            const end = Math.min(group.start + group.count, drawRange.start + drawRange.count);
            for (let j2 = start, jl = end; j2 < jl; j2 += 3) {
              const a2 = j2;
              const b2 = j2 + 1;
              const c2 = j2 + 2;
              intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a2, b2, c2);
              if (intersection) {
                intersection.faceIndex = Math.floor(j2 / 3);
                intersection.face.materialIndex = group.materialIndex;
                intersects2.push(intersection);
              }
            }
          }
        } else {
          const start = Math.max(0, drawRange.start);
          const end = Math.min(position.count, drawRange.start + drawRange.count);
          for (let i2 = start, il = end; i2 < il; i2 += 3) {
            const a2 = i2;
            const b2 = i2 + 1;
            const c2 = i2 + 2;
            intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a2, b2, c2);
            if (intersection) {
              intersection.faceIndex = Math.floor(i2 / 3);
              intersects2.push(intersection);
            }
          }
        }
      }
    } else if (geometry.isGeometry) {
      const isMultiMaterial = Array.isArray(material);
      const vertices = geometry.vertices;
      const faces = geometry.faces;
      let uvs;
      const faceVertexUvs = geometry.faceVertexUvs[0];
      if (faceVertexUvs.length > 0)
        uvs = faceVertexUvs;
      for (let f2 = 0, fl = faces.length; f2 < fl; f2++) {
        const face = faces[f2];
        const faceMaterial = isMultiMaterial ? material[face.materialIndex] : material;
        if (faceMaterial === void 0)
          continue;
        const fvA = vertices[face.a];
        const fvB = vertices[face.b];
        const fvC = vertices[face.c];
        intersection = checkIntersection(this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint);
        if (intersection) {
          if (uvs && uvs[f2]) {
            const uvs_f = uvs[f2];
            _uvA.copy(uvs_f[0]);
            _uvB.copy(uvs_f[1]);
            _uvC.copy(uvs_f[2]);
            intersection.uv = Triangle.getUV(_intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2());
          }
          intersection.face = face;
          intersection.faceIndex = f2;
          intersects2.push(intersection);
        }
      }
    }
  }
});
function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
  let intersect;
  if (material.side === BackSide) {
    intersect = ray.intersectTriangle(pC, pB, pA, true, point);
  } else {
    intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);
  }
  if (intersect === null)
    return null;
  _intersectionPointWorld.copy(point);
  _intersectionPointWorld.applyMatrix4(object.matrixWorld);
  const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
  if (distance < raycaster.near || distance > raycaster.far)
    return null;
  return {
    distance,
    point: _intersectionPointWorld.clone(),
    object
  };
}
function checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a2, b2, c2) {
  _vA.fromBufferAttribute(position, a2);
  _vB.fromBufferAttribute(position, b2);
  _vC.fromBufferAttribute(position, c2);
  const morphInfluences = object.morphTargetInfluences;
  if (material.morphTargets && morphPosition && morphInfluences) {
    _morphA.set(0, 0, 0);
    _morphB.set(0, 0, 0);
    _morphC.set(0, 0, 0);
    for (let i2 = 0, il = morphPosition.length; i2 < il; i2++) {
      const influence = morphInfluences[i2];
      const morphAttribute = morphPosition[i2];
      if (influence === 0)
        continue;
      _tempA.fromBufferAttribute(morphAttribute, a2);
      _tempB.fromBufferAttribute(morphAttribute, b2);
      _tempC.fromBufferAttribute(morphAttribute, c2);
      if (morphTargetsRelative) {
        _morphA.addScaledVector(_tempA, influence);
        _morphB.addScaledVector(_tempB, influence);
        _morphC.addScaledVector(_tempC, influence);
      } else {
        _morphA.addScaledVector(_tempA.sub(_vA), influence);
        _morphB.addScaledVector(_tempB.sub(_vB), influence);
        _morphC.addScaledVector(_tempC.sub(_vC), influence);
      }
    }
    _vA.add(_morphA);
    _vB.add(_morphB);
    _vC.add(_morphC);
  }
  if (object.isSkinnedMesh) {
    object.boneTransform(a2, _vA);
    object.boneTransform(b2, _vB);
    object.boneTransform(c2, _vC);
  }
  const intersection = checkIntersection(object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint);
  if (intersection) {
    if (uv) {
      _uvA.fromBufferAttribute(uv, a2);
      _uvB.fromBufferAttribute(uv, b2);
      _uvC.fromBufferAttribute(uv, c2);
      intersection.uv = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());
    }
    if (uv2) {
      _uvA.fromBufferAttribute(uv2, a2);
      _uvB.fromBufferAttribute(uv2, b2);
      _uvC.fromBufferAttribute(uv2, c2);
      intersection.uv2 = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());
    }
    const face = new Face3(a2, b2, c2);
    Triangle.getNormal(_vA, _vB, _vC, face.normal);
    intersection.face = face;
  }
  return intersection;
}
class BoxBufferGeometry extends BufferGeometry {
  constructor(width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
    super();
    this.type = "BoxBufferGeometry";
    this.parameters = {
      width,
      height,
      depth,
      widthSegments,
      heightSegments,
      depthSegments
    };
    const scope = this;
    widthSegments = Math.floor(widthSegments);
    heightSegments = Math.floor(heightSegments);
    depthSegments = Math.floor(depthSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let numberOfVertices = 0;
    let groupStart = 0;
    buildPlane("z", "y", "x", -1, -1, depth, height, width, depthSegments, heightSegments, 0);
    buildPlane("z", "y", "x", 1, -1, depth, height, -width, depthSegments, heightSegments, 1);
    buildPlane("x", "z", "y", 1, 1, width, depth, height, widthSegments, depthSegments, 2);
    buildPlane("x", "z", "y", 1, -1, width, depth, -height, widthSegments, depthSegments, 3);
    buildPlane("x", "y", "z", 1, -1, width, height, depth, widthSegments, heightSegments, 4);
    buildPlane("x", "y", "z", -1, -1, width, height, -depth, widthSegments, heightSegments, 5);
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function buildPlane(u2, v2, w2, udir, vdir, width2, height2, depth2, gridX, gridY, materialIndex) {
      const segmentWidth = width2 / gridX;
      const segmentHeight = height2 / gridY;
      const widthHalf = width2 / 2;
      const heightHalf = height2 / 2;
      const depthHalf = depth2 / 2;
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      let vertexCounter = 0;
      let groupCount = 0;
      const vector = new Vector3();
      for (let iy = 0; iy < gridY1; iy++) {
        const y2 = iy * segmentHeight - heightHalf;
        for (let ix = 0; ix < gridX1; ix++) {
          const x2 = ix * segmentWidth - widthHalf;
          vector[u2] = x2 * udir;
          vector[v2] = y2 * vdir;
          vector[w2] = depthHalf;
          vertices.push(vector.x, vector.y, vector.z);
          vector[u2] = 0;
          vector[v2] = 0;
          vector[w2] = depth2 > 0 ? 1 : -1;
          normals.push(vector.x, vector.y, vector.z);
          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY);
          vertexCounter += 1;
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a2 = numberOfVertices + ix + gridX1 * iy;
          const b2 = numberOfVertices + ix + gridX1 * (iy + 1);
          const c2 = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
          const d = numberOfVertices + (ix + 1) + gridX1 * iy;
          indices.push(a2, b2, d);
          indices.push(b2, c2, d);
          groupCount += 6;
        }
      }
      scope.addGroup(groupStart, groupCount, materialIndex);
      groupStart += groupCount;
      numberOfVertices += vertexCounter;
    }
  }
}
function cloneUniforms(src) {
  const dst = {};
  for (const u2 in src) {
    dst[u2] = {};
    for (const p2 in src[u2]) {
      const property = src[u2][p2];
      if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture)) {
        dst[u2][p2] = property.clone();
      } else if (Array.isArray(property)) {
        dst[u2][p2] = property.slice();
      } else {
        dst[u2][p2] = property;
      }
    }
  }
  return dst;
}
function mergeUniforms(uniforms) {
  const merged = {};
  for (let u2 = 0; u2 < uniforms.length; u2++) {
    const tmp2 = cloneUniforms(uniforms[u2]);
    for (const p2 in tmp2) {
      merged[p2] = tmp2[p2];
    }
  }
  return merged;
}
const UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
var default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
var default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
function ShaderMaterial(parameters) {
  Material.call(this);
  this.type = "ShaderMaterial";
  this.defines = {};
  this.uniforms = {};
  this.vertexShader = default_vertex;
  this.fragmentShader = default_fragment;
  this.linewidth = 1;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.fog = false;
  this.lights = false;
  this.clipping = false;
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.extensions = {
    derivatives: false,
    fragDepth: false,
    drawBuffers: false,
    shaderTextureLOD: false
  };
  this.defaultAttributeValues = {
    "color": [1, 1, 1],
    "uv": [0, 0],
    "uv2": [0, 0]
  };
  this.index0AttributeName = void 0;
  this.uniformsNeedUpdate = false;
  this.glslVersion = null;
  if (parameters !== void 0) {
    if (parameters.attributes !== void 0) {
      console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.");
    }
    this.setValues(parameters);
  }
}
ShaderMaterial.prototype = Object.create(Material.prototype);
ShaderMaterial.prototype.constructor = ShaderMaterial;
ShaderMaterial.prototype.isShaderMaterial = true;
ShaderMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.fragmentShader = source.fragmentShader;
  this.vertexShader = source.vertexShader;
  this.uniforms = cloneUniforms(source.uniforms);
  this.defines = Object.assign({}, source.defines);
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.lights = source.lights;
  this.clipping = source.clipping;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  this.extensions = Object.assign({}, source.extensions);
  this.glslVersion = source.glslVersion;
  return this;
};
ShaderMaterial.prototype.toJSON = function(meta) {
  const data = Material.prototype.toJSON.call(this, meta);
  data.glslVersion = this.glslVersion;
  data.uniforms = {};
  for (const name in this.uniforms) {
    const uniform = this.uniforms[name];
    const value = uniform.value;
    if (value && value.isTexture) {
      data.uniforms[name] = {
        type: "t",
        value: value.toJSON(meta).uuid
      };
    } else if (value && value.isColor) {
      data.uniforms[name] = {
        type: "c",
        value: value.getHex()
      };
    } else if (value && value.isVector2) {
      data.uniforms[name] = {
        type: "v2",
        value: value.toArray()
      };
    } else if (value && value.isVector3) {
      data.uniforms[name] = {
        type: "v3",
        value: value.toArray()
      };
    } else if (value && value.isVector4) {
      data.uniforms[name] = {
        type: "v4",
        value: value.toArray()
      };
    } else if (value && value.isMatrix3) {
      data.uniforms[name] = {
        type: "m3",
        value: value.toArray()
      };
    } else if (value && value.isMatrix4) {
      data.uniforms[name] = {
        type: "m4",
        value: value.toArray()
      };
    } else {
      data.uniforms[name] = {
        value
      };
    }
  }
  if (Object.keys(this.defines).length > 0)
    data.defines = this.defines;
  data.vertexShader = this.vertexShader;
  data.fragmentShader = this.fragmentShader;
  const extensions = {};
  for (const key in this.extensions) {
    if (this.extensions[key] === true)
      extensions[key] = true;
  }
  if (Object.keys(extensions).length > 0)
    data.extensions = extensions;
  return data;
};
function Camera() {
  Object3D.call(this);
  this.type = "Camera";
  this.matrixWorldInverse = new Matrix4();
  this.projectionMatrix = new Matrix4();
  this.projectionMatrixInverse = new Matrix4();
}
Camera.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Camera,
  isCamera: true,
  copy: function(source, recursive) {
    Object3D.prototype.copy.call(this, source, recursive);
    this.matrixWorldInverse.copy(source.matrixWorldInverse);
    this.projectionMatrix.copy(source.projectionMatrix);
    this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
    return this;
  },
  getWorldDirection: function(target) {
    if (target === void 0) {
      console.warn("THREE.Camera: .getWorldDirection() target is now required");
      target = new Vector3();
    }
    this.updateWorldMatrix(true, false);
    const e2 = this.matrixWorld.elements;
    return target.set(-e2[8], -e2[9], -e2[10]).normalize();
  },
  updateMatrixWorld: function(force) {
    Object3D.prototype.updateMatrixWorld.call(this, force);
    this.matrixWorldInverse.getInverse(this.matrixWorld);
  },
  updateWorldMatrix: function(updateParents, updateChildren) {
    Object3D.prototype.updateWorldMatrix.call(this, updateParents, updateChildren);
    this.matrixWorldInverse.getInverse(this.matrixWorld);
  },
  clone: function() {
    return new this.constructor().copy(this);
  }
});
function PerspectiveCamera(fov2, aspect2, near, far) {
  Camera.call(this);
  this.type = "PerspectiveCamera";
  this.fov = fov2 !== void 0 ? fov2 : 50;
  this.zoom = 1;
  this.near = near !== void 0 ? near : 0.1;
  this.far = far !== void 0 ? far : 2e3;
  this.focus = 10;
  this.aspect = aspect2 !== void 0 ? aspect2 : 1;
  this.view = null;
  this.filmGauge = 35;
  this.filmOffset = 0;
  this.updateProjectionMatrix();
}
PerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {
  constructor: PerspectiveCamera,
  isPerspectiveCamera: true,
  copy: function(source, recursive) {
    Camera.prototype.copy.call(this, source, recursive);
    this.fov = source.fov;
    this.zoom = source.zoom;
    this.near = source.near;
    this.far = source.far;
    this.focus = source.focus;
    this.aspect = source.aspect;
    this.view = source.view === null ? null : Object.assign({}, source.view);
    this.filmGauge = source.filmGauge;
    this.filmOffset = source.filmOffset;
    return this;
  },
  setFocalLength: function(focalLength) {
    const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
    this.fov = MathUtils.RAD2DEG * 2 * Math.atan(vExtentSlope);
    this.updateProjectionMatrix();
  },
  getFocalLength: function() {
    const vExtentSlope = Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / vExtentSlope;
  },
  getEffectiveFOV: function() {
    return MathUtils.RAD2DEG * 2 * Math.atan(Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom);
  },
  getFilmWidth: function() {
    return this.filmGauge * Math.min(this.aspect, 1);
  },
  getFilmHeight: function() {
    return this.filmGauge / Math.max(this.aspect, 1);
  },
  setViewOffset: function(fullWidth, fullHeight, x2, y2, width, height) {
    this.aspect = fullWidth / fullHeight;
    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }
    this.view.enabled = true;
    this.view.fullWidth = fullWidth;
    this.view.fullHeight = fullHeight;
    this.view.offsetX = x2;
    this.view.offsetY = y2;
    this.view.width = width;
    this.view.height = height;
    this.updateProjectionMatrix();
  },
  clearViewOffset: function() {
    if (this.view !== null) {
      this.view.enabled = false;
    }
    this.updateProjectionMatrix();
  },
  updateProjectionMatrix: function() {
    const near = this.near;
    let top = near * Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom;
    let height = 2 * top;
    let width = this.aspect * height;
    let left = -0.5 * width;
    const view = this.view;
    if (this.view !== null && this.view.enabled) {
      const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
      left += view.offsetX * width / fullWidth;
      top -= view.offsetY * height / fullHeight;
      width *= view.width / fullWidth;
      height *= view.height / fullHeight;
    }
    const skew = this.filmOffset;
    if (skew !== 0)
      left += near * skew / this.getFilmWidth();
    this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);
    this.projectionMatrixInverse.getInverse(this.projectionMatrix);
  },
  toJSON: function(meta) {
    const data = Object3D.prototype.toJSON.call(this, meta);
    data.object.fov = this.fov;
    data.object.zoom = this.zoom;
    data.object.near = this.near;
    data.object.far = this.far;
    data.object.focus = this.focus;
    data.object.aspect = this.aspect;
    if (this.view !== null)
      data.object.view = Object.assign({}, this.view);
    data.object.filmGauge = this.filmGauge;
    data.object.filmOffset = this.filmOffset;
    return data;
  }
});
const fov = 90, aspect = 1;
function CubeCamera(near, far, renderTarget) {
  Object3D.call(this);
  this.type = "CubeCamera";
  if (renderTarget.isWebGLCubeRenderTarget !== true) {
    console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");
    return;
  }
  this.renderTarget = renderTarget;
  const cameraPX = new PerspectiveCamera(fov, aspect, near, far);
  cameraPX.layers = this.layers;
  cameraPX.up.set(0, -1, 0);
  cameraPX.lookAt(new Vector3(1, 0, 0));
  this.add(cameraPX);
  const cameraNX = new PerspectiveCamera(fov, aspect, near, far);
  cameraNX.layers = this.layers;
  cameraNX.up.set(0, -1, 0);
  cameraNX.lookAt(new Vector3(-1, 0, 0));
  this.add(cameraNX);
  const cameraPY = new PerspectiveCamera(fov, aspect, near, far);
  cameraPY.layers = this.layers;
  cameraPY.up.set(0, 0, 1);
  cameraPY.lookAt(new Vector3(0, 1, 0));
  this.add(cameraPY);
  const cameraNY = new PerspectiveCamera(fov, aspect, near, far);
  cameraNY.layers = this.layers;
  cameraNY.up.set(0, 0, -1);
  cameraNY.lookAt(new Vector3(0, -1, 0));
  this.add(cameraNY);
  const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
  cameraPZ.layers = this.layers;
  cameraPZ.up.set(0, -1, 0);
  cameraPZ.lookAt(new Vector3(0, 0, 1));
  this.add(cameraPZ);
  const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
  cameraNZ.layers = this.layers;
  cameraNZ.up.set(0, -1, 0);
  cameraNZ.lookAt(new Vector3(0, 0, -1));
  this.add(cameraNZ);
  this.update = function(renderer2, scene) {
    if (this.parent === null)
      this.updateMatrixWorld();
    const currentXrEnabled = renderer2.xr.enabled;
    const currentRenderTarget = renderer2.getRenderTarget();
    renderer2.xr.enabled = false;
    const generateMipmaps = renderTarget.texture.generateMipmaps;
    renderTarget.texture.generateMipmaps = false;
    renderer2.setRenderTarget(renderTarget, 0);
    renderer2.render(scene, cameraPX);
    renderer2.setRenderTarget(renderTarget, 1);
    renderer2.render(scene, cameraNX);
    renderer2.setRenderTarget(renderTarget, 2);
    renderer2.render(scene, cameraPY);
    renderer2.setRenderTarget(renderTarget, 3);
    renderer2.render(scene, cameraNY);
    renderer2.setRenderTarget(renderTarget, 4);
    renderer2.render(scene, cameraPZ);
    renderTarget.texture.generateMipmaps = generateMipmaps;
    renderer2.setRenderTarget(renderTarget, 5);
    renderer2.render(scene, cameraNZ);
    renderer2.setRenderTarget(currentRenderTarget);
    renderer2.xr.enabled = currentXrEnabled;
  };
}
CubeCamera.prototype = Object.create(Object3D.prototype);
CubeCamera.prototype.constructor = CubeCamera;
function CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
  images = images !== void 0 ? images : [];
  mapping = mapping !== void 0 ? mapping : CubeReflectionMapping;
  format = format !== void 0 ? format : RGBFormat;
  Texture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
  this.flipY = false;
  this._needsFlipEnvMap = true;
}
CubeTexture.prototype = Object.create(Texture.prototype);
CubeTexture.prototype.constructor = CubeTexture;
CubeTexture.prototype.isCubeTexture = true;
Object.defineProperty(CubeTexture.prototype, "images", {
  get: function() {
    return this.image;
  },
  set: function(value) {
    this.image = value;
  }
});
function WebGLCubeRenderTarget(size2, options, dummy) {
  if (Number.isInteger(options)) {
    console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )");
    options = dummy;
  }
  WebGLRenderTarget.call(this, size2, size2, options);
  options = options || {};
  this.texture = new CubeTexture(void 0, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
  this.texture._needsFlipEnvMap = false;
}
WebGLCubeRenderTarget.prototype = Object.create(WebGLRenderTarget.prototype);
WebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;
WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;
WebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function(renderer2, texture) {
  this.texture.type = texture.type;
  this.texture.format = RGBAFormat;
  this.texture.encoding = texture.encoding;
  this.texture.generateMipmaps = texture.generateMipmaps;
  this.texture.minFilter = texture.minFilter;
  this.texture.magFilter = texture.magFilter;
  const shader = {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: `

			varying vec3 vWorldDirection;

			vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

				return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

			}

			void main() {

				vWorldDirection = transformDirection( position, modelMatrix );

				#include <begin_vertex>
				#include <project_vertex>

			}
		`,
    fragmentShader: `

			uniform sampler2D tEquirect;

			varying vec3 vWorldDirection;

			#include <common>

			void main() {

				vec3 direction = normalize( vWorldDirection );

				vec2 sampleUV = equirectUv( direction );

				gl_FragColor = texture2D( tEquirect, sampleUV );

			}
		`
  };
  const geometry = new BoxBufferGeometry(5, 5, 5);
  const material = new ShaderMaterial({
    name: "CubemapFromEquirect",
    uniforms: cloneUniforms(shader.uniforms),
    vertexShader: shader.vertexShader,
    fragmentShader: shader.fragmentShader,
    side: BackSide,
    blending: NoBlending
  });
  material.uniforms.tEquirect.value = texture;
  const mesh = new Mesh(geometry, material);
  const currentMinFilter = texture.minFilter;
  if (texture.minFilter === LinearMipmapLinearFilter)
    texture.minFilter = LinearFilter;
  const camera = new CubeCamera(1, 10, this);
  camera.update(renderer2, mesh);
  texture.minFilter = currentMinFilter;
  mesh.geometry.dispose();
  mesh.material.dispose();
  return this;
};
WebGLCubeRenderTarget.prototype.clear = function(renderer2, color, depth, stencil) {
  const currentRenderTarget = renderer2.getRenderTarget();
  for (let i2 = 0; i2 < 6; i2++) {
    renderer2.setRenderTarget(this, i2);
    renderer2.clear(color, depth, stencil);
  }
  renderer2.setRenderTarget(currentRenderTarget);
};
function DataTexture(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
  Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
  this.image = { data: data || null, width: width || 1, height: height || 1 };
  this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
  this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
  this.generateMipmaps = false;
  this.flipY = false;
  this.unpackAlignment = 1;
  this.needsUpdate = true;
}
DataTexture.prototype = Object.create(Texture.prototype);
DataTexture.prototype.constructor = DataTexture;
DataTexture.prototype.isDataTexture = true;
const _sphere$1 = /* @__PURE__ */ new Sphere();
const _vector$5 = /* @__PURE__ */ new Vector3();
class Frustum {
  constructor(p0, p1, p2, p3, p4, p5) {
    this.planes = [
      p0 !== void 0 ? p0 : new Plane(),
      p1 !== void 0 ? p1 : new Plane(),
      p2 !== void 0 ? p2 : new Plane(),
      p3 !== void 0 ? p3 : new Plane(),
      p4 !== void 0 ? p4 : new Plane(),
      p5 !== void 0 ? p5 : new Plane()
    ];
  }
  set(p0, p1, p2, p3, p4, p5) {
    const planes = this.planes;
    planes[0].copy(p0);
    planes[1].copy(p1);
    planes[2].copy(p2);
    planes[3].copy(p3);
    planes[4].copy(p4);
    planes[5].copy(p5);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(frustum) {
    const planes = this.planes;
    for (let i2 = 0; i2 < 6; i2++) {
      planes[i2].copy(frustum.planes[i2]);
    }
    return this;
  }
  setFromProjectionMatrix(m2) {
    const planes = this.planes;
    const me2 = m2.elements;
    const me0 = me2[0], me1 = me2[1], me22 = me2[2], me3 = me2[3];
    const me4 = me2[4], me5 = me2[5], me6 = me2[6], me7 = me2[7];
    const me8 = me2[8], me9 = me2[9], me10 = me2[10], me11 = me2[11];
    const me12 = me2[12], me13 = me2[13], me14 = me2[14], me15 = me2[15];
    planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
    planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
    planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
    planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
    planes[4].setComponents(me3 - me22, me7 - me6, me11 - me10, me15 - me14).normalize();
    planes[5].setComponents(me3 + me22, me7 + me6, me11 + me10, me15 + me14).normalize();
    return this;
  }
  intersectsObject(object) {
    const geometry = object.geometry;
    if (geometry.boundingSphere === null)
      geometry.computeBoundingSphere();
    _sphere$1.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
    return this.intersectsSphere(_sphere$1);
  }
  intersectsSprite(sprite) {
    _sphere$1.center.set(0, 0, 0);
    _sphere$1.radius = 0.7071067811865476;
    _sphere$1.applyMatrix4(sprite.matrixWorld);
    return this.intersectsSphere(_sphere$1);
  }
  intersectsSphere(sphere) {
    const planes = this.planes;
    const center = sphere.center;
    const negRadius = -sphere.radius;
    for (let i2 = 0; i2 < 6; i2++) {
      const distance = planes[i2].distanceToPoint(center);
      if (distance < negRadius) {
        return false;
      }
    }
    return true;
  }
  intersectsBox(box) {
    const planes = this.planes;
    for (let i2 = 0; i2 < 6; i2++) {
      const plane = planes[i2];
      _vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;
      _vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;
      _vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;
      if (plane.distanceToPoint(_vector$5) < 0) {
        return false;
      }
    }
    return true;
  }
  containsPoint(point) {
    const planes = this.planes;
    for (let i2 = 0; i2 < 6; i2++) {
      if (planes[i2].distanceToPoint(point) < 0) {
        return false;
      }
    }
    return true;
  }
}
function WebGLAnimation() {
  let context = null;
  let isAnimating = false;
  let animationLoop = null;
  let requestId = null;
  function onAnimationFrame(time, frame) {
    animationLoop(time, frame);
    requestId = context.requestAnimationFrame(onAnimationFrame);
  }
  return {
    start: function() {
      if (isAnimating === true)
        return;
      if (animationLoop === null)
        return;
      requestId = context.requestAnimationFrame(onAnimationFrame);
      isAnimating = true;
    },
    stop: function() {
      context.cancelAnimationFrame(requestId);
      isAnimating = false;
    },
    setAnimationLoop: function(callback) {
      animationLoop = callback;
    },
    setContext: function(value) {
      context = value;
    }
  };
}
function WebGLAttributes(gl, capabilities) {
  const isWebGL2 = capabilities.isWebGL2;
  const buffers = new WeakMap();
  function createBuffer(attribute, bufferType) {
    const array = attribute.array;
    const usage = attribute.usage;
    const buffer = gl.createBuffer();
    gl.bindBuffer(bufferType, buffer);
    gl.bufferData(bufferType, array, usage);
    attribute.onUploadCallback();
    let type = 5126;
    if (array instanceof Float32Array) {
      type = 5126;
    } else if (array instanceof Float64Array) {
      console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.");
    } else if (array instanceof Uint16Array) {
      type = 5123;
    } else if (array instanceof Int16Array) {
      type = 5122;
    } else if (array instanceof Uint32Array) {
      type = 5125;
    } else if (array instanceof Int32Array) {
      type = 5124;
    } else if (array instanceof Int8Array) {
      type = 5120;
    } else if (array instanceof Uint8Array) {
      type = 5121;
    }
    return {
      buffer,
      type,
      bytesPerElement: array.BYTES_PER_ELEMENT,
      version: attribute.version
    };
  }
  function updateBuffer(buffer, attribute, bufferType) {
    const array = attribute.array;
    const updateRange = attribute.updateRange;
    gl.bindBuffer(bufferType, buffer);
    if (updateRange.count === -1) {
      gl.bufferSubData(bufferType, 0, array);
    } else {
      if (isWebGL2) {
        gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);
      } else {
        gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
      }
      updateRange.count = -1;
    }
  }
  function get2(attribute) {
    if (attribute.isInterleavedBufferAttribute)
      attribute = attribute.data;
    return buffers.get(attribute);
  }
  function remove2(attribute) {
    if (attribute.isInterleavedBufferAttribute)
      attribute = attribute.data;
    const data = buffers.get(attribute);
    if (data) {
      gl.deleteBuffer(data.buffer);
      buffers.delete(attribute);
    }
  }
  function update(attribute, bufferType) {
    if (attribute.isGLBufferAttribute) {
      var cached = buffers.get(attribute);
      if (!cached || cached.version < attribute.version) {
        buffers.set(attribute, {
          buffer: attribute.buffer,
          type: attribute.type,
          bytesPerElement: attribute.elementSize,
          version: attribute.version
        });
      }
      return;
    }
    if (attribute.isInterleavedBufferAttribute)
      attribute = attribute.data;
    const data = buffers.get(attribute);
    if (data === void 0) {
      buffers.set(attribute, createBuffer(attribute, bufferType));
    } else if (data.version < attribute.version) {
      updateBuffer(data.buffer, attribute, bufferType);
      data.version = attribute.version;
    }
  }
  return {
    get: get2,
    remove: remove2,
    update
  };
}
class PlaneBufferGeometry extends BufferGeometry {
  constructor(width, height, widthSegments, heightSegments) {
    super();
    this.type = "PlaneBufferGeometry";
    this.parameters = {
      width,
      height,
      widthSegments,
      heightSegments
    };
    width = width || 1;
    height = height || 1;
    const width_half = width / 2;
    const height_half = height / 2;
    const gridX = Math.floor(widthSegments) || 1;
    const gridY = Math.floor(heightSegments) || 1;
    const gridX1 = gridX + 1;
    const gridY1 = gridY + 1;
    const segment_width = width / gridX;
    const segment_height = height / gridY;
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    for (let iy = 0; iy < gridY1; iy++) {
      const y2 = iy * segment_height - height_half;
      for (let ix = 0; ix < gridX1; ix++) {
        const x2 = ix * segment_width - width_half;
        vertices.push(x2, -y2, 0);
        normals.push(0, 0, 1);
        uvs.push(ix / gridX);
        uvs.push(1 - iy / gridY);
      }
    }
    for (let iy = 0; iy < gridY; iy++) {
      for (let ix = 0; ix < gridX; ix++) {
        const a2 = ix + gridX1 * iy;
        const b2 = ix + gridX1 * (iy + 1);
        const c2 = ix + 1 + gridX1 * (iy + 1);
        const d = ix + 1 + gridX1 * iy;
        indices.push(a2, b2, d);
        indices.push(b2, c2, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
}
var alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var alphatest_fragment = "#ifdef ALPHATEST\n	if ( diffuseColor.a < ALPHATEST ) discard;\n#endif";
var aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n	#endif\n#endif";
var aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
var begin_vertex = "vec3 transformed = vec3( position );";
var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
var bsdfs = "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	return vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n	if( cutoffDistance > 0.0 ) {\n		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n	}\n	return distanceFalloff;\n#else\n	if( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n		return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n	}\n	return 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n	float fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n	vec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n	return Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	return 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( incidentLight.direction + viewDir );\n	float dotNL = saturate( dot( normal, incidentLight.direction ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n	return specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	vec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n	vec3 FssEss = F * brdf.x + brdf.y;\n	float Ess = brdf.x + brdf.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n	float invAlpha = 1.0 / roughness;\n	float cos2h = NoH * NoH;\n	float sin2h = max(1.0 - cos2h, 0.0078125);	return (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n	return saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n	vec3 N = geometry.normal;\n	vec3 V = geometry.viewDir;\n	vec3 H = normalize( V + L );\n	float dotNH = saturate( dot( N, H ) );\n	return specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif";
var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 );\n		fDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#pragma unroll_loop_end\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop_start\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		#pragma unroll_loop_end\n		if ( clipped ) discard;\n	#endif\n#endif";
var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
var color_fragment = "#ifdef USE_COLOR\n	diffuseColor.rgb *= vColor;\n#endif";
var color_pars_fragment = "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif";
var color_pars_vertex = "#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	varying vec3 vColor;\n#endif";
var color_vertex = "#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor.xyz *= color.xyz;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif";
var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n#ifdef CLEARCOAT\n	vec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	float distance = dot( planeNormal, point - pointOnPlane );\n	return - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n	return dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}";
var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_maxMipLevel 8.0\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_maxTileSize 256.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		float texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n		vec2 f = fract( uv );\n		uv += 0.5 - f;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		if ( mipInt < cubeUV_maxMipLevel ) {\n			uv.y += 2.0 * cubeUV_maxTileSize;\n		}\n		uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n		uv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n		uv *= texelSize;\n		vec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.x += texelSize;\n		vec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.y += texelSize;\n		vec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		uv.x -= texelSize;\n		vec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n		vec3 tm = mix( tl, tr, f.x );\n		vec3 bm = mix( bl, br, f.x );\n		return mix( tm, bm, f.y );\n	}\n	#define r0 1.0\n	#define v0 0.339\n	#define m0 - 2.0\n	#define r1 0.8\n	#define v1 0.276\n	#define m1 - 1.0\n	#define r4 0.4\n	#define v4 0.046\n	#define m4 2.0\n	#define r5 0.305\n	#define v5 0.016\n	#define m5 3.0\n	#define r6 0.21\n	#define v6 0.0038\n	#define m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= r1 ) {\n			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n		} else if ( roughness >= r4 ) {\n			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n		} else if ( roughness >= r5 ) {\n			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n		} else if ( roughness >= r6 ) {\n			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n	mat3 m = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n	transformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";
var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n	float maxComponent = max( max( value.r, value.g ), value.b );\n	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.r, max( value.g, value.b ) );\n	float M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n	M = ceil( M * 255.0 ) / 255.0;\n	return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.r, max( value.g, value.b ) );\n	float D = max( maxRange / maxRGB, 1.0 );\n	D = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n	vec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n	Xp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n	vec4 vResult;\n	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n	vResult.w = fract( Le );\n	vResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n	return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n	float Le = value.z * 255.0 + value.w;\n	vec3 Xp_Y_XYZp;\n	Xp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n	vec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n	return vec4( max( vRGB, 0.0 ), 1.0 );\n}";
var envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifndef ENVMAP_TYPE_CUBE_UV\n		envColor = envMapTexelToLinear( envColor );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform int maxMipLevel;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
var envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
var envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
var envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
var fog_vertex = "#ifdef USE_FOG\n	fogDepth = - mvPosition.z;\n#endif";
var fog_pars_vertex = "#ifdef USE_FOG\n	varying float fogDepth;\n#endif";
var fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
var fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float fogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return texture2D( gradientMap, coord ).rgb;\n	#else\n		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n	#endif\n}";
var lightmap_fragment = "#ifdef USE_LIGHTMAP\n	vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n	reflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif";
var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n	vIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		#ifdef DOUBLE_SIDED\n			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n		#endif\n	}\n	#pragma unroll_loop_end\n#endif";
var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n	vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	return irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		directLight.color = directionalLight.color;\n		directLight.direction = directionalLight.direction;\n		directLight.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		directLight.color = pointLight.color;\n		directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n		directLight.visible = ( directLight.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		float angleCos = dot( directLight.direction, spotLight.direction );\n		if ( angleCos > spotLight.coneCos ) {\n			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n			directLight.color = spotLight.color;\n			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n			directLight.visible = true;\n		} else {\n			directLight.color = vec3( 0.0 );\n			directLight.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n		float dotNL = dot( geometry.normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			irradiance *= PI;\n		#endif\n		return irradiance;\n	}\n#endif";
var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n	#ifdef ENVMAP_MODE_REFRACTION\n		uniform float refractionRatio;\n	#endif\n	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n		#else\n			vec4 envMapColor = vec4( 0.0 );\n		#endif\n		return PI * envMapColor.rgb * envMapIntensity;\n	}\n	float getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n		float maxMIPLevelScalar = float( maxMIPLevel );\n		float sigma = PI * roughness * roughness / ( 1.0 + roughness );\n		float desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n	}\n	vec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( -viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n		#else\n			vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n		#endif\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n		float specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n		#endif\n		return envMapColor.rgb * envMapIntensity;\n	}\n#endif";
var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
var lights_toon_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )	(0)";
var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)";
var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheen;\n#endif";
var lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float specularRoughness;\n	vec3 specularColor;\n#ifdef CLEARCOAT\n	float clearcoat;\n	float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n	vec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n	return DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.specularRoughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	#ifdef CLEARCOAT\n		float ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = ccDotNL * directLight.color;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			ccIrradiance *= PI;\n		#endif\n		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n		reflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n	#else\n		float clearcoatDHR = 0.0;\n	#endif\n	#ifdef USE_SHEEN\n		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n			material.specularRoughness,\n			directLight.direction,\n			geometry,\n			material.sheenColor\n		);\n	#else\n		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n	#endif\n	reflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef CLEARCOAT\n		float ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n		float ccDotNL = ccDotNV;\n		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n	#else\n		float clearcoatDHR = 0.0;\n	#endif\n	float clearcoatInv = 1.0 - clearcoatDHR;\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	BRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n	reflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n	geometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointDirectLightIrradiance( pointLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotDirectLightIrradiance( spotLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	irradiance += getLightProbeIrradiance( lightProbe, geometry );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			lightMapIrradiance *= PI;\n		#endif\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	radiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n	#ifdef CLEARCOAT\n		clearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n	#endif\n#endif";
var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n		varying float vIsPerspective;\n	#else\n		uniform float logDepthBufFC;\n	#endif\n#endif";
var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n	#else\n		if ( isPerspectiveMatrix( projectionMatrix ) ) {\n			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n			gl_Position.z *= gl_Position.w;\n		}\n	#endif\n#endif";
var map_fragment = "#ifdef USE_MAP\n	vec4 texelColor = texture2D( map, vUv );\n	texelColor = mapTexelToLinear( texelColor );\n	diffuseColor *= texelColor;\n#endif";
var map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n	vec4 mapTexel = texture2D( map, uv );\n	diffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	uniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n	objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n	objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n	objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif";
var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	uniform float morphTargetBaseInfluence;\n	#ifndef USE_MORPHNORMALS\n		uniform float morphTargetInfluences[ 8 ];\n	#else\n		uniform float morphTargetInfluences[ 4 ];\n	#endif\n#endif";
var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	transformed += morphTarget0 * morphTargetInfluences[ 0 ];\n	transformed += morphTarget1 * morphTargetInfluences[ 1 ];\n	transformed += morphTarget2 * morphTargetInfluences[ 2 ];\n	transformed += morphTarget3 * morphTargetInfluences[ 3 ];\n	#ifndef USE_MORPHNORMALS\n		transformed += morphTarget4 * morphTargetInfluences[ 4 ];\n		transformed += morphTarget5 * morphTargetInfluences[ 5 ];\n		transformed += morphTarget6 * morphTargetInfluences[ 6 ];\n		transformed += morphTarget7 * morphTargetInfluences[ 7 ];\n	#endif\n#endif";
var normal_fragment_begin = "#ifdef FLAT_SHADED\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#endif\n	#ifdef USE_TANGENT\n		vec3 tangent = normalize( vTangent );\n		vec3 bitangent = normalize( vBitangent );\n		#ifdef DOUBLE_SIDED\n			tangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n			bitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		#endif\n		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n			mat3 vTBN = mat3( tangent, bitangent, normal );\n		#endif\n	#endif\n#endif\nvec3 geometryNormal = normal;";
var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	#ifdef USE_TANGENT\n		normal = normalize( vTBN * mapN );\n	#else\n		normal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n	#endif\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif";
var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		float scale = sign( st1.t * st0.s - st0.t * st1.s );\n		vec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n		vec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n		vec3 N = normalize( surf_norm );\n		mat3 tsn = mat3( S, T, N );\n		mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n		return normalize( tsn * mapN );\n	}\n#endif";
var clearcoat_normal_fragment_begin = "#ifdef CLEARCOAT\n	vec3 clearcoatNormal = geometryNormal;\n#endif";
var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	#ifdef USE_TANGENT\n		clearcoatNormal = normalize( vTBN * clearcoatMapN );\n	#else\n		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n	#endif\n#endif";
var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif";
var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n	return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
var dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
var dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif";
var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		vec4 shadowWorldPosition;\n	#endif\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n	#endif\n#endif";
var shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
var skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
var skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform highp sampler2D boneTexture;\n		uniform int boneTextureSize;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureSize ) );\n			float y = floor( j / float( boneTextureSize ) );\n			float dx = 1.0 / float( boneTextureSize );\n			float dy = 1.0 / float( boneTextureSize );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif";
var skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
var skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
var tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
var transmissionmap_fragment = "#ifdef USE_TRANSMISSIONMAP\n	totalTransmission *= texture2D( transmissionMap, vUv ).r;\n#endif";
var transmissionmap_pars_fragment = "#ifdef USE_TRANSMISSIONMAP\n	uniform sampler2D transmissionMap;\n#endif";
var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n	varying vec2 vUv;\n#endif";
var uv_pars_vertex = "#ifdef USE_UV\n	#ifdef UVS_VERTEX_ONLY\n		vec2 vUv;\n	#else\n		varying vec2 vUv;\n	#endif\n	uniform mat3 uvTransform;\n#endif";
var uv_vertex = "#ifdef USE_UV\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif";
var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n	uniform mat3 uv2Transform;\n#endif";
var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";
var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
var background_frag = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	gl_FragColor = mapTexelToLinear( texColor );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
var background_vert = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
var cube_frag = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	vec3 vReflect = vWorldDirection;\n	#include <envmap_fragment>\n	gl_FragColor = envColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
var cube_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
var depth_frag = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#endif\n}";
var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	vec4 texColor = texture2D( tEquirect, sampleUV );\n	gl_FragColor = mapTexelToLinear( texColor );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n}";
var equirect_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n	\n		vec4 lightMapTexel= texture2D( lightMap, vUv2 );\n		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_ENVMAP\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <emissivemap_fragment>\n	#ifdef DOUBLE_SIDED\n		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n	#else\n		reflectedLight.indirectDiffuse += vIndirectFront;\n	#endif\n	#include <lightmap_fragment>\n	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n	#else\n		reflectedLight.directDiffuse = vLightFront;\n	#endif\n	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n	varying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_lambert_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var meshmatcap_frag = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n		matcapColor = matcapTexelToLinear( matcapColor );\n	#else\n		vec4 matcapColor = vec4( 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var meshmatcap_vert = "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#ifndef FLAT_SHADED\n		vNormal = normalize( transformedNormal );\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
var meshtoon_frag = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var meshtoon_vert = "#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var meshphysical_frag = "#define STANDARD\n#ifdef PHYSICAL\n	#define REFLECTIVITY\n	#define CLEARCOAT\n	#define TRANSMISSION\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSMISSION\n	uniform float transmission;\n#endif\n#ifdef REFLECTIVITY\n	uniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <transmissionmap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#ifdef TRANSMISSION\n		float totalTransmission = transmission;\n	#endif\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <transmissionmap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#ifdef TRANSMISSION\n		diffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\n	#endif\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var meshphysical_vert = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";
var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
var shadow_vert = "#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <begin_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}";
var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
const ShaderChunk = {
  alphamap_fragment,
  alphamap_pars_fragment,
  alphatest_fragment,
  aomap_fragment,
  aomap_pars_fragment,
  begin_vertex,
  beginnormal_vertex,
  bsdfs,
  bumpmap_pars_fragment,
  clipping_planes_fragment,
  clipping_planes_pars_fragment,
  clipping_planes_pars_vertex,
  clipping_planes_vertex,
  color_fragment,
  color_pars_fragment,
  color_pars_vertex,
  color_vertex,
  common,
  cube_uv_reflection_fragment,
  defaultnormal_vertex,
  displacementmap_pars_vertex,
  displacementmap_vertex,
  emissivemap_fragment,
  emissivemap_pars_fragment,
  encodings_fragment,
  encodings_pars_fragment,
  envmap_fragment,
  envmap_common_pars_fragment,
  envmap_pars_fragment,
  envmap_pars_vertex,
  envmap_physical_pars_fragment,
  envmap_vertex,
  fog_vertex,
  fog_pars_vertex,
  fog_fragment,
  fog_pars_fragment,
  gradientmap_pars_fragment,
  lightmap_fragment,
  lightmap_pars_fragment,
  lights_lambert_vertex,
  lights_pars_begin,
  lights_toon_fragment,
  lights_toon_pars_fragment,
  lights_phong_fragment,
  lights_phong_pars_fragment,
  lights_physical_fragment,
  lights_physical_pars_fragment,
  lights_fragment_begin,
  lights_fragment_maps,
  lights_fragment_end,
  logdepthbuf_fragment,
  logdepthbuf_pars_fragment,
  logdepthbuf_pars_vertex,
  logdepthbuf_vertex,
  map_fragment,
  map_pars_fragment,
  map_particle_fragment,
  map_particle_pars_fragment,
  metalnessmap_fragment,
  metalnessmap_pars_fragment,
  morphnormal_vertex,
  morphtarget_pars_vertex,
  morphtarget_vertex,
  normal_fragment_begin,
  normal_fragment_maps,
  normalmap_pars_fragment,
  clearcoat_normal_fragment_begin,
  clearcoat_normal_fragment_maps,
  clearcoat_pars_fragment,
  packing,
  premultiplied_alpha_fragment,
  project_vertex,
  dithering_fragment,
  dithering_pars_fragment,
  roughnessmap_fragment,
  roughnessmap_pars_fragment,
  shadowmap_pars_fragment,
  shadowmap_pars_vertex,
  shadowmap_vertex,
  shadowmask_pars_fragment,
  skinbase_vertex,
  skinning_pars_vertex,
  skinning_vertex,
  skinnormal_vertex,
  specularmap_fragment,
  specularmap_pars_fragment,
  tonemapping_fragment,
  tonemapping_pars_fragment,
  transmissionmap_fragment,
  transmissionmap_pars_fragment,
  uv_pars_fragment,
  uv_pars_vertex,
  uv_vertex,
  uv2_pars_fragment,
  uv2_pars_vertex,
  uv2_vertex,
  worldpos_vertex,
  background_frag,
  background_vert,
  cube_frag,
  cube_vert,
  depth_frag,
  depth_vert,
  distanceRGBA_frag,
  distanceRGBA_vert,
  equirect_frag,
  equirect_vert,
  linedashed_frag,
  linedashed_vert,
  meshbasic_frag,
  meshbasic_vert,
  meshlambert_frag,
  meshlambert_vert,
  meshmatcap_frag,
  meshmatcap_vert,
  meshtoon_frag,
  meshtoon_vert,
  meshphong_frag,
  meshphong_vert,
  meshphysical_frag,
  meshphysical_vert,
  normal_frag,
  normal_vert,
  points_frag,
  points_vert,
  shadow_frag,
  shadow_vert,
  sprite_frag,
  sprite_vert
};
const UniformsLib = {
  common: {
    diffuse: { value: new Color(15658734) },
    opacity: { value: 1 },
    map: { value: null },
    uvTransform: { value: new Matrix3() },
    uv2Transform: { value: new Matrix3() },
    alphaMap: { value: null }
  },
  specularmap: {
    specularMap: { value: null }
  },
  envmap: {
    envMap: { value: null },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    refractionRatio: { value: 0.98 },
    maxMipLevel: { value: 0 }
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 }
  },
  emissivemap: {
    emissiveMap: { value: null }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalScale: { value: new Vector2(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  roughnessmap: {
    roughnessMap: { value: null }
  },
  metalnessmap: {
    metalnessMap: { value: null }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: new Color(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotShadowMap: { value: [] },
    spotShadowMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: new Color(15658734) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    uvTransform: { value: new Matrix3() }
  },
  sprite: {
    diffuse: { value: new Color(15658734) },
    opacity: { value: 1 },
    center: { value: new Vector2(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    alphaMap: { value: null },
    uvTransform: { value: new Matrix3() }
  }
};
const ShaderLib = {
  basic: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.specularmap,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.fog
    ]),
    vertexShader: ShaderChunk.meshbasic_vert,
    fragmentShader: ShaderChunk.meshbasic_frag
  },
  lambert: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.specularmap,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: new Color(0) }
      }
    ]),
    vertexShader: ShaderChunk.meshlambert_vert,
    fragmentShader: ShaderChunk.meshlambert_frag
  },
  phong: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.specularmap,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: new Color(0) },
        specular: { value: new Color(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: ShaderChunk.meshphong_vert,
    fragmentShader: ShaderChunk.meshphong_frag
  },
  standard: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.roughnessmap,
      UniformsLib.metalnessmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: new Color(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.meshphysical_vert,
    fragmentShader: ShaderChunk.meshphysical_frag
  },
  toon: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.gradientmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: new Color(0) }
      }
    ]),
    vertexShader: ShaderChunk.meshtoon_vert,
    fragmentShader: ShaderChunk.meshtoon_frag
  },
  matcap: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: ShaderChunk.meshmatcap_vert,
    fragmentShader: ShaderChunk.meshmatcap_frag
  },
  points: {
    uniforms: mergeUniforms([
      UniformsLib.points,
      UniformsLib.fog
    ]),
    vertexShader: ShaderChunk.points_vert,
    fragmentShader: ShaderChunk.points_frag
  },
  dashed: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: ShaderChunk.linedashed_vert,
    fragmentShader: ShaderChunk.linedashed_frag
  },
  depth: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.displacementmap
    ]),
    vertexShader: ShaderChunk.depth_vert,
    fragmentShader: ShaderChunk.depth_frag
  },
  normal: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.normal_vert,
    fragmentShader: ShaderChunk.normal_frag
  },
  sprite: {
    uniforms: mergeUniforms([
      UniformsLib.sprite,
      UniformsLib.fog
    ]),
    vertexShader: ShaderChunk.sprite_vert,
    fragmentShader: ShaderChunk.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: new Matrix3() },
      t2D: { value: null }
    },
    vertexShader: ShaderChunk.background_vert,
    fragmentShader: ShaderChunk.background_frag
  },
  cube: {
    uniforms: mergeUniforms([
      UniformsLib.envmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.cube_vert,
    fragmentShader: ShaderChunk.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: ShaderChunk.equirect_vert,
    fragmentShader: ShaderChunk.equirect_frag
  },
  distanceRGBA: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.displacementmap,
      {
        referencePosition: { value: new Vector3() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: ShaderChunk.distanceRGBA_vert,
    fragmentShader: ShaderChunk.distanceRGBA_frag
  },
  shadow: {
    uniforms: mergeUniforms([
      UniformsLib.lights,
      UniformsLib.fog,
      {
        color: { value: new Color(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.shadow_vert,
    fragmentShader: ShaderChunk.shadow_frag
  }
};
ShaderLib.physical = {
  uniforms: mergeUniforms([
    ShaderLib.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatNormalScale: { value: new Vector2(1, 1) },
      clearcoatNormalMap: { value: null },
      sheen: { value: new Color(0) },
      transmission: { value: 0 },
      transmissionMap: { value: null }
    }
  ]),
  vertexShader: ShaderChunk.meshphysical_vert,
  fragmentShader: ShaderChunk.meshphysical_frag
};
function WebGLBackground(renderer2, cubemaps, state, objects, premultipliedAlpha) {
  const clearColor = new Color(0);
  let clearAlpha = 0;
  let planeMesh;
  let boxMesh;
  let currentBackground = null;
  let currentBackgroundVersion = 0;
  let currentTonemapping = null;
  function render(renderList, scene, camera, forceClear) {
    let background = scene.isScene === true ? scene.background : null;
    if (background && background.isTexture) {
      background = cubemaps.get(background);
    }
    const xr2 = renderer2.xr;
    const session = xr2.getSession && xr2.getSession();
    if (session && session.environmentBlendMode === "additive") {
      background = null;
    }
    if (background === null) {
      setClear(clearColor, clearAlpha);
    } else if (background && background.isColor) {
      setClear(background, 1);
      forceClear = true;
    }
    if (renderer2.autoClear || forceClear) {
      renderer2.clear(renderer2.autoClearColor, renderer2.autoClearDepth, renderer2.autoClearStencil);
    }
    if (background && (background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping)) {
      if (boxMesh === void 0) {
        boxMesh = new Mesh(new BoxBufferGeometry(1, 1, 1), new ShaderMaterial({
          name: "BackgroundCubeMaterial",
          uniforms: cloneUniforms(ShaderLib.cube.uniforms),
          vertexShader: ShaderLib.cube.vertexShader,
          fragmentShader: ShaderLib.cube.fragmentShader,
          side: BackSide,
          depthTest: false,
          depthWrite: false,
          fog: false
        }));
        boxMesh.geometry.deleteAttribute("normal");
        boxMesh.geometry.deleteAttribute("uv");
        boxMesh.onBeforeRender = function(renderer3, scene2, camera2) {
          this.matrixWorld.copyPosition(camera2.matrixWorld);
        };
        Object.defineProperty(boxMesh.material, "envMap", {
          get: function() {
            return this.uniforms.envMap.value;
          }
        });
        objects.update(boxMesh);
      }
      if (background.isWebGLCubeRenderTarget) {
        background = background.texture;
      }
      boxMesh.material.uniforms.envMap.value = background;
      boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;
      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer2.toneMapping) {
        boxMesh.material.needsUpdate = true;
        currentBackground = background;
        currentBackgroundVersion = background.version;
        currentTonemapping = renderer2.toneMapping;
      }
      renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
    } else if (background && background.isTexture) {
      if (planeMesh === void 0) {
        planeMesh = new Mesh(new PlaneBufferGeometry(2, 2), new ShaderMaterial({
          name: "BackgroundMaterial",
          uniforms: cloneUniforms(ShaderLib.background.uniforms),
          vertexShader: ShaderLib.background.vertexShader,
          fragmentShader: ShaderLib.background.fragmentShader,
          side: FrontSide,
          depthTest: false,
          depthWrite: false,
          fog: false
        }));
        planeMesh.geometry.deleteAttribute("normal");
        Object.defineProperty(planeMesh.material, "map", {
          get: function() {
            return this.uniforms.t2D.value;
          }
        });
        objects.update(planeMesh);
      }
      planeMesh.material.uniforms.t2D.value = background;
      if (background.matrixAutoUpdate === true) {
        background.updateMatrix();
      }
      planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer2.toneMapping) {
        planeMesh.material.needsUpdate = true;
        currentBackground = background;
        currentBackgroundVersion = background.version;
        currentTonemapping = renderer2.toneMapping;
      }
      renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
    }
  }
  function setClear(color, alpha) {
    state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);
  }
  return {
    getClearColor: function() {
      return clearColor;
    },
    setClearColor: function(color, alpha) {
      clearColor.set(color);
      clearAlpha = alpha !== void 0 ? alpha : 1;
      setClear(clearColor, clearAlpha);
    },
    getClearAlpha: function() {
      return clearAlpha;
    },
    setClearAlpha: function(alpha) {
      clearAlpha = alpha;
      setClear(clearColor, clearAlpha);
    },
    render
  };
}
function WebGLBindingStates(gl, extensions, attributes, capabilities) {
  const maxVertexAttributes = gl.getParameter(34921);
  const extension = capabilities.isWebGL2 ? null : extensions.get("OES_vertex_array_object");
  const vaoAvailable = capabilities.isWebGL2 || extension !== null;
  const bindingStates = {};
  const defaultState = createBindingState(null);
  let currentState = defaultState;
  function setup(object, material, program, geometry, index) {
    let updateBuffers = false;
    if (vaoAvailable) {
      const state = getBindingState(geometry, program, material);
      if (currentState !== state) {
        currentState = state;
        bindVertexArrayObject(currentState.object);
      }
      updateBuffers = needsUpdate(geometry, index);
      if (updateBuffers)
        saveCache(geometry, index);
    } else {
      const wireframe = material.wireframe === true;
      if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
        currentState.geometry = geometry.id;
        currentState.program = program.id;
        currentState.wireframe = wireframe;
        updateBuffers = true;
      }
    }
    if (object.isInstancedMesh === true) {
      updateBuffers = true;
    }
    if (index !== null) {
      attributes.update(index, 34963);
    }
    if (updateBuffers) {
      setupVertexAttributes(object, material, program, geometry);
      if (index !== null) {
        gl.bindBuffer(34963, attributes.get(index).buffer);
      }
    }
  }
  function createVertexArrayObject() {
    if (capabilities.isWebGL2)
      return gl.createVertexArray();
    return extension.createVertexArrayOES();
  }
  function bindVertexArrayObject(vao) {
    if (capabilities.isWebGL2)
      return gl.bindVertexArray(vao);
    return extension.bindVertexArrayOES(vao);
  }
  function deleteVertexArrayObject(vao) {
    if (capabilities.isWebGL2)
      return gl.deleteVertexArray(vao);
    return extension.deleteVertexArrayOES(vao);
  }
  function getBindingState(geometry, program, material) {
    const wireframe = material.wireframe === true;
    let programMap = bindingStates[geometry.id];
    if (programMap === void 0) {
      programMap = {};
      bindingStates[geometry.id] = programMap;
    }
    let stateMap = programMap[program.id];
    if (stateMap === void 0) {
      stateMap = {};
      programMap[program.id] = stateMap;
    }
    let state = stateMap[wireframe];
    if (state === void 0) {
      state = createBindingState(createVertexArrayObject());
      stateMap[wireframe] = state;
    }
    return state;
  }
  function createBindingState(vao) {
    const newAttributes = [];
    const enabledAttributes = [];
    const attributeDivisors = [];
    for (let i2 = 0; i2 < maxVertexAttributes; i2++) {
      newAttributes[i2] = 0;
      enabledAttributes[i2] = 0;
      attributeDivisors[i2] = 0;
    }
    return {
      geometry: null,
      program: null,
      wireframe: false,
      newAttributes,
      enabledAttributes,
      attributeDivisors,
      object: vao,
      attributes: {},
      index: null
    };
  }
  function needsUpdate(geometry, index) {
    const cachedAttributes = currentState.attributes;
    const geometryAttributes = geometry.attributes;
    if (Object.keys(cachedAttributes).length !== Object.keys(geometryAttributes).length)
      return true;
    for (const key in geometryAttributes) {
      const cachedAttribute = cachedAttributes[key];
      const geometryAttribute = geometryAttributes[key];
      if (cachedAttribute === void 0)
        return true;
      if (cachedAttribute.attribute !== geometryAttribute)
        return true;
      if (cachedAttribute.data !== geometryAttribute.data)
        return true;
    }
    if (currentState.index !== index)
      return true;
    return false;
  }
  function saveCache(geometry, index) {
    const cache = {};
    const attributes2 = geometry.attributes;
    for (const key in attributes2) {
      const attribute = attributes2[key];
      const data = {};
      data.attribute = attribute;
      if (attribute.data) {
        data.data = attribute.data;
      }
      cache[key] = data;
    }
    currentState.attributes = cache;
    currentState.index = index;
  }
  function initAttributes() {
    const newAttributes = currentState.newAttributes;
    for (let i2 = 0, il = newAttributes.length; i2 < il; i2++) {
      newAttributes[i2] = 0;
    }
  }
  function enableAttribute(attribute) {
    enableAttributeAndDivisor(attribute, 0);
  }
  function enableAttributeAndDivisor(attribute, meshPerAttribute) {
    const newAttributes = currentState.newAttributes;
    const enabledAttributes = currentState.enabledAttributes;
    const attributeDivisors = currentState.attributeDivisors;
    newAttributes[attribute] = 1;
    if (enabledAttributes[attribute] === 0) {
      gl.enableVertexAttribArray(attribute);
      enabledAttributes[attribute] = 1;
    }
    if (attributeDivisors[attribute] !== meshPerAttribute) {
      const extension2 = capabilities.isWebGL2 ? gl : extensions.get("ANGLE_instanced_arrays");
      extension2[capabilities.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](attribute, meshPerAttribute);
      attributeDivisors[attribute] = meshPerAttribute;
    }
  }
  function disableUnusedAttributes() {
    const newAttributes = currentState.newAttributes;
    const enabledAttributes = currentState.enabledAttributes;
    for (let i2 = 0, il = enabledAttributes.length; i2 < il; i2++) {
      if (enabledAttributes[i2] !== newAttributes[i2]) {
        gl.disableVertexAttribArray(i2);
        enabledAttributes[i2] = 0;
      }
    }
  }
  function vertexAttribPointer(index, size2, type, normalized, stride, offset) {
    if (capabilities.isWebGL2 === true && (type === 5124 || type === 5125)) {
      gl.vertexAttribIPointer(index, size2, type, stride, offset);
    } else {
      gl.vertexAttribPointer(index, size2, type, normalized, stride, offset);
    }
  }
  function setupVertexAttributes(object, material, program, geometry) {
    if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
      if (extensions.get("ANGLE_instanced_arrays") === null)
        return;
    }
    initAttributes();
    const geometryAttributes = geometry.attributes;
    const programAttributes = program.getAttributes();
    const materialDefaultAttributeValues = material.defaultAttributeValues;
    for (const name in programAttributes) {
      const programAttribute = programAttributes[name];
      if (programAttribute >= 0) {
        const geometryAttribute = geometryAttributes[name];
        if (geometryAttribute !== void 0) {
          const normalized = geometryAttribute.normalized;
          const size2 = geometryAttribute.itemSize;
          const attribute = attributes.get(geometryAttribute);
          if (attribute === void 0)
            continue;
          const buffer = attribute.buffer;
          const type = attribute.type;
          const bytesPerElement = attribute.bytesPerElement;
          if (geometryAttribute.isInterleavedBufferAttribute) {
            const data = geometryAttribute.data;
            const stride = data.stride;
            const offset = geometryAttribute.offset;
            if (data && data.isInstancedInterleavedBuffer) {
              enableAttributeAndDivisor(programAttribute, data.meshPerAttribute);
              if (geometry._maxInstanceCount === void 0) {
                geometry._maxInstanceCount = data.meshPerAttribute * data.count;
              }
            } else {
              enableAttribute(programAttribute);
            }
            gl.bindBuffer(34962, buffer);
            vertexAttribPointer(programAttribute, size2, type, normalized, stride * bytesPerElement, offset * bytesPerElement);
          } else {
            if (geometryAttribute.isInstancedBufferAttribute) {
              enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);
              if (geometry._maxInstanceCount === void 0) {
                geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
              }
            } else {
              enableAttribute(programAttribute);
            }
            gl.bindBuffer(34962, buffer);
            vertexAttribPointer(programAttribute, size2, type, normalized, 0, 0);
          }
        } else if (name === "instanceMatrix") {
          const attribute = attributes.get(object.instanceMatrix);
          if (attribute === void 0)
            continue;
          const buffer = attribute.buffer;
          const type = attribute.type;
          enableAttributeAndDivisor(programAttribute + 0, 1);
          enableAttributeAndDivisor(programAttribute + 1, 1);
          enableAttributeAndDivisor(programAttribute + 2, 1);
          enableAttributeAndDivisor(programAttribute + 3, 1);
          gl.bindBuffer(34962, buffer);
          gl.vertexAttribPointer(programAttribute + 0, 4, type, false, 64, 0);
          gl.vertexAttribPointer(programAttribute + 1, 4, type, false, 64, 16);
          gl.vertexAttribPointer(programAttribute + 2, 4, type, false, 64, 32);
          gl.vertexAttribPointer(programAttribute + 3, 4, type, false, 64, 48);
        } else if (name === "instanceColor") {
          const attribute = attributes.get(object.instanceColor);
          if (attribute === void 0)
            continue;
          const buffer = attribute.buffer;
          const type = attribute.type;
          enableAttributeAndDivisor(programAttribute, 1);
          gl.bindBuffer(34962, buffer);
          gl.vertexAttribPointer(programAttribute, 3, type, false, 12, 0);
        } else if (materialDefaultAttributeValues !== void 0) {
          const value = materialDefaultAttributeValues[name];
          if (value !== void 0) {
            switch (value.length) {
              case 2:
                gl.vertexAttrib2fv(programAttribute, value);
                break;
              case 3:
                gl.vertexAttrib3fv(programAttribute, value);
                break;
              case 4:
                gl.vertexAttrib4fv(programAttribute, value);
                break;
              default:
                gl.vertexAttrib1fv(programAttribute, value);
            }
          }
        }
      }
    }
    disableUnusedAttributes();
  }
  function dispose() {
    reset2();
    for (const geometryId in bindingStates) {
      const programMap = bindingStates[geometryId];
      for (const programId in programMap) {
        const stateMap = programMap[programId];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[programId];
      }
      delete bindingStates[geometryId];
    }
  }
  function releaseStatesOfGeometry(geometry) {
    if (bindingStates[geometry.id] === void 0)
      return;
    const programMap = bindingStates[geometry.id];
    for (const programId in programMap) {
      const stateMap = programMap[programId];
      for (const wireframe in stateMap) {
        deleteVertexArrayObject(stateMap[wireframe].object);
        delete stateMap[wireframe];
      }
      delete programMap[programId];
    }
    delete bindingStates[geometry.id];
  }
  function releaseStatesOfProgram(program) {
    for (const geometryId in bindingStates) {
      const programMap = bindingStates[geometryId];
      if (programMap[program.id] === void 0)
        continue;
      const stateMap = programMap[program.id];
      for (const wireframe in stateMap) {
        deleteVertexArrayObject(stateMap[wireframe].object);
        delete stateMap[wireframe];
      }
      delete programMap[program.id];
    }
  }
  function reset2() {
    resetDefaultState();
    if (currentState === defaultState)
      return;
    currentState = defaultState;
    bindVertexArrayObject(currentState.object);
  }
  function resetDefaultState() {
    defaultState.geometry = null;
    defaultState.program = null;
    defaultState.wireframe = false;
  }
  return {
    setup,
    reset: reset2,
    resetDefaultState,
    dispose,
    releaseStatesOfGeometry,
    releaseStatesOfProgram,
    initAttributes,
    enableAttribute,
    disableUnusedAttributes
  };
}
function WebGLBufferRenderer(gl, extensions, info, capabilities) {
  const isWebGL2 = capabilities.isWebGL2;
  let mode;
  function setMode(value) {
    mode = value;
  }
  function render(start, count) {
    gl.drawArrays(mode, start, count);
    info.update(count, mode, 1);
  }
  function renderInstances(start, count, primcount) {
    if (primcount === 0)
      return;
    let extension, methodName;
    if (isWebGL2) {
      extension = gl;
      methodName = "drawArraysInstanced";
    } else {
      extension = extensions.get("ANGLE_instanced_arrays");
      methodName = "drawArraysInstancedANGLE";
      if (extension === null) {
        console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
        return;
      }
    }
    extension[methodName](mode, start, count, primcount);
    info.update(count, mode, primcount);
  }
  this.setMode = setMode;
  this.render = render;
  this.renderInstances = renderInstances;
}
function WebGLCapabilities(gl, extensions, parameters) {
  let maxAnisotropy;
  function getMaxAnisotropy() {
    if (maxAnisotropy !== void 0)
      return maxAnisotropy;
    const extension = extensions.get("EXT_texture_filter_anisotropic");
    if (extension !== null) {
      maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else {
      maxAnisotropy = 0;
    }
    return maxAnisotropy;
  }
  function getMaxPrecision(precision2) {
    if (precision2 === "highp") {
      if (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) {
        return "highp";
      }
      precision2 = "mediump";
    }
    if (precision2 === "mediump") {
      if (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0) {
        return "mediump";
      }
    }
    return "lowp";
  }
  const isWebGL2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== "undefined" && gl instanceof WebGL2ComputeRenderingContext;
  let precision = parameters.precision !== void 0 ? parameters.precision : "highp";
  const maxPrecision = getMaxPrecision(precision);
  if (maxPrecision !== precision) {
    console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
    precision = maxPrecision;
  }
  const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
  const maxTextures = gl.getParameter(34930);
  const maxVertexTextures = gl.getParameter(35660);
  const maxTextureSize = gl.getParameter(3379);
  const maxCubemapSize = gl.getParameter(34076);
  const maxAttributes = gl.getParameter(34921);
  const maxVertexUniforms = gl.getParameter(36347);
  const maxVaryings = gl.getParameter(36348);
  const maxFragmentUniforms = gl.getParameter(36349);
  const vertexTextures = maxVertexTextures > 0;
  const floatFragmentTextures = isWebGL2 || !!extensions.get("OES_texture_float");
  const floatVertexTextures = vertexTextures && floatFragmentTextures;
  const maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;
  return {
    isWebGL2,
    getMaxAnisotropy,
    getMaxPrecision,
    precision,
    logarithmicDepthBuffer,
    maxTextures,
    maxVertexTextures,
    maxTextureSize,
    maxCubemapSize,
    maxAttributes,
    maxVertexUniforms,
    maxVaryings,
    maxFragmentUniforms,
    vertexTextures,
    floatFragmentTextures,
    floatVertexTextures,
    maxSamples
  };
}
function WebGLClipping(properties) {
  const scope = this;
  let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
  const plane = new Plane(), viewNormalMatrix = new Matrix3(), uniform = { value: null, needsUpdate: false };
  this.uniform = uniform;
  this.numPlanes = 0;
  this.numIntersection = 0;
  this.init = function(planes, enableLocalClipping, camera) {
    const enabled = planes.length !== 0 || enableLocalClipping || numGlobalPlanes !== 0 || localClippingEnabled;
    localClippingEnabled = enableLocalClipping;
    globalState = projectPlanes(planes, camera, 0);
    numGlobalPlanes = planes.length;
    return enabled;
  };
  this.beginShadows = function() {
    renderingShadows = true;
    projectPlanes(null);
  };
  this.endShadows = function() {
    renderingShadows = false;
    resetGlobalState();
  };
  this.setState = function(material, camera, useCache) {
    const planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
    const materialProperties = properties.get(material);
    if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
      if (renderingShadows) {
        projectPlanes(null);
      } else {
        resetGlobalState();
      }
    } else {
      const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
      let dstArray = materialProperties.clippingState || null;
      uniform.value = dstArray;
      dstArray = projectPlanes(planes, camera, lGlobal, useCache);
      for (let i2 = 0; i2 !== lGlobal; ++i2) {
        dstArray[i2] = globalState[i2];
      }
      materialProperties.clippingState = dstArray;
      this.numIntersection = clipIntersection ? this.numPlanes : 0;
      this.numPlanes += nGlobal;
    }
  };
  function resetGlobalState() {
    if (uniform.value !== globalState) {
      uniform.value = globalState;
      uniform.needsUpdate = numGlobalPlanes > 0;
    }
    scope.numPlanes = numGlobalPlanes;
    scope.numIntersection = 0;
  }
  function projectPlanes(planes, camera, dstOffset, skipTransform) {
    const nPlanes = planes !== null ? planes.length : 0;
    let dstArray = null;
    if (nPlanes !== 0) {
      dstArray = uniform.value;
      if (skipTransform !== true || dstArray === null) {
        const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera.matrixWorldInverse;
        viewNormalMatrix.getNormalMatrix(viewMatrix);
        if (dstArray === null || dstArray.length < flatSize) {
          dstArray = new Float32Array(flatSize);
        }
        for (let i2 = 0, i4 = dstOffset; i2 !== nPlanes; ++i2, i4 += 4) {
          plane.copy(planes[i2]).applyMatrix4(viewMatrix, viewNormalMatrix);
          plane.normal.toArray(dstArray, i4);
          dstArray[i4 + 3] = plane.constant;
        }
      }
      uniform.value = dstArray;
      uniform.needsUpdate = true;
    }
    scope.numPlanes = nPlanes;
    scope.numIntersection = 0;
    return dstArray;
  }
}
function WebGLCubeMaps(renderer2) {
  let cubemaps = new WeakMap();
  function mapTextureMapping(texture, mapping) {
    if (mapping === EquirectangularReflectionMapping) {
      texture.mapping = CubeReflectionMapping;
    } else if (mapping === EquirectangularRefractionMapping) {
      texture.mapping = CubeRefractionMapping;
    }
    return texture;
  }
  function get2(texture) {
    if (texture && texture.isTexture) {
      const mapping = texture.mapping;
      if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
        if (cubemaps.has(texture)) {
          const cubemap = cubemaps.get(texture).texture;
          return mapTextureMapping(cubemap, texture.mapping);
        } else {
          const image = texture.image;
          if (image && image.height > 0) {
            const currentRenderList = renderer2.getRenderList();
            const currentRenderTarget = renderer2.getRenderTarget();
            const currentRenderState = renderer2.getRenderState();
            const renderTarget = new WebGLCubeRenderTarget(image.height / 2);
            renderTarget.fromEquirectangularTexture(renderer2, texture);
            cubemaps.set(texture, renderTarget);
            renderer2.setRenderTarget(currentRenderTarget);
            renderer2.setRenderList(currentRenderList);
            renderer2.setRenderState(currentRenderState);
            texture.addEventListener("dispose", onTextureDispose);
            return mapTextureMapping(renderTarget.texture, texture.mapping);
          } else {
            return null;
          }
        }
      }
    }
    return texture;
  }
  function onTextureDispose(event) {
    const texture = event.target;
    texture.removeEventListener("dispose", onTextureDispose);
    const cubemap = cubemaps.get(texture);
    if (cubemap !== void 0) {
      cubemaps.delete(texture);
      cubemap.dispose();
    }
  }
  function dispose() {
    cubemaps = new WeakMap();
  }
  return {
    get: get2,
    dispose
  };
}
function WebGLExtensions(gl) {
  const extensions = {};
  return {
    has: function(name) {
      if (extensions[name] !== void 0) {
        return extensions[name] !== null;
      }
      let extension;
      switch (name) {
        case "WEBGL_depth_texture":
          extension = gl.getExtension("WEBGL_depth_texture") || gl.getExtension("MOZ_WEBGL_depth_texture") || gl.getExtension("WEBKIT_WEBGL_depth_texture");
          break;
        case "EXT_texture_filter_anisotropic":
          extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
          break;
        case "WEBGL_compressed_texture_s3tc":
          extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
          break;
        case "WEBGL_compressed_texture_pvrtc":
          extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
          break;
        default:
          extension = gl.getExtension(name);
      }
      extensions[name] = extension;
      return extension !== null;
    },
    get: function(name) {
      if (!this.has(name)) {
        console.warn("THREE.WebGLRenderer: " + name + " extension not supported.");
      }
      return extensions[name];
    }
  };
}
function WebGLGeometries(gl, attributes, info, bindingStates) {
  const geometries = new WeakMap();
  const wireframeAttributes = new WeakMap();
  function onGeometryDispose(event) {
    const geometry = event.target;
    const buffergeometry = geometries.get(geometry);
    if (buffergeometry.index !== null) {
      attributes.remove(buffergeometry.index);
    }
    for (const name in buffergeometry.attributes) {
      attributes.remove(buffergeometry.attributes[name]);
    }
    geometry.removeEventListener("dispose", onGeometryDispose);
    geometries.delete(geometry);
    const attribute = wireframeAttributes.get(buffergeometry);
    if (attribute) {
      attributes.remove(attribute);
      wireframeAttributes.delete(buffergeometry);
    }
    bindingStates.releaseStatesOfGeometry(buffergeometry);
    if (geometry.isInstancedBufferGeometry === true) {
      delete geometry._maxInstanceCount;
    }
    info.memory.geometries--;
  }
  function get2(object, geometry) {
    let buffergeometry = geometries.get(geometry);
    if (buffergeometry)
      return buffergeometry;
    geometry.addEventListener("dispose", onGeometryDispose);
    if (geometry.isBufferGeometry) {
      buffergeometry = geometry;
    } else if (geometry.isGeometry) {
      if (geometry._bufferGeometry === void 0) {
        geometry._bufferGeometry = new BufferGeometry().setFromObject(object);
      }
      buffergeometry = geometry._bufferGeometry;
    }
    geometries.set(geometry, buffergeometry);
    info.memory.geometries++;
    return buffergeometry;
  }
  function update(geometry) {
    const geometryAttributes = geometry.attributes;
    for (const name in geometryAttributes) {
      attributes.update(geometryAttributes[name], 34962);
    }
    const morphAttributes = geometry.morphAttributes;
    for (const name in morphAttributes) {
      const array = morphAttributes[name];
      for (let i2 = 0, l2 = array.length; i2 < l2; i2++) {
        attributes.update(array[i2], 34962);
      }
    }
  }
  function updateWireframeAttribute(geometry) {
    const indices = [];
    const geometryIndex = geometry.index;
    const geometryPosition = geometry.attributes.position;
    let version2 = 0;
    if (geometryIndex !== null) {
      const array = geometryIndex.array;
      version2 = geometryIndex.version;
      for (let i2 = 0, l2 = array.length; i2 < l2; i2 += 3) {
        const a2 = array[i2 + 0];
        const b2 = array[i2 + 1];
        const c2 = array[i2 + 2];
        indices.push(a2, b2, b2, c2, c2, a2);
      }
    } else {
      const array = geometryPosition.array;
      version2 = geometryPosition.version;
      for (let i2 = 0, l2 = array.length / 3 - 1; i2 < l2; i2 += 3) {
        const a2 = i2 + 0;
        const b2 = i2 + 1;
        const c2 = i2 + 2;
        indices.push(a2, b2, b2, c2, c2, a2);
      }
    }
    const attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
    attribute.version = version2;
    const previousAttribute = wireframeAttributes.get(geometry);
    if (previousAttribute)
      attributes.remove(previousAttribute);
    wireframeAttributes.set(geometry, attribute);
  }
  function getWireframeAttribute(geometry) {
    const currentAttribute = wireframeAttributes.get(geometry);
    if (currentAttribute) {
      const geometryIndex = geometry.index;
      if (geometryIndex !== null) {
        if (currentAttribute.version < geometryIndex.version) {
          updateWireframeAttribute(geometry);
        }
      }
    } else {
      updateWireframeAttribute(geometry);
    }
    return wireframeAttributes.get(geometry);
  }
  return {
    get: get2,
    update,
    getWireframeAttribute
  };
}
function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
  const isWebGL2 = capabilities.isWebGL2;
  let mode;
  function setMode(value) {
    mode = value;
  }
  let type, bytesPerElement;
  function setIndex(value) {
    type = value.type;
    bytesPerElement = value.bytesPerElement;
  }
  function render(start, count) {
    gl.drawElements(mode, count, type, start * bytesPerElement);
    info.update(count, mode, 1);
  }
  function renderInstances(start, count, primcount) {
    if (primcount === 0)
      return;
    let extension, methodName;
    if (isWebGL2) {
      extension = gl;
      methodName = "drawElementsInstanced";
    } else {
      extension = extensions.get("ANGLE_instanced_arrays");
      methodName = "drawElementsInstancedANGLE";
      if (extension === null) {
        console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
        return;
      }
    }
    extension[methodName](mode, count, type, start * bytesPerElement, primcount);
    info.update(count, mode, primcount);
  }
  this.setMode = setMode;
  this.setIndex = setIndex;
  this.render = render;
  this.renderInstances = renderInstances;
}
function WebGLInfo(gl) {
  const memory = {
    geometries: 0,
    textures: 0
  };
  const render = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function update(count, mode, instanceCount) {
    render.calls++;
    switch (mode) {
      case 4:
        render.triangles += instanceCount * (count / 3);
        break;
      case 1:
        render.lines += instanceCount * (count / 2);
        break;
      case 3:
        render.lines += instanceCount * (count - 1);
        break;
      case 2:
        render.lines += instanceCount * count;
        break;
      case 0:
        render.points += instanceCount * count;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", mode);
        break;
    }
  }
  function reset2() {
    render.frame++;
    render.calls = 0;
    render.triangles = 0;
    render.points = 0;
    render.lines = 0;
  }
  return {
    memory,
    render,
    programs: null,
    autoReset: true,
    reset: reset2,
    update
  };
}
function numericalSort(a2, b2) {
  return a2[0] - b2[0];
}
function absNumericalSort(a2, b2) {
  return Math.abs(b2[1]) - Math.abs(a2[1]);
}
function WebGLMorphtargets(gl) {
  const influencesList = {};
  const morphInfluences = new Float32Array(8);
  const workInfluences = [];
  for (let i2 = 0; i2 < 8; i2++) {
    workInfluences[i2] = [i2, 0];
  }
  function update(object, geometry, material, program) {
    const objectInfluences = object.morphTargetInfluences;
    const length = objectInfluences === void 0 ? 0 : objectInfluences.length;
    let influences = influencesList[geometry.id];
    if (influences === void 0) {
      influences = [];
      for (let i2 = 0; i2 < length; i2++) {
        influences[i2] = [i2, 0];
      }
      influencesList[geometry.id] = influences;
    }
    for (let i2 = 0; i2 < length; i2++) {
      const influence = influences[i2];
      influence[0] = i2;
      influence[1] = objectInfluences[i2];
    }
    influences.sort(absNumericalSort);
    for (let i2 = 0; i2 < 8; i2++) {
      if (i2 < length && influences[i2][1]) {
        workInfluences[i2][0] = influences[i2][0];
        workInfluences[i2][1] = influences[i2][1];
      } else {
        workInfluences[i2][0] = Number.MAX_SAFE_INTEGER;
        workInfluences[i2][1] = 0;
      }
    }
    workInfluences.sort(numericalSort);
    const morphTargets = material.morphTargets && geometry.morphAttributes.position;
    const morphNormals = material.morphNormals && geometry.morphAttributes.normal;
    let morphInfluencesSum = 0;
    for (let i2 = 0; i2 < 8; i2++) {
      const influence = workInfluences[i2];
      const index = influence[0];
      const value = influence[1];
      if (index !== Number.MAX_SAFE_INTEGER && value) {
        if (morphTargets && geometry.getAttribute("morphTarget" + i2) !== morphTargets[index]) {
          geometry.setAttribute("morphTarget" + i2, morphTargets[index]);
        }
        if (morphNormals && geometry.getAttribute("morphNormal" + i2) !== morphNormals[index]) {
          geometry.setAttribute("morphNormal" + i2, morphNormals[index]);
        }
        morphInfluences[i2] = value;
        morphInfluencesSum += value;
      } else {
        if (morphTargets && geometry.getAttribute("morphTarget" + i2) !== void 0) {
          geometry.deleteAttribute("morphTarget" + i2);
        }
        if (morphNormals && geometry.getAttribute("morphNormal" + i2) !== void 0) {
          geometry.deleteAttribute("morphNormal" + i2);
        }
        morphInfluences[i2] = 0;
      }
    }
    const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
    program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
    program.getUniforms().setValue(gl, "morphTargetInfluences", morphInfluences);
  }
  return {
    update
  };
}
function WebGLObjects(gl, geometries, attributes, info) {
  let updateMap = new WeakMap();
  function update(object) {
    const frame = info.render.frame;
    const geometry = object.geometry;
    const buffergeometry = geometries.get(object, geometry);
    if (updateMap.get(buffergeometry) !== frame) {
      if (geometry.isGeometry) {
        buffergeometry.updateFromObject(object);
      }
      geometries.update(buffergeometry);
      updateMap.set(buffergeometry, frame);
    }
    if (object.isInstancedMesh) {
      attributes.update(object.instanceMatrix, 34962);
      if (object.instanceColor !== null) {
        attributes.update(object.instanceColor, 34962);
      }
    }
    return buffergeometry;
  }
  function dispose() {
    updateMap = new WeakMap();
  }
  return {
    update,
    dispose
  };
}
function DataTexture2DArray(data, width, height, depth) {
  Texture.call(this, null);
  this.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };
  this.magFilter = NearestFilter;
  this.minFilter = NearestFilter;
  this.wrapR = ClampToEdgeWrapping;
  this.generateMipmaps = false;
  this.flipY = false;
  this.needsUpdate = true;
}
DataTexture2DArray.prototype = Object.create(Texture.prototype);
DataTexture2DArray.prototype.constructor = DataTexture2DArray;
DataTexture2DArray.prototype.isDataTexture2DArray = true;
function DataTexture3D(data, width, height, depth) {
  Texture.call(this, null);
  this.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };
  this.magFilter = NearestFilter;
  this.minFilter = NearestFilter;
  this.wrapR = ClampToEdgeWrapping;
  this.generateMipmaps = false;
  this.flipY = false;
  this.needsUpdate = true;
}
DataTexture3D.prototype = Object.create(Texture.prototype);
DataTexture3D.prototype.constructor = DataTexture3D;
DataTexture3D.prototype.isDataTexture3D = true;
const emptyTexture = new Texture();
const emptyTexture2dArray = new DataTexture2DArray();
const emptyTexture3d = new DataTexture3D();
const emptyCubeTexture = new CubeTexture();
const arrayCacheF32 = [];
const arrayCacheI32 = [];
const mat4array = new Float32Array(16);
const mat3array = new Float32Array(9);
const mat2array = new Float32Array(4);
function flatten(array, nBlocks, blockSize) {
  const firstElem = array[0];
  if (firstElem <= 0 || firstElem > 0)
    return array;
  const n2 = nBlocks * blockSize;
  let r2 = arrayCacheF32[n2];
  if (r2 === void 0) {
    r2 = new Float32Array(n2);
    arrayCacheF32[n2] = r2;
  }
  if (nBlocks !== 0) {
    firstElem.toArray(r2, 0);
    for (let i2 = 1, offset = 0; i2 !== nBlocks; ++i2) {
      offset += blockSize;
      array[i2].toArray(r2, offset);
    }
  }
  return r2;
}
function arraysEqual(a2, b2) {
  if (a2.length !== b2.length)
    return false;
  for (let i2 = 0, l2 = a2.length; i2 < l2; i2++) {
    if (a2[i2] !== b2[i2])
      return false;
  }
  return true;
}
function copyArray(a2, b2) {
  for (let i2 = 0, l2 = b2.length; i2 < l2; i2++) {
    a2[i2] = b2[i2];
  }
}
function allocTexUnits(textures, n2) {
  let r2 = arrayCacheI32[n2];
  if (r2 === void 0) {
    r2 = new Int32Array(n2);
    arrayCacheI32[n2] = r2;
  }
  for (let i2 = 0; i2 !== n2; ++i2) {
    r2[i2] = textures.allocateTextureUnit();
  }
  return r2;
}
function setValueV1f(gl, v2) {
  const cache = this.cache;
  if (cache[0] === v2)
    return;
  gl.uniform1f(this.addr, v2);
  cache[0] = v2;
}
function setValueV2f(gl, v2) {
  const cache = this.cache;
  if (v2.x !== void 0) {
    if (cache[0] !== v2.x || cache[1] !== v2.y) {
      gl.uniform2f(this.addr, v2.x, v2.y);
      cache[0] = v2.x;
      cache[1] = v2.y;
    }
  } else {
    if (arraysEqual(cache, v2))
      return;
    gl.uniform2fv(this.addr, v2);
    copyArray(cache, v2);
  }
}
function setValueV3f(gl, v2) {
  const cache = this.cache;
  if (v2.x !== void 0) {
    if (cache[0] !== v2.x || cache[1] !== v2.y || cache[2] !== v2.z) {
      gl.uniform3f(this.addr, v2.x, v2.y, v2.z);
      cache[0] = v2.x;
      cache[1] = v2.y;
      cache[2] = v2.z;
    }
  } else if (v2.r !== void 0) {
    if (cache[0] !== v2.r || cache[1] !== v2.g || cache[2] !== v2.b) {
      gl.uniform3f(this.addr, v2.r, v2.g, v2.b);
      cache[0] = v2.r;
      cache[1] = v2.g;
      cache[2] = v2.b;
    }
  } else {
    if (arraysEqual(cache, v2))
      return;
    gl.uniform3fv(this.addr, v2);
    copyArray(cache, v2);
  }
}
function setValueV4f(gl, v2) {
  const cache = this.cache;
  if (v2.x !== void 0) {
    if (cache[0] !== v2.x || cache[1] !== v2.y || cache[2] !== v2.z || cache[3] !== v2.w) {
      gl.uniform4f(this.addr, v2.x, v2.y, v2.z, v2.w);
      cache[0] = v2.x;
      cache[1] = v2.y;
      cache[2] = v2.z;
      cache[3] = v2.w;
    }
  } else {
    if (arraysEqual(cache, v2))
      return;
    gl.uniform4fv(this.addr, v2);
    copyArray(cache, v2);
  }
}
function setValueM2(gl, v2) {
  const cache = this.cache;
  const elements = v2.elements;
  if (elements === void 0) {
    if (arraysEqual(cache, v2))
      return;
    gl.uniformMatrix2fv(this.addr, false, v2);
    copyArray(cache, v2);
  } else {
    if (arraysEqual(cache, elements))
      return;
    mat2array.set(elements);
    gl.uniformMatrix2fv(this.addr, false, mat2array);
    copyArray(cache, elements);
  }
}
function setValueM3(gl, v2) {
  const cache = this.cache;
  const elements = v2.elements;
  if (elements === void 0) {
    if (arraysEqual(cache, v2))
      return;
    gl.uniformMatrix3fv(this.addr, false, v2);
    copyArray(cache, v2);
  } else {
    if (arraysEqual(cache, elements))
      return;
    mat3array.set(elements);
    gl.uniformMatrix3fv(this.addr, false, mat3array);
    copyArray(cache, elements);
  }
}
function setValueM4(gl, v2) {
  const cache = this.cache;
  const elements = v2.elements;
  if (elements === void 0) {
    if (arraysEqual(cache, v2))
      return;
    gl.uniformMatrix4fv(this.addr, false, v2);
    copyArray(cache, v2);
  } else {
    if (arraysEqual(cache, elements))
      return;
    mat4array.set(elements);
    gl.uniformMatrix4fv(this.addr, false, mat4array);
    copyArray(cache, elements);
  }
}
function setValueT1(gl, v2, textures) {
  const cache = this.cache;
  const unit = textures.allocateTextureUnit();
  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }
  textures.safeSetTexture2D(v2 || emptyTexture, unit);
}
function setValueT2DArray1(gl, v2, textures) {
  const cache = this.cache;
  const unit = textures.allocateTextureUnit();
  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }
  textures.setTexture2DArray(v2 || emptyTexture2dArray, unit);
}
function setValueT3D1(gl, v2, textures) {
  const cache = this.cache;
  const unit = textures.allocateTextureUnit();
  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }
  textures.setTexture3D(v2 || emptyTexture3d, unit);
}
function setValueT6(gl, v2, textures) {
  const cache = this.cache;
  const unit = textures.allocateTextureUnit();
  if (cache[0] !== unit) {
    gl.uniform1i(this.addr, unit);
    cache[0] = unit;
  }
  textures.safeSetTextureCube(v2 || emptyCubeTexture, unit);
}
function setValueV1i(gl, v2) {
  const cache = this.cache;
  if (cache[0] === v2)
    return;
  gl.uniform1i(this.addr, v2);
  cache[0] = v2;
}
function setValueV2i(gl, v2) {
  const cache = this.cache;
  if (arraysEqual(cache, v2))
    return;
  gl.uniform2iv(this.addr, v2);
  copyArray(cache, v2);
}
function setValueV3i(gl, v2) {
  const cache = this.cache;
  if (arraysEqual(cache, v2))
    return;
  gl.uniform3iv(this.addr, v2);
  copyArray(cache, v2);
}
function setValueV4i(gl, v2) {
  const cache = this.cache;
  if (arraysEqual(cache, v2))
    return;
  gl.uniform4iv(this.addr, v2);
  copyArray(cache, v2);
}
function setValueV1ui(gl, v2) {
  const cache = this.cache;
  if (cache[0] === v2)
    return;
  gl.uniform1ui(this.addr, v2);
  cache[0] = v2;
}
function getSingularSetter(type) {
  switch (type) {
    case 5126:
      return setValueV1f;
    case 35664:
      return setValueV2f;
    case 35665:
      return setValueV3f;
    case 35666:
      return setValueV4f;
    case 35674:
      return setValueM2;
    case 35675:
      return setValueM3;
    case 35676:
      return setValueM4;
    case 5124:
    case 35670:
      return setValueV1i;
    case 35667:
    case 35671:
      return setValueV2i;
    case 35668:
    case 35672:
      return setValueV3i;
    case 35669:
    case 35673:
      return setValueV4i;
    case 5125:
      return setValueV1ui;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return setValueT1;
    case 35679:
    case 36299:
    case 36307:
      return setValueT3D1;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return setValueT6;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return setValueT2DArray1;
  }
}
function setValueV1fArray(gl, v2) {
  gl.uniform1fv(this.addr, v2);
}
function setValueV1iArray(gl, v2) {
  gl.uniform1iv(this.addr, v2);
}
function setValueV2iArray(gl, v2) {
  gl.uniform2iv(this.addr, v2);
}
function setValueV3iArray(gl, v2) {
  gl.uniform3iv(this.addr, v2);
}
function setValueV4iArray(gl, v2) {
  gl.uniform4iv(this.addr, v2);
}
function setValueV2fArray(gl, v2) {
  const data = flatten(v2, this.size, 2);
  gl.uniform2fv(this.addr, data);
}
function setValueV3fArray(gl, v2) {
  const data = flatten(v2, this.size, 3);
  gl.uniform3fv(this.addr, data);
}
function setValueV4fArray(gl, v2) {
  const data = flatten(v2, this.size, 4);
  gl.uniform4fv(this.addr, data);
}
function setValueM2Array(gl, v2) {
  const data = flatten(v2, this.size, 4);
  gl.uniformMatrix2fv(this.addr, false, data);
}
function setValueM3Array(gl, v2) {
  const data = flatten(v2, this.size, 9);
  gl.uniformMatrix3fv(this.addr, false, data);
}
function setValueM4Array(gl, v2) {
  const data = flatten(v2, this.size, 16);
  gl.uniformMatrix4fv(this.addr, false, data);
}
function setValueT1Array(gl, v2, textures) {
  const n2 = v2.length;
  const units = allocTexUnits(textures, n2);
  gl.uniform1iv(this.addr, units);
  for (let i2 = 0; i2 !== n2; ++i2) {
    textures.safeSetTexture2D(v2[i2] || emptyTexture, units[i2]);
  }
}
function setValueT6Array(gl, v2, textures) {
  const n2 = v2.length;
  const units = allocTexUnits(textures, n2);
  gl.uniform1iv(this.addr, units);
  for (let i2 = 0; i2 !== n2; ++i2) {
    textures.safeSetTextureCube(v2[i2] || emptyCubeTexture, units[i2]);
  }
}
function getPureArraySetter(type) {
  switch (type) {
    case 5126:
      return setValueV1fArray;
    case 35664:
      return setValueV2fArray;
    case 35665:
      return setValueV3fArray;
    case 35666:
      return setValueV4fArray;
    case 35674:
      return setValueM2Array;
    case 35675:
      return setValueM3Array;
    case 35676:
      return setValueM4Array;
    case 5124:
    case 35670:
      return setValueV1iArray;
    case 35667:
    case 35671:
      return setValueV2iArray;
    case 35668:
    case 35672:
      return setValueV3iArray;
    case 35669:
    case 35673:
      return setValueV4iArray;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return setValueT1Array;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return setValueT6Array;
  }
}
function SingleUniform(id, activeInfo, addr) {
  this.id = id;
  this.addr = addr;
  this.cache = [];
  this.setValue = getSingularSetter(activeInfo.type);
}
function PureArrayUniform(id, activeInfo, addr) {
  this.id = id;
  this.addr = addr;
  this.cache = [];
  this.size = activeInfo.size;
  this.setValue = getPureArraySetter(activeInfo.type);
}
PureArrayUniform.prototype.updateCache = function(data) {
  const cache = this.cache;
  if (data instanceof Float32Array && cache.length !== data.length) {
    this.cache = new Float32Array(data.length);
  }
  copyArray(cache, data);
};
function StructuredUniform(id) {
  this.id = id;
  this.seq = [];
  this.map = {};
}
StructuredUniform.prototype.setValue = function(gl, value, textures) {
  const seq = this.seq;
  for (let i2 = 0, n2 = seq.length; i2 !== n2; ++i2) {
    const u2 = seq[i2];
    u2.setValue(gl, value[u2.id], textures);
  }
};
const RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;
function addUniform(container, uniformObject) {
  container.seq.push(uniformObject);
  container.map[uniformObject.id] = uniformObject;
}
function parseUniform(activeInfo, addr, container) {
  const path = activeInfo.name, pathLength = path.length;
  RePathPart.lastIndex = 0;
  while (true) {
    const match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex;
    let id = match[1];
    const idIsIndex = match[2] === "]", subscript = match[3];
    if (idIsIndex)
      id = id | 0;
    if (subscript === void 0 || subscript === "[" && matchEnd + 2 === pathLength) {
      addUniform(container, subscript === void 0 ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
      break;
    } else {
      const map = container.map;
      let next = map[id];
      if (next === void 0) {
        next = new StructuredUniform(id);
        addUniform(container, next);
      }
      container = next;
    }
  }
}
function WebGLUniforms(gl, program) {
  this.seq = [];
  this.map = {};
  const n2 = gl.getProgramParameter(program, 35718);
  for (let i2 = 0; i2 < n2; ++i2) {
    const info = gl.getActiveUniform(program, i2), addr = gl.getUniformLocation(program, info.name);
    parseUniform(info, addr, this);
  }
}
WebGLUniforms.prototype.setValue = function(gl, name, value, textures) {
  const u2 = this.map[name];
  if (u2 !== void 0)
    u2.setValue(gl, value, textures);
};
WebGLUniforms.prototype.setOptional = function(gl, object, name) {
  const v2 = object[name];
  if (v2 !== void 0)
    this.setValue(gl, name, v2);
};
WebGLUniforms.upload = function(gl, seq, values, textures) {
  for (let i2 = 0, n2 = seq.length; i2 !== n2; ++i2) {
    const u2 = seq[i2], v2 = values[u2.id];
    if (v2.needsUpdate !== false) {
      u2.setValue(gl, v2.value, textures);
    }
  }
};
WebGLUniforms.seqWithValue = function(seq, values) {
  const r2 = [];
  for (let i2 = 0, n2 = seq.length; i2 !== n2; ++i2) {
    const u2 = seq[i2];
    if (u2.id in values)
      r2.push(u2);
  }
  return r2;
};
function WebGLShader(gl, type, string) {
  const shader = gl.createShader(type);
  gl.shaderSource(shader, string);
  gl.compileShader(shader);
  return shader;
}
let programIdCount = 0;
function addLineNumbers(string) {
  const lines = string.split("\n");
  for (let i2 = 0; i2 < lines.length; i2++) {
    lines[i2] = i2 + 1 + ": " + lines[i2];
  }
  return lines.join("\n");
}
function getEncodingComponents(encoding) {
  switch (encoding) {
    case LinearEncoding:
      return ["Linear", "( value )"];
    case sRGBEncoding:
      return ["sRGB", "( value )"];
    case RGBEEncoding:
      return ["RGBE", "( value )"];
    case RGBM7Encoding:
      return ["RGBM", "( value, 7.0 )"];
    case RGBM16Encoding:
      return ["RGBM", "( value, 16.0 )"];
    case RGBDEncoding:
      return ["RGBD", "( value, 256.0 )"];
    case GammaEncoding:
      return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
    case LogLuvEncoding:
      return ["LogLuv", "( value )"];
    default:
      console.warn("THREE.WebGLProgram: Unsupported encoding:", encoding);
      return ["Linear", "( value )"];
  }
}
function getShaderErrors(gl, shader, type) {
  const status = gl.getShaderParameter(shader, 35713);
  const log = gl.getShaderInfoLog(shader).trim();
  if (status && log === "")
    return "";
  const source = gl.getShaderSource(shader);
  return "THREE.WebGLShader: gl.getShaderInfoLog() " + type + "\n" + log + addLineNumbers(source);
}
function getTexelDecodingFunction(functionName, encoding) {
  const components = getEncodingComponents(encoding);
  return "vec4 " + functionName + "( vec4 value ) { return " + components[0] + "ToLinear" + components[1] + "; }";
}
function getTexelEncodingFunction(functionName, encoding) {
  const components = getEncodingComponents(encoding);
  return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[0] + components[1] + "; }";
}
function getToneMappingFunction(functionName, toneMapping) {
  let toneMappingName;
  switch (toneMapping) {
    case LinearToneMapping:
      toneMappingName = "Linear";
      break;
    case ReinhardToneMapping:
      toneMappingName = "Reinhard";
      break;
    case CineonToneMapping:
      toneMappingName = "OptimizedCineon";
      break;
    case ACESFilmicToneMapping:
      toneMappingName = "ACESFilmic";
      break;
    case CustomToneMapping:
      toneMappingName = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping);
      toneMappingName = "Linear";
  }
  return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
}
function generateExtensions(parameters) {
  const chunks = [
    parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "",
    (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "",
    parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "",
    (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""
  ];
  return chunks.filter(filterEmptyLine).join("\n");
}
function generateDefines(defines) {
  const chunks = [];
  for (const name in defines) {
    const value = defines[name];
    if (value === false)
      continue;
    chunks.push("#define " + name + " " + value);
  }
  return chunks.join("\n");
}
function fetchAttributeLocations(gl, program) {
  const attributes = {};
  const n2 = gl.getProgramParameter(program, 35721);
  for (let i2 = 0; i2 < n2; i2++) {
    const info = gl.getActiveAttrib(program, i2);
    const name = info.name;
    attributes[name] = gl.getAttribLocation(program, name);
  }
  return attributes;
}
function filterEmptyLine(string) {
  return string !== "";
}
function replaceLightNums(string, parameters) {
  return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
}
function replaceClippingPlaneNums(string, parameters) {
  return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
}
const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
function resolveIncludes(string) {
  return string.replace(includePattern, includeReplacer);
}
function includeReplacer(match, include) {
  const string = ShaderChunk[include];
  if (string === void 0) {
    throw new Error("Can not resolve #include <" + include + ">");
  }
  return resolveIncludes(string);
}
const deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function unrollLoops(string) {
  return string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);
}
function deprecatedLoopReplacer(match, start, end, snippet) {
  console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.");
  return loopReplacer(match, start, end, snippet);
}
function loopReplacer(match, start, end, snippet) {
  let string = "";
  for (let i2 = parseInt(start); i2 < parseInt(end); i2++) {
    string += snippet.replace(/\[\s*i\s*\]/g, "[ " + i2 + " ]").replace(/UNROLLED_LOOP_INDEX/g, i2);
  }
  return string;
}
function generatePrecision(parameters) {
  let precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";
  if (parameters.precision === "highp") {
    precisionstring += "\n#define HIGH_PRECISION";
  } else if (parameters.precision === "mediump") {
    precisionstring += "\n#define MEDIUM_PRECISION";
  } else if (parameters.precision === "lowp") {
    precisionstring += "\n#define LOW_PRECISION";
  }
  return precisionstring;
}
function generateShadowMapTypeDefine(parameters) {
  let shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
  if (parameters.shadowMapType === PCFShadowMap) {
    shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
  } else if (parameters.shadowMapType === PCFSoftShadowMap) {
    shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
  } else if (parameters.shadowMapType === VSMShadowMap) {
    shadowMapTypeDefine = "SHADOWMAP_TYPE_VSM";
  }
  return shadowMapTypeDefine;
}
function generateEnvMapTypeDefine(parameters) {
  let envMapTypeDefine = "ENVMAP_TYPE_CUBE";
  if (parameters.envMap) {
    switch (parameters.envMapMode) {
      case CubeReflectionMapping:
      case CubeRefractionMapping:
        envMapTypeDefine = "ENVMAP_TYPE_CUBE";
        break;
      case CubeUVReflectionMapping:
      case CubeUVRefractionMapping:
        envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  }
  return envMapTypeDefine;
}
function generateEnvMapModeDefine(parameters) {
  let envMapModeDefine = "ENVMAP_MODE_REFLECTION";
  if (parameters.envMap) {
    switch (parameters.envMapMode) {
      case CubeRefractionMapping:
      case CubeUVRefractionMapping:
        envMapModeDefine = "ENVMAP_MODE_REFRACTION";
        break;
    }
  }
  return envMapModeDefine;
}
function generateEnvMapBlendingDefine(parameters) {
  let envMapBlendingDefine = "ENVMAP_BLENDING_NONE";
  if (parameters.envMap) {
    switch (parameters.combine) {
      case MultiplyOperation:
        envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case MixOperation:
        envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
        break;
      case AddOperation:
        envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
        break;
    }
  }
  return envMapBlendingDefine;
}
function WebGLProgram(renderer2, cacheKey, parameters, bindingStates) {
  const gl = renderer2.getContext();
  const defines = parameters.defines;
  let vertexShader = parameters.vertexShader;
  let fragmentShader = parameters.fragmentShader;
  const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
  const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
  const envMapModeDefine = generateEnvMapModeDefine(parameters);
  const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
  const gammaFactorDefine = renderer2.gammaFactor > 0 ? renderer2.gammaFactor : 1;
  const customExtensions = parameters.isWebGL2 ? "" : generateExtensions(parameters);
  const customDefines = generateDefines(defines);
  const program = gl.createProgram();
  let prefixVertex, prefixFragment;
  let versionString = parameters.glslVersion ? "#version " + parameters.glslVersion + "\n" : "";
  if (parameters.isRawShaderMaterial) {
    prefixVertex = [
      customDefines
    ].filter(filterEmptyLine).join("\n");
    if (prefixVertex.length > 0) {
      prefixVertex += "\n";
    }
    prefixFragment = [
      customExtensions,
      customDefines
    ].filter(filterEmptyLine).join("\n");
    if (prefixFragment.length > 0) {
      prefixFragment += "\n";
    }
  } else {
    prefixVertex = [
      generatePrecision(parameters),
      "#define SHADER_NAME " + parameters.shaderName,
      customDefines,
      parameters.instancing ? "#define USE_INSTANCING" : "",
      parameters.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
      parameters.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",
      "#define GAMMA_FACTOR " + gammaFactorDefine,
      "#define MAX_BONES " + parameters.maxBones,
      parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
      parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
      parameters.map ? "#define USE_MAP" : "",
      parameters.envMap ? "#define USE_ENVMAP" : "",
      parameters.envMap ? "#define " + envMapModeDefine : "",
      parameters.lightMap ? "#define USE_LIGHTMAP" : "",
      parameters.aoMap ? "#define USE_AOMAP" : "",
      parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
      parameters.bumpMap ? "#define USE_BUMPMAP" : "",
      parameters.normalMap ? "#define USE_NORMALMAP" : "",
      parameters.normalMap && parameters.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
      parameters.normalMap && parameters.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
      parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
      parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
      parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
      parameters.displacementMap && parameters.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "",
      parameters.specularMap ? "#define USE_SPECULARMAP" : "",
      parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
      parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
      parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
      parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
      parameters.vertexTangents ? "#define USE_TANGENT" : "",
      parameters.vertexColors ? "#define USE_COLOR" : "",
      parameters.vertexUvs ? "#define USE_UV" : "",
      parameters.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
      parameters.flatShading ? "#define FLAT_SHADED" : "",
      parameters.skinning ? "#define USE_SKINNING" : "",
      parameters.useVertexTexture ? "#define BONE_TEXTURE" : "",
      parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
      parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "",
      parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
      parameters.flipSided ? "#define FLIP_SIDED" : "",
      parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
      parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
      parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
      parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
      parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
      "uniform mat4 modelMatrix;",
      "uniform mat4 modelViewMatrix;",
      "uniform mat4 projectionMatrix;",
      "uniform mat4 viewMatrix;",
      "uniform mat3 normalMatrix;",
      "uniform vec3 cameraPosition;",
      "uniform bool isOrthographic;",
      "#ifdef USE_INSTANCING",
      "	attribute mat4 instanceMatrix;",
      "#endif",
      "#ifdef USE_INSTANCING_COLOR",
      "	attribute vec3 instanceColor;",
      "#endif",
      "attribute vec3 position;",
      "attribute vec3 normal;",
      "attribute vec2 uv;",
      "#ifdef USE_TANGENT",
      "	attribute vec4 tangent;",
      "#endif",
      "#ifdef USE_COLOR",
      "	attribute vec3 color;",
      "#endif",
      "#ifdef USE_MORPHTARGETS",
      "	attribute vec3 morphTarget0;",
      "	attribute vec3 morphTarget1;",
      "	attribute vec3 morphTarget2;",
      "	attribute vec3 morphTarget3;",
      "	#ifdef USE_MORPHNORMALS",
      "		attribute vec3 morphNormal0;",
      "		attribute vec3 morphNormal1;",
      "		attribute vec3 morphNormal2;",
      "		attribute vec3 morphNormal3;",
      "	#else",
      "		attribute vec3 morphTarget4;",
      "		attribute vec3 morphTarget5;",
      "		attribute vec3 morphTarget6;",
      "		attribute vec3 morphTarget7;",
      "	#endif",
      "#endif",
      "#ifdef USE_SKINNING",
      "	attribute vec4 skinIndex;",
      "	attribute vec4 skinWeight;",
      "#endif",
      "\n"
    ].filter(filterEmptyLine).join("\n");
    prefixFragment = [
      customExtensions,
      generatePrecision(parameters),
      "#define SHADER_NAME " + parameters.shaderName,
      customDefines,
      parameters.alphaTest ? "#define ALPHATEST " + parameters.alphaTest + (parameters.alphaTest % 1 ? "" : ".0") : "",
      "#define GAMMA_FACTOR " + gammaFactorDefine,
      parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
      parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
      parameters.map ? "#define USE_MAP" : "",
      parameters.matcap ? "#define USE_MATCAP" : "",
      parameters.envMap ? "#define USE_ENVMAP" : "",
      parameters.envMap ? "#define " + envMapTypeDefine : "",
      parameters.envMap ? "#define " + envMapModeDefine : "",
      parameters.envMap ? "#define " + envMapBlendingDefine : "",
      parameters.lightMap ? "#define USE_LIGHTMAP" : "",
      parameters.aoMap ? "#define USE_AOMAP" : "",
      parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
      parameters.bumpMap ? "#define USE_BUMPMAP" : "",
      parameters.normalMap ? "#define USE_NORMALMAP" : "",
      parameters.normalMap && parameters.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "",
      parameters.normalMap && parameters.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "",
      parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
      parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
      parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
      parameters.specularMap ? "#define USE_SPECULARMAP" : "",
      parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
      parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
      parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
      parameters.sheen ? "#define USE_SHEEN" : "",
      parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
      parameters.vertexTangents ? "#define USE_TANGENT" : "",
      parameters.vertexColors || parameters.instancingColor ? "#define USE_COLOR" : "",
      parameters.vertexUvs ? "#define USE_UV" : "",
      parameters.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "",
      parameters.gradientMap ? "#define USE_GRADIENTMAP" : "",
      parameters.flatShading ? "#define FLAT_SHADED" : "",
      parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
      parameters.flipSided ? "#define FLIP_SIDED" : "",
      parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
      parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
      parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
      parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "",
      parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
      parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",
      (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "",
      "uniform mat4 viewMatrix;",
      "uniform vec3 cameraPosition;",
      "uniform bool isOrthographic;",
      parameters.toneMapping !== NoToneMapping ? "#define TONE_MAPPING" : "",
      parameters.toneMapping !== NoToneMapping ? ShaderChunk["tonemapping_pars_fragment"] : "",
      parameters.toneMapping !== NoToneMapping ? getToneMappingFunction("toneMapping", parameters.toneMapping) : "",
      parameters.dithering ? "#define DITHERING" : "",
      ShaderChunk["encodings_pars_fragment"],
      parameters.map ? getTexelDecodingFunction("mapTexelToLinear", parameters.mapEncoding) : "",
      parameters.matcap ? getTexelDecodingFunction("matcapTexelToLinear", parameters.matcapEncoding) : "",
      parameters.envMap ? getTexelDecodingFunction("envMapTexelToLinear", parameters.envMapEncoding) : "",
      parameters.emissiveMap ? getTexelDecodingFunction("emissiveMapTexelToLinear", parameters.emissiveMapEncoding) : "",
      parameters.lightMap ? getTexelDecodingFunction("lightMapTexelToLinear", parameters.lightMapEncoding) : "",
      getTexelEncodingFunction("linearToOutputTexel", parameters.outputEncoding),
      parameters.depthPacking ? "#define DEPTH_PACKING " + parameters.depthPacking : "",
      "\n"
    ].filter(filterEmptyLine).join("\n");
  }
  vertexShader = resolveIncludes(vertexShader);
  vertexShader = replaceLightNums(vertexShader, parameters);
  vertexShader = replaceClippingPlaneNums(vertexShader, parameters);
  fragmentShader = resolveIncludes(fragmentShader);
  fragmentShader = replaceLightNums(fragmentShader, parameters);
  fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);
  vertexShader = unrollLoops(vertexShader);
  fragmentShader = unrollLoops(fragmentShader);
  if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
    versionString = "#version 300 es\n";
    prefixVertex = [
      "#define attribute in",
      "#define varying out",
      "#define texture2D texture"
    ].join("\n") + "\n" + prefixVertex;
    prefixFragment = [
      "#define varying in",
      parameters.glslVersion === GLSL3 ? "" : "out highp vec4 pc_fragColor;",
      parameters.glslVersion === GLSL3 ? "" : "#define gl_FragColor pc_fragColor",
      "#define gl_FragDepthEXT gl_FragDepth",
      "#define texture2D texture",
      "#define textureCube texture",
      "#define texture2DProj textureProj",
      "#define texture2DLodEXT textureLod",
      "#define texture2DProjLodEXT textureProjLod",
      "#define textureCubeLodEXT textureLod",
      "#define texture2DGradEXT textureGrad",
      "#define texture2DProjGradEXT textureProjGrad",
      "#define textureCubeGradEXT textureGrad"
    ].join("\n") + "\n" + prefixFragment;
  }
  const vertexGlsl = versionString + prefixVertex + vertexShader;
  const fragmentGlsl = versionString + prefixFragment + fragmentShader;
  const glVertexShader = WebGLShader(gl, 35633, vertexGlsl);
  const glFragmentShader = WebGLShader(gl, 35632, fragmentGlsl);
  gl.attachShader(program, glVertexShader);
  gl.attachShader(program, glFragmentShader);
  if (parameters.index0AttributeName !== void 0) {
    gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
  } else if (parameters.morphTargets === true) {
    gl.bindAttribLocation(program, 0, "position");
  }
  gl.linkProgram(program);
  if (renderer2.debug.checkShaderErrors) {
    const programLog = gl.getProgramInfoLog(program).trim();
    const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
    const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
    let runnable = true;
    let haveDiagnostics = true;
    if (gl.getProgramParameter(program, 35714) === false) {
      runnable = false;
      const vertexErrors = getShaderErrors(gl, glVertexShader, "vertex");
      const fragmentErrors = getShaderErrors(gl, glFragmentShader, "fragment");
      console.error("THREE.WebGLProgram: shader error: ", gl.getError(), "35715", gl.getProgramParameter(program, 35715), "gl.getProgramInfoLog", programLog, vertexErrors, fragmentErrors);
    } else if (programLog !== "") {
      console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", programLog);
    } else if (vertexLog === "" || fragmentLog === "") {
      haveDiagnostics = false;
    }
    if (haveDiagnostics) {
      this.diagnostics = {
        runnable,
        programLog,
        vertexShader: {
          log: vertexLog,
          prefix: prefixVertex
        },
        fragmentShader: {
          log: fragmentLog,
          prefix: prefixFragment
        }
      };
    }
  }
  gl.deleteShader(glVertexShader);
  gl.deleteShader(glFragmentShader);
  let cachedUniforms;
  this.getUniforms = function() {
    if (cachedUniforms === void 0) {
      cachedUniforms = new WebGLUniforms(gl, program);
    }
    return cachedUniforms;
  };
  let cachedAttributes;
  this.getAttributes = function() {
    if (cachedAttributes === void 0) {
      cachedAttributes = fetchAttributeLocations(gl, program);
    }
    return cachedAttributes;
  };
  this.destroy = function() {
    bindingStates.releaseStatesOfProgram(this);
    gl.deleteProgram(program);
    this.program = void 0;
  };
  this.name = parameters.shaderName;
  this.id = programIdCount++;
  this.cacheKey = cacheKey;
  this.usedTimes = 1;
  this.program = program;
  this.vertexShader = glVertexShader;
  this.fragmentShader = glFragmentShader;
  return this;
}
function WebGLPrograms(renderer2, cubemaps, extensions, capabilities, bindingStates, clipping) {
  const programs = [];
  const isWebGL2 = capabilities.isWebGL2;
  const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
  const floatVertexTextures = capabilities.floatVertexTextures;
  const maxVertexUniforms = capabilities.maxVertexUniforms;
  const vertexTextures = capabilities.vertexTextures;
  let precision = capabilities.precision;
  const shaderIDs = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  const parameterNames = [
    "precision",
    "isWebGL2",
    "supportsVertexTextures",
    "outputEncoding",
    "instancing",
    "instancingColor",
    "map",
    "mapEncoding",
    "matcap",
    "matcapEncoding",
    "envMap",
    "envMapMode",
    "envMapEncoding",
    "envMapCubeUV",
    "lightMap",
    "lightMapEncoding",
    "aoMap",
    "emissiveMap",
    "emissiveMapEncoding",
    "bumpMap",
    "normalMap",
    "objectSpaceNormalMap",
    "tangentSpaceNormalMap",
    "clearcoatMap",
    "clearcoatRoughnessMap",
    "clearcoatNormalMap",
    "displacementMap",
    "specularMap",
    "roughnessMap",
    "metalnessMap",
    "gradientMap",
    "alphaMap",
    "combine",
    "vertexColors",
    "vertexTangents",
    "vertexUvs",
    "uvsVertexOnly",
    "fog",
    "useFog",
    "fogExp2",
    "flatShading",
    "sizeAttenuation",
    "logarithmicDepthBuffer",
    "skinning",
    "maxBones",
    "useVertexTexture",
    "morphTargets",
    "morphNormals",
    "maxMorphTargets",
    "maxMorphNormals",
    "premultipliedAlpha",
    "numDirLights",
    "numPointLights",
    "numSpotLights",
    "numHemiLights",
    "numRectAreaLights",
    "numDirLightShadows",
    "numPointLightShadows",
    "numSpotLightShadows",
    "shadowMapEnabled",
    "shadowMapType",
    "toneMapping",
    "physicallyCorrectLights",
    "alphaTest",
    "doubleSided",
    "flipSided",
    "numClippingPlanes",
    "numClipIntersection",
    "depthPacking",
    "dithering",
    "sheen",
    "transmissionMap"
  ];
  function getMaxBones(object) {
    const skeleton = object.skeleton;
    const bones = skeleton.bones;
    if (floatVertexTextures) {
      return 1024;
    } else {
      const nVertexUniforms = maxVertexUniforms;
      const nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);
      const maxBones = Math.min(nVertexMatrices, bones.length);
      if (maxBones < bones.length) {
        console.warn("THREE.WebGLRenderer: Skeleton has " + bones.length + " bones. This GPU supports " + maxBones + ".");
        return 0;
      }
      return maxBones;
    }
  }
  function getTextureEncodingFromMap(map) {
    let encoding;
    if (!map) {
      encoding = LinearEncoding;
    } else if (map.isTexture) {
      encoding = map.encoding;
    } else if (map.isWebGLRenderTarget) {
      console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.");
      encoding = map.texture.encoding;
    }
    return encoding;
  }
  function getParameters(material, lights, shadows, scene, object) {
    const fog = scene.fog;
    const environment = material.isMeshStandardMaterial ? scene.environment : null;
    const envMap = cubemaps.get(material.envMap || environment);
    const shaderID = shaderIDs[material.type];
    const maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;
    if (material.precision !== null) {
      precision = capabilities.getMaxPrecision(material.precision);
      if (precision !== material.precision) {
        console.warn("THREE.WebGLProgram.getParameters:", material.precision, "not supported, using", precision, "instead.");
      }
    }
    let vertexShader, fragmentShader;
    if (shaderID) {
      const shader = ShaderLib[shaderID];
      vertexShader = shader.vertexShader;
      fragmentShader = shader.fragmentShader;
    } else {
      vertexShader = material.vertexShader;
      fragmentShader = material.fragmentShader;
    }
    const currentRenderTarget = renderer2.getRenderTarget();
    const parameters = {
      isWebGL2,
      shaderID,
      shaderName: material.type,
      vertexShader,
      fragmentShader,
      defines: material.defines,
      isRawShaderMaterial: material.isRawShaderMaterial === true,
      glslVersion: material.glslVersion,
      precision,
      instancing: object.isInstancedMesh === true,
      instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,
      supportsVertexTextures: vertexTextures,
      outputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer2.outputEncoding,
      map: !!material.map,
      mapEncoding: getTextureEncodingFromMap(material.map),
      matcap: !!material.matcap,
      matcapEncoding: getTextureEncodingFromMap(material.matcap),
      envMap: !!envMap,
      envMapMode: envMap && envMap.mapping,
      envMapEncoding: getTextureEncodingFromMap(envMap),
      envMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),
      lightMap: !!material.lightMap,
      lightMapEncoding: getTextureEncodingFromMap(material.lightMap),
      aoMap: !!material.aoMap,
      emissiveMap: !!material.emissiveMap,
      emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),
      bumpMap: !!material.bumpMap,
      normalMap: !!material.normalMap,
      objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
      tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
      clearcoatMap: !!material.clearcoatMap,
      clearcoatRoughnessMap: !!material.clearcoatRoughnessMap,
      clearcoatNormalMap: !!material.clearcoatNormalMap,
      displacementMap: !!material.displacementMap,
      roughnessMap: !!material.roughnessMap,
      metalnessMap: !!material.metalnessMap,
      specularMap: !!material.specularMap,
      alphaMap: !!material.alphaMap,
      gradientMap: !!material.gradientMap,
      sheen: !!material.sheen,
      transmissionMap: !!material.transmissionMap,
      combine: material.combine,
      vertexTangents: material.normalMap && material.vertexTangents,
      vertexColors: material.vertexColors,
      vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap,
      uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmissionMap) && !!material.displacementMap,
      fog: !!fog,
      useFog: material.fog,
      fogExp2: fog && fog.isFogExp2,
      flatShading: material.flatShading,
      sizeAttenuation: material.sizeAttenuation,
      logarithmicDepthBuffer,
      skinning: material.skinning && maxBones > 0,
      maxBones,
      useVertexTexture: floatVertexTextures,
      morphTargets: material.morphTargets,
      morphNormals: material.morphNormals,
      maxMorphTargets: renderer2.maxMorphTargets,
      maxMorphNormals: renderer2.maxMorphNormals,
      numDirLights: lights.directional.length,
      numPointLights: lights.point.length,
      numSpotLights: lights.spot.length,
      numRectAreaLights: lights.rectArea.length,
      numHemiLights: lights.hemi.length,
      numDirLightShadows: lights.directionalShadowMap.length,
      numPointLightShadows: lights.pointShadowMap.length,
      numSpotLightShadows: lights.spotShadowMap.length,
      numClippingPlanes: clipping.numPlanes,
      numClipIntersection: clipping.numIntersection,
      dithering: material.dithering,
      shadowMapEnabled: renderer2.shadowMap.enabled && shadows.length > 0,
      shadowMapType: renderer2.shadowMap.type,
      toneMapping: material.toneMapped ? renderer2.toneMapping : NoToneMapping,
      physicallyCorrectLights: renderer2.physicallyCorrectLights,
      premultipliedAlpha: material.premultipliedAlpha,
      alphaTest: material.alphaTest,
      doubleSided: material.side === DoubleSide,
      flipSided: material.side === BackSide,
      depthPacking: material.depthPacking !== void 0 ? material.depthPacking : false,
      index0AttributeName: material.index0AttributeName,
      extensionDerivatives: material.extensions && material.extensions.derivatives,
      extensionFragDepth: material.extensions && material.extensions.fragDepth,
      extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
      extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,
      rendererExtensionFragDepth: isWebGL2 || extensions.has("EXT_frag_depth"),
      rendererExtensionDrawBuffers: isWebGL2 || extensions.has("WEBGL_draw_buffers"),
      rendererExtensionShaderTextureLod: isWebGL2 || extensions.has("EXT_shader_texture_lod"),
      customProgramCacheKey: material.customProgramCacheKey()
    };
    return parameters;
  }
  function getProgramCacheKey(parameters) {
    const array = [];
    if (parameters.shaderID) {
      array.push(parameters.shaderID);
    } else {
      array.push(parameters.fragmentShader);
      array.push(parameters.vertexShader);
    }
    if (parameters.defines !== void 0) {
      for (const name in parameters.defines) {
        array.push(name);
        array.push(parameters.defines[name]);
      }
    }
    if (parameters.isRawShaderMaterial === false) {
      for (let i2 = 0; i2 < parameterNames.length; i2++) {
        array.push(parameters[parameterNames[i2]]);
      }
      array.push(renderer2.outputEncoding);
      array.push(renderer2.gammaFactor);
    }
    array.push(parameters.customProgramCacheKey);
    return array.join();
  }
  function getUniforms(material) {
    const shaderID = shaderIDs[material.type];
    let uniforms;
    if (shaderID) {
      const shader = ShaderLib[shaderID];
      uniforms = UniformsUtils.clone(shader.uniforms);
    } else {
      uniforms = material.uniforms;
    }
    return uniforms;
  }
  function acquireProgram(parameters, cacheKey) {
    let program;
    for (let p2 = 0, pl = programs.length; p2 < pl; p2++) {
      const preexistingProgram = programs[p2];
      if (preexistingProgram.cacheKey === cacheKey) {
        program = preexistingProgram;
        ++program.usedTimes;
        break;
      }
    }
    if (program === void 0) {
      program = new WebGLProgram(renderer2, cacheKey, parameters, bindingStates);
      programs.push(program);
    }
    return program;
  }
  function releaseProgram(program) {
    if (--program.usedTimes === 0) {
      const i2 = programs.indexOf(program);
      programs[i2] = programs[programs.length - 1];
      programs.pop();
      program.destroy();
    }
  }
  return {
    getParameters,
    getProgramCacheKey,
    getUniforms,
    acquireProgram,
    releaseProgram,
    programs
  };
}
function WebGLProperties() {
  let properties = new WeakMap();
  function get2(object) {
    let map = properties.get(object);
    if (map === void 0) {
      map = {};
      properties.set(object, map);
    }
    return map;
  }
  function remove2(object) {
    properties.delete(object);
  }
  function update(object, key, value) {
    properties.get(object)[key] = value;
  }
  function dispose() {
    properties = new WeakMap();
  }
  return {
    get: get2,
    remove: remove2,
    update,
    dispose
  };
}
function painterSortStable(a2, b2) {
  if (a2.groupOrder !== b2.groupOrder) {
    return a2.groupOrder - b2.groupOrder;
  } else if (a2.renderOrder !== b2.renderOrder) {
    return a2.renderOrder - b2.renderOrder;
  } else if (a2.program !== b2.program) {
    return a2.program.id - b2.program.id;
  } else if (a2.material.id !== b2.material.id) {
    return a2.material.id - b2.material.id;
  } else if (a2.z !== b2.z) {
    return a2.z - b2.z;
  } else {
    return a2.id - b2.id;
  }
}
function reversePainterSortStable(a2, b2) {
  if (a2.groupOrder !== b2.groupOrder) {
    return a2.groupOrder - b2.groupOrder;
  } else if (a2.renderOrder !== b2.renderOrder) {
    return a2.renderOrder - b2.renderOrder;
  } else if (a2.z !== b2.z) {
    return b2.z - a2.z;
  } else {
    return a2.id - b2.id;
  }
}
function WebGLRenderList(properties) {
  const renderItems = [];
  let renderItemsIndex = 0;
  const opaque = [];
  const transparent = [];
  const defaultProgram = { id: -1 };
  function init() {
    renderItemsIndex = 0;
    opaque.length = 0;
    transparent.length = 0;
  }
  function getNextRenderItem(object, geometry, material, groupOrder, z2, group) {
    let renderItem = renderItems[renderItemsIndex];
    const materialProperties = properties.get(material);
    if (renderItem === void 0) {
      renderItem = {
        id: object.id,
        object,
        geometry,
        material,
        program: materialProperties.program || defaultProgram,
        groupOrder,
        renderOrder: object.renderOrder,
        z: z2,
        group
      };
      renderItems[renderItemsIndex] = renderItem;
    } else {
      renderItem.id = object.id;
      renderItem.object = object;
      renderItem.geometry = geometry;
      renderItem.material = material;
      renderItem.program = materialProperties.program || defaultProgram;
      renderItem.groupOrder = groupOrder;
      renderItem.renderOrder = object.renderOrder;
      renderItem.z = z2;
      renderItem.group = group;
    }
    renderItemsIndex++;
    return renderItem;
  }
  function push(object, geometry, material, groupOrder, z2, group) {
    const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z2, group);
    (material.transparent === true ? transparent : opaque).push(renderItem);
  }
  function unshift(object, geometry, material, groupOrder, z2, group) {
    const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z2, group);
    (material.transparent === true ? transparent : opaque).unshift(renderItem);
  }
  function sort(customOpaqueSort, customTransparentSort) {
    if (opaque.length > 1)
      opaque.sort(customOpaqueSort || painterSortStable);
    if (transparent.length > 1)
      transparent.sort(customTransparentSort || reversePainterSortStable);
  }
  function finish() {
    for (let i2 = renderItemsIndex, il = renderItems.length; i2 < il; i2++) {
      const renderItem = renderItems[i2];
      if (renderItem.id === null)
        break;
      renderItem.id = null;
      renderItem.object = null;
      renderItem.geometry = null;
      renderItem.material = null;
      renderItem.program = null;
      renderItem.group = null;
    }
  }
  return {
    opaque,
    transparent,
    init,
    push,
    unshift,
    finish,
    sort
  };
}
function WebGLRenderLists(properties) {
  let lists = new WeakMap();
  function get2(scene, camera) {
    const cameras = lists.get(scene);
    let list;
    if (cameras === void 0) {
      list = new WebGLRenderList(properties);
      lists.set(scene, new WeakMap());
      lists.get(scene).set(camera, list);
    } else {
      list = cameras.get(camera);
      if (list === void 0) {
        list = new WebGLRenderList(properties);
        cameras.set(camera, list);
      }
    }
    return list;
  }
  function dispose() {
    lists = new WeakMap();
  }
  return {
    get: get2,
    dispose
  };
}
function UniformsCache() {
  const lights = {};
  return {
    get: function(light) {
      if (lights[light.id] !== void 0) {
        return lights[light.id];
      }
      let uniforms;
      switch (light.type) {
        case "DirectionalLight":
          uniforms = {
            direction: new Vector3(),
            color: new Color()
          };
          break;
        case "SpotLight":
          uniforms = {
            position: new Vector3(),
            direction: new Vector3(),
            color: new Color(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          uniforms = {
            position: new Vector3(),
            color: new Color(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          uniforms = {
            direction: new Vector3(),
            skyColor: new Color(),
            groundColor: new Color()
          };
          break;
        case "RectAreaLight":
          uniforms = {
            color: new Color(),
            position: new Vector3(),
            halfWidth: new Vector3(),
            halfHeight: new Vector3()
          };
          break;
      }
      lights[light.id] = uniforms;
      return uniforms;
    }
  };
}
function ShadowUniformsCache() {
  const lights = {};
  return {
    get: function(light) {
      if (lights[light.id] !== void 0) {
        return lights[light.id];
      }
      let uniforms;
      switch (light.type) {
        case "DirectionalLight":
          uniforms = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2()
          };
          break;
        case "SpotLight":
          uniforms = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2()
          };
          break;
        case "PointLight":
          uniforms = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      lights[light.id] = uniforms;
      return uniforms;
    }
  };
}
let nextVersion = 0;
function shadowCastingLightsFirst(lightA, lightB) {
  return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);
}
function WebGLLights(extensions, capabilities) {
  const cache = new UniformsCache();
  const shadowCache = ShadowUniformsCache();
  const state = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotShadow: [],
    spotShadowMap: [],
    spotShadowMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: []
  };
  for (let i2 = 0; i2 < 9; i2++)
    state.probe.push(new Vector3());
  const vector3 = new Vector3();
  const matrix4 = new Matrix4();
  const matrix42 = new Matrix4();
  function setup(lights, shadows, camera) {
    let r2 = 0, g2 = 0, b2 = 0;
    for (let i2 = 0; i2 < 9; i2++)
      state.probe[i2].set(0, 0, 0);
    let directionalLength = 0;
    let pointLength = 0;
    let spotLength = 0;
    let rectAreaLength = 0;
    let hemiLength = 0;
    let numDirectionalShadows = 0;
    let numPointShadows = 0;
    let numSpotShadows = 0;
    const viewMatrix = camera.matrixWorldInverse;
    lights.sort(shadowCastingLightsFirst);
    for (let i2 = 0, l2 = lights.length; i2 < l2; i2++) {
      const light = lights[i2];
      const color = light.color;
      const intensity = light.intensity;
      const distance = light.distance;
      const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
      if (light.isAmbientLight) {
        r2 += color.r * intensity;
        g2 += color.g * intensity;
        b2 += color.b * intensity;
      } else if (light.isLightProbe) {
        for (let j2 = 0; j2 < 9; j2++) {
          state.probe[j2].addScaledVector(light.sh.coefficients[j2], intensity);
        }
      } else if (light.isDirectionalLight) {
        const uniforms = cache.get(light);
        uniforms.color.copy(light.color).multiplyScalar(light.intensity);
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        vector3.setFromMatrixPosition(light.target.matrixWorld);
        uniforms.direction.sub(vector3);
        uniforms.direction.transformDirection(viewMatrix);
        if (light.castShadow) {
          const shadow = light.shadow;
          const shadowUniforms = shadowCache.get(light);
          shadowUniforms.shadowBias = shadow.bias;
          shadowUniforms.shadowNormalBias = shadow.normalBias;
          shadowUniforms.shadowRadius = shadow.radius;
          shadowUniforms.shadowMapSize = shadow.mapSize;
          state.directionalShadow[directionalLength] = shadowUniforms;
          state.directionalShadowMap[directionalLength] = shadowMap;
          state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
          numDirectionalShadows++;
        }
        state.directional[directionalLength] = uniforms;
        directionalLength++;
      } else if (light.isSpotLight) {
        const uniforms = cache.get(light);
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        uniforms.color.copy(color).multiplyScalar(intensity);
        uniforms.distance = distance;
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        vector3.setFromMatrixPosition(light.target.matrixWorld);
        uniforms.direction.sub(vector3);
        uniforms.direction.transformDirection(viewMatrix);
        uniforms.coneCos = Math.cos(light.angle);
        uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
        uniforms.decay = light.decay;
        if (light.castShadow) {
          const shadow = light.shadow;
          const shadowUniforms = shadowCache.get(light);
          shadowUniforms.shadowBias = shadow.bias;
          shadowUniforms.shadowNormalBias = shadow.normalBias;
          shadowUniforms.shadowRadius = shadow.radius;
          shadowUniforms.shadowMapSize = shadow.mapSize;
          state.spotShadow[spotLength] = shadowUniforms;
          state.spotShadowMap[spotLength] = shadowMap;
          state.spotShadowMatrix[spotLength] = light.shadow.matrix;
          numSpotShadows++;
        }
        state.spot[spotLength] = uniforms;
        spotLength++;
      } else if (light.isRectAreaLight) {
        const uniforms = cache.get(light);
        uniforms.color.copy(color).multiplyScalar(intensity);
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        matrix42.identity();
        matrix4.copy(light.matrixWorld);
        matrix4.premultiply(viewMatrix);
        matrix42.extractRotation(matrix4);
        uniforms.halfWidth.set(light.width * 0.5, 0, 0);
        uniforms.halfHeight.set(0, light.height * 0.5, 0);
        uniforms.halfWidth.applyMatrix4(matrix42);
        uniforms.halfHeight.applyMatrix4(matrix42);
        state.rectArea[rectAreaLength] = uniforms;
        rectAreaLength++;
      } else if (light.isPointLight) {
        const uniforms = cache.get(light);
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        uniforms.color.copy(light.color).multiplyScalar(light.intensity);
        uniforms.distance = light.distance;
        uniforms.decay = light.decay;
        if (light.castShadow) {
          const shadow = light.shadow;
          const shadowUniforms = shadowCache.get(light);
          shadowUniforms.shadowBias = shadow.bias;
          shadowUniforms.shadowNormalBias = shadow.normalBias;
          shadowUniforms.shadowRadius = shadow.radius;
          shadowUniforms.shadowMapSize = shadow.mapSize;
          shadowUniforms.shadowCameraNear = shadow.camera.near;
          shadowUniforms.shadowCameraFar = shadow.camera.far;
          state.pointShadow[pointLength] = shadowUniforms;
          state.pointShadowMap[pointLength] = shadowMap;
          state.pointShadowMatrix[pointLength] = light.shadow.matrix;
          numPointShadows++;
        }
        state.point[pointLength] = uniforms;
        pointLength++;
      } else if (light.isHemisphereLight) {
        const uniforms = cache.get(light);
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        uniforms.direction.transformDirection(viewMatrix);
        uniforms.direction.normalize();
        uniforms.skyColor.copy(light.color).multiplyScalar(intensity);
        uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);
        state.hemi[hemiLength] = uniforms;
        hemiLength++;
      }
    }
    if (rectAreaLength > 0) {
      if (capabilities.isWebGL2) {
        state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
        state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
      } else {
        if (extensions.has("OES_texture_float_linear") === true) {
          state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
          state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
        } else if (extensions.has("OES_texture_half_float_linear") === true) {
          state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
          state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
        } else {
          console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.");
        }
      }
    }
    state.ambient[0] = r2;
    state.ambient[1] = g2;
    state.ambient[2] = b2;
    const hash = state.hash;
    if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {
      state.directional.length = directionalLength;
      state.spot.length = spotLength;
      state.rectArea.length = rectAreaLength;
      state.point.length = pointLength;
      state.hemi.length = hemiLength;
      state.directionalShadow.length = numDirectionalShadows;
      state.directionalShadowMap.length = numDirectionalShadows;
      state.pointShadow.length = numPointShadows;
      state.pointShadowMap.length = numPointShadows;
      state.spotShadow.length = numSpotShadows;
      state.spotShadowMap.length = numSpotShadows;
      state.directionalShadowMatrix.length = numDirectionalShadows;
      state.pointShadowMatrix.length = numPointShadows;
      state.spotShadowMatrix.length = numSpotShadows;
      hash.directionalLength = directionalLength;
      hash.pointLength = pointLength;
      hash.spotLength = spotLength;
      hash.rectAreaLength = rectAreaLength;
      hash.hemiLength = hemiLength;
      hash.numDirectionalShadows = numDirectionalShadows;
      hash.numPointShadows = numPointShadows;
      hash.numSpotShadows = numSpotShadows;
      state.version = nextVersion++;
    }
  }
  return {
    setup,
    state
  };
}
function WebGLRenderState(extensions, capabilities) {
  const lights = new WebGLLights(extensions, capabilities);
  const lightsArray = [];
  const shadowsArray = [];
  function init() {
    lightsArray.length = 0;
    shadowsArray.length = 0;
  }
  function pushLight(light) {
    lightsArray.push(light);
  }
  function pushShadow(shadowLight) {
    shadowsArray.push(shadowLight);
  }
  function setupLights(camera) {
    lights.setup(lightsArray, shadowsArray, camera);
  }
  const state = {
    lightsArray,
    shadowsArray,
    lights
  };
  return {
    init,
    state,
    setupLights,
    pushLight,
    pushShadow
  };
}
function WebGLRenderStates(extensions, capabilities) {
  let renderStates = new WeakMap();
  function get2(scene, camera) {
    let renderState;
    if (renderStates.has(scene) === false) {
      renderState = new WebGLRenderState(extensions, capabilities);
      renderStates.set(scene, new WeakMap());
      renderStates.get(scene).set(camera, renderState);
    } else {
      if (renderStates.get(scene).has(camera) === false) {
        renderState = new WebGLRenderState(extensions, capabilities);
        renderStates.get(scene).set(camera, renderState);
      } else {
        renderState = renderStates.get(scene).get(camera);
      }
    }
    return renderState;
  }
  function dispose() {
    renderStates = new WeakMap();
  }
  return {
    get: get2,
    dispose
  };
}
function MeshDepthMaterial(parameters) {
  Material.call(this);
  this.type = "MeshDepthMaterial";
  this.depthPacking = BasicDepthPacking;
  this.skinning = false;
  this.morphTargets = false;
  this.map = null;
  this.alphaMap = null;
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.fog = false;
  this.setValues(parameters);
}
MeshDepthMaterial.prototype = Object.create(Material.prototype);
MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;
MeshDepthMaterial.prototype.isMeshDepthMaterial = true;
MeshDepthMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.depthPacking = source.depthPacking;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.map = source.map;
  this.alphaMap = source.alphaMap;
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  return this;
};
function MeshDistanceMaterial(parameters) {
  Material.call(this);
  this.type = "MeshDistanceMaterial";
  this.referencePosition = new Vector3();
  this.nearDistance = 1;
  this.farDistance = 1e3;
  this.skinning = false;
  this.morphTargets = false;
  this.map = null;
  this.alphaMap = null;
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.fog = false;
  this.setValues(parameters);
}
MeshDistanceMaterial.prototype = Object.create(Material.prototype);
MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;
MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;
MeshDistanceMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.referencePosition.copy(source.referencePosition);
  this.nearDistance = source.nearDistance;
  this.farDistance = source.farDistance;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.map = source.map;
  this.alphaMap = source.alphaMap;
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  return this;
};
var vsm_frag = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n	for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n		#ifdef HORIZONAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean * HALF_SAMPLE_RATE;\n	squared_mean = squared_mean * HALF_SAMPLE_RATE;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
var vsm_vert = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
function WebGLShadowMap(_renderer, _objects, maxTextureSize) {
  let _frustum = new Frustum();
  const _shadowMapSize = new Vector2(), _viewportSize = new Vector2(), _viewport = new Vector4(), _depthMaterials = [], _distanceMaterials = [], _materialCache = {};
  const shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };
  const shadowMaterialVertical = new ShaderMaterial({
    defines: {
      SAMPLE_RATE: 2 / 8,
      HALF_SAMPLE_RATE: 1 / 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new Vector2() },
      radius: { value: 4 }
    },
    vertexShader: vsm_vert,
    fragmentShader: vsm_frag
  });
  const shadowMaterialHorizonal = shadowMaterialVertical.clone();
  shadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;
  const fullScreenTri = new BufferGeometry();
  fullScreenTri.setAttribute("position", new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));
  const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
  const scope = this;
  this.enabled = false;
  this.autoUpdate = true;
  this.needsUpdate = false;
  this.type = PCFShadowMap;
  this.render = function(lights, scene, camera) {
    if (scope.enabled === false)
      return;
    if (scope.autoUpdate === false && scope.needsUpdate === false)
      return;
    if (lights.length === 0)
      return;
    const currentRenderTarget = _renderer.getRenderTarget();
    const activeCubeFace = _renderer.getActiveCubeFace();
    const activeMipmapLevel = _renderer.getActiveMipmapLevel();
    const _state = _renderer.state;
    _state.setBlending(NoBlending);
    _state.buffers.color.setClear(1, 1, 1, 1);
    _state.buffers.depth.setTest(true);
    _state.setScissorTest(false);
    for (let i2 = 0, il = lights.length; i2 < il; i2++) {
      const light = lights[i2];
      const shadow = light.shadow;
      if (shadow === void 0) {
        console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");
        continue;
      }
      if (shadow.autoUpdate === false && shadow.needsUpdate === false)
        continue;
      _shadowMapSize.copy(shadow.mapSize);
      const shadowFrameExtents = shadow.getFrameExtents();
      _shadowMapSize.multiply(shadowFrameExtents);
      _viewportSize.copy(shadow.mapSize);
      if (_shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize) {
        if (_shadowMapSize.x > maxTextureSize) {
          _viewportSize.x = Math.floor(maxTextureSize / shadowFrameExtents.x);
          _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
          shadow.mapSize.x = _viewportSize.x;
        }
        if (_shadowMapSize.y > maxTextureSize) {
          _viewportSize.y = Math.floor(maxTextureSize / shadowFrameExtents.y);
          _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
          shadow.mapSize.y = _viewportSize.y;
        }
      }
      if (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {
        const pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };
        shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
        shadow.map.texture.name = light.name + ".shadowMap";
        shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
        shadow.camera.updateProjectionMatrix();
      }
      if (shadow.map === null) {
        const pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };
        shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
        shadow.map.texture.name = light.name + ".shadowMap";
        shadow.camera.updateProjectionMatrix();
      }
      _renderer.setRenderTarget(shadow.map);
      _renderer.clear();
      const viewportCount = shadow.getViewportCount();
      for (let vp = 0; vp < viewportCount; vp++) {
        const viewport = shadow.getViewport(vp);
        _viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);
        _state.viewport(_viewport);
        shadow.updateMatrices(light, vp);
        _frustum = shadow.getFrustum();
        renderObject(scene, camera, shadow.camera, light, this.type);
      }
      if (!shadow.isPointLightShadow && this.type === VSMShadowMap) {
        VSMPass(shadow, camera);
      }
      shadow.needsUpdate = false;
    }
    scope.needsUpdate = false;
    _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
  };
  function VSMPass(shadow, camera) {
    const geometry = _objects.update(fullScreenMesh);
    shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
    shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
    shadowMaterialVertical.uniforms.radius.value = shadow.radius;
    _renderer.setRenderTarget(shadow.mapPass);
    _renderer.clear();
    _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
    shadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;
    shadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;
    shadowMaterialHorizonal.uniforms.radius.value = shadow.radius;
    _renderer.setRenderTarget(shadow.map);
    _renderer.clear();
    _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null);
  }
  function getDepthMaterialVariant(useMorphing, useSkinning, useInstancing) {
    const index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;
    let material = _depthMaterials[index];
    if (material === void 0) {
      material = new MeshDepthMaterial({
        depthPacking: RGBADepthPacking,
        morphTargets: useMorphing,
        skinning: useSkinning
      });
      _depthMaterials[index] = material;
    }
    return material;
  }
  function getDistanceMaterialVariant(useMorphing, useSkinning, useInstancing) {
    const index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;
    let material = _distanceMaterials[index];
    if (material === void 0) {
      material = new MeshDistanceMaterial({
        morphTargets: useMorphing,
        skinning: useSkinning
      });
      _distanceMaterials[index] = material;
    }
    return material;
  }
  function getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {
    let result = null;
    let getMaterialVariant = getDepthMaterialVariant;
    let customMaterial = object.customDepthMaterial;
    if (light.isPointLight === true) {
      getMaterialVariant = getDistanceMaterialVariant;
      customMaterial = object.customDistanceMaterial;
    }
    if (customMaterial === void 0) {
      let useMorphing = false;
      if (material.morphTargets === true) {
        useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;
      }
      let useSkinning = false;
      if (object.isSkinnedMesh === true) {
        if (material.skinning === true) {
          useSkinning = true;
        } else {
          console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", object);
        }
      }
      const useInstancing = object.isInstancedMesh === true;
      result = getMaterialVariant(useMorphing, useSkinning, useInstancing);
    } else {
      result = customMaterial;
    }
    if (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {
      const keyA = result.uuid, keyB = material.uuid;
      let materialsForVariant = _materialCache[keyA];
      if (materialsForVariant === void 0) {
        materialsForVariant = {};
        _materialCache[keyA] = materialsForVariant;
      }
      let cachedMaterial = materialsForVariant[keyB];
      if (cachedMaterial === void 0) {
        cachedMaterial = result.clone();
        materialsForVariant[keyB] = cachedMaterial;
      }
      result = cachedMaterial;
    }
    result.visible = material.visible;
    result.wireframe = material.wireframe;
    if (type === VSMShadowMap) {
      result.side = material.shadowSide !== null ? material.shadowSide : material.side;
    } else {
      result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
    }
    result.clipShadows = material.clipShadows;
    result.clippingPlanes = material.clippingPlanes;
    result.clipIntersection = material.clipIntersection;
    result.wireframeLinewidth = material.wireframeLinewidth;
    result.linewidth = material.linewidth;
    if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
      result.referencePosition.setFromMatrixPosition(light.matrixWorld);
      result.nearDistance = shadowCameraNear;
      result.farDistance = shadowCameraFar;
    }
    return result;
  }
  function renderObject(object, camera, shadowCamera, light, type) {
    if (object.visible === false)
      return;
    const visible = object.layers.test(camera.layers);
    if (visible && (object.isMesh || object.isLine || object.isPoints)) {
      if ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
        object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
        const geometry = _objects.update(object);
        const material = object.material;
        if (Array.isArray(material)) {
          const groups = geometry.groups;
          for (let k2 = 0, kl = groups.length; k2 < kl; k2++) {
            const group = groups[k2];
            const groupMaterial = material[group.materialIndex];
            if (groupMaterial && groupMaterial.visible) {
              const depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);
              _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
            }
          }
        } else if (material.visible) {
          const depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);
          _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
        }
      }
    }
    const children = object.children;
    for (let i2 = 0, l2 = children.length; i2 < l2; i2++) {
      renderObject(children[i2], camera, shadowCamera, light, type);
    }
  }
}
function WebGLState(gl, extensions, capabilities) {
  const isWebGL2 = capabilities.isWebGL2;
  function ColorBuffer() {
    let locked = false;
    const color = new Vector4();
    let currentColorMask = null;
    const currentColorClear = new Vector4(0, 0, 0, 0);
    return {
      setMask: function(colorMask) {
        if (currentColorMask !== colorMask && !locked) {
          gl.colorMask(colorMask, colorMask, colorMask, colorMask);
          currentColorMask = colorMask;
        }
      },
      setLocked: function(lock) {
        locked = lock;
      },
      setClear: function(r2, g2, b2, a2, premultipliedAlpha) {
        if (premultipliedAlpha === true) {
          r2 *= a2;
          g2 *= a2;
          b2 *= a2;
        }
        color.set(r2, g2, b2, a2);
        if (currentColorClear.equals(color) === false) {
          gl.clearColor(r2, g2, b2, a2);
          currentColorClear.copy(color);
        }
      },
      reset: function() {
        locked = false;
        currentColorMask = null;
        currentColorClear.set(-1, 0, 0, 0);
      }
    };
  }
  function DepthBuffer() {
    let locked = false;
    let currentDepthMask = null;
    let currentDepthFunc = null;
    let currentDepthClear = null;
    return {
      setTest: function(depthTest) {
        if (depthTest) {
          enable(2929);
        } else {
          disable(2929);
        }
      },
      setMask: function(depthMask) {
        if (currentDepthMask !== depthMask && !locked) {
          gl.depthMask(depthMask);
          currentDepthMask = depthMask;
        }
      },
      setFunc: function(depthFunc) {
        if (currentDepthFunc !== depthFunc) {
          if (depthFunc) {
            switch (depthFunc) {
              case NeverDepth:
                gl.depthFunc(512);
                break;
              case AlwaysDepth:
                gl.depthFunc(519);
                break;
              case LessDepth:
                gl.depthFunc(513);
                break;
              case LessEqualDepth:
                gl.depthFunc(515);
                break;
              case EqualDepth:
                gl.depthFunc(514);
                break;
              case GreaterEqualDepth:
                gl.depthFunc(518);
                break;
              case GreaterDepth:
                gl.depthFunc(516);
                break;
              case NotEqualDepth:
                gl.depthFunc(517);
                break;
              default:
                gl.depthFunc(515);
            }
          } else {
            gl.depthFunc(515);
          }
          currentDepthFunc = depthFunc;
        }
      },
      setLocked: function(lock) {
        locked = lock;
      },
      setClear: function(depth) {
        if (currentDepthClear !== depth) {
          gl.clearDepth(depth);
          currentDepthClear = depth;
        }
      },
      reset: function() {
        locked = false;
        currentDepthMask = null;
        currentDepthFunc = null;
        currentDepthClear = null;
      }
    };
  }
  function StencilBuffer() {
    let locked = false;
    let currentStencilMask = null;
    let currentStencilFunc = null;
    let currentStencilRef = null;
    let currentStencilFuncMask = null;
    let currentStencilFail = null;
    let currentStencilZFail = null;
    let currentStencilZPass = null;
    let currentStencilClear = null;
    return {
      setTest: function(stencilTest) {
        if (!locked) {
          if (stencilTest) {
            enable(2960);
          } else {
            disable(2960);
          }
        }
      },
      setMask: function(stencilMask) {
        if (currentStencilMask !== stencilMask && !locked) {
          gl.stencilMask(stencilMask);
          currentStencilMask = stencilMask;
        }
      },
      setFunc: function(stencilFunc, stencilRef, stencilMask) {
        if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
          gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
          currentStencilFunc = stencilFunc;
          currentStencilRef = stencilRef;
          currentStencilFuncMask = stencilMask;
        }
      },
      setOp: function(stencilFail, stencilZFail, stencilZPass) {
        if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
          gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
          currentStencilFail = stencilFail;
          currentStencilZFail = stencilZFail;
          currentStencilZPass = stencilZPass;
        }
      },
      setLocked: function(lock) {
        locked = lock;
      },
      setClear: function(stencil) {
        if (currentStencilClear !== stencil) {
          gl.clearStencil(stencil);
          currentStencilClear = stencil;
        }
      },
      reset: function() {
        locked = false;
        currentStencilMask = null;
        currentStencilFunc = null;
        currentStencilRef = null;
        currentStencilFuncMask = null;
        currentStencilFail = null;
        currentStencilZFail = null;
        currentStencilZPass = null;
        currentStencilClear = null;
      }
    };
  }
  const colorBuffer = new ColorBuffer();
  const depthBuffer = new DepthBuffer();
  const stencilBuffer = new StencilBuffer();
  let enabledCapabilities = {};
  let currentProgram = null;
  let currentBlendingEnabled = null;
  let currentBlending = null;
  let currentBlendEquation = null;
  let currentBlendSrc = null;
  let currentBlendDst = null;
  let currentBlendEquationAlpha = null;
  let currentBlendSrcAlpha = null;
  let currentBlendDstAlpha = null;
  let currentPremultipledAlpha = false;
  let currentFlipSided = null;
  let currentCullFace = null;
  let currentLineWidth = null;
  let currentPolygonOffsetFactor = null;
  let currentPolygonOffsetUnits = null;
  const maxTextures = gl.getParameter(35661);
  let lineWidthAvailable = false;
  let version2 = 0;
  const glVersion = gl.getParameter(7938);
  if (glVersion.indexOf("WebGL") !== -1) {
    version2 = parseFloat(/^WebGL\ ([0-9])/.exec(glVersion)[1]);
    lineWidthAvailable = version2 >= 1;
  } else if (glVersion.indexOf("OpenGL ES") !== -1) {
    version2 = parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(glVersion)[1]);
    lineWidthAvailable = version2 >= 2;
  }
  let currentTextureSlot = null;
  let currentBoundTextures = {};
  const currentScissor = new Vector4();
  const currentViewport = new Vector4();
  function createTexture(type, target, count) {
    const data = new Uint8Array(4);
    const texture = gl.createTexture();
    gl.bindTexture(type, texture);
    gl.texParameteri(type, 10241, 9728);
    gl.texParameteri(type, 10240, 9728);
    for (let i2 = 0; i2 < count; i2++) {
      gl.texImage2D(target + i2, 0, 6408, 1, 1, 0, 6408, 5121, data);
    }
    return texture;
  }
  const emptyTextures = {};
  emptyTextures[3553] = createTexture(3553, 3553, 1);
  emptyTextures[34067] = createTexture(34067, 34069, 6);
  colorBuffer.setClear(0, 0, 0, 1);
  depthBuffer.setClear(1);
  stencilBuffer.setClear(0);
  enable(2929);
  depthBuffer.setFunc(LessEqualDepth);
  setFlipSided(false);
  setCullFace(CullFaceBack);
  enable(2884);
  setBlending(NoBlending);
  function enable(id) {
    if (enabledCapabilities[id] !== true) {
      gl.enable(id);
      enabledCapabilities[id] = true;
    }
  }
  function disable(id) {
    if (enabledCapabilities[id] !== false) {
      gl.disable(id);
      enabledCapabilities[id] = false;
    }
  }
  function useProgram(program) {
    if (currentProgram !== program) {
      gl.useProgram(program);
      currentProgram = program;
      return true;
    }
    return false;
  }
  const equationToGL = {
    [AddEquation]: 32774,
    [SubtractEquation]: 32778,
    [ReverseSubtractEquation]: 32779
  };
  if (isWebGL2) {
    equationToGL[MinEquation] = 32775;
    equationToGL[MaxEquation] = 32776;
  } else {
    const extension = extensions.get("EXT_blend_minmax");
    if (extension !== null) {
      equationToGL[MinEquation] = extension.MIN_EXT;
      equationToGL[MaxEquation] = extension.MAX_EXT;
    }
  }
  const factorToGL = {
    [ZeroFactor]: 0,
    [OneFactor]: 1,
    [SrcColorFactor]: 768,
    [SrcAlphaFactor]: 770,
    [SrcAlphaSaturateFactor]: 776,
    [DstColorFactor]: 774,
    [DstAlphaFactor]: 772,
    [OneMinusSrcColorFactor]: 769,
    [OneMinusSrcAlphaFactor]: 771,
    [OneMinusDstColorFactor]: 775,
    [OneMinusDstAlphaFactor]: 773
  };
  function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
    if (blending === NoBlending) {
      if (currentBlendingEnabled) {
        disable(3042);
        currentBlendingEnabled = false;
      }
      return;
    }
    if (!currentBlendingEnabled) {
      enable(3042);
      currentBlendingEnabled = true;
    }
    if (blending !== CustomBlending) {
      if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
        if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
          gl.blendEquation(32774);
          currentBlendEquation = AddEquation;
          currentBlendEquationAlpha = AddEquation;
        }
        if (premultipliedAlpha) {
          switch (blending) {
            case NormalBlending:
              gl.blendFuncSeparate(1, 771, 1, 771);
              break;
            case AdditiveBlending:
              gl.blendFunc(1, 1);
              break;
            case SubtractiveBlending:
              gl.blendFuncSeparate(0, 0, 769, 771);
              break;
            case MultiplyBlending:
              gl.blendFuncSeparate(0, 768, 0, 770);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", blending);
              break;
          }
        } else {
          switch (blending) {
            case NormalBlending:
              gl.blendFuncSeparate(770, 771, 1, 771);
              break;
            case AdditiveBlending:
              gl.blendFunc(770, 1);
              break;
            case SubtractiveBlending:
              gl.blendFunc(0, 769);
              break;
            case MultiplyBlending:
              gl.blendFunc(0, 768);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", blending);
              break;
          }
        }
        currentBlendSrc = null;
        currentBlendDst = null;
        currentBlendSrcAlpha = null;
        currentBlendDstAlpha = null;
        currentBlending = blending;
        currentPremultipledAlpha = premultipliedAlpha;
      }
      return;
    }
    blendEquationAlpha = blendEquationAlpha || blendEquation;
    blendSrcAlpha = blendSrcAlpha || blendSrc;
    blendDstAlpha = blendDstAlpha || blendDst;
    if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
      gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
      currentBlendEquation = blendEquation;
      currentBlendEquationAlpha = blendEquationAlpha;
    }
    if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
      gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
      currentBlendSrc = blendSrc;
      currentBlendDst = blendDst;
      currentBlendSrcAlpha = blendSrcAlpha;
      currentBlendDstAlpha = blendDstAlpha;
    }
    currentBlending = blending;
    currentPremultipledAlpha = null;
  }
  function setMaterial(material, frontFaceCW) {
    material.side === DoubleSide ? disable(2884) : enable(2884);
    let flipSided = material.side === BackSide;
    if (frontFaceCW)
      flipSided = !flipSided;
    setFlipSided(flipSided);
    material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
    depthBuffer.setFunc(material.depthFunc);
    depthBuffer.setTest(material.depthTest);
    depthBuffer.setMask(material.depthWrite);
    colorBuffer.setMask(material.colorWrite);
    const stencilWrite = material.stencilWrite;
    stencilBuffer.setTest(stencilWrite);
    if (stencilWrite) {
      stencilBuffer.setMask(material.stencilWriteMask);
      stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
      stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
    }
    setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
  }
  function setFlipSided(flipSided) {
    if (currentFlipSided !== flipSided) {
      if (flipSided) {
        gl.frontFace(2304);
      } else {
        gl.frontFace(2305);
      }
      currentFlipSided = flipSided;
    }
  }
  function setCullFace(cullFace) {
    if (cullFace !== CullFaceNone) {
      enable(2884);
      if (cullFace !== currentCullFace) {
        if (cullFace === CullFaceBack) {
          gl.cullFace(1029);
        } else if (cullFace === CullFaceFront) {
          gl.cullFace(1028);
        } else {
          gl.cullFace(1032);
        }
      }
    } else {
      disable(2884);
    }
    currentCullFace = cullFace;
  }
  function setLineWidth(width) {
    if (width !== currentLineWidth) {
      if (lineWidthAvailable)
        gl.lineWidth(width);
      currentLineWidth = width;
    }
  }
  function setPolygonOffset(polygonOffset, factor, units) {
    if (polygonOffset) {
      enable(32823);
      if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
        gl.polygonOffset(factor, units);
        currentPolygonOffsetFactor = factor;
        currentPolygonOffsetUnits = units;
      }
    } else {
      disable(32823);
    }
  }
  function setScissorTest(scissorTest) {
    if (scissorTest) {
      enable(3089);
    } else {
      disable(3089);
    }
  }
  function activeTexture(webglSlot) {
    if (webglSlot === void 0)
      webglSlot = 33984 + maxTextures - 1;
    if (currentTextureSlot !== webglSlot) {
      gl.activeTexture(webglSlot);
      currentTextureSlot = webglSlot;
    }
  }
  function bindTexture(webglType, webglTexture) {
    if (currentTextureSlot === null) {
      activeTexture();
    }
    let boundTexture = currentBoundTextures[currentTextureSlot];
    if (boundTexture === void 0) {
      boundTexture = { type: void 0, texture: void 0 };
      currentBoundTextures[currentTextureSlot] = boundTexture;
    }
    if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
      gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
      boundTexture.type = webglType;
      boundTexture.texture = webglTexture;
    }
  }
  function unbindTexture() {
    const boundTexture = currentBoundTextures[currentTextureSlot];
    if (boundTexture !== void 0 && boundTexture.type !== void 0) {
      gl.bindTexture(boundTexture.type, null);
      boundTexture.type = void 0;
      boundTexture.texture = void 0;
    }
  }
  function compressedTexImage2D() {
    try {
      gl.compressedTexImage2D.apply(gl, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texImage2D() {
    try {
      gl.texImage2D.apply(gl, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texImage3D() {
    try {
      gl.texImage3D.apply(gl, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function scissor(scissor2) {
    if (currentScissor.equals(scissor2) === false) {
      gl.scissor(scissor2.x, scissor2.y, scissor2.z, scissor2.w);
      currentScissor.copy(scissor2);
    }
  }
  function viewport(viewport2) {
    if (currentViewport.equals(viewport2) === false) {
      gl.viewport(viewport2.x, viewport2.y, viewport2.z, viewport2.w);
      currentViewport.copy(viewport2);
    }
  }
  function reset2() {
    enabledCapabilities = {};
    currentTextureSlot = null;
    currentBoundTextures = {};
    currentProgram = null;
    currentBlending = null;
    currentFlipSided = null;
    currentCullFace = null;
    colorBuffer.reset();
    depthBuffer.reset();
    stencilBuffer.reset();
  }
  return {
    buffers: {
      color: colorBuffer,
      depth: depthBuffer,
      stencil: stencilBuffer
    },
    enable,
    disable,
    useProgram,
    setBlending,
    setMaterial,
    setFlipSided,
    setCullFace,
    setLineWidth,
    setPolygonOffset,
    setScissorTest,
    activeTexture,
    bindTexture,
    unbindTexture,
    compressedTexImage2D,
    texImage2D,
    texImage3D,
    scissor,
    viewport,
    reset: reset2
  };
}
function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
  const isWebGL2 = capabilities.isWebGL2;
  const maxTextures = capabilities.maxTextures;
  const maxCubemapSize = capabilities.maxCubemapSize;
  const maxTextureSize = capabilities.maxTextureSize;
  const maxSamples = capabilities.maxSamples;
  const _videoTextures = new WeakMap();
  let _canvas2;
  let useOffscreenCanvas = false;
  try {
    useOffscreenCanvas = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch (err) {
  }
  function createCanvas(width, height) {
    return useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
  }
  function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
    let scale = 1;
    if (image.width > maxSize || image.height > maxSize) {
      scale = maxSize / Math.max(image.width, image.height);
    }
    if (scale < 1 || needsPowerOfTwo === true) {
      if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
        const floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;
        const width = floor(scale * image.width);
        const height = floor(scale * image.height);
        if (_canvas2 === void 0)
          _canvas2 = createCanvas(width, height);
        const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas2;
        canvas.width = width;
        canvas.height = height;
        const context = canvas.getContext("2d");
        context.drawImage(image, 0, 0, width, height);
        console.warn("THREE.WebGLRenderer: Texture has been resized from (" + image.width + "x" + image.height + ") to (" + width + "x" + height + ").");
        return canvas;
      } else {
        if ("data" in image) {
          console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + image.width + "x" + image.height + ").");
        }
        return image;
      }
    }
    return image;
  }
  function isPowerOfTwo(image) {
    return MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);
  }
  function textureNeedsPowerOfTwo(texture) {
    if (isWebGL2)
      return false;
    return texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
  }
  function textureNeedsGenerateMipmaps(texture, supportsMips) {
    return texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
  }
  function generateMipmap(target, texture, width, height) {
    _gl.generateMipmap(target);
    const textureProperties = properties.get(texture);
    textureProperties.__maxMipLevel = Math.log(Math.max(width, height)) * Math.LOG2E;
  }
  function getInternalFormat(internalFormatName, glFormat, glType) {
    if (isWebGL2 === false)
      return glFormat;
    if (internalFormatName !== null) {
      if (_gl[internalFormatName] !== void 0)
        return _gl[internalFormatName];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
    }
    let internalFormat = glFormat;
    if (glFormat === 6403) {
      if (glType === 5126)
        internalFormat = 33326;
      if (glType === 5131)
        internalFormat = 33325;
      if (glType === 5121)
        internalFormat = 33321;
    }
    if (glFormat === 6407) {
      if (glType === 5126)
        internalFormat = 34837;
      if (glType === 5131)
        internalFormat = 34843;
      if (glType === 5121)
        internalFormat = 32849;
    }
    if (glFormat === 6408) {
      if (glType === 5126)
        internalFormat = 34836;
      if (glType === 5131)
        internalFormat = 34842;
      if (glType === 5121)
        internalFormat = 32856;
    }
    if (internalFormat === 33325 || internalFormat === 33326 || internalFormat === 34842 || internalFormat === 34836) {
      extensions.get("EXT_color_buffer_float");
    }
    return internalFormat;
  }
  function filterFallback(f2) {
    if (f2 === NearestFilter || f2 === NearestMipmapNearestFilter || f2 === NearestMipmapLinearFilter) {
      return 9728;
    }
    return 9729;
  }
  function onTextureDispose(event) {
    const texture = event.target;
    texture.removeEventListener("dispose", onTextureDispose);
    deallocateTexture(texture);
    if (texture.isVideoTexture) {
      _videoTextures.delete(texture);
    }
    info.memory.textures--;
  }
  function onRenderTargetDispose(event) {
    const renderTarget = event.target;
    renderTarget.removeEventListener("dispose", onRenderTargetDispose);
    deallocateRenderTarget(renderTarget);
    info.memory.textures--;
  }
  function deallocateTexture(texture) {
    const textureProperties = properties.get(texture);
    if (textureProperties.__webglInit === void 0)
      return;
    _gl.deleteTexture(textureProperties.__webglTexture);
    properties.remove(texture);
  }
  function deallocateRenderTarget(renderTarget) {
    const renderTargetProperties = properties.get(renderTarget);
    const textureProperties = properties.get(renderTarget.texture);
    if (!renderTarget)
      return;
    if (textureProperties.__webglTexture !== void 0) {
      _gl.deleteTexture(textureProperties.__webglTexture);
    }
    if (renderTarget.depthTexture) {
      renderTarget.depthTexture.dispose();
    }
    if (renderTarget.isWebGLCubeRenderTarget) {
      for (let i2 = 0; i2 < 6; i2++) {
        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i2]);
        if (renderTargetProperties.__webglDepthbuffer)
          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i2]);
      }
    } else {
      _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
      if (renderTargetProperties.__webglDepthbuffer)
        _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
      if (renderTargetProperties.__webglMultisampledFramebuffer)
        _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
      if (renderTargetProperties.__webglColorRenderbuffer)
        _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);
      if (renderTargetProperties.__webglDepthRenderbuffer)
        _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
    }
    properties.remove(renderTarget.texture);
    properties.remove(renderTarget);
  }
  let textureUnits = 0;
  function resetTextureUnits() {
    textureUnits = 0;
  }
  function allocateTextureUnit() {
    const textureUnit = textureUnits;
    if (textureUnit >= maxTextures) {
      console.warn("THREE.WebGLTextures: Trying to use " + textureUnit + " texture units while this GPU supports only " + maxTextures);
    }
    textureUnits += 1;
    return textureUnit;
  }
  function setTexture2D(texture, slot) {
    const textureProperties = properties.get(texture);
    if (texture.isVideoTexture)
      updateVideoTexture(texture);
    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      const image = texture.image;
      if (image === void 0) {
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
      } else if (image.complete === false) {
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      } else {
        uploadTexture(textureProperties, texture, slot);
        return;
      }
    }
    state.activeTexture(33984 + slot);
    state.bindTexture(3553, textureProperties.__webglTexture);
  }
  function setTexture2DArray(texture, slot) {
    const textureProperties = properties.get(texture);
    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      uploadTexture(textureProperties, texture, slot);
      return;
    }
    state.activeTexture(33984 + slot);
    state.bindTexture(35866, textureProperties.__webglTexture);
  }
  function setTexture3D(texture, slot) {
    const textureProperties = properties.get(texture);
    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      uploadTexture(textureProperties, texture, slot);
      return;
    }
    state.activeTexture(33984 + slot);
    state.bindTexture(32879, textureProperties.__webglTexture);
  }
  function setTextureCube(texture, slot) {
    const textureProperties = properties.get(texture);
    if (texture.version > 0 && textureProperties.__version !== texture.version) {
      uploadCubeTexture(textureProperties, texture, slot);
      return;
    }
    state.activeTexture(33984 + slot);
    state.bindTexture(34067, textureProperties.__webglTexture);
  }
  const wrappingToGL = {
    [RepeatWrapping]: 10497,
    [ClampToEdgeWrapping]: 33071,
    [MirroredRepeatWrapping]: 33648
  };
  const filterToGL = {
    [NearestFilter]: 9728,
    [NearestMipmapNearestFilter]: 9984,
    [NearestMipmapLinearFilter]: 9986,
    [LinearFilter]: 9729,
    [LinearMipmapNearestFilter]: 9985,
    [LinearMipmapLinearFilter]: 9987
  };
  function setTextureParameters(textureType, texture, supportsMips) {
    if (supportsMips) {
      _gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]);
      _gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]);
      if (textureType === 32879 || textureType === 35866) {
        _gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]);
      }
      _gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]);
      _gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter]);
    } else {
      _gl.texParameteri(textureType, 10242, 33071);
      _gl.texParameteri(textureType, 10243, 33071);
      if (textureType === 32879 || textureType === 35866) {
        _gl.texParameteri(textureType, 32882, 33071);
      }
      if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {
        console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.");
      }
      _gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));
      _gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));
      if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {
        console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.");
      }
    }
    const extension = extensions.get("EXT_texture_filter_anisotropic");
    if (extension) {
      if (texture.type === FloatType && extensions.get("OES_texture_float_linear") === null)
        return;
      if (texture.type === HalfFloatType && (isWebGL2 || extensions.get("OES_texture_half_float_linear")) === null)
        return;
      if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
        properties.get(texture).__currentAnisotropy = texture.anisotropy;
      }
    }
  }
  function initTexture(textureProperties, texture) {
    if (textureProperties.__webglInit === void 0) {
      textureProperties.__webglInit = true;
      texture.addEventListener("dispose", onTextureDispose);
      textureProperties.__webglTexture = _gl.createTexture();
      info.memory.textures++;
    }
  }
  function uploadTexture(textureProperties, texture, slot) {
    let textureType = 3553;
    if (texture.isDataTexture2DArray)
      textureType = 35866;
    if (texture.isDataTexture3D)
      textureType = 32879;
    initTexture(textureProperties, texture);
    state.activeTexture(33984 + slot);
    state.bindTexture(textureType, textureProperties.__webglTexture);
    _gl.pixelStorei(37440, texture.flipY);
    _gl.pixelStorei(37441, texture.premultiplyAlpha);
    _gl.pixelStorei(3317, texture.unpackAlignment);
    const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;
    const image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
    const supportsMips = isPowerOfTwo(image) || isWebGL2, glFormat = utils.convert(texture.format);
    let glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);
    setTextureParameters(textureType, texture, supportsMips);
    let mipmap;
    const mipmaps = texture.mipmaps;
    if (texture.isDepthTexture) {
      glInternalFormat = 6402;
      if (isWebGL2) {
        if (texture.type === FloatType) {
          glInternalFormat = 36012;
        } else if (texture.type === UnsignedIntType) {
          glInternalFormat = 33190;
        } else if (texture.type === UnsignedInt248Type) {
          glInternalFormat = 35056;
        } else {
          glInternalFormat = 33189;
        }
      } else {
        if (texture.type === FloatType) {
          console.error("WebGLRenderer: Floating point depth texture requires WebGL2.");
        }
      }
      if (texture.format === DepthFormat && glInternalFormat === 6402) {
        if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {
          console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");
          texture.type = UnsignedShortType;
          glType = utils.convert(texture.type);
        }
      }
      if (texture.format === DepthStencilFormat && glInternalFormat === 6402) {
        glInternalFormat = 34041;
        if (texture.type !== UnsignedInt248Type) {
          console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");
          texture.type = UnsignedInt248Type;
          glType = utils.convert(texture.type);
        }
      }
      state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
    } else if (texture.isDataTexture) {
      if (mipmaps.length > 0 && supportsMips) {
        for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
          mipmap = mipmaps[i2];
          state.texImage2D(3553, i2, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
        }
        texture.generateMipmaps = false;
        textureProperties.__maxMipLevel = mipmaps.length - 1;
      } else {
        state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
        textureProperties.__maxMipLevel = 0;
      }
    } else if (texture.isCompressedTexture) {
      for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
        mipmap = mipmaps[i2];
        if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {
          if (glFormat !== null) {
            state.compressedTexImage2D(3553, i2, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
          } else {
            console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
          }
        } else {
          state.texImage2D(3553, i2, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
        }
      }
      textureProperties.__maxMipLevel = mipmaps.length - 1;
    } else if (texture.isDataTexture2DArray) {
      state.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
      textureProperties.__maxMipLevel = 0;
    } else if (texture.isDataTexture3D) {
      state.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
      textureProperties.__maxMipLevel = 0;
    } else {
      if (mipmaps.length > 0 && supportsMips) {
        for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
          mipmap = mipmaps[i2];
          state.texImage2D(3553, i2, glInternalFormat, glFormat, glType, mipmap);
        }
        texture.generateMipmaps = false;
        textureProperties.__maxMipLevel = mipmaps.length - 1;
      } else {
        state.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);
        textureProperties.__maxMipLevel = 0;
      }
    }
    if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
      generateMipmap(textureType, texture, image.width, image.height);
    }
    textureProperties.__version = texture.version;
    if (texture.onUpdate)
      texture.onUpdate(texture);
  }
  function uploadCubeTexture(textureProperties, texture, slot) {
    if (texture.image.length !== 6)
      return;
    initTexture(textureProperties, texture);
    state.activeTexture(33984 + slot);
    state.bindTexture(34067, textureProperties.__webglTexture);
    _gl.pixelStorei(37440, texture.flipY);
    const isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);
    const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
    const cubeImage = [];
    for (let i2 = 0; i2 < 6; i2++) {
      if (!isCompressed && !isDataTexture) {
        cubeImage[i2] = resizeImage(texture.image[i2], false, true, maxCubemapSize);
      } else {
        cubeImage[i2] = isDataTexture ? texture.image[i2].image : texture.image[i2];
      }
    }
    const image = cubeImage[0], supportsMips = isPowerOfTwo(image) || isWebGL2, glFormat = utils.convert(texture.format), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);
    setTextureParameters(34067, texture, supportsMips);
    let mipmaps;
    if (isCompressed) {
      for (let i2 = 0; i2 < 6; i2++) {
        mipmaps = cubeImage[i2].mipmaps;
        for (let j2 = 0; j2 < mipmaps.length; j2++) {
          const mipmap = mipmaps[j2];
          if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {
            if (glFormat !== null) {
              state.compressedTexImage2D(34069 + i2, j2, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
            } else {
              console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
            }
          } else {
            state.texImage2D(34069 + i2, j2, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
          }
        }
      }
      textureProperties.__maxMipLevel = mipmaps.length - 1;
    } else {
      mipmaps = texture.mipmaps;
      for (let i2 = 0; i2 < 6; i2++) {
        if (isDataTexture) {
          state.texImage2D(34069 + i2, 0, glInternalFormat, cubeImage[i2].width, cubeImage[i2].height, 0, glFormat, glType, cubeImage[i2].data);
          for (let j2 = 0; j2 < mipmaps.length; j2++) {
            const mipmap = mipmaps[j2];
            const mipmapImage = mipmap.image[i2].image;
            state.texImage2D(34069 + i2, j2 + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
          }
        } else {
          state.texImage2D(34069 + i2, 0, glInternalFormat, glFormat, glType, cubeImage[i2]);
          for (let j2 = 0; j2 < mipmaps.length; j2++) {
            const mipmap = mipmaps[j2];
            state.texImage2D(34069 + i2, j2 + 1, glInternalFormat, glFormat, glType, mipmap.image[i2]);
          }
        }
      }
      textureProperties.__maxMipLevel = mipmaps.length;
    }
    if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
      generateMipmap(34067, texture, image.width, image.height);
    }
    textureProperties.__version = texture.version;
    if (texture.onUpdate)
      texture.onUpdate(texture);
  }
  function setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {
    const glFormat = utils.convert(renderTarget.texture.format);
    const glType = utils.convert(renderTarget.texture.type);
    const glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);
    state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
    _gl.bindFramebuffer(36160, framebuffer);
    _gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0);
    _gl.bindFramebuffer(36160, null);
  }
  function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
    _gl.bindRenderbuffer(36161, renderbuffer);
    if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
      let glInternalFormat = 33189;
      if (isMultisample) {
        const depthTexture = renderTarget.depthTexture;
        if (depthTexture && depthTexture.isDepthTexture) {
          if (depthTexture.type === FloatType) {
            glInternalFormat = 36012;
          } else if (depthTexture.type === UnsignedIntType) {
            glInternalFormat = 33190;
          }
        }
        const samples = getRenderTargetSamples(renderTarget);
        _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
      } else {
        _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
      }
      _gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);
    } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
      if (isMultisample) {
        const samples = getRenderTargetSamples(renderTarget);
        _gl.renderbufferStorageMultisample(36161, samples, 35056, renderTarget.width, renderTarget.height);
      } else {
        _gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);
      }
      _gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);
    } else {
      const glFormat = utils.convert(renderTarget.texture.format);
      const glType = utils.convert(renderTarget.texture.type);
      const glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);
      if (isMultisample) {
        const samples = getRenderTargetSamples(renderTarget);
        _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
      } else {
        _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
      }
    }
    _gl.bindRenderbuffer(36161, null);
  }
  function setupDepthTexture(framebuffer, renderTarget) {
    const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
    if (isCube)
      throw new Error("Depth Texture with cube render targets is not supported");
    _gl.bindFramebuffer(36160, framebuffer);
    if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    }
    if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
      renderTarget.depthTexture.image.width = renderTarget.width;
      renderTarget.depthTexture.image.height = renderTarget.height;
      renderTarget.depthTexture.needsUpdate = true;
    }
    setTexture2D(renderTarget.depthTexture, 0);
    const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
    if (renderTarget.depthTexture.format === DepthFormat) {
      _gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);
    } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
      _gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);
    } else {
      throw new Error("Unknown depthTexture format");
    }
  }
  function setupDepthRenderbuffer(renderTarget) {
    const renderTargetProperties = properties.get(renderTarget);
    const isCube = renderTarget.isWebGLCubeRenderTarget === true;
    if (renderTarget.depthTexture) {
      if (isCube)
        throw new Error("target.depthTexture not supported in Cube render targets");
      setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
    } else {
      if (isCube) {
        renderTargetProperties.__webglDepthbuffer = [];
        for (let i2 = 0; i2 < 6; i2++) {
          _gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i2]);
          renderTargetProperties.__webglDepthbuffer[i2] = _gl.createRenderbuffer();
          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i2], renderTarget, false);
        }
      } else {
        _gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);
        renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
        setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
      }
    }
    _gl.bindFramebuffer(36160, null);
  }
  function setupRenderTarget(renderTarget) {
    const renderTargetProperties = properties.get(renderTarget);
    const textureProperties = properties.get(renderTarget.texture);
    renderTarget.addEventListener("dispose", onRenderTargetDispose);
    textureProperties.__webglTexture = _gl.createTexture();
    info.memory.textures++;
    const isCube = renderTarget.isWebGLCubeRenderTarget === true;
    const isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;
    const supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;
    if (isWebGL2 && renderTarget.texture.format === RGBFormat && (renderTarget.texture.type === FloatType || renderTarget.texture.type === HalfFloatType)) {
      renderTarget.texture.format = RGBAFormat;
      console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.");
    }
    if (isCube) {
      renderTargetProperties.__webglFramebuffer = [];
      for (let i2 = 0; i2 < 6; i2++) {
        renderTargetProperties.__webglFramebuffer[i2] = _gl.createFramebuffer();
      }
    } else {
      renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
      if (isMultisample) {
        if (isWebGL2) {
          renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
          renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();
          _gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);
          const glFormat = utils.convert(renderTarget.texture.format);
          const glType = utils.convert(renderTarget.texture.type);
          const glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);
          const samples = getRenderTargetSamples(renderTarget);
          _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          _gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);
          _gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer);
          _gl.bindRenderbuffer(36161, null);
          if (renderTarget.depthBuffer) {
            renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
          }
          _gl.bindFramebuffer(36160, null);
        } else {
          console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
        }
      }
    }
    if (isCube) {
      state.bindTexture(34067, textureProperties.__webglTexture);
      setTextureParameters(34067, renderTarget.texture, supportsMips);
      for (let i2 = 0; i2 < 6; i2++) {
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i2], renderTarget, 36064, 34069 + i2);
      }
      if (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {
        generateMipmap(34067, renderTarget.texture, renderTarget.width, renderTarget.height);
      }
      state.bindTexture(34067, null);
    } else {
      state.bindTexture(3553, textureProperties.__webglTexture);
      setTextureParameters(3553, renderTarget.texture, supportsMips);
      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553);
      if (textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips)) {
        generateMipmap(3553, renderTarget.texture, renderTarget.width, renderTarget.height);
      }
      state.bindTexture(3553, null);
    }
    if (renderTarget.depthBuffer) {
      setupDepthRenderbuffer(renderTarget);
    }
  }
  function updateRenderTargetMipmap(renderTarget) {
    const texture = renderTarget.texture;
    const supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;
    if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
      const target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;
      const webglTexture = properties.get(texture).__webglTexture;
      state.bindTexture(target, webglTexture);
      generateMipmap(target, texture, renderTarget.width, renderTarget.height);
      state.bindTexture(target, null);
    }
  }
  function updateMultisampleRenderTarget(renderTarget) {
    if (renderTarget.isWebGLMultisampleRenderTarget) {
      if (isWebGL2) {
        const renderTargetProperties = properties.get(renderTarget);
        _gl.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);
        _gl.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);
        const width = renderTarget.width;
        const height = renderTarget.height;
        let mask = 16384;
        if (renderTarget.depthBuffer)
          mask |= 256;
        if (renderTarget.stencilBuffer)
          mask |= 1024;
        _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728);
        _gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);
      } else {
        console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
      }
    }
  }
  function getRenderTargetSamples(renderTarget) {
    return isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;
  }
  function updateVideoTexture(texture) {
    const frame = info.render.frame;
    if (_videoTextures.get(texture) !== frame) {
      _videoTextures.set(texture, frame);
      texture.update();
    }
  }
  let warnedTexture2D = false;
  let warnedTextureCube = false;
  function safeSetTexture2D(texture, slot) {
    if (texture && texture.isWebGLRenderTarget) {
      if (warnedTexture2D === false) {
        console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.");
        warnedTexture2D = true;
      }
      texture = texture.texture;
    }
    setTexture2D(texture, slot);
  }
  function safeSetTextureCube(texture, slot) {
    if (texture && texture.isWebGLCubeRenderTarget) {
      if (warnedTextureCube === false) {
        console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.");
        warnedTextureCube = true;
      }
      texture = texture.texture;
    }
    setTextureCube(texture, slot);
  }
  this.allocateTextureUnit = allocateTextureUnit;
  this.resetTextureUnits = resetTextureUnits;
  this.setTexture2D = setTexture2D;
  this.setTexture2DArray = setTexture2DArray;
  this.setTexture3D = setTexture3D;
  this.setTextureCube = setTextureCube;
  this.setupRenderTarget = setupRenderTarget;
  this.updateRenderTargetMipmap = updateRenderTargetMipmap;
  this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
  this.safeSetTexture2D = safeSetTexture2D;
  this.safeSetTextureCube = safeSetTextureCube;
}
function WebGLUtils(gl, extensions, capabilities) {
  const isWebGL2 = capabilities.isWebGL2;
  function convert(p2) {
    let extension;
    if (p2 === UnsignedByteType)
      return 5121;
    if (p2 === UnsignedShort4444Type)
      return 32819;
    if (p2 === UnsignedShort5551Type)
      return 32820;
    if (p2 === UnsignedShort565Type)
      return 33635;
    if (p2 === ByteType)
      return 5120;
    if (p2 === ShortType)
      return 5122;
    if (p2 === UnsignedShortType)
      return 5123;
    if (p2 === IntType)
      return 5124;
    if (p2 === UnsignedIntType)
      return 5125;
    if (p2 === FloatType)
      return 5126;
    if (p2 === HalfFloatType) {
      if (isWebGL2)
        return 5131;
      extension = extensions.get("OES_texture_half_float");
      if (extension !== null) {
        return extension.HALF_FLOAT_OES;
      } else {
        return null;
      }
    }
    if (p2 === AlphaFormat)
      return 6406;
    if (p2 === RGBFormat)
      return 6407;
    if (p2 === RGBAFormat)
      return 6408;
    if (p2 === LuminanceFormat)
      return 6409;
    if (p2 === LuminanceAlphaFormat)
      return 6410;
    if (p2 === DepthFormat)
      return 6402;
    if (p2 === DepthStencilFormat)
      return 34041;
    if (p2 === RedFormat)
      return 6403;
    if (p2 === RedIntegerFormat)
      return 36244;
    if (p2 === RGFormat)
      return 33319;
    if (p2 === RGIntegerFormat)
      return 33320;
    if (p2 === RGBIntegerFormat)
      return 36248;
    if (p2 === RGBAIntegerFormat)
      return 36249;
    if (p2 === RGB_S3TC_DXT1_Format || p2 === RGBA_S3TC_DXT1_Format || p2 === RGBA_S3TC_DXT3_Format || p2 === RGBA_S3TC_DXT5_Format) {
      extension = extensions.get("WEBGL_compressed_texture_s3tc");
      if (extension !== null) {
        if (p2 === RGB_S3TC_DXT1_Format)
          return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (p2 === RGBA_S3TC_DXT1_Format)
          return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (p2 === RGBA_S3TC_DXT3_Format)
          return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (p2 === RGBA_S3TC_DXT5_Format)
          return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      } else {
        return null;
      }
    }
    if (p2 === RGB_PVRTC_4BPPV1_Format || p2 === RGB_PVRTC_2BPPV1_Format || p2 === RGBA_PVRTC_4BPPV1_Format || p2 === RGBA_PVRTC_2BPPV1_Format) {
      extension = extensions.get("WEBGL_compressed_texture_pvrtc");
      if (extension !== null) {
        if (p2 === RGB_PVRTC_4BPPV1_Format)
          return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (p2 === RGB_PVRTC_2BPPV1_Format)
          return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (p2 === RGBA_PVRTC_4BPPV1_Format)
          return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (p2 === RGBA_PVRTC_2BPPV1_Format)
          return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else {
        return null;
      }
    }
    if (p2 === RGB_ETC1_Format) {
      extension = extensions.get("WEBGL_compressed_texture_etc1");
      if (extension !== null) {
        return extension.COMPRESSED_RGB_ETC1_WEBGL;
      } else {
        return null;
      }
    }
    if (p2 === RGB_ETC2_Format || p2 === RGBA_ETC2_EAC_Format) {
      extension = extensions.get("WEBGL_compressed_texture_etc");
      if (extension !== null) {
        if (p2 === RGB_ETC2_Format)
          return extension.COMPRESSED_RGB8_ETC2;
        if (p2 === RGBA_ETC2_EAC_Format)
          return extension.COMPRESSED_RGBA8_ETC2_EAC;
      }
    }
    if (p2 === RGBA_ASTC_4x4_Format || p2 === RGBA_ASTC_5x4_Format || p2 === RGBA_ASTC_5x5_Format || p2 === RGBA_ASTC_6x5_Format || p2 === RGBA_ASTC_6x6_Format || p2 === RGBA_ASTC_8x5_Format || p2 === RGBA_ASTC_8x6_Format || p2 === RGBA_ASTC_8x8_Format || p2 === RGBA_ASTC_10x5_Format || p2 === RGBA_ASTC_10x6_Format || p2 === RGBA_ASTC_10x8_Format || p2 === RGBA_ASTC_10x10_Format || p2 === RGBA_ASTC_12x10_Format || p2 === RGBA_ASTC_12x12_Format || p2 === SRGB8_ALPHA8_ASTC_4x4_Format || p2 === SRGB8_ALPHA8_ASTC_5x4_Format || p2 === SRGB8_ALPHA8_ASTC_5x5_Format || p2 === SRGB8_ALPHA8_ASTC_6x5_Format || p2 === SRGB8_ALPHA8_ASTC_6x6_Format || p2 === SRGB8_ALPHA8_ASTC_8x5_Format || p2 === SRGB8_ALPHA8_ASTC_8x6_Format || p2 === SRGB8_ALPHA8_ASTC_8x8_Format || p2 === SRGB8_ALPHA8_ASTC_10x5_Format || p2 === SRGB8_ALPHA8_ASTC_10x6_Format || p2 === SRGB8_ALPHA8_ASTC_10x8_Format || p2 === SRGB8_ALPHA8_ASTC_10x10_Format || p2 === SRGB8_ALPHA8_ASTC_12x10_Format || p2 === SRGB8_ALPHA8_ASTC_12x12_Format) {
      extension = extensions.get("WEBGL_compressed_texture_astc");
      if (extension !== null) {
        return p2;
      } else {
        return null;
      }
    }
    if (p2 === RGBA_BPTC_Format) {
      extension = extensions.get("EXT_texture_compression_bptc");
      if (extension !== null) {
        return p2;
      } else {
        return null;
      }
    }
    if (p2 === UnsignedInt248Type) {
      if (isWebGL2)
        return 34042;
      extension = extensions.get("WEBGL_depth_texture");
      if (extension !== null) {
        return extension.UNSIGNED_INT_24_8_WEBGL;
      } else {
        return null;
      }
    }
  }
  return { convert };
}
function ArrayCamera(array) {
  PerspectiveCamera.call(this);
  this.cameras = array || [];
}
ArrayCamera.prototype = Object.assign(Object.create(PerspectiveCamera.prototype), {
  constructor: ArrayCamera,
  isArrayCamera: true
});
function Group() {
  Object3D.call(this);
  this.type = "Group";
}
Group.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Group,
  isGroup: true
});
function WebXRController() {
  this._targetRay = null;
  this._grip = null;
  this._hand = null;
}
Object.assign(WebXRController.prototype, {
  constructor: WebXRController,
  getHandSpace: function() {
    if (this._hand === null) {
      this._hand = new Group();
      this._hand.matrixAutoUpdate = false;
      this._hand.visible = false;
      this._hand.joints = [];
      this._hand.inputState = { pinching: false };
      if (window.XRHand) {
        for (let i2 = 0; i2 <= window.XRHand.LITTLE_PHALANX_TIP; i2++) {
          const joint = new Group();
          joint.matrixAutoUpdate = false;
          joint.visible = false;
          this._hand.joints.push(joint);
          this._hand.add(joint);
        }
      }
    }
    return this._hand;
  },
  getTargetRaySpace: function() {
    if (this._targetRay === null) {
      this._targetRay = new Group();
      this._targetRay.matrixAutoUpdate = false;
      this._targetRay.visible = false;
    }
    return this._targetRay;
  },
  getGripSpace: function() {
    if (this._grip === null) {
      this._grip = new Group();
      this._grip.matrixAutoUpdate = false;
      this._grip.visible = false;
    }
    return this._grip;
  },
  dispatchEvent: function(event) {
    if (this._targetRay !== null) {
      this._targetRay.dispatchEvent(event);
    }
    if (this._grip !== null) {
      this._grip.dispatchEvent(event);
    }
    if (this._hand !== null) {
      this._hand.dispatchEvent(event);
    }
    return this;
  },
  disconnect: function(inputSource) {
    this.dispatchEvent({ type: "disconnected", data: inputSource });
    if (this._targetRay !== null) {
      this._targetRay.visible = false;
    }
    if (this._grip !== null) {
      this._grip.visible = false;
    }
    if (this._hand !== null) {
      this._hand.visible = false;
    }
    return this;
  },
  update: function(inputSource, frame, referenceSpace) {
    let inputPose = null;
    let gripPose = null;
    let handPose = null;
    const targetRay = this._targetRay;
    const grip = this._grip;
    const hand = this._hand;
    if (inputSource) {
      if (hand && inputSource.hand) {
        handPose = true;
        for (let i2 = 0; i2 <= window.XRHand.LITTLE_PHALANX_TIP; i2++) {
          if (inputSource.hand[i2]) {
            const jointPose = frame.getJointPose(inputSource.hand[i2], referenceSpace);
            const joint = hand.joints[i2];
            if (jointPose !== null) {
              joint.matrix.fromArray(jointPose.transform.matrix);
              joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
              joint.jointRadius = jointPose.radius;
            }
            joint.visible = jointPose !== null;
            const indexTip = hand.joints[window.XRHand.INDEX_PHALANX_TIP];
            const thumbTip = hand.joints[window.XRHand.THUMB_PHALANX_TIP];
            const distance = indexTip.position.distanceTo(thumbTip.position);
            const distanceToPinch = 0.02;
            const threshold = 5e-3;
            if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
              hand.inputState.pinching = false;
              this.dispatchEvent({
                type: "pinchend",
                handedness: inputSource.handedness,
                target: this
              });
            } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
              hand.inputState.pinching = true;
              this.dispatchEvent({
                type: "pinchstart",
                handedness: inputSource.handedness,
                target: this
              });
            }
          }
        }
      } else {
        if (targetRay !== null) {
          inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
          if (inputPose !== null) {
            targetRay.matrix.fromArray(inputPose.transform.matrix);
            targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
          }
        }
        if (grip !== null && inputSource.gripSpace) {
          gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
          if (gripPose !== null) {
            grip.matrix.fromArray(gripPose.transform.matrix);
            grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
          }
        }
      }
    }
    if (targetRay !== null) {
      targetRay.visible = inputPose !== null;
    }
    if (grip !== null) {
      grip.visible = gripPose !== null;
    }
    if (hand !== null) {
      hand.visible = handPose !== null;
    }
    return this;
  }
});
function WebXRManager(renderer2, gl) {
  const scope = this;
  let session = null;
  let framebufferScaleFactor = 1;
  let referenceSpace = null;
  let referenceSpaceType = "local-floor";
  let pose = null;
  const controllers = [];
  const inputSourcesMap = new Map();
  const cameraL = new PerspectiveCamera();
  cameraL.layers.enable(1);
  cameraL.viewport = new Vector4();
  const cameraR = new PerspectiveCamera();
  cameraR.layers.enable(2);
  cameraR.viewport = new Vector4();
  const cameras = [cameraL, cameraR];
  const cameraVR = new ArrayCamera();
  cameraVR.layers.enable(1);
  cameraVR.layers.enable(2);
  let _currentDepthNear = null;
  let _currentDepthFar = null;
  this.enabled = false;
  this.isPresenting = false;
  this.getController = function(index) {
    let controller = controllers[index];
    if (controller === void 0) {
      controller = new WebXRController();
      controllers[index] = controller;
    }
    return controller.getTargetRaySpace();
  };
  this.getControllerGrip = function(index) {
    let controller = controllers[index];
    if (controller === void 0) {
      controller = new WebXRController();
      controllers[index] = controller;
    }
    return controller.getGripSpace();
  };
  this.getHand = function(index) {
    let controller = controllers[index];
    if (controller === void 0) {
      controller = new WebXRController();
      controllers[index] = controller;
    }
    return controller.getHandSpace();
  };
  function onSessionEvent(event) {
    const controller = inputSourcesMap.get(event.inputSource);
    if (controller) {
      controller.dispatchEvent({ type: event.type, data: event.inputSource });
    }
  }
  function onSessionEnd() {
    inputSourcesMap.forEach(function(controller, inputSource) {
      controller.disconnect(inputSource);
    });
    inputSourcesMap.clear();
    renderer2.setFramebuffer(null);
    renderer2.setRenderTarget(renderer2.getRenderTarget());
    animation.stop();
    scope.isPresenting = false;
    scope.dispatchEvent({ type: "sessionend" });
  }
  function onRequestReferenceSpace(value) {
    referenceSpace = value;
    animation.setContext(session);
    animation.start();
    scope.isPresenting = true;
    scope.dispatchEvent({ type: "sessionstart" });
  }
  this.setFramebufferScaleFactor = function(value) {
    framebufferScaleFactor = value;
    if (scope.isPresenting === true) {
      console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
    }
  };
  this.setReferenceSpaceType = function(value) {
    referenceSpaceType = value;
    if (scope.isPresenting === true) {
      console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
    }
  };
  this.getReferenceSpace = function() {
    return referenceSpace;
  };
  this.getSession = function() {
    return session;
  };
  this.setSession = function(value) {
    session = value;
    if (session !== null) {
      session.addEventListener("select", onSessionEvent);
      session.addEventListener("selectstart", onSessionEvent);
      session.addEventListener("selectend", onSessionEvent);
      session.addEventListener("squeeze", onSessionEvent);
      session.addEventListener("squeezestart", onSessionEvent);
      session.addEventListener("squeezeend", onSessionEvent);
      session.addEventListener("end", onSessionEnd);
      const attributes = gl.getContextAttributes();
      if (attributes.xrCompatible !== true) {
        gl.makeXRCompatible();
      }
      const layerInit = {
        antialias: attributes.antialias,
        alpha: attributes.alpha,
        depth: attributes.depth,
        stencil: attributes.stencil,
        framebufferScaleFactor
      };
      const baseLayer = new XRWebGLLayer(session, gl, layerInit);
      session.updateRenderState({ baseLayer });
      session.requestReferenceSpace(referenceSpaceType).then(onRequestReferenceSpace);
      session.addEventListener("inputsourceschange", updateInputSources);
    }
  };
  function updateInputSources(event) {
    const inputSources = session.inputSources;
    for (let i2 = 0; i2 < controllers.length; i2++) {
      inputSourcesMap.set(inputSources[i2], controllers[i2]);
    }
    for (let i2 = 0; i2 < event.removed.length; i2++) {
      const inputSource = event.removed[i2];
      const controller = inputSourcesMap.get(inputSource);
      if (controller) {
        controller.dispatchEvent({ type: "disconnected", data: inputSource });
        inputSourcesMap.delete(inputSource);
      }
    }
    for (let i2 = 0; i2 < event.added.length; i2++) {
      const inputSource = event.added[i2];
      const controller = inputSourcesMap.get(inputSource);
      if (controller) {
        controller.dispatchEvent({ type: "connected", data: inputSource });
      }
    }
  }
  const cameraLPos = new Vector3();
  const cameraRPos = new Vector3();
  function setProjectionFromUnion(camera, cameraL2, cameraR2) {
    cameraLPos.setFromMatrixPosition(cameraL2.matrixWorld);
    cameraRPos.setFromMatrixPosition(cameraR2.matrixWorld);
    const ipd = cameraLPos.distanceTo(cameraRPos);
    const projL = cameraL2.projectionMatrix.elements;
    const projR = cameraR2.projectionMatrix.elements;
    const near = projL[14] / (projL[10] - 1);
    const far = projL[14] / (projL[10] + 1);
    const topFov = (projL[9] + 1) / projL[5];
    const bottomFov = (projL[9] - 1) / projL[5];
    const leftFov = (projL[8] - 1) / projL[0];
    const rightFov = (projR[8] + 1) / projR[0];
    const left = near * leftFov;
    const right = near * rightFov;
    const zOffset = ipd / (-leftFov + rightFov);
    const xOffset = zOffset * -leftFov;
    cameraL2.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
    camera.translateX(xOffset);
    camera.translateZ(zOffset);
    camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
    camera.matrixWorldInverse.getInverse(camera.matrixWorld);
    const near2 = near + zOffset;
    const far2 = far + zOffset;
    const left2 = left - xOffset;
    const right2 = right + (ipd - xOffset);
    const top2 = topFov * far / far2 * near2;
    const bottom2 = bottomFov * far / far2 * near2;
    camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
  }
  function updateCamera(camera, parent) {
    if (parent === null) {
      camera.matrixWorld.copy(camera.matrix);
    } else {
      camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
    }
    camera.matrixWorldInverse.getInverse(camera.matrixWorld);
  }
  this.getCamera = function(camera) {
    cameraVR.near = cameraR.near = cameraL.near = camera.near;
    cameraVR.far = cameraR.far = cameraL.far = camera.far;
    if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {
      session.updateRenderState({
        depthNear: cameraVR.near,
        depthFar: cameraVR.far
      });
      _currentDepthNear = cameraVR.near;
      _currentDepthFar = cameraVR.far;
    }
    const parent = camera.parent;
    const cameras2 = cameraVR.cameras;
    updateCamera(cameraVR, parent);
    for (let i2 = 0; i2 < cameras2.length; i2++) {
      updateCamera(cameras2[i2], parent);
    }
    camera.matrixWorld.copy(cameraVR.matrixWorld);
    const children = camera.children;
    for (let i2 = 0, l2 = children.length; i2 < l2; i2++) {
      children[i2].updateMatrixWorld(true);
    }
    if (cameras2.length === 2) {
      setProjectionFromUnion(cameraVR, cameraL, cameraR);
    } else {
      cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);
    }
    return cameraVR;
  };
  let onAnimationFrameCallback = null;
  function onAnimationFrame(time, frame) {
    pose = frame.getViewerPose(referenceSpace);
    if (pose !== null) {
      const views = pose.views;
      const baseLayer = session.renderState.baseLayer;
      renderer2.setFramebuffer(baseLayer.framebuffer);
      let cameraVRNeedsUpdate = false;
      if (views.length !== cameraVR.cameras.length) {
        cameraVR.cameras.length = 0;
        cameraVRNeedsUpdate = true;
      }
      for (let i2 = 0; i2 < views.length; i2++) {
        const view = views[i2];
        const viewport = baseLayer.getViewport(view);
        const camera = cameras[i2];
        camera.matrix.fromArray(view.transform.matrix);
        camera.projectionMatrix.fromArray(view.projectionMatrix);
        camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
        if (i2 === 0) {
          cameraVR.matrix.copy(camera.matrix);
        }
        if (cameraVRNeedsUpdate === true) {
          cameraVR.cameras.push(camera);
        }
      }
    }
    const inputSources = session.inputSources;
    for (let i2 = 0; i2 < controllers.length; i2++) {
      const controller = controllers[i2];
      const inputSource = inputSources[i2];
      controller.update(inputSource, frame, referenceSpace);
    }
    if (onAnimationFrameCallback)
      onAnimationFrameCallback(time, frame);
  }
  const animation = new WebGLAnimation();
  animation.setAnimationLoop(onAnimationFrame);
  this.setAnimationLoop = function(callback) {
    onAnimationFrameCallback = callback;
  };
  this.dispose = function() {
  };
}
Object.assign(WebXRManager.prototype, EventDispatcher.prototype);
function WebGLMaterials(properties) {
  function refreshFogUniforms(uniforms, fog) {
    uniforms.fogColor.value.copy(fog.color);
    if (fog.isFog) {
      uniforms.fogNear.value = fog.near;
      uniforms.fogFar.value = fog.far;
    } else if (fog.isFogExp2) {
      uniforms.fogDensity.value = fog.density;
    }
  }
  function refreshMaterialUniforms(uniforms, material, pixelRatio, height) {
    if (material.isMeshBasicMaterial) {
      refreshUniformsCommon(uniforms, material);
    } else if (material.isMeshLambertMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsLambert(uniforms, material);
    } else if (material.isMeshToonMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsToon(uniforms, material);
    } else if (material.isMeshPhongMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsPhong(uniforms, material);
    } else if (material.isMeshStandardMaterial) {
      refreshUniformsCommon(uniforms, material);
      if (material.isMeshPhysicalMaterial) {
        refreshUniformsPhysical(uniforms, material);
      } else {
        refreshUniformsStandard(uniforms, material);
      }
    } else if (material.isMeshMatcapMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsMatcap(uniforms, material);
    } else if (material.isMeshDepthMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsDepth(uniforms, material);
    } else if (material.isMeshDistanceMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsDistance(uniforms, material);
    } else if (material.isMeshNormalMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsNormal(uniforms, material);
    } else if (material.isLineBasicMaterial) {
      refreshUniformsLine(uniforms, material);
      if (material.isLineDashedMaterial) {
        refreshUniformsDash(uniforms, material);
      }
    } else if (material.isPointsMaterial) {
      refreshUniformsPoints(uniforms, material, pixelRatio, height);
    } else if (material.isSpriteMaterial) {
      refreshUniformsSprites(uniforms, material);
    } else if (material.isShadowMaterial) {
      uniforms.color.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
    } else if (material.isShaderMaterial) {
      material.uniformsNeedUpdate = false;
    }
  }
  function refreshUniformsCommon(uniforms, material) {
    uniforms.opacity.value = material.opacity;
    if (material.color) {
      uniforms.diffuse.value.copy(material.color);
    }
    if (material.emissive) {
      uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
    }
    if (material.map) {
      uniforms.map.value = material.map;
    }
    if (material.alphaMap) {
      uniforms.alphaMap.value = material.alphaMap;
    }
    if (material.specularMap) {
      uniforms.specularMap.value = material.specularMap;
    }
    const envMap = properties.get(material).envMap;
    if (envMap) {
      uniforms.envMap.value = envMap;
      uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;
      uniforms.reflectivity.value = material.reflectivity;
      uniforms.refractionRatio.value = material.refractionRatio;
      const maxMipLevel = properties.get(envMap).__maxMipLevel;
      if (maxMipLevel !== void 0) {
        uniforms.maxMipLevel.value = maxMipLevel;
      }
    }
    if (material.lightMap) {
      uniforms.lightMap.value = material.lightMap;
      uniforms.lightMapIntensity.value = material.lightMapIntensity;
    }
    if (material.aoMap) {
      uniforms.aoMap.value = material.aoMap;
      uniforms.aoMapIntensity.value = material.aoMapIntensity;
    }
    let uvScaleMap;
    if (material.map) {
      uvScaleMap = material.map;
    } else if (material.specularMap) {
      uvScaleMap = material.specularMap;
    } else if (material.displacementMap) {
      uvScaleMap = material.displacementMap;
    } else if (material.normalMap) {
      uvScaleMap = material.normalMap;
    } else if (material.bumpMap) {
      uvScaleMap = material.bumpMap;
    } else if (material.roughnessMap) {
      uvScaleMap = material.roughnessMap;
    } else if (material.metalnessMap) {
      uvScaleMap = material.metalnessMap;
    } else if (material.alphaMap) {
      uvScaleMap = material.alphaMap;
    } else if (material.emissiveMap) {
      uvScaleMap = material.emissiveMap;
    } else if (material.clearcoatMap) {
      uvScaleMap = material.clearcoatMap;
    } else if (material.clearcoatNormalMap) {
      uvScaleMap = material.clearcoatNormalMap;
    } else if (material.clearcoatRoughnessMap) {
      uvScaleMap = material.clearcoatRoughnessMap;
    }
    if (uvScaleMap !== void 0) {
      if (uvScaleMap.isWebGLRenderTarget) {
        uvScaleMap = uvScaleMap.texture;
      }
      if (uvScaleMap.matrixAutoUpdate === true) {
        uvScaleMap.updateMatrix();
      }
      uniforms.uvTransform.value.copy(uvScaleMap.matrix);
    }
    let uv2ScaleMap;
    if (material.aoMap) {
      uv2ScaleMap = material.aoMap;
    } else if (material.lightMap) {
      uv2ScaleMap = material.lightMap;
    }
    if (uv2ScaleMap !== void 0) {
      if (uv2ScaleMap.isWebGLRenderTarget) {
        uv2ScaleMap = uv2ScaleMap.texture;
      }
      if (uv2ScaleMap.matrixAutoUpdate === true) {
        uv2ScaleMap.updateMatrix();
      }
      uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);
    }
  }
  function refreshUniformsLine(uniforms, material) {
    uniforms.diffuse.value.copy(material.color);
    uniforms.opacity.value = material.opacity;
  }
  function refreshUniformsDash(uniforms, material) {
    uniforms.dashSize.value = material.dashSize;
    uniforms.totalSize.value = material.dashSize + material.gapSize;
    uniforms.scale.value = material.scale;
  }
  function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
    uniforms.diffuse.value.copy(material.color);
    uniforms.opacity.value = material.opacity;
    uniforms.size.value = material.size * pixelRatio;
    uniforms.scale.value = height * 0.5;
    if (material.map) {
      uniforms.map.value = material.map;
    }
    if (material.alphaMap) {
      uniforms.alphaMap.value = material.alphaMap;
    }
    let uvScaleMap;
    if (material.map) {
      uvScaleMap = material.map;
    } else if (material.alphaMap) {
      uvScaleMap = material.alphaMap;
    }
    if (uvScaleMap !== void 0) {
      if (uvScaleMap.matrixAutoUpdate === true) {
        uvScaleMap.updateMatrix();
      }
      uniforms.uvTransform.value.copy(uvScaleMap.matrix);
    }
  }
  function refreshUniformsSprites(uniforms, material) {
    uniforms.diffuse.value.copy(material.color);
    uniforms.opacity.value = material.opacity;
    uniforms.rotation.value = material.rotation;
    if (material.map) {
      uniforms.map.value = material.map;
    }
    if (material.alphaMap) {
      uniforms.alphaMap.value = material.alphaMap;
    }
    let uvScaleMap;
    if (material.map) {
      uvScaleMap = material.map;
    } else if (material.alphaMap) {
      uvScaleMap = material.alphaMap;
    }
    if (uvScaleMap !== void 0) {
      if (uvScaleMap.matrixAutoUpdate === true) {
        uvScaleMap.updateMatrix();
      }
      uniforms.uvTransform.value.copy(uvScaleMap.matrix);
    }
  }
  function refreshUniformsLambert(uniforms, material) {
    if (material.emissiveMap) {
      uniforms.emissiveMap.value = material.emissiveMap;
    }
  }
  function refreshUniformsPhong(uniforms, material) {
    uniforms.specular.value.copy(material.specular);
    uniforms.shininess.value = Math.max(material.shininess, 1e-4);
    if (material.emissiveMap) {
      uniforms.emissiveMap.value = material.emissiveMap;
    }
    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide)
        uniforms.bumpScale.value *= -1;
    }
    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide)
        uniforms.normalScale.value.negate();
    }
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
  }
  function refreshUniformsToon(uniforms, material) {
    if (material.gradientMap) {
      uniforms.gradientMap.value = material.gradientMap;
    }
    if (material.emissiveMap) {
      uniforms.emissiveMap.value = material.emissiveMap;
    }
    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide)
        uniforms.bumpScale.value *= -1;
    }
    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide)
        uniforms.normalScale.value.negate();
    }
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
  }
  function refreshUniformsStandard(uniforms, material) {
    uniforms.roughness.value = material.roughness;
    uniforms.metalness.value = material.metalness;
    if (material.roughnessMap) {
      uniforms.roughnessMap.value = material.roughnessMap;
    }
    if (material.metalnessMap) {
      uniforms.metalnessMap.value = material.metalnessMap;
    }
    if (material.emissiveMap) {
      uniforms.emissiveMap.value = material.emissiveMap;
    }
    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide)
        uniforms.bumpScale.value *= -1;
    }
    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide)
        uniforms.normalScale.value.negate();
    }
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
    const envMap = properties.get(material).envMap;
    if (envMap) {
      uniforms.envMapIntensity.value = material.envMapIntensity;
    }
  }
  function refreshUniformsPhysical(uniforms, material) {
    refreshUniformsStandard(uniforms, material);
    uniforms.reflectivity.value = material.reflectivity;
    uniforms.clearcoat.value = material.clearcoat;
    uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
    if (material.sheen)
      uniforms.sheen.value.copy(material.sheen);
    if (material.clearcoatMap) {
      uniforms.clearcoatMap.value = material.clearcoatMap;
    }
    if (material.clearcoatRoughnessMap) {
      uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
    }
    if (material.clearcoatNormalMap) {
      uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
      uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
      if (material.side === BackSide) {
        uniforms.clearcoatNormalScale.value.negate();
      }
    }
    uniforms.transmission.value = material.transmission;
    if (material.transmissionMap) {
      uniforms.transmissionMap.value = material.transmissionMap;
    }
  }
  function refreshUniformsMatcap(uniforms, material) {
    if (material.matcap) {
      uniforms.matcap.value = material.matcap;
    }
    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide)
        uniforms.bumpScale.value *= -1;
    }
    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide)
        uniforms.normalScale.value.negate();
    }
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
  }
  function refreshUniformsDepth(uniforms, material) {
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
  }
  function refreshUniformsDistance(uniforms, material) {
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
    uniforms.referencePosition.value.copy(material.referencePosition);
    uniforms.nearDistance.value = material.nearDistance;
    uniforms.farDistance.value = material.farDistance;
  }
  function refreshUniformsNormal(uniforms, material) {
    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide)
        uniforms.bumpScale.value *= -1;
    }
    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide)
        uniforms.normalScale.value.negate();
    }
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
  }
  return {
    refreshFogUniforms,
    refreshMaterialUniforms
  };
}
function WebGLRenderer(parameters) {
  parameters = parameters || {};
  const _canvas2 = parameters.canvas !== void 0 ? parameters.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"), _context2 = parameters.context !== void 0 ? parameters.context : null, _alpha = parameters.alpha !== void 0 ? parameters.alpha : false, _depth = parameters.depth !== void 0 ? parameters.depth : true, _stencil = parameters.stencil !== void 0 ? parameters.stencil : true, _antialias = parameters.antialias !== void 0 ? parameters.antialias : false, _premultipliedAlpha = parameters.premultipliedAlpha !== void 0 ? parameters.premultipliedAlpha : true, _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== void 0 ? parameters.preserveDrawingBuffer : false, _powerPreference = parameters.powerPreference !== void 0 ? parameters.powerPreference : "default", _failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== void 0 ? parameters.failIfMajorPerformanceCaveat : false;
  let currentRenderList = null;
  let currentRenderState = null;
  this.domElement = _canvas2;
  this.debug = {
    checkShaderErrors: true
  };
  this.autoClear = true;
  this.autoClearColor = true;
  this.autoClearDepth = true;
  this.autoClearStencil = true;
  this.sortObjects = true;
  this.clippingPlanes = [];
  this.localClippingEnabled = false;
  this.gammaFactor = 2;
  this.outputEncoding = LinearEncoding;
  this.physicallyCorrectLights = false;
  this.toneMapping = NoToneMapping;
  this.toneMappingExposure = 1;
  this.maxMorphTargets = 8;
  this.maxMorphNormals = 4;
  const _this = this;
  let _isContextLost = false;
  let _framebuffer = null;
  let _currentActiveCubeFace = 0;
  let _currentActiveMipmapLevel = 0;
  let _currentRenderTarget = null;
  let _currentFramebuffer = null;
  let _currentMaterialId = -1;
  let _currentCamera = null;
  let _currentArrayCamera = null;
  const _currentViewport = new Vector4();
  const _currentScissor = new Vector4();
  let _currentScissorTest = null;
  let _width = _canvas2.width;
  let _height = _canvas2.height;
  let _pixelRatio = 1;
  let _opaqueSort = null;
  let _transparentSort = null;
  const _viewport = new Vector4(0, 0, _width, _height);
  const _scissor = new Vector4(0, 0, _width, _height);
  let _scissorTest = false;
  const _frustum = new Frustum();
  let _clippingEnabled = false;
  let _localClippingEnabled = false;
  const _projScreenMatrix = new Matrix4();
  const _vector3 = new Vector3();
  const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };
  function getTargetPixelRatio() {
    return _currentRenderTarget === null ? _pixelRatio : 1;
  }
  let _gl = _context2;
  function getContext(contextNames, contextAttributes) {
    for (let i2 = 0; i2 < contextNames.length; i2++) {
      const contextName = contextNames[i2];
      const context = _canvas2.getContext(contextName, contextAttributes);
      if (context !== null)
        return context;
    }
    return null;
  }
  try {
    const contextAttributes = {
      alpha: _alpha,
      depth: _depth,
      stencil: _stencil,
      antialias: _antialias,
      premultipliedAlpha: _premultipliedAlpha,
      preserveDrawingBuffer: _preserveDrawingBuffer,
      powerPreference: _powerPreference,
      failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
    };
    _canvas2.addEventListener("webglcontextlost", onContextLost, false);
    _canvas2.addEventListener("webglcontextrestored", onContextRestore, false);
    if (_gl === null) {
      const contextNames = ["webgl2", "webgl", "experimental-webgl"];
      if (_this.isWebGL1Renderer === true) {
        contextNames.shift();
      }
      _gl = getContext(contextNames, contextAttributes);
      if (_gl === null) {
        if (getContext(contextNames)) {
          throw new Error("Error creating WebGL context with your selected attributes.");
        } else {
          throw new Error("Error creating WebGL context.");
        }
      }
    }
    if (_gl.getShaderPrecisionFormat === void 0) {
      _gl.getShaderPrecisionFormat = function() {
        return { "rangeMin": 1, "rangeMax": 1, "precision": 1 };
      };
    }
  } catch (error) {
    console.error("THREE.WebGLRenderer: " + error.message);
    throw error;
  }
  let extensions, capabilities, state, info;
  let properties, textures, cubemaps, attributes, geometries, objects;
  let programCache, materials, renderLists, renderStates, clipping;
  let background, morphtargets, bufferRenderer, indexedBufferRenderer;
  let utils, bindingStates;
  function initGLContext() {
    extensions = new WebGLExtensions(_gl);
    capabilities = new WebGLCapabilities(_gl, extensions, parameters);
    if (capabilities.isWebGL2 === false) {
      extensions.get("WEBGL_depth_texture");
      extensions.get("OES_texture_float");
      extensions.get("OES_texture_half_float");
      extensions.get("OES_texture_half_float_linear");
      extensions.get("OES_standard_derivatives");
      extensions.get("OES_element_index_uint");
      extensions.get("OES_vertex_array_object");
      extensions.get("ANGLE_instanced_arrays");
    }
    extensions.get("OES_texture_float_linear");
    utils = new WebGLUtils(_gl, extensions, capabilities);
    state = new WebGLState(_gl, extensions, capabilities);
    state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
    state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
    info = new WebGLInfo(_gl);
    properties = new WebGLProperties();
    textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
    cubemaps = new WebGLCubeMaps(_this);
    attributes = new WebGLAttributes(_gl, capabilities);
    bindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);
    geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
    objects = new WebGLObjects(_gl, geometries, attributes, info);
    morphtargets = new WebGLMorphtargets(_gl);
    clipping = new WebGLClipping(properties);
    programCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);
    materials = new WebGLMaterials(properties);
    renderLists = new WebGLRenderLists(properties);
    renderStates = new WebGLRenderStates(extensions, capabilities);
    background = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);
    bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);
    indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
    info.programs = programCache.programs;
    _this.capabilities = capabilities;
    _this.extensions = extensions;
    _this.properties = properties;
    _this.renderLists = renderLists;
    _this.state = state;
    _this.info = info;
  }
  initGLContext();
  const xr2 = new WebXRManager(_this, _gl);
  this.xr = xr2;
  const shadowMap = new WebGLShadowMap(_this, objects, capabilities.maxTextureSize);
  this.shadowMap = shadowMap;
  this.getContext = function() {
    return _gl;
  };
  this.getContextAttributes = function() {
    return _gl.getContextAttributes();
  };
  this.forceContextLoss = function() {
    const extension = extensions.get("WEBGL_lose_context");
    if (extension)
      extension.loseContext();
  };
  this.forceContextRestore = function() {
    const extension = extensions.get("WEBGL_lose_context");
    if (extension)
      extension.restoreContext();
  };
  this.getPixelRatio = function() {
    return _pixelRatio;
  };
  this.setPixelRatio = function(value) {
    if (value === void 0)
      return;
    _pixelRatio = value;
    this.setSize(_width, _height, false);
  };
  this.getSize = function(target) {
    if (target === void 0) {
      console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument");
      target = new Vector2();
    }
    return target.set(_width, _height);
  };
  this.setSize = function(width, height, updateStyle) {
    if (xr2.isPresenting) {
      console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
      return;
    }
    _width = width;
    _height = height;
    _canvas2.width = Math.floor(width * _pixelRatio);
    _canvas2.height = Math.floor(height * _pixelRatio);
    if (updateStyle !== false) {
      _canvas2.style.width = width + "px";
      _canvas2.style.height = height + "px";
    }
    this.setViewport(0, 0, width, height);
  };
  this.getDrawingBufferSize = function(target) {
    if (target === void 0) {
      console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument");
      target = new Vector2();
    }
    return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
  };
  this.setDrawingBufferSize = function(width, height, pixelRatio) {
    _width = width;
    _height = height;
    _pixelRatio = pixelRatio;
    _canvas2.width = Math.floor(width * pixelRatio);
    _canvas2.height = Math.floor(height * pixelRatio);
    this.setViewport(0, 0, width, height);
  };
  this.getCurrentViewport = function(target) {
    if (target === void 0) {
      console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument");
      target = new Vector4();
    }
    return target.copy(_currentViewport);
  };
  this.getViewport = function(target) {
    return target.copy(_viewport);
  };
  this.setViewport = function(x2, y2, width, height) {
    if (x2.isVector4) {
      _viewport.set(x2.x, x2.y, x2.z, x2.w);
    } else {
      _viewport.set(x2, y2, width, height);
    }
    state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
  };
  this.getScissor = function(target) {
    return target.copy(_scissor);
  };
  this.setScissor = function(x2, y2, width, height) {
    if (x2.isVector4) {
      _scissor.set(x2.x, x2.y, x2.z, x2.w);
    } else {
      _scissor.set(x2, y2, width, height);
    }
    state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
  };
  this.getScissorTest = function() {
    return _scissorTest;
  };
  this.setScissorTest = function(boolean) {
    state.setScissorTest(_scissorTest = boolean);
  };
  this.setOpaqueSort = function(method) {
    _opaqueSort = method;
  };
  this.setTransparentSort = function(method) {
    _transparentSort = method;
  };
  this.getClearColor = function() {
    return background.getClearColor();
  };
  this.setClearColor = function() {
    background.setClearColor.apply(background, arguments);
  };
  this.getClearAlpha = function() {
    return background.getClearAlpha();
  };
  this.setClearAlpha = function() {
    background.setClearAlpha.apply(background, arguments);
  };
  this.clear = function(color, depth, stencil) {
    let bits = 0;
    if (color === void 0 || color)
      bits |= 16384;
    if (depth === void 0 || depth)
      bits |= 256;
    if (stencil === void 0 || stencil)
      bits |= 1024;
    _gl.clear(bits);
  };
  this.clearColor = function() {
    this.clear(true, false, false);
  };
  this.clearDepth = function() {
    this.clear(false, true, false);
  };
  this.clearStencil = function() {
    this.clear(false, false, true);
  };
  this.dispose = function() {
    _canvas2.removeEventListener("webglcontextlost", onContextLost, false);
    _canvas2.removeEventListener("webglcontextrestored", onContextRestore, false);
    renderLists.dispose();
    renderStates.dispose();
    properties.dispose();
    cubemaps.dispose();
    objects.dispose();
    bindingStates.dispose();
    xr2.dispose();
    animation.stop();
  };
  function onContextLost(event) {
    event.preventDefault();
    console.log("THREE.WebGLRenderer: Context Lost.");
    _isContextLost = true;
  }
  function onContextRestore() {
    console.log("THREE.WebGLRenderer: Context Restored.");
    _isContextLost = false;
    initGLContext();
  }
  function onMaterialDispose(event) {
    const material = event.target;
    material.removeEventListener("dispose", onMaterialDispose);
    deallocateMaterial(material);
  }
  function deallocateMaterial(material) {
    releaseMaterialProgramReference(material);
    properties.remove(material);
  }
  function releaseMaterialProgramReference(material) {
    const programInfo = properties.get(material).program;
    if (programInfo !== void 0) {
      programCache.releaseProgram(programInfo);
    }
  }
  function renderObjectImmediate(object, program) {
    object.render(function(object2) {
      _this.renderBufferImmediate(object2, program);
    });
  }
  this.renderBufferImmediate = function(object, program) {
    bindingStates.initAttributes();
    const buffers = properties.get(object);
    if (object.hasPositions && !buffers.position)
      buffers.position = _gl.createBuffer();
    if (object.hasNormals && !buffers.normal)
      buffers.normal = _gl.createBuffer();
    if (object.hasUvs && !buffers.uv)
      buffers.uv = _gl.createBuffer();
    if (object.hasColors && !buffers.color)
      buffers.color = _gl.createBuffer();
    const programAttributes = program.getAttributes();
    if (object.hasPositions) {
      _gl.bindBuffer(34962, buffers.position);
      _gl.bufferData(34962, object.positionArray, 35048);
      bindingStates.enableAttribute(programAttributes.position);
      _gl.vertexAttribPointer(programAttributes.position, 3, 5126, false, 0, 0);
    }
    if (object.hasNormals) {
      _gl.bindBuffer(34962, buffers.normal);
      _gl.bufferData(34962, object.normalArray, 35048);
      bindingStates.enableAttribute(programAttributes.normal);
      _gl.vertexAttribPointer(programAttributes.normal, 3, 5126, false, 0, 0);
    }
    if (object.hasUvs) {
      _gl.bindBuffer(34962, buffers.uv);
      _gl.bufferData(34962, object.uvArray, 35048);
      bindingStates.enableAttribute(programAttributes.uv);
      _gl.vertexAttribPointer(programAttributes.uv, 2, 5126, false, 0, 0);
    }
    if (object.hasColors) {
      _gl.bindBuffer(34962, buffers.color);
      _gl.bufferData(34962, object.colorArray, 35048);
      bindingStates.enableAttribute(programAttributes.color);
      _gl.vertexAttribPointer(programAttributes.color, 3, 5126, false, 0, 0);
    }
    bindingStates.disableUnusedAttributes();
    _gl.drawArrays(4, 0, object.count);
    object.count = 0;
  };
  this.renderBufferDirect = function(camera, scene, geometry, material, object, group) {
    if (scene === null)
      scene = _emptyScene;
    const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
    const program = setProgram(camera, scene, material, object);
    state.setMaterial(material, frontFaceCW);
    let index = geometry.index;
    const position = geometry.attributes.position;
    if (index === null) {
      if (position === void 0 || position.count === 0)
        return;
    } else if (index.count === 0) {
      return;
    }
    let rangeFactor = 1;
    if (material.wireframe === true) {
      index = geometries.getWireframeAttribute(geometry);
      rangeFactor = 2;
    }
    if (material.morphTargets || material.morphNormals) {
      morphtargets.update(object, geometry, material, program);
    }
    bindingStates.setup(object, material, program, geometry, index);
    let attribute;
    let renderer2 = bufferRenderer;
    if (index !== null) {
      attribute = attributes.get(index);
      renderer2 = indexedBufferRenderer;
      renderer2.setIndex(attribute);
    }
    const dataCount = index !== null ? index.count : position.count;
    const rangeStart = geometry.drawRange.start * rangeFactor;
    const rangeCount = geometry.drawRange.count * rangeFactor;
    const groupStart = group !== null ? group.start * rangeFactor : 0;
    const groupCount = group !== null ? group.count * rangeFactor : Infinity;
    const drawStart = Math.max(rangeStart, groupStart);
    const drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;
    const drawCount = Math.max(0, drawEnd - drawStart + 1);
    if (drawCount === 0)
      return;
    if (object.isMesh) {
      if (material.wireframe === true) {
        state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
        renderer2.setMode(1);
      } else {
        renderer2.setMode(4);
      }
    } else if (object.isLine) {
      let lineWidth = material.linewidth;
      if (lineWidth === void 0)
        lineWidth = 1;
      state.setLineWidth(lineWidth * getTargetPixelRatio());
      if (object.isLineSegments) {
        renderer2.setMode(1);
      } else if (object.isLineLoop) {
        renderer2.setMode(2);
      } else {
        renderer2.setMode(3);
      }
    } else if (object.isPoints) {
      renderer2.setMode(0);
    } else if (object.isSprite) {
      renderer2.setMode(4);
    }
    if (object.isInstancedMesh) {
      renderer2.renderInstances(drawStart, drawCount, object.count);
    } else if (geometry.isInstancedBufferGeometry) {
      const instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);
      renderer2.renderInstances(drawStart, drawCount, instanceCount);
    } else {
      renderer2.render(drawStart, drawCount);
    }
  };
  this.compile = function(scene, camera) {
    currentRenderState = renderStates.get(scene, camera);
    currentRenderState.init();
    scene.traverseVisible(function(object) {
      if (object.isLight && object.layers.test(camera.layers)) {
        currentRenderState.pushLight(object);
        if (object.castShadow) {
          currentRenderState.pushShadow(object);
        }
      }
    });
    currentRenderState.setupLights(camera);
    const compiled = new WeakMap();
    scene.traverse(function(object) {
      const material = object.material;
      if (material) {
        if (Array.isArray(material)) {
          for (let i2 = 0; i2 < material.length; i2++) {
            const material2 = material[i2];
            if (compiled.has(material2) === false) {
              initMaterial(material2, scene, object);
              compiled.set(material2);
            }
          }
        } else if (compiled.has(material) === false) {
          initMaterial(material, scene, object);
          compiled.set(material);
        }
      }
    });
  };
  let onAnimationFrameCallback = null;
  function onAnimationFrame(time) {
    if (xr2.isPresenting)
      return;
    if (onAnimationFrameCallback)
      onAnimationFrameCallback(time);
  }
  const animation = new WebGLAnimation();
  animation.setAnimationLoop(onAnimationFrame);
  if (typeof window !== "undefined")
    animation.setContext(window);
  this.setAnimationLoop = function(callback) {
    onAnimationFrameCallback = callback;
    xr2.setAnimationLoop(callback);
    callback === null ? animation.stop() : animation.start();
  };
  this.render = function(scene, camera) {
    let renderTarget, forceClear;
    if (arguments[2] !== void 0) {
      console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.");
      renderTarget = arguments[2];
    }
    if (arguments[3] !== void 0) {
      console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.");
      forceClear = arguments[3];
    }
    if (camera !== void 0 && camera.isCamera !== true) {
      console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
      return;
    }
    if (_isContextLost === true)
      return;
    bindingStates.resetDefaultState();
    _currentMaterialId = -1;
    _currentCamera = null;
    if (scene.autoUpdate === true)
      scene.updateMatrixWorld();
    if (camera.parent === null)
      camera.updateMatrixWorld();
    if (xr2.enabled === true && xr2.isPresenting === true) {
      camera = xr2.getCamera(camera);
    }
    if (scene.isScene === true)
      scene.onBeforeRender(_this, scene, camera, renderTarget || _currentRenderTarget);
    currentRenderState = renderStates.get(scene, camera);
    currentRenderState.init();
    _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
    _frustum.setFromProjectionMatrix(_projScreenMatrix);
    _localClippingEnabled = this.localClippingEnabled;
    _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);
    currentRenderList = renderLists.get(scene, camera);
    currentRenderList.init();
    projectObject(scene, camera, 0, _this.sortObjects);
    currentRenderList.finish();
    if (_this.sortObjects === true) {
      currentRenderList.sort(_opaqueSort, _transparentSort);
    }
    if (_clippingEnabled === true)
      clipping.beginShadows();
    const shadowsArray = currentRenderState.state.shadowsArray;
    shadowMap.render(shadowsArray, scene, camera);
    currentRenderState.setupLights(camera);
    if (_clippingEnabled === true)
      clipping.endShadows();
    if (this.info.autoReset === true)
      this.info.reset();
    if (renderTarget !== void 0) {
      this.setRenderTarget(renderTarget);
    }
    background.render(currentRenderList, scene, camera, forceClear);
    const opaqueObjects = currentRenderList.opaque;
    const transparentObjects = currentRenderList.transparent;
    if (opaqueObjects.length > 0)
      renderObjects(opaqueObjects, scene, camera);
    if (transparentObjects.length > 0)
      renderObjects(transparentObjects, scene, camera);
    if (scene.isScene === true)
      scene.onAfterRender(_this, scene, camera);
    if (_currentRenderTarget !== null) {
      textures.updateRenderTargetMipmap(_currentRenderTarget);
      textures.updateMultisampleRenderTarget(_currentRenderTarget);
    }
    state.buffers.depth.setTest(true);
    state.buffers.depth.setMask(true);
    state.buffers.color.setMask(true);
    state.setPolygonOffset(false);
    currentRenderList = null;
    currentRenderState = null;
  };
  function projectObject(object, camera, groupOrder, sortObjects) {
    if (object.visible === false)
      return;
    const visible = object.layers.test(camera.layers);
    if (visible) {
      if (object.isGroup) {
        groupOrder = object.renderOrder;
      } else if (object.isLOD) {
        if (object.autoUpdate === true)
          object.update(camera);
      } else if (object.isLight) {
        currentRenderState.pushLight(object);
        if (object.castShadow) {
          currentRenderState.pushShadow(object);
        }
      } else if (object.isSprite) {
        if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
          if (sortObjects) {
            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
          }
          const geometry = objects.update(object);
          const material = object.material;
          if (material.visible) {
            currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
          }
        }
      } else if (object.isImmediateRenderObject) {
        if (sortObjects) {
          _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
        }
        currentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);
      } else if (object.isMesh || object.isLine || object.isPoints) {
        if (object.isSkinnedMesh) {
          if (object.skeleton.frame !== info.render.frame) {
            object.skeleton.update();
            object.skeleton.frame = info.render.frame;
          }
        }
        if (!object.frustumCulled || _frustum.intersectsObject(object)) {
          if (sortObjects) {
            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
          }
          const geometry = objects.update(object);
          const material = object.material;
          if (Array.isArray(material)) {
            const groups = geometry.groups;
            for (let i2 = 0, l2 = groups.length; i2 < l2; i2++) {
              const group = groups[i2];
              const groupMaterial = material[group.materialIndex];
              if (groupMaterial && groupMaterial.visible) {
                currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);
              }
            }
          } else if (material.visible) {
            currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
          }
        }
      }
    }
    const children = object.children;
    for (let i2 = 0, l2 = children.length; i2 < l2; i2++) {
      projectObject(children[i2], camera, groupOrder, sortObjects);
    }
  }
  function renderObjects(renderList, scene, camera) {
    const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
    for (let i2 = 0, l2 = renderList.length; i2 < l2; i2++) {
      const renderItem = renderList[i2];
      const object = renderItem.object;
      const geometry = renderItem.geometry;
      const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
      const group = renderItem.group;
      if (camera.isArrayCamera) {
        _currentArrayCamera = camera;
        const cameras = camera.cameras;
        for (let j2 = 0, jl = cameras.length; j2 < jl; j2++) {
          const camera2 = cameras[j2];
          if (object.layers.test(camera2.layers)) {
            state.viewport(_currentViewport.copy(camera2.viewport));
            currentRenderState.setupLights(camera2);
            renderObject(object, scene, camera2, geometry, material, group);
          }
        }
      } else {
        _currentArrayCamera = null;
        renderObject(object, scene, camera, geometry, material, group);
      }
    }
  }
  function renderObject(object, scene, camera, geometry, material, group) {
    object.onBeforeRender(_this, scene, camera, geometry, material, group);
    currentRenderState = renderStates.get(scene, _currentArrayCamera || camera);
    object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
    object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
    if (object.isImmediateRenderObject) {
      const program = setProgram(camera, scene, material, object);
      state.setMaterial(material);
      bindingStates.reset();
      renderObjectImmediate(object, program);
    } else {
      _this.renderBufferDirect(camera, scene, geometry, material, object, group);
    }
    object.onAfterRender(_this, scene, camera, geometry, material, group);
    currentRenderState = renderStates.get(scene, _currentArrayCamera || camera);
  }
  function initMaterial(material, scene, object) {
    if (scene.isScene !== true)
      scene = _emptyScene;
    const materialProperties = properties.get(material);
    const lights = currentRenderState.state.lights;
    const shadowsArray = currentRenderState.state.shadowsArray;
    const lightsStateVersion = lights.state.version;
    const parameters2 = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
    const programCacheKey = programCache.getProgramCacheKey(parameters2);
    let program = materialProperties.program;
    let programChange = true;
    if (program === void 0) {
      material.addEventListener("dispose", onMaterialDispose);
    } else if (program.cacheKey !== programCacheKey) {
      releaseMaterialProgramReference(material);
    } else if (materialProperties.lightsStateVersion !== lightsStateVersion) {
      programChange = false;
    } else if (parameters2.shaderID !== void 0) {
      const environment = material.isMeshStandardMaterial ? scene.environment : null;
      materialProperties.envMap = cubemaps.get(material.envMap || environment);
      return;
    } else {
      programChange = false;
    }
    if (programChange) {
      parameters2.uniforms = programCache.getUniforms(material);
      material.onBeforeCompile(parameters2, _this);
      program = programCache.acquireProgram(parameters2, programCacheKey);
      materialProperties.program = program;
      materialProperties.uniforms = parameters2.uniforms;
      materialProperties.outputEncoding = parameters2.outputEncoding;
    }
    const uniforms = materialProperties.uniforms;
    if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
      materialProperties.numClippingPlanes = clipping.numPlanes;
      materialProperties.numIntersection = clipping.numIntersection;
      uniforms.clippingPlanes = clipping.uniform;
    }
    materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
    materialProperties.fog = scene.fog;
    materialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment);
    materialProperties.needsLights = materialNeedsLights(material);
    materialProperties.lightsStateVersion = lightsStateVersion;
    if (materialProperties.needsLights) {
      uniforms.ambientLightColor.value = lights.state.ambient;
      uniforms.lightProbe.value = lights.state.probe;
      uniforms.directionalLights.value = lights.state.directional;
      uniforms.directionalLightShadows.value = lights.state.directionalShadow;
      uniforms.spotLights.value = lights.state.spot;
      uniforms.spotLightShadows.value = lights.state.spotShadow;
      uniforms.rectAreaLights.value = lights.state.rectArea;
      uniforms.ltc_1.value = lights.state.rectAreaLTC1;
      uniforms.ltc_2.value = lights.state.rectAreaLTC2;
      uniforms.pointLights.value = lights.state.point;
      uniforms.pointLightShadows.value = lights.state.pointShadow;
      uniforms.hemisphereLights.value = lights.state.hemi;
      uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
      uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
      uniforms.spotShadowMap.value = lights.state.spotShadowMap;
      uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
      uniforms.pointShadowMap.value = lights.state.pointShadowMap;
      uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
    }
    const progUniforms = materialProperties.program.getUniforms();
    const uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
    materialProperties.uniformsList = uniformsList;
  }
  function setProgram(camera, scene, material, object) {
    if (scene.isScene !== true)
      scene = _emptyScene;
    textures.resetTextureUnits();
    const fog = scene.fog;
    const environment = material.isMeshStandardMaterial ? scene.environment : null;
    const encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;
    const envMap = cubemaps.get(material.envMap || environment);
    const materialProperties = properties.get(material);
    const lights = currentRenderState.state.lights;
    if (_clippingEnabled === true) {
      if (_localClippingEnabled === true || camera !== _currentCamera) {
        const useCache = camera === _currentCamera && material.id === _currentMaterialId;
        clipping.setState(material, camera, useCache);
      }
    }
    if (material.version === materialProperties.__version) {
      if (material.fog && materialProperties.fog !== fog) {
        initMaterial(material, scene, object);
      } else if (materialProperties.environment !== environment) {
        initMaterial(material, scene, object);
      } else if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {
        initMaterial(material, scene, object);
      } else if (materialProperties.numClippingPlanes !== void 0 && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {
        initMaterial(material, scene, object);
      } else if (materialProperties.outputEncoding !== encoding) {
        initMaterial(material, scene, object);
      } else if (materialProperties.envMap !== envMap) {
        initMaterial(material, scene, object);
      }
    } else {
      initMaterial(material, scene, object);
      materialProperties.__version = material.version;
    }
    let refreshProgram = false;
    let refreshMaterial = false;
    let refreshLights = false;
    const program = materialProperties.program, p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
    if (state.useProgram(program.program)) {
      refreshProgram = true;
      refreshMaterial = true;
      refreshLights = true;
    }
    if (material.id !== _currentMaterialId) {
      _currentMaterialId = material.id;
      refreshMaterial = true;
    }
    if (refreshProgram || _currentCamera !== camera) {
      p_uniforms.setValue(_gl, "projectionMatrix", camera.projectionMatrix);
      if (capabilities.logarithmicDepthBuffer) {
        p_uniforms.setValue(_gl, "logDepthBufFC", 2 / (Math.log(camera.far + 1) / Math.LN2));
      }
      if (_currentCamera !== camera) {
        _currentCamera = camera;
        refreshMaterial = true;
        refreshLights = true;
      }
      if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
        const uCamPos = p_uniforms.map.cameraPosition;
        if (uCamPos !== void 0) {
          uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
        }
      }
      if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
        p_uniforms.setValue(_gl, "isOrthographic", camera.isOrthographicCamera === true);
      }
      if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || material.skinning) {
        p_uniforms.setValue(_gl, "viewMatrix", camera.matrixWorldInverse);
      }
    }
    if (material.skinning) {
      p_uniforms.setOptional(_gl, object, "bindMatrix");
      p_uniforms.setOptional(_gl, object, "bindMatrixInverse");
      const skeleton = object.skeleton;
      if (skeleton) {
        const bones = skeleton.bones;
        if (capabilities.floatVertexTextures) {
          if (skeleton.boneTexture === void 0) {
            let size2 = Math.sqrt(bones.length * 4);
            size2 = MathUtils.ceilPowerOfTwo(size2);
            size2 = Math.max(size2, 4);
            const boneMatrices = new Float32Array(size2 * size2 * 4);
            boneMatrices.set(skeleton.boneMatrices);
            const boneTexture = new DataTexture(boneMatrices, size2, size2, RGBAFormat, FloatType);
            skeleton.boneMatrices = boneMatrices;
            skeleton.boneTexture = boneTexture;
            skeleton.boneTextureSize = size2;
          }
          p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture, textures);
          p_uniforms.setValue(_gl, "boneTextureSize", skeleton.boneTextureSize);
        } else {
          p_uniforms.setOptional(_gl, skeleton, "boneMatrices");
        }
      }
    }
    if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
      materialProperties.receiveShadow = object.receiveShadow;
      p_uniforms.setValue(_gl, "receiveShadow", object.receiveShadow);
    }
    if (refreshMaterial) {
      p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
      if (materialProperties.needsLights) {
        markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
      }
      if (fog && material.fog) {
        materials.refreshFogUniforms(m_uniforms, fog);
      }
      materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height);
      WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
    }
    if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
      WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);
      material.uniformsNeedUpdate = false;
    }
    if (material.isSpriteMaterial) {
      p_uniforms.setValue(_gl, "center", object.center);
    }
    p_uniforms.setValue(_gl, "modelViewMatrix", object.modelViewMatrix);
    p_uniforms.setValue(_gl, "normalMatrix", object.normalMatrix);
    p_uniforms.setValue(_gl, "modelMatrix", object.matrixWorld);
    return program;
  }
  function markUniformsLightsNeedsUpdate(uniforms, value) {
    uniforms.ambientLightColor.needsUpdate = value;
    uniforms.lightProbe.needsUpdate = value;
    uniforms.directionalLights.needsUpdate = value;
    uniforms.directionalLightShadows.needsUpdate = value;
    uniforms.pointLights.needsUpdate = value;
    uniforms.pointLightShadows.needsUpdate = value;
    uniforms.spotLights.needsUpdate = value;
    uniforms.spotLightShadows.needsUpdate = value;
    uniforms.rectAreaLights.needsUpdate = value;
    uniforms.hemisphereLights.needsUpdate = value;
  }
  function materialNeedsLights(material) {
    return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
  }
  this.setFramebuffer = function(value) {
    if (_framebuffer !== value && _currentRenderTarget === null)
      _gl.bindFramebuffer(36160, value);
    _framebuffer = value;
  };
  this.getActiveCubeFace = function() {
    return _currentActiveCubeFace;
  };
  this.getActiveMipmapLevel = function() {
    return _currentActiveMipmapLevel;
  };
  this.getRenderList = function() {
    return currentRenderList;
  };
  this.setRenderList = function(renderList) {
    currentRenderList = renderList;
  };
  this.getRenderState = function() {
    return currentRenderState;
  };
  this.setRenderState = function(renderState) {
    currentRenderState = renderState;
  };
  this.getRenderTarget = function() {
    return _currentRenderTarget;
  };
  this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
    _currentRenderTarget = renderTarget;
    _currentActiveCubeFace = activeCubeFace;
    _currentActiveMipmapLevel = activeMipmapLevel;
    if (renderTarget && properties.get(renderTarget).__webglFramebuffer === void 0) {
      textures.setupRenderTarget(renderTarget);
    }
    let framebuffer = _framebuffer;
    let isCube = false;
    if (renderTarget) {
      const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
      if (renderTarget.isWebGLCubeRenderTarget) {
        framebuffer = __webglFramebuffer[activeCubeFace];
        isCube = true;
      } else if (renderTarget.isWebGLMultisampleRenderTarget) {
        framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
      } else {
        framebuffer = __webglFramebuffer;
      }
      _currentViewport.copy(renderTarget.viewport);
      _currentScissor.copy(renderTarget.scissor);
      _currentScissorTest = renderTarget.scissorTest;
    } else {
      _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
      _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
      _currentScissorTest = _scissorTest;
    }
    if (_currentFramebuffer !== framebuffer) {
      _gl.bindFramebuffer(36160, framebuffer);
      _currentFramebuffer = framebuffer;
    }
    state.viewport(_currentViewport);
    state.scissor(_currentScissor);
    state.setScissorTest(_currentScissorTest);
    if (isCube) {
      const textureProperties = properties.get(renderTarget.texture);
      _gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
    }
  };
  this.readRenderTargetPixels = function(renderTarget, x2, y2, width, height, buffer, activeCubeFaceIndex) {
    if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
      console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
      return;
    }
    let framebuffer = properties.get(renderTarget).__webglFramebuffer;
    if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
      framebuffer = framebuffer[activeCubeFaceIndex];
    }
    if (framebuffer) {
      let restore = false;
      if (framebuffer !== _currentFramebuffer) {
        _gl.bindFramebuffer(36160, framebuffer);
        restore = true;
      }
      try {
        const texture = renderTarget.texture;
        const textureFormat = texture.format;
        const textureType = texture.type;
        if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(35739)) {
          console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
          return;
        }
        if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(35738) && !(textureType === FloatType && (capabilities.isWebGL2 || extensions.get("OES_texture_float") || extensions.get("WEBGL_color_buffer_float"))) && !(textureType === HalfFloatType && (capabilities.isWebGL2 ? extensions.get("EXT_color_buffer_float") : extensions.get("EXT_color_buffer_half_float")))) {
          console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
          return;
        }
        if (_gl.checkFramebufferStatus(36160) === 36053) {
          if (x2 >= 0 && x2 <= renderTarget.width - width && (y2 >= 0 && y2 <= renderTarget.height - height)) {
            _gl.readPixels(x2, y2, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
          }
        } else {
          console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");
        }
      } finally {
        if (restore) {
          _gl.bindFramebuffer(36160, _currentFramebuffer);
        }
      }
    }
  };
  this.copyFramebufferToTexture = function(position, texture, level) {
    if (level === void 0)
      level = 0;
    const levelScale = Math.pow(2, -level);
    const width = Math.floor(texture.image.width * levelScale);
    const height = Math.floor(texture.image.height * levelScale);
    const glFormat = utils.convert(texture.format);
    textures.setTexture2D(texture, 0);
    _gl.copyTexImage2D(3553, level, glFormat, position.x, position.y, width, height, 0);
    state.unbindTexture();
  };
  this.copyTextureToTexture = function(position, srcTexture, dstTexture, level) {
    if (level === void 0)
      level = 0;
    const width = srcTexture.image.width;
    const height = srcTexture.image.height;
    const glFormat = utils.convert(dstTexture.format);
    const glType = utils.convert(dstTexture.type);
    textures.setTexture2D(dstTexture, 0);
    _gl.pixelStorei(37440, dstTexture.flipY);
    _gl.pixelStorei(37441, dstTexture.premultiplyAlpha);
    _gl.pixelStorei(3317, dstTexture.unpackAlignment);
    if (srcTexture.isDataTexture) {
      _gl.texSubImage2D(3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
    } else {
      if (srcTexture.isCompressedTexture) {
        _gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);
      } else {
        _gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image);
      }
    }
    if (level === 0 && dstTexture.generateMipmaps)
      _gl.generateMipmap(3553);
    state.unbindTexture();
  };
  this.initTexture = function(texture) {
    textures.setTexture2D(texture, 0);
    state.unbindTexture();
  };
  if (typeof __THREE_DEVTOOLS__ !== "undefined") {
    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
}
function WebGL1Renderer(parameters) {
  WebGLRenderer.call(this, parameters);
}
WebGL1Renderer.prototype = Object.assign(Object.create(WebGLRenderer.prototype), {
  constructor: WebGL1Renderer,
  isWebGL1Renderer: true
});
class FogExp2 {
  constructor(color, density) {
    Object.defineProperty(this, "isFogExp2", { value: true });
    this.name = "";
    this.color = new Color(color);
    this.density = density !== void 0 ? density : 25e-5;
  }
  clone() {
    return new FogExp2(this.color, this.density);
  }
  toJSON() {
    return {
      type: "FogExp2",
      color: this.color.getHex(),
      density: this.density
    };
  }
}
class Fog {
  constructor(color, near, far) {
    Object.defineProperty(this, "isFog", { value: true });
    this.name = "";
    this.color = new Color(color);
    this.near = near !== void 0 ? near : 1;
    this.far = far !== void 0 ? far : 1e3;
  }
  clone() {
    return new Fog(this.color, this.near, this.far);
  }
  toJSON() {
    return {
      type: "Fog",
      color: this.color.getHex(),
      near: this.near,
      far: this.far
    };
  }
}
class Scene extends Object3D {
  constructor() {
    super();
    Object.defineProperty(this, "isScene", { value: true });
    this.type = "Scene";
    this.background = null;
    this.environment = null;
    this.fog = null;
    this.overrideMaterial = null;
    this.autoUpdate = true;
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
    }
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    if (source.background !== null)
      this.background = source.background.clone();
    if (source.environment !== null)
      this.environment = source.environment.clone();
    if (source.fog !== null)
      this.fog = source.fog.clone();
    if (source.overrideMaterial !== null)
      this.overrideMaterial = source.overrideMaterial.clone();
    this.autoUpdate = source.autoUpdate;
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    if (this.background !== null)
      data.object.background = this.background.toJSON(meta);
    if (this.environment !== null)
      data.object.environment = this.environment.toJSON(meta);
    if (this.fog !== null)
      data.object.fog = this.fog.toJSON();
    return data;
  }
}
function InterleavedBuffer(array, stride) {
  this.array = array;
  this.stride = stride;
  this.count = array !== void 0 ? array.length / stride : 0;
  this.usage = StaticDrawUsage;
  this.updateRange = { offset: 0, count: -1 };
  this.version = 0;
  this.uuid = MathUtils.generateUUID();
}
Object.defineProperty(InterleavedBuffer.prototype, "needsUpdate", {
  set: function(value) {
    if (value === true)
      this.version++;
  }
});
Object.assign(InterleavedBuffer.prototype, {
  isInterleavedBuffer: true,
  onUploadCallback: function() {
  },
  setUsage: function(value) {
    this.usage = value;
    return this;
  },
  copy: function(source) {
    this.array = new source.array.constructor(source.array);
    this.count = source.count;
    this.stride = source.stride;
    this.usage = source.usage;
    return this;
  },
  copyAt: function(index1, attribute, index2) {
    index1 *= this.stride;
    index2 *= attribute.stride;
    for (let i2 = 0, l2 = this.stride; i2 < l2; i2++) {
      this.array[index1 + i2] = attribute.array[index2 + i2];
    }
    return this;
  },
  set: function(value, offset) {
    if (offset === void 0)
      offset = 0;
    this.array.set(value, offset);
    return this;
  },
  clone: function(data) {
    if (data.arrayBuffers === void 0) {
      data.arrayBuffers = {};
    }
    if (this.array.buffer._uuid === void 0) {
      this.array.buffer._uuid = MathUtils.generateUUID();
    }
    if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
      data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
    }
    const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
    const ib = new InterleavedBuffer(array, this.stride);
    ib.setUsage(this.usage);
    return ib;
  },
  onUpload: function(callback) {
    this.onUploadCallback = callback;
    return this;
  },
  toJSON: function(data) {
    if (data.arrayBuffers === void 0) {
      data.arrayBuffers = {};
    }
    if (this.array.buffer._uuid === void 0) {
      this.array.buffer._uuid = MathUtils.generateUUID();
    }
    if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
      data.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));
    }
    return {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
});
const _vector$6 = new Vector3();
function InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized) {
  this.name = "";
  this.data = interleavedBuffer;
  this.itemSize = itemSize;
  this.offset = offset;
  this.normalized = normalized === true;
}
Object.defineProperties(InterleavedBufferAttribute.prototype, {
  count: {
    get: function() {
      return this.data.count;
    }
  },
  array: {
    get: function() {
      return this.data.array;
    }
  },
  needsUpdate: {
    set: function(value) {
      this.data.needsUpdate = value;
    }
  }
});
Object.assign(InterleavedBufferAttribute.prototype, {
  isInterleavedBufferAttribute: true,
  applyMatrix4: function(m2) {
    for (let i2 = 0, l2 = this.data.count; i2 < l2; i2++) {
      _vector$6.x = this.getX(i2);
      _vector$6.y = this.getY(i2);
      _vector$6.z = this.getZ(i2);
      _vector$6.applyMatrix4(m2);
      this.setXYZ(i2, _vector$6.x, _vector$6.y, _vector$6.z);
    }
    return this;
  },
  setX: function(index, x2) {
    this.data.array[index * this.data.stride + this.offset] = x2;
    return this;
  },
  setY: function(index, y2) {
    this.data.array[index * this.data.stride + this.offset + 1] = y2;
    return this;
  },
  setZ: function(index, z2) {
    this.data.array[index * this.data.stride + this.offset + 2] = z2;
    return this;
  },
  setW: function(index, w2) {
    this.data.array[index * this.data.stride + this.offset + 3] = w2;
    return this;
  },
  getX: function(index) {
    return this.data.array[index * this.data.stride + this.offset];
  },
  getY: function(index) {
    return this.data.array[index * this.data.stride + this.offset + 1];
  },
  getZ: function(index) {
    return this.data.array[index * this.data.stride + this.offset + 2];
  },
  getW: function(index) {
    return this.data.array[index * this.data.stride + this.offset + 3];
  },
  setXY: function(index, x2, y2) {
    index = index * this.data.stride + this.offset;
    this.data.array[index + 0] = x2;
    this.data.array[index + 1] = y2;
    return this;
  },
  setXYZ: function(index, x2, y2, z2) {
    index = index * this.data.stride + this.offset;
    this.data.array[index + 0] = x2;
    this.data.array[index + 1] = y2;
    this.data.array[index + 2] = z2;
    return this;
  },
  setXYZW: function(index, x2, y2, z2, w2) {
    index = index * this.data.stride + this.offset;
    this.data.array[index + 0] = x2;
    this.data.array[index + 1] = y2;
    this.data.array[index + 2] = z2;
    this.data.array[index + 3] = w2;
    return this;
  },
  clone: function(data) {
    if (data === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");
      const array = [];
      for (let i2 = 0; i2 < this.count; i2++) {
        const index = i2 * this.data.stride + this.offset;
        for (let j2 = 0; j2 < this.itemSize; j2++) {
          array.push(this.data.array[index + j2]);
        }
      }
      return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
    } else {
      if (data.interleavedBuffers === void 0) {
        data.interleavedBuffers = {};
      }
      if (data.interleavedBuffers[this.data.uuid] === void 0) {
        data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
      }
      return new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
    }
  },
  toJSON: function(data) {
    if (data === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");
      const array = [];
      for (let i2 = 0; i2 < this.count; i2++) {
        const index = i2 * this.data.stride + this.offset;
        for (let j2 = 0; j2 < this.itemSize; j2++) {
          array.push(this.data.array[index + j2]);
        }
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array,
        normalized: this.normalized
      };
    } else {
      if (data.interleavedBuffers === void 0) {
        data.interleavedBuffers = {};
      }
      if (data.interleavedBuffers[this.data.uuid] === void 0) {
        data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
      }
      return {
        isInterleavedBufferAttribute: true,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
    }
  }
});
function SpriteMaterial(parameters) {
  Material.call(this);
  this.type = "SpriteMaterial";
  this.color = new Color(16777215);
  this.map = null;
  this.alphaMap = null;
  this.rotation = 0;
  this.sizeAttenuation = true;
  this.transparent = true;
  this.setValues(parameters);
}
SpriteMaterial.prototype = Object.create(Material.prototype);
SpriteMaterial.prototype.constructor = SpriteMaterial;
SpriteMaterial.prototype.isSpriteMaterial = true;
SpriteMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.map = source.map;
  this.alphaMap = source.alphaMap;
  this.rotation = source.rotation;
  this.sizeAttenuation = source.sizeAttenuation;
  return this;
};
let _geometry;
const _intersectPoint = new Vector3();
const _worldScale = new Vector3();
const _mvPosition = new Vector3();
const _alignedPosition = new Vector2();
const _rotatedPosition = new Vector2();
const _viewWorldMatrix = new Matrix4();
const _vA$1 = new Vector3();
const _vB$1 = new Vector3();
const _vC$1 = new Vector3();
const _uvA$1 = new Vector2();
const _uvB$1 = new Vector2();
const _uvC$1 = new Vector2();
function Sprite(material) {
  Object3D.call(this);
  this.type = "Sprite";
  if (_geometry === void 0) {
    _geometry = new BufferGeometry();
    const float32Array = new Float32Array([
      -0.5,
      -0.5,
      0,
      0,
      0,
      0.5,
      -0.5,
      0,
      1,
      0,
      0.5,
      0.5,
      0,
      1,
      1,
      -0.5,
      0.5,
      0,
      0,
      1
    ]);
    const interleavedBuffer = new InterleavedBuffer(float32Array, 5);
    _geometry.setIndex([0, 1, 2, 0, 2, 3]);
    _geometry.setAttribute("position", new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));
    _geometry.setAttribute("uv", new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));
  }
  this.geometry = _geometry;
  this.material = material !== void 0 ? material : new SpriteMaterial();
  this.center = new Vector2(0.5, 0.5);
}
Sprite.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Sprite,
  isSprite: true,
  raycast: function(raycaster, intersects2) {
    if (raycaster.camera === null) {
      console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
    }
    _worldScale.setFromMatrixScale(this.matrixWorld);
    _viewWorldMatrix.copy(raycaster.camera.matrixWorld);
    this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);
    _mvPosition.setFromMatrixPosition(this.modelViewMatrix);
    if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {
      _worldScale.multiplyScalar(-_mvPosition.z);
    }
    const rotation = this.material.rotation;
    let sin, cos;
    if (rotation !== 0) {
      cos = Math.cos(rotation);
      sin = Math.sin(rotation);
    }
    const center = this.center;
    transformVertex(_vA$1.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
    transformVertex(_vB$1.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);
    transformVertex(_vC$1.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
    _uvA$1.set(0, 0);
    _uvB$1.set(1, 0);
    _uvC$1.set(1, 1);
    let intersect = raycaster.ray.intersectTriangle(_vA$1, _vB$1, _vC$1, false, _intersectPoint);
    if (intersect === null) {
      transformVertex(_vB$1.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);
      _uvB$1.set(0, 1);
      intersect = raycaster.ray.intersectTriangle(_vA$1, _vC$1, _vB$1, false, _intersectPoint);
      if (intersect === null) {
        return;
      }
    }
    const distance = raycaster.ray.origin.distanceTo(_intersectPoint);
    if (distance < raycaster.near || distance > raycaster.far)
      return;
    intersects2.push({
      distance,
      point: _intersectPoint.clone(),
      uv: Triangle.getUV(_intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2()),
      face: null,
      object: this
    });
  },
  copy: function(source) {
    Object3D.prototype.copy.call(this, source);
    if (source.center !== void 0)
      this.center.copy(source.center);
    this.material = source.material;
    return this;
  }
});
function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
  _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);
  if (sin !== void 0) {
    _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;
    _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;
  } else {
    _rotatedPosition.copy(_alignedPosition);
  }
  vertexPosition.copy(mvPosition);
  vertexPosition.x += _rotatedPosition.x;
  vertexPosition.y += _rotatedPosition.y;
  vertexPosition.applyMatrix4(_viewWorldMatrix);
}
const _v1$4 = new Vector3();
const _v2$2 = new Vector3();
function LOD() {
  Object3D.call(this);
  this._currentLevel = 0;
  this.type = "LOD";
  Object.defineProperties(this, {
    levels: {
      enumerable: true,
      value: []
    }
  });
  this.autoUpdate = true;
}
LOD.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: LOD,
  isLOD: true,
  copy: function(source) {
    Object3D.prototype.copy.call(this, source, false);
    const levels = source.levels;
    for (let i2 = 0, l2 = levels.length; i2 < l2; i2++) {
      const level = levels[i2];
      this.addLevel(level.object.clone(), level.distance);
    }
    this.autoUpdate = source.autoUpdate;
    return this;
  },
  addLevel: function(object, distance) {
    if (distance === void 0)
      distance = 0;
    distance = Math.abs(distance);
    const levels = this.levels;
    let l2;
    for (l2 = 0; l2 < levels.length; l2++) {
      if (distance < levels[l2].distance) {
        break;
      }
    }
    levels.splice(l2, 0, { distance, object });
    this.add(object);
    return this;
  },
  getCurrentLevel: function() {
    return this._currentLevel;
  },
  getObjectForDistance: function(distance) {
    const levels = this.levels;
    if (levels.length > 0) {
      let i2, l2;
      for (i2 = 1, l2 = levels.length; i2 < l2; i2++) {
        if (distance < levels[i2].distance) {
          break;
        }
      }
      return levels[i2 - 1].object;
    }
    return null;
  },
  raycast: function(raycaster, intersects2) {
    const levels = this.levels;
    if (levels.length > 0) {
      _v1$4.setFromMatrixPosition(this.matrixWorld);
      const distance = raycaster.ray.origin.distanceTo(_v1$4);
      this.getObjectForDistance(distance).raycast(raycaster, intersects2);
    }
  },
  update: function(camera) {
    const levels = this.levels;
    if (levels.length > 1) {
      _v1$4.setFromMatrixPosition(camera.matrixWorld);
      _v2$2.setFromMatrixPosition(this.matrixWorld);
      const distance = _v1$4.distanceTo(_v2$2) / camera.zoom;
      levels[0].object.visible = true;
      let i2, l2;
      for (i2 = 1, l2 = levels.length; i2 < l2; i2++) {
        if (distance >= levels[i2].distance) {
          levels[i2 - 1].object.visible = false;
          levels[i2].object.visible = true;
        } else {
          break;
        }
      }
      this._currentLevel = i2 - 1;
      for (; i2 < l2; i2++) {
        levels[i2].object.visible = false;
      }
    }
  },
  toJSON: function(meta) {
    const data = Object3D.prototype.toJSON.call(this, meta);
    if (this.autoUpdate === false)
      data.object.autoUpdate = false;
    data.object.levels = [];
    const levels = this.levels;
    for (let i2 = 0, l2 = levels.length; i2 < l2; i2++) {
      const level = levels[i2];
      data.object.levels.push({
        object: level.object.uuid,
        distance: level.distance
      });
    }
    return data;
  }
});
function SkinnedMesh(geometry, material) {
  if (geometry && geometry.isGeometry) {
    console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
  }
  Mesh.call(this, geometry, material);
  this.type = "SkinnedMesh";
  this.bindMode = "attached";
  this.bindMatrix = new Matrix4();
  this.bindMatrixInverse = new Matrix4();
}
SkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {
  constructor: SkinnedMesh,
  isSkinnedMesh: true,
  copy: function(source) {
    Mesh.prototype.copy.call(this, source);
    this.bindMode = source.bindMode;
    this.bindMatrix.copy(source.bindMatrix);
    this.bindMatrixInverse.copy(source.bindMatrixInverse);
    this.skeleton = source.skeleton;
    return this;
  },
  bind: function(skeleton, bindMatrix) {
    this.skeleton = skeleton;
    if (bindMatrix === void 0) {
      this.updateMatrixWorld(true);
      this.skeleton.calculateInverses();
      bindMatrix = this.matrixWorld;
    }
    this.bindMatrix.copy(bindMatrix);
    this.bindMatrixInverse.getInverse(bindMatrix);
  },
  pose: function() {
    this.skeleton.pose();
  },
  normalizeSkinWeights: function() {
    const vector = new Vector4();
    const skinWeight = this.geometry.attributes.skinWeight;
    for (let i2 = 0, l2 = skinWeight.count; i2 < l2; i2++) {
      vector.x = skinWeight.getX(i2);
      vector.y = skinWeight.getY(i2);
      vector.z = skinWeight.getZ(i2);
      vector.w = skinWeight.getW(i2);
      const scale = 1 / vector.manhattanLength();
      if (scale !== Infinity) {
        vector.multiplyScalar(scale);
      } else {
        vector.set(1, 0, 0, 0);
      }
      skinWeight.setXYZW(i2, vector.x, vector.y, vector.z, vector.w);
    }
  },
  updateMatrixWorld: function(force) {
    Mesh.prototype.updateMatrixWorld.call(this, force);
    if (this.bindMode === "attached") {
      this.bindMatrixInverse.getInverse(this.matrixWorld);
    } else if (this.bindMode === "detached") {
      this.bindMatrixInverse.getInverse(this.bindMatrix);
    } else {
      console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
    }
  },
  boneTransform: function() {
    const basePosition = new Vector3();
    const skinIndex = new Vector4();
    const skinWeight = new Vector4();
    const vector = new Vector3();
    const matrix = new Matrix4();
    return function(index, target) {
      const skeleton = this.skeleton;
      const geometry = this.geometry;
      skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);
      skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);
      basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);
      target.set(0, 0, 0);
      for (let i2 = 0; i2 < 4; i2++) {
        const weight = skinWeight.getComponent(i2);
        if (weight !== 0) {
          const boneIndex = skinIndex.getComponent(i2);
          matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);
          target.addScaledVector(vector.copy(basePosition).applyMatrix4(matrix), weight);
        }
      }
      return target.applyMatrix4(this.bindMatrixInverse);
    };
  }()
});
const _offsetMatrix = new Matrix4();
const _identityMatrix = new Matrix4();
function Skeleton(bones, boneInverses) {
  bones = bones || [];
  this.bones = bones.slice(0);
  this.boneMatrices = new Float32Array(this.bones.length * 16);
  this.frame = -1;
  if (boneInverses === void 0) {
    this.calculateInverses();
  } else {
    if (this.bones.length === boneInverses.length) {
      this.boneInverses = boneInverses.slice(0);
    } else {
      console.warn("THREE.Skeleton boneInverses is the wrong length.");
      this.boneInverses = [];
      for (let i2 = 0, il = this.bones.length; i2 < il; i2++) {
        this.boneInverses.push(new Matrix4());
      }
    }
  }
}
Object.assign(Skeleton.prototype, {
  calculateInverses: function() {
    this.boneInverses = [];
    for (let i2 = 0, il = this.bones.length; i2 < il; i2++) {
      const inverse = new Matrix4();
      if (this.bones[i2]) {
        inverse.getInverse(this.bones[i2].matrixWorld);
      }
      this.boneInverses.push(inverse);
    }
  },
  pose: function() {
    for (let i2 = 0, il = this.bones.length; i2 < il; i2++) {
      const bone = this.bones[i2];
      if (bone) {
        bone.matrixWorld.getInverse(this.boneInverses[i2]);
      }
    }
    for (let i2 = 0, il = this.bones.length; i2 < il; i2++) {
      const bone = this.bones[i2];
      if (bone) {
        if (bone.parent && bone.parent.isBone) {
          bone.matrix.getInverse(bone.parent.matrixWorld);
          bone.matrix.multiply(bone.matrixWorld);
        } else {
          bone.matrix.copy(bone.matrixWorld);
        }
        bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
      }
    }
  },
  update: function() {
    const bones = this.bones;
    const boneInverses = this.boneInverses;
    const boneMatrices = this.boneMatrices;
    const boneTexture = this.boneTexture;
    for (let i2 = 0, il = bones.length; i2 < il; i2++) {
      const matrix = bones[i2] ? bones[i2].matrixWorld : _identityMatrix;
      _offsetMatrix.multiplyMatrices(matrix, boneInverses[i2]);
      _offsetMatrix.toArray(boneMatrices, i2 * 16);
    }
    if (boneTexture !== void 0) {
      boneTexture.needsUpdate = true;
    }
  },
  clone: function() {
    return new Skeleton(this.bones, this.boneInverses);
  },
  getBoneByName: function(name) {
    for (let i2 = 0, il = this.bones.length; i2 < il; i2++) {
      const bone = this.bones[i2];
      if (bone.name === name) {
        return bone;
      }
    }
    return void 0;
  },
  dispose: function() {
    if (this.boneTexture) {
      this.boneTexture.dispose();
      this.boneTexture = void 0;
    }
  }
});
function Bone() {
  Object3D.call(this);
  this.type = "Bone";
}
Bone.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Bone,
  isBone: true
});
const _instanceLocalMatrix = new Matrix4();
const _instanceWorldMatrix = new Matrix4();
const _instanceIntersects = [];
const _mesh = new Mesh();
function InstancedMesh(geometry, material, count) {
  Mesh.call(this, geometry, material);
  this.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);
  this.instanceColor = null;
  this.count = count;
  this.frustumCulled = false;
}
InstancedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {
  constructor: InstancedMesh,
  isInstancedMesh: true,
  copy: function(source) {
    Mesh.prototype.copy.call(this, source);
    this.instanceMatrix.copy(source.instanceMatrix);
    this.count = source.count;
    return this;
  },
  setColorAt: function(index, color) {
    if (this.instanceColor === null) {
      this.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);
    }
    color.toArray(this.instanceColor.array, index * 3);
  },
  getMatrixAt: function(index, matrix) {
    matrix.fromArray(this.instanceMatrix.array, index * 16);
  },
  raycast: function(raycaster, intersects2) {
    const matrixWorld = this.matrixWorld;
    const raycastTimes = this.count;
    _mesh.geometry = this.geometry;
    _mesh.material = this.material;
    if (_mesh.material === void 0)
      return;
    for (let instanceId = 0; instanceId < raycastTimes; instanceId++) {
      this.getMatrixAt(instanceId, _instanceLocalMatrix);
      _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);
      _mesh.matrixWorld = _instanceWorldMatrix;
      _mesh.raycast(raycaster, _instanceIntersects);
      for (let i2 = 0, l2 = _instanceIntersects.length; i2 < l2; i2++) {
        const intersect = _instanceIntersects[i2];
        intersect.instanceId = instanceId;
        intersect.object = this;
        intersects2.push(intersect);
      }
      _instanceIntersects.length = 0;
    }
  },
  setMatrixAt: function(index, matrix) {
    matrix.toArray(this.instanceMatrix.array, index * 16);
  },
  updateMorphTargets: function() {
  }
});
function LineBasicMaterial(parameters) {
  Material.call(this);
  this.type = "LineBasicMaterial";
  this.color = new Color(16777215);
  this.linewidth = 1;
  this.linecap = "round";
  this.linejoin = "round";
  this.morphTargets = false;
  this.setValues(parameters);
}
LineBasicMaterial.prototype = Object.create(Material.prototype);
LineBasicMaterial.prototype.constructor = LineBasicMaterial;
LineBasicMaterial.prototype.isLineBasicMaterial = true;
LineBasicMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.linewidth = source.linewidth;
  this.linecap = source.linecap;
  this.linejoin = source.linejoin;
  this.morphTargets = source.morphTargets;
  return this;
};
const _start = new Vector3();
const _end = new Vector3();
const _inverseMatrix$1 = new Matrix4();
const _ray$1 = new Ray();
const _sphere$2 = new Sphere();
function Line(geometry, material, mode) {
  if (mode === 1) {
    console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.");
  }
  Object3D.call(this);
  this.type = "Line";
  this.geometry = geometry !== void 0 ? geometry : new BufferGeometry();
  this.material = material !== void 0 ? material : new LineBasicMaterial();
  this.updateMorphTargets();
}
Line.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Line,
  isLine: true,
  copy: function(source) {
    Object3D.prototype.copy.call(this, source);
    this.material = source.material;
    this.geometry = source.geometry;
    return this;
  },
  computeLineDistances: function() {
    const geometry = this.geometry;
    if (geometry.isBufferGeometry) {
      if (geometry.index === null) {
        const positionAttribute = geometry.attributes.position;
        const lineDistances = [0];
        for (let i2 = 1, l2 = positionAttribute.count; i2 < l2; i2++) {
          _start.fromBufferAttribute(positionAttribute, i2 - 1);
          _end.fromBufferAttribute(positionAttribute, i2);
          lineDistances[i2] = lineDistances[i2 - 1];
          lineDistances[i2] += _start.distanceTo(_end);
        }
        geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
      } else {
        console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
      }
    } else if (geometry.isGeometry) {
      const vertices = geometry.vertices;
      const lineDistances = geometry.lineDistances;
      lineDistances[0] = 0;
      for (let i2 = 1, l2 = vertices.length; i2 < l2; i2++) {
        lineDistances[i2] = lineDistances[i2 - 1];
        lineDistances[i2] += vertices[i2 - 1].distanceTo(vertices[i2]);
      }
    }
    return this;
  },
  raycast: function(raycaster, intersects2) {
    const geometry = this.geometry;
    const matrixWorld = this.matrixWorld;
    const threshold = raycaster.params.Line.threshold;
    if (geometry.boundingSphere === null)
      geometry.computeBoundingSphere();
    _sphere$2.copy(geometry.boundingSphere);
    _sphere$2.applyMatrix4(matrixWorld);
    _sphere$2.radius += threshold;
    if (raycaster.ray.intersectsSphere(_sphere$2) === false)
      return;
    _inverseMatrix$1.getInverse(matrixWorld);
    _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);
    const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
    const localThresholdSq = localThreshold * localThreshold;
    const vStart = new Vector3();
    const vEnd = new Vector3();
    const interSegment = new Vector3();
    const interRay = new Vector3();
    const step = this.isLineSegments ? 2 : 1;
    if (geometry.isBufferGeometry) {
      const index = geometry.index;
      const attributes = geometry.attributes;
      const positionAttribute = attributes.position;
      if (index !== null) {
        const indices = index.array;
        for (let i2 = 0, l2 = indices.length - 1; i2 < l2; i2 += step) {
          const a2 = indices[i2];
          const b2 = indices[i2 + 1];
          vStart.fromBufferAttribute(positionAttribute, a2);
          vEnd.fromBufferAttribute(positionAttribute, b2);
          const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
          if (distSq > localThresholdSq)
            continue;
          interRay.applyMatrix4(this.matrixWorld);
          const distance = raycaster.ray.origin.distanceTo(interRay);
          if (distance < raycaster.near || distance > raycaster.far)
            continue;
          intersects2.push({
            distance,
            point: interSegment.clone().applyMatrix4(this.matrixWorld),
            index: i2,
            face: null,
            faceIndex: null,
            object: this
          });
        }
      } else {
        for (let i2 = 0, l2 = positionAttribute.count - 1; i2 < l2; i2 += step) {
          vStart.fromBufferAttribute(positionAttribute, i2);
          vEnd.fromBufferAttribute(positionAttribute, i2 + 1);
          const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
          if (distSq > localThresholdSq)
            continue;
          interRay.applyMatrix4(this.matrixWorld);
          const distance = raycaster.ray.origin.distanceTo(interRay);
          if (distance < raycaster.near || distance > raycaster.far)
            continue;
          intersects2.push({
            distance,
            point: interSegment.clone().applyMatrix4(this.matrixWorld),
            index: i2,
            face: null,
            faceIndex: null,
            object: this
          });
        }
      }
    } else if (geometry.isGeometry) {
      const vertices = geometry.vertices;
      const nbVertices = vertices.length;
      for (let i2 = 0; i2 < nbVertices - 1; i2 += step) {
        const distSq = _ray$1.distanceSqToSegment(vertices[i2], vertices[i2 + 1], interRay, interSegment);
        if (distSq > localThresholdSq)
          continue;
        interRay.applyMatrix4(this.matrixWorld);
        const distance = raycaster.ray.origin.distanceTo(interRay);
        if (distance < raycaster.near || distance > raycaster.far)
          continue;
        intersects2.push({
          distance,
          point: interSegment.clone().applyMatrix4(this.matrixWorld),
          index: i2,
          face: null,
          faceIndex: null,
          object: this
        });
      }
    }
  },
  updateMorphTargets: function() {
    const geometry = this.geometry;
    if (geometry.isBufferGeometry) {
      const morphAttributes = geometry.morphAttributes;
      const keys = Object.keys(morphAttributes);
      if (keys.length > 0) {
        const morphAttribute = morphAttributes[keys[0]];
        if (morphAttribute !== void 0) {
          this.morphTargetInfluences = [];
          this.morphTargetDictionary = {};
          for (let m2 = 0, ml = morphAttribute.length; m2 < ml; m2++) {
            const name = morphAttribute[m2].name || String(m2);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[name] = m2;
          }
        }
      }
    } else {
      const morphTargets = geometry.morphTargets;
      if (morphTargets !== void 0 && morphTargets.length > 0) {
        console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
      }
    }
  }
});
const _start$1 = new Vector3();
const _end$1 = new Vector3();
function LineSegments(geometry, material) {
  Line.call(this, geometry, material);
  this.type = "LineSegments";
}
LineSegments.prototype = Object.assign(Object.create(Line.prototype), {
  constructor: LineSegments,
  isLineSegments: true,
  computeLineDistances: function() {
    const geometry = this.geometry;
    if (geometry.isBufferGeometry) {
      if (geometry.index === null) {
        const positionAttribute = geometry.attributes.position;
        const lineDistances = [];
        for (let i2 = 0, l2 = positionAttribute.count; i2 < l2; i2 += 2) {
          _start$1.fromBufferAttribute(positionAttribute, i2);
          _end$1.fromBufferAttribute(positionAttribute, i2 + 1);
          lineDistances[i2] = i2 === 0 ? 0 : lineDistances[i2 - 1];
          lineDistances[i2 + 1] = lineDistances[i2] + _start$1.distanceTo(_end$1);
        }
        geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
      } else {
        console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
      }
    } else if (geometry.isGeometry) {
      const vertices = geometry.vertices;
      const lineDistances = geometry.lineDistances;
      for (let i2 = 0, l2 = vertices.length; i2 < l2; i2 += 2) {
        _start$1.copy(vertices[i2]);
        _end$1.copy(vertices[i2 + 1]);
        lineDistances[i2] = i2 === 0 ? 0 : lineDistances[i2 - 1];
        lineDistances[i2 + 1] = lineDistances[i2] + _start$1.distanceTo(_end$1);
      }
    }
    return this;
  }
});
function LineLoop(geometry, material) {
  Line.call(this, geometry, material);
  this.type = "LineLoop";
}
LineLoop.prototype = Object.assign(Object.create(Line.prototype), {
  constructor: LineLoop,
  isLineLoop: true
});
function PointsMaterial(parameters) {
  Material.call(this);
  this.type = "PointsMaterial";
  this.color = new Color(16777215);
  this.map = null;
  this.alphaMap = null;
  this.size = 1;
  this.sizeAttenuation = true;
  this.morphTargets = false;
  this.setValues(parameters);
}
PointsMaterial.prototype = Object.create(Material.prototype);
PointsMaterial.prototype.constructor = PointsMaterial;
PointsMaterial.prototype.isPointsMaterial = true;
PointsMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.map = source.map;
  this.alphaMap = source.alphaMap;
  this.size = source.size;
  this.sizeAttenuation = source.sizeAttenuation;
  this.morphTargets = source.morphTargets;
  return this;
};
const _inverseMatrix$2 = new Matrix4();
const _ray$2 = new Ray();
const _sphere$3 = new Sphere();
const _position$1 = new Vector3();
function Points(geometry, material) {
  Object3D.call(this);
  this.type = "Points";
  this.geometry = geometry !== void 0 ? geometry : new BufferGeometry();
  this.material = material !== void 0 ? material : new PointsMaterial();
  this.updateMorphTargets();
}
Points.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Points,
  isPoints: true,
  copy: function(source) {
    Object3D.prototype.copy.call(this, source);
    this.material = source.material;
    this.geometry = source.geometry;
    return this;
  },
  raycast: function(raycaster, intersects2) {
    const geometry = this.geometry;
    const matrixWorld = this.matrixWorld;
    const threshold = raycaster.params.Points.threshold;
    if (geometry.boundingSphere === null)
      geometry.computeBoundingSphere();
    _sphere$3.copy(geometry.boundingSphere);
    _sphere$3.applyMatrix4(matrixWorld);
    _sphere$3.radius += threshold;
    if (raycaster.ray.intersectsSphere(_sphere$3) === false)
      return;
    _inverseMatrix$2.getInverse(matrixWorld);
    _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);
    const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
    const localThresholdSq = localThreshold * localThreshold;
    if (geometry.isBufferGeometry) {
      const index = geometry.index;
      const attributes = geometry.attributes;
      const positionAttribute = attributes.position;
      if (index !== null) {
        const indices = index.array;
        for (let i2 = 0, il = indices.length; i2 < il; i2++) {
          const a2 = indices[i2];
          _position$1.fromBufferAttribute(positionAttribute, a2);
          testPoint(_position$1, a2, localThresholdSq, matrixWorld, raycaster, intersects2, this);
        }
      } else {
        for (let i2 = 0, l2 = positionAttribute.count; i2 < l2; i2++) {
          _position$1.fromBufferAttribute(positionAttribute, i2);
          testPoint(_position$1, i2, localThresholdSq, matrixWorld, raycaster, intersects2, this);
        }
      }
    } else {
      const vertices = geometry.vertices;
      for (let i2 = 0, l2 = vertices.length; i2 < l2; i2++) {
        testPoint(vertices[i2], i2, localThresholdSq, matrixWorld, raycaster, intersects2, this);
      }
    }
  },
  updateMorphTargets: function() {
    const geometry = this.geometry;
    if (geometry.isBufferGeometry) {
      const morphAttributes = geometry.morphAttributes;
      const keys = Object.keys(morphAttributes);
      if (keys.length > 0) {
        const morphAttribute = morphAttributes[keys[0]];
        if (morphAttribute !== void 0) {
          this.morphTargetInfluences = [];
          this.morphTargetDictionary = {};
          for (let m2 = 0, ml = morphAttribute.length; m2 < ml; m2++) {
            const name = morphAttribute[m2].name || String(m2);
            this.morphTargetInfluences.push(0);
            this.morphTargetDictionary[name] = m2;
          }
        }
      }
    } else {
      const morphTargets = geometry.morphTargets;
      if (morphTargets !== void 0 && morphTargets.length > 0) {
        console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.");
      }
    }
  }
});
function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects2, object) {
  const rayPointDistanceSq = _ray$2.distanceSqToPoint(point);
  if (rayPointDistanceSq < localThresholdSq) {
    const intersectPoint = new Vector3();
    _ray$2.closestPointToPoint(point, intersectPoint);
    intersectPoint.applyMatrix4(matrixWorld);
    const distance = raycaster.ray.origin.distanceTo(intersectPoint);
    if (distance < raycaster.near || distance > raycaster.far)
      return;
    intersects2.push({
      distance,
      distanceToRay: Math.sqrt(rayPointDistanceSq),
      point: intersectPoint,
      index,
      face: null,
      object
    });
  }
}
function VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
  Texture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
  this.format = format !== void 0 ? format : RGBFormat;
  this.minFilter = minFilter !== void 0 ? minFilter : LinearFilter;
  this.magFilter = magFilter !== void 0 ? magFilter : LinearFilter;
  this.generateMipmaps = false;
  const scope = this;
  function updateVideo() {
    scope.needsUpdate = true;
    video.requestVideoFrameCallback(updateVideo);
  }
  if ("requestVideoFrameCallback" in video) {
    video.requestVideoFrameCallback(updateVideo);
  }
}
VideoTexture.prototype = Object.assign(Object.create(Texture.prototype), {
  constructor: VideoTexture,
  clone: function() {
    return new this.constructor(this.image).copy(this);
  },
  isVideoTexture: true,
  update: function() {
    const video = this.image;
    const hasVideoFrameCallback = "requestVideoFrameCallback" in video;
    if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {
      this.needsUpdate = true;
    }
  }
});
function CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
  Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
  this.image = { width, height };
  this.mipmaps = mipmaps;
  this.flipY = false;
  this.generateMipmaps = false;
}
CompressedTexture.prototype = Object.create(Texture.prototype);
CompressedTexture.prototype.constructor = CompressedTexture;
CompressedTexture.prototype.isCompressedTexture = true;
function CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
  Texture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
  this.needsUpdate = true;
}
CanvasTexture.prototype = Object.create(Texture.prototype);
CanvasTexture.prototype.constructor = CanvasTexture;
CanvasTexture.prototype.isCanvasTexture = true;
function DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
  format = format !== void 0 ? format : DepthFormat;
  if (format !== DepthFormat && format !== DepthStencilFormat) {
    throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
  }
  if (type === void 0 && format === DepthFormat)
    type = UnsignedShortType;
  if (type === void 0 && format === DepthStencilFormat)
    type = UnsignedInt248Type;
  Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
  this.image = { width, height };
  this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
  this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
  this.flipY = false;
  this.generateMipmaps = false;
}
DepthTexture.prototype = Object.create(Texture.prototype);
DepthTexture.prototype.constructor = DepthTexture;
DepthTexture.prototype.isDepthTexture = true;
let _geometryId = 0;
const _m1$3 = new Matrix4();
const _obj$1 = new Object3D();
const _offset$1 = new Vector3();
function Geometry() {
  Object.defineProperty(this, "id", { value: _geometryId += 2 });
  this.uuid = MathUtils.generateUUID();
  this.name = "";
  this.type = "Geometry";
  this.vertices = [];
  this.colors = [];
  this.faces = [];
  this.faceVertexUvs = [[]];
  this.morphTargets = [];
  this.morphNormals = [];
  this.skinWeights = [];
  this.skinIndices = [];
  this.lineDistances = [];
  this.boundingBox = null;
  this.boundingSphere = null;
  this.elementsNeedUpdate = false;
  this.verticesNeedUpdate = false;
  this.uvsNeedUpdate = false;
  this.normalsNeedUpdate = false;
  this.colorsNeedUpdate = false;
  this.lineDistancesNeedUpdate = false;
  this.groupsNeedUpdate = false;
}
Geometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: Geometry,
  isGeometry: true,
  applyMatrix4: function(matrix) {
    const normalMatrix = new Matrix3().getNormalMatrix(matrix);
    for (let i2 = 0, il = this.vertices.length; i2 < il; i2++) {
      const vertex = this.vertices[i2];
      vertex.applyMatrix4(matrix);
    }
    for (let i2 = 0, il = this.faces.length; i2 < il; i2++) {
      const face = this.faces[i2];
      face.normal.applyMatrix3(normalMatrix).normalize();
      for (let j2 = 0, jl = face.vertexNormals.length; j2 < jl; j2++) {
        face.vertexNormals[j2].applyMatrix3(normalMatrix).normalize();
      }
    }
    if (this.boundingBox !== null) {
      this.computeBoundingBox();
    }
    if (this.boundingSphere !== null) {
      this.computeBoundingSphere();
    }
    this.verticesNeedUpdate = true;
    this.normalsNeedUpdate = true;
    return this;
  },
  rotateX: function(angle) {
    _m1$3.makeRotationX(angle);
    this.applyMatrix4(_m1$3);
    return this;
  },
  rotateY: function(angle) {
    _m1$3.makeRotationY(angle);
    this.applyMatrix4(_m1$3);
    return this;
  },
  rotateZ: function(angle) {
    _m1$3.makeRotationZ(angle);
    this.applyMatrix4(_m1$3);
    return this;
  },
  translate: function(x2, y2, z2) {
    _m1$3.makeTranslation(x2, y2, z2);
    this.applyMatrix4(_m1$3);
    return this;
  },
  scale: function(x2, y2, z2) {
    _m1$3.makeScale(x2, y2, z2);
    this.applyMatrix4(_m1$3);
    return this;
  },
  lookAt: function(vector) {
    _obj$1.lookAt(vector);
    _obj$1.updateMatrix();
    this.applyMatrix4(_obj$1.matrix);
    return this;
  },
  fromBufferGeometry: function(geometry) {
    const scope = this;
    const index = geometry.index !== null ? geometry.index : void 0;
    const attributes = geometry.attributes;
    if (attributes.position === void 0) {
      console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.");
      return this;
    }
    const position = attributes.position;
    const normal = attributes.normal;
    const color = attributes.color;
    const uv = attributes.uv;
    const uv2 = attributes.uv2;
    if (uv2 !== void 0)
      this.faceVertexUvs[1] = [];
    for (let i2 = 0; i2 < position.count; i2++) {
      scope.vertices.push(new Vector3().fromBufferAttribute(position, i2));
      if (color !== void 0) {
        scope.colors.push(new Color().fromBufferAttribute(color, i2));
      }
    }
    function addFace(a2, b2, c2, materialIndex) {
      const vertexColors = color === void 0 ? [] : [
        scope.colors[a2].clone(),
        scope.colors[b2].clone(),
        scope.colors[c2].clone()
      ];
      const vertexNormals = normal === void 0 ? [] : [
        new Vector3().fromBufferAttribute(normal, a2),
        new Vector3().fromBufferAttribute(normal, b2),
        new Vector3().fromBufferAttribute(normal, c2)
      ];
      const face = new Face3(a2, b2, c2, vertexNormals, vertexColors, materialIndex);
      scope.faces.push(face);
      if (uv !== void 0) {
        scope.faceVertexUvs[0].push([
          new Vector2().fromBufferAttribute(uv, a2),
          new Vector2().fromBufferAttribute(uv, b2),
          new Vector2().fromBufferAttribute(uv, c2)
        ]);
      }
      if (uv2 !== void 0) {
        scope.faceVertexUvs[1].push([
          new Vector2().fromBufferAttribute(uv2, a2),
          new Vector2().fromBufferAttribute(uv2, b2),
          new Vector2().fromBufferAttribute(uv2, c2)
        ]);
      }
    }
    const groups = geometry.groups;
    if (groups.length > 0) {
      for (let i2 = 0; i2 < groups.length; i2++) {
        const group = groups[i2];
        const start = group.start;
        const count = group.count;
        for (let j2 = start, jl = start + count; j2 < jl; j2 += 3) {
          if (index !== void 0) {
            addFace(index.getX(j2), index.getX(j2 + 1), index.getX(j2 + 2), group.materialIndex);
          } else {
            addFace(j2, j2 + 1, j2 + 2, group.materialIndex);
          }
        }
      }
    } else {
      if (index !== void 0) {
        for (let i2 = 0; i2 < index.count; i2 += 3) {
          addFace(index.getX(i2), index.getX(i2 + 1), index.getX(i2 + 2));
        }
      } else {
        for (let i2 = 0; i2 < position.count; i2 += 3) {
          addFace(i2, i2 + 1, i2 + 2);
        }
      }
    }
    this.computeFaceNormals();
    if (geometry.boundingBox !== null) {
      this.boundingBox = geometry.boundingBox.clone();
    }
    if (geometry.boundingSphere !== null) {
      this.boundingSphere = geometry.boundingSphere.clone();
    }
    return this;
  },
  center: function() {
    this.computeBoundingBox();
    this.boundingBox.getCenter(_offset$1).negate();
    this.translate(_offset$1.x, _offset$1.y, _offset$1.z);
    return this;
  },
  normalize: function() {
    this.computeBoundingSphere();
    const center = this.boundingSphere.center;
    const radius = this.boundingSphere.radius;
    const s2 = radius === 0 ? 1 : 1 / radius;
    const matrix = new Matrix4();
    matrix.set(s2, 0, 0, -s2 * center.x, 0, s2, 0, -s2 * center.y, 0, 0, s2, -s2 * center.z, 0, 0, 0, 1);
    this.applyMatrix4(matrix);
    return this;
  },
  computeFaceNormals: function() {
    const cb = new Vector3(), ab = new Vector3();
    for (let f2 = 0, fl = this.faces.length; f2 < fl; f2++) {
      const face = this.faces[f2];
      const vA = this.vertices[face.a];
      const vB = this.vertices[face.b];
      const vC = this.vertices[face.c];
      cb.subVectors(vC, vB);
      ab.subVectors(vA, vB);
      cb.cross(ab);
      cb.normalize();
      face.normal.copy(cb);
    }
  },
  computeVertexNormals: function(areaWeighted) {
    if (areaWeighted === void 0)
      areaWeighted = true;
    const vertices = new Array(this.vertices.length);
    for (let v2 = 0, vl = this.vertices.length; v2 < vl; v2++) {
      vertices[v2] = new Vector3();
    }
    if (areaWeighted) {
      const cb = new Vector3(), ab = new Vector3();
      for (let f2 = 0, fl = this.faces.length; f2 < fl; f2++) {
        const face = this.faces[f2];
        const vA = this.vertices[face.a];
        const vB = this.vertices[face.b];
        const vC = this.vertices[face.c];
        cb.subVectors(vC, vB);
        ab.subVectors(vA, vB);
        cb.cross(ab);
        vertices[face.a].add(cb);
        vertices[face.b].add(cb);
        vertices[face.c].add(cb);
      }
    } else {
      this.computeFaceNormals();
      for (let f2 = 0, fl = this.faces.length; f2 < fl; f2++) {
        const face = this.faces[f2];
        vertices[face.a].add(face.normal);
        vertices[face.b].add(face.normal);
        vertices[face.c].add(face.normal);
      }
    }
    for (let v2 = 0, vl = this.vertices.length; v2 < vl; v2++) {
      vertices[v2].normalize();
    }
    for (let f2 = 0, fl = this.faces.length; f2 < fl; f2++) {
      const face = this.faces[f2];
      const vertexNormals = face.vertexNormals;
      if (vertexNormals.length === 3) {
        vertexNormals[0].copy(vertices[face.a]);
        vertexNormals[1].copy(vertices[face.b]);
        vertexNormals[2].copy(vertices[face.c]);
      } else {
        vertexNormals[0] = vertices[face.a].clone();
        vertexNormals[1] = vertices[face.b].clone();
        vertexNormals[2] = vertices[face.c].clone();
      }
    }
    if (this.faces.length > 0) {
      this.normalsNeedUpdate = true;
    }
  },
  computeFlatVertexNormals: function() {
    this.computeFaceNormals();
    for (let f2 = 0, fl = this.faces.length; f2 < fl; f2++) {
      const face = this.faces[f2];
      const vertexNormals = face.vertexNormals;
      if (vertexNormals.length === 3) {
        vertexNormals[0].copy(face.normal);
        vertexNormals[1].copy(face.normal);
        vertexNormals[2].copy(face.normal);
      } else {
        vertexNormals[0] = face.normal.clone();
        vertexNormals[1] = face.normal.clone();
        vertexNormals[2] = face.normal.clone();
      }
    }
    if (this.faces.length > 0) {
      this.normalsNeedUpdate = true;
    }
  },
  computeMorphNormals: function() {
    for (let f2 = 0, fl = this.faces.length; f2 < fl; f2++) {
      const face = this.faces[f2];
      if (!face.__originalFaceNormal) {
        face.__originalFaceNormal = face.normal.clone();
      } else {
        face.__originalFaceNormal.copy(face.normal);
      }
      if (!face.__originalVertexNormals)
        face.__originalVertexNormals = [];
      for (let i2 = 0, il = face.vertexNormals.length; i2 < il; i2++) {
        if (!face.__originalVertexNormals[i2]) {
          face.__originalVertexNormals[i2] = face.vertexNormals[i2].clone();
        } else {
          face.__originalVertexNormals[i2].copy(face.vertexNormals[i2]);
        }
      }
    }
    const tmpGeo = new Geometry();
    tmpGeo.faces = this.faces;
    for (let i2 = 0, il = this.morphTargets.length; i2 < il; i2++) {
      if (!this.morphNormals[i2]) {
        this.morphNormals[i2] = {};
        this.morphNormals[i2].faceNormals = [];
        this.morphNormals[i2].vertexNormals = [];
        const dstNormalsFace = this.morphNormals[i2].faceNormals;
        const dstNormalsVertex = this.morphNormals[i2].vertexNormals;
        for (let f2 = 0, fl = this.faces.length; f2 < fl; f2++) {
          const faceNormal = new Vector3();
          const vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };
          dstNormalsFace.push(faceNormal);
          dstNormalsVertex.push(vertexNormals);
        }
      }
      const morphNormals = this.morphNormals[i2];
      tmpGeo.vertices = this.morphTargets[i2].vertices;
      tmpGeo.computeFaceNormals();
      tmpGeo.computeVertexNormals();
      for (let f2 = 0, fl = this.faces.length; f2 < fl; f2++) {
        const face = this.faces[f2];
        const faceNormal = morphNormals.faceNormals[f2];
        const vertexNormals = morphNormals.vertexNormals[f2];
        faceNormal.copy(face.normal);
        vertexNormals.a.copy(face.vertexNormals[0]);
        vertexNormals.b.copy(face.vertexNormals[1]);
        vertexNormals.c.copy(face.vertexNormals[2]);
      }
    }
    for (let f2 = 0, fl = this.faces.length; f2 < fl; f2++) {
      const face = this.faces[f2];
      face.normal = face.__originalFaceNormal;
      face.vertexNormals = face.__originalVertexNormals;
    }
  },
  computeBoundingBox: function() {
    if (this.boundingBox === null) {
      this.boundingBox = new Box3();
    }
    this.boundingBox.setFromPoints(this.vertices);
  },
  computeBoundingSphere: function() {
    if (this.boundingSphere === null) {
      this.boundingSphere = new Sphere();
    }
    this.boundingSphere.setFromPoints(this.vertices);
  },
  merge: function(geometry, matrix, materialIndexOffset) {
    if (!(geometry && geometry.isGeometry)) {
      console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", geometry);
      return;
    }
    let normalMatrix;
    const vertexOffset = this.vertices.length, vertices1 = this.vertices, vertices2 = geometry.vertices, faces1 = this.faces, faces2 = geometry.faces, colors1 = this.colors, colors2 = geometry.colors;
    if (materialIndexOffset === void 0)
      materialIndexOffset = 0;
    if (matrix !== void 0) {
      normalMatrix = new Matrix3().getNormalMatrix(matrix);
    }
    for (let i2 = 0, il = vertices2.length; i2 < il; i2++) {
      const vertex = vertices2[i2];
      const vertexCopy = vertex.clone();
      if (matrix !== void 0)
        vertexCopy.applyMatrix4(matrix);
      vertices1.push(vertexCopy);
    }
    for (let i2 = 0, il = colors2.length; i2 < il; i2++) {
      colors1.push(colors2[i2].clone());
    }
    for (let i2 = 0, il = faces2.length; i2 < il; i2++) {
      const face = faces2[i2];
      let normal, color;
      const faceVertexNormals = face.vertexNormals, faceVertexColors = face.vertexColors;
      const faceCopy = new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);
      faceCopy.normal.copy(face.normal);
      if (normalMatrix !== void 0) {
        faceCopy.normal.applyMatrix3(normalMatrix).normalize();
      }
      for (let j2 = 0, jl = faceVertexNormals.length; j2 < jl; j2++) {
        normal = faceVertexNormals[j2].clone();
        if (normalMatrix !== void 0) {
          normal.applyMatrix3(normalMatrix).normalize();
        }
        faceCopy.vertexNormals.push(normal);
      }
      faceCopy.color.copy(face.color);
      for (let j2 = 0, jl = faceVertexColors.length; j2 < jl; j2++) {
        color = faceVertexColors[j2];
        faceCopy.vertexColors.push(color.clone());
      }
      faceCopy.materialIndex = face.materialIndex + materialIndexOffset;
      faces1.push(faceCopy);
    }
    for (let i2 = 0, il = geometry.faceVertexUvs.length; i2 < il; i2++) {
      const faceVertexUvs2 = geometry.faceVertexUvs[i2];
      if (this.faceVertexUvs[i2] === void 0)
        this.faceVertexUvs[i2] = [];
      for (let j2 = 0, jl = faceVertexUvs2.length; j2 < jl; j2++) {
        const uvs2 = faceVertexUvs2[j2], uvsCopy = [];
        for (let k2 = 0, kl = uvs2.length; k2 < kl; k2++) {
          uvsCopy.push(uvs2[k2].clone());
        }
        this.faceVertexUvs[i2].push(uvsCopy);
      }
    }
  },
  mergeMesh: function(mesh) {
    if (!(mesh && mesh.isMesh)) {
      console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", mesh);
      return;
    }
    if (mesh.matrixAutoUpdate)
      mesh.updateMatrix();
    this.merge(mesh.geometry, mesh.matrix);
  },
  mergeVertices: function() {
    const verticesMap = {};
    const unique = [], changes = [];
    const precisionPoints = 4;
    const precision = Math.pow(10, precisionPoints);
    for (let i2 = 0, il = this.vertices.length; i2 < il; i2++) {
      const v2 = this.vertices[i2];
      const key = Math.round(v2.x * precision) + "_" + Math.round(v2.y * precision) + "_" + Math.round(v2.z * precision);
      if (verticesMap[key] === void 0) {
        verticesMap[key] = i2;
        unique.push(this.vertices[i2]);
        changes[i2] = unique.length - 1;
      } else {
        changes[i2] = changes[verticesMap[key]];
      }
    }
    const faceIndicesToRemove = [];
    for (let i2 = 0, il = this.faces.length; i2 < il; i2++) {
      const face = this.faces[i2];
      face.a = changes[face.a];
      face.b = changes[face.b];
      face.c = changes[face.c];
      const indices = [face.a, face.b, face.c];
      for (let n2 = 0; n2 < 3; n2++) {
        if (indices[n2] === indices[(n2 + 1) % 3]) {
          faceIndicesToRemove.push(i2);
          break;
        }
      }
    }
    for (let i2 = faceIndicesToRemove.length - 1; i2 >= 0; i2--) {
      const idx = faceIndicesToRemove[i2];
      this.faces.splice(idx, 1);
      for (let j2 = 0, jl = this.faceVertexUvs.length; j2 < jl; j2++) {
        this.faceVertexUvs[j2].splice(idx, 1);
      }
    }
    const diff = this.vertices.length - unique.length;
    this.vertices = unique;
    return diff;
  },
  setFromPoints: function(points) {
    this.vertices = [];
    for (let i2 = 0, l2 = points.length; i2 < l2; i2++) {
      const point = points[i2];
      this.vertices.push(new Vector3(point.x, point.y, point.z || 0));
    }
    return this;
  },
  sortFacesByMaterialIndex: function() {
    const faces = this.faces;
    const length = faces.length;
    for (let i2 = 0; i2 < length; i2++) {
      faces[i2]._id = i2;
    }
    function materialIndexSort(a2, b2) {
      return a2.materialIndex - b2.materialIndex;
    }
    faces.sort(materialIndexSort);
    const uvs1 = this.faceVertexUvs[0];
    const uvs2 = this.faceVertexUvs[1];
    let newUvs1, newUvs2;
    if (uvs1 && uvs1.length === length)
      newUvs1 = [];
    if (uvs2 && uvs2.length === length)
      newUvs2 = [];
    for (let i2 = 0; i2 < length; i2++) {
      const id = faces[i2]._id;
      if (newUvs1)
        newUvs1.push(uvs1[id]);
      if (newUvs2)
        newUvs2.push(uvs2[id]);
    }
    if (newUvs1)
      this.faceVertexUvs[0] = newUvs1;
    if (newUvs2)
      this.faceVertexUvs[1] = newUvs2;
  },
  toJSON: function() {
    const data = {
      metadata: {
        version: 4.5,
        type: "Geometry",
        generator: "Geometry.toJSON"
      }
    };
    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== "")
      data.name = this.name;
    if (this.parameters !== void 0) {
      const parameters = this.parameters;
      for (const key in parameters) {
        if (parameters[key] !== void 0)
          data[key] = parameters[key];
      }
      return data;
    }
    const vertices = [];
    for (let i2 = 0; i2 < this.vertices.length; i2++) {
      const vertex = this.vertices[i2];
      vertices.push(vertex.x, vertex.y, vertex.z);
    }
    const faces = [];
    const normals = [];
    const normalsHash = {};
    const colors = [];
    const colorsHash = {};
    const uvs = [];
    const uvsHash = {};
    for (let i2 = 0; i2 < this.faces.length; i2++) {
      const face = this.faces[i2];
      const hasMaterial = true;
      const hasFaceUv = false;
      const hasFaceVertexUv = this.faceVertexUvs[0][i2] !== void 0;
      const hasFaceNormal = face.normal.length() > 0;
      const hasFaceVertexNormal = face.vertexNormals.length > 0;
      const hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
      const hasFaceVertexColor = face.vertexColors.length > 0;
      let faceType = 0;
      faceType = setBit(faceType, 0, 0);
      faceType = setBit(faceType, 1, hasMaterial);
      faceType = setBit(faceType, 2, hasFaceUv);
      faceType = setBit(faceType, 3, hasFaceVertexUv);
      faceType = setBit(faceType, 4, hasFaceNormal);
      faceType = setBit(faceType, 5, hasFaceVertexNormal);
      faceType = setBit(faceType, 6, hasFaceColor);
      faceType = setBit(faceType, 7, hasFaceVertexColor);
      faces.push(faceType);
      faces.push(face.a, face.b, face.c);
      faces.push(face.materialIndex);
      if (hasFaceVertexUv) {
        const faceVertexUvs = this.faceVertexUvs[0][i2];
        faces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]));
      }
      if (hasFaceNormal) {
        faces.push(getNormalIndex(face.normal));
      }
      if (hasFaceVertexNormal) {
        const vertexNormals = face.vertexNormals;
        faces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]));
      }
      if (hasFaceColor) {
        faces.push(getColorIndex(face.color));
      }
      if (hasFaceVertexColor) {
        const vertexColors = face.vertexColors;
        faces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]));
      }
    }
    function setBit(value, position, enabled) {
      return enabled ? value | 1 << position : value & ~(1 << position);
    }
    function getNormalIndex(normal) {
      const hash = normal.x.toString() + normal.y.toString() + normal.z.toString();
      if (normalsHash[hash] !== void 0) {
        return normalsHash[hash];
      }
      normalsHash[hash] = normals.length / 3;
      normals.push(normal.x, normal.y, normal.z);
      return normalsHash[hash];
    }
    function getColorIndex(color) {
      const hash = color.r.toString() + color.g.toString() + color.b.toString();
      if (colorsHash[hash] !== void 0) {
        return colorsHash[hash];
      }
      colorsHash[hash] = colors.length;
      colors.push(color.getHex());
      return colorsHash[hash];
    }
    function getUvIndex(uv) {
      const hash = uv.x.toString() + uv.y.toString();
      if (uvsHash[hash] !== void 0) {
        return uvsHash[hash];
      }
      uvsHash[hash] = uvs.length / 2;
      uvs.push(uv.x, uv.y);
      return uvsHash[hash];
    }
    data.data = {};
    data.data.vertices = vertices;
    data.data.normals = normals;
    if (colors.length > 0)
      data.data.colors = colors;
    if (uvs.length > 0)
      data.data.uvs = [uvs];
    data.data.faces = faces;
    return data;
  },
  clone: function() {
    return new Geometry().copy(this);
  },
  copy: function(source) {
    this.vertices = [];
    this.colors = [];
    this.faces = [];
    this.faceVertexUvs = [[]];
    this.morphTargets = [];
    this.morphNormals = [];
    this.skinWeights = [];
    this.skinIndices = [];
    this.lineDistances = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    this.name = source.name;
    const vertices = source.vertices;
    for (let i2 = 0, il = vertices.length; i2 < il; i2++) {
      this.vertices.push(vertices[i2].clone());
    }
    const colors = source.colors;
    for (let i2 = 0, il = colors.length; i2 < il; i2++) {
      this.colors.push(colors[i2].clone());
    }
    const faces = source.faces;
    for (let i2 = 0, il = faces.length; i2 < il; i2++) {
      this.faces.push(faces[i2].clone());
    }
    for (let i2 = 0, il = source.faceVertexUvs.length; i2 < il; i2++) {
      const faceVertexUvs = source.faceVertexUvs[i2];
      if (this.faceVertexUvs[i2] === void 0) {
        this.faceVertexUvs[i2] = [];
      }
      for (let j2 = 0, jl = faceVertexUvs.length; j2 < jl; j2++) {
        const uvs = faceVertexUvs[j2], uvsCopy = [];
        for (let k2 = 0, kl = uvs.length; k2 < kl; k2++) {
          const uv = uvs[k2];
          uvsCopy.push(uv.clone());
        }
        this.faceVertexUvs[i2].push(uvsCopy);
      }
    }
    const morphTargets = source.morphTargets;
    for (let i2 = 0, il = morphTargets.length; i2 < il; i2++) {
      const morphTarget = {};
      morphTarget.name = morphTargets[i2].name;
      if (morphTargets[i2].vertices !== void 0) {
        morphTarget.vertices = [];
        for (let j2 = 0, jl = morphTargets[i2].vertices.length; j2 < jl; j2++) {
          morphTarget.vertices.push(morphTargets[i2].vertices[j2].clone());
        }
      }
      if (morphTargets[i2].normals !== void 0) {
        morphTarget.normals = [];
        for (let j2 = 0, jl = morphTargets[i2].normals.length; j2 < jl; j2++) {
          morphTarget.normals.push(morphTargets[i2].normals[j2].clone());
        }
      }
      this.morphTargets.push(morphTarget);
    }
    const morphNormals = source.morphNormals;
    for (let i2 = 0, il = morphNormals.length; i2 < il; i2++) {
      const morphNormal = {};
      if (morphNormals[i2].vertexNormals !== void 0) {
        morphNormal.vertexNormals = [];
        for (let j2 = 0, jl = morphNormals[i2].vertexNormals.length; j2 < jl; j2++) {
          const srcVertexNormal = morphNormals[i2].vertexNormals[j2];
          const destVertexNormal = {};
          destVertexNormal.a = srcVertexNormal.a.clone();
          destVertexNormal.b = srcVertexNormal.b.clone();
          destVertexNormal.c = srcVertexNormal.c.clone();
          morphNormal.vertexNormals.push(destVertexNormal);
        }
      }
      if (morphNormals[i2].faceNormals !== void 0) {
        morphNormal.faceNormals = [];
        for (let j2 = 0, jl = morphNormals[i2].faceNormals.length; j2 < jl; j2++) {
          morphNormal.faceNormals.push(morphNormals[i2].faceNormals[j2].clone());
        }
      }
      this.morphNormals.push(morphNormal);
    }
    const skinWeights = source.skinWeights;
    for (let i2 = 0, il = skinWeights.length; i2 < il; i2++) {
      this.skinWeights.push(skinWeights[i2].clone());
    }
    const skinIndices = source.skinIndices;
    for (let i2 = 0, il = skinIndices.length; i2 < il; i2++) {
      this.skinIndices.push(skinIndices[i2].clone());
    }
    const lineDistances = source.lineDistances;
    for (let i2 = 0, il = lineDistances.length; i2 < il; i2++) {
      this.lineDistances.push(lineDistances[i2]);
    }
    const boundingBox = source.boundingBox;
    if (boundingBox !== null) {
      this.boundingBox = boundingBox.clone();
    }
    const boundingSphere = source.boundingSphere;
    if (boundingSphere !== null) {
      this.boundingSphere = boundingSphere.clone();
    }
    this.elementsNeedUpdate = source.elementsNeedUpdate;
    this.verticesNeedUpdate = source.verticesNeedUpdate;
    this.uvsNeedUpdate = source.uvsNeedUpdate;
    this.normalsNeedUpdate = source.normalsNeedUpdate;
    this.colorsNeedUpdate = source.colorsNeedUpdate;
    this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
    this.groupsNeedUpdate = source.groupsNeedUpdate;
    return this;
  },
  dispose: function() {
    this.dispatchEvent({ type: "dispose" });
  }
});
class BoxGeometry extends Geometry {
  constructor(width, height, depth, widthSegments, heightSegments, depthSegments) {
    super();
    this.type = "BoxGeometry";
    this.parameters = {
      width,
      height,
      depth,
      widthSegments,
      heightSegments,
      depthSegments
    };
    this.fromBufferGeometry(new BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments));
    this.mergeVertices();
  }
}
class CircleBufferGeometry extends BufferGeometry {
  constructor(radius, segments, thetaStart, thetaLength) {
    super();
    this.type = "CircleBufferGeometry";
    this.parameters = {
      radius,
      segments,
      thetaStart,
      thetaLength
    };
    radius = radius || 1;
    segments = segments !== void 0 ? Math.max(3, segments) : 8;
    thetaStart = thetaStart !== void 0 ? thetaStart : 0;
    thetaLength = thetaLength !== void 0 ? thetaLength : Math.PI * 2;
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    const vertex = new Vector3();
    const uv = new Vector2();
    vertices.push(0, 0, 0);
    normals.push(0, 0, 1);
    uvs.push(0.5, 0.5);
    for (let s2 = 0, i2 = 3; s2 <= segments; s2++, i2 += 3) {
      const segment = thetaStart + s2 / segments * thetaLength;
      vertex.x = radius * Math.cos(segment);
      vertex.y = radius * Math.sin(segment);
      vertices.push(vertex.x, vertex.y, vertex.z);
      normals.push(0, 0, 1);
      uv.x = (vertices[i2] / radius + 1) / 2;
      uv.y = (vertices[i2 + 1] / radius + 1) / 2;
      uvs.push(uv.x, uv.y);
    }
    for (let i2 = 1; i2 <= segments; i2++) {
      indices.push(i2, i2 + 1, 0);
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
}
class CircleGeometry extends Geometry {
  constructor(radius, segments, thetaStart, thetaLength) {
    super();
    this.type = "CircleGeometry";
    this.parameters = {
      radius,
      segments,
      thetaStart,
      thetaLength
    };
    this.fromBufferGeometry(new CircleBufferGeometry(radius, segments, thetaStart, thetaLength));
    this.mergeVertices();
  }
}
class CylinderBufferGeometry extends BufferGeometry {
  constructor(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
    super();
    this.type = "CylinderBufferGeometry";
    this.parameters = {
      radiusTop,
      radiusBottom,
      height,
      radialSegments,
      heightSegments,
      openEnded,
      thetaStart,
      thetaLength
    };
    const scope = this;
    radiusTop = radiusTop !== void 0 ? radiusTop : 1;
    radiusBottom = radiusBottom !== void 0 ? radiusBottom : 1;
    height = height || 1;
    radialSegments = Math.floor(radialSegments) || 8;
    heightSegments = Math.floor(heightSegments) || 1;
    openEnded = openEnded !== void 0 ? openEnded : false;
    thetaStart = thetaStart !== void 0 ? thetaStart : 0;
    thetaLength = thetaLength !== void 0 ? thetaLength : Math.PI * 2;
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let index = 0;
    const indexArray = [];
    const halfHeight = height / 2;
    let groupStart = 0;
    generateTorso();
    if (openEnded === false) {
      if (radiusTop > 0)
        generateCap(true);
      if (radiusBottom > 0)
        generateCap(false);
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function generateTorso() {
      const normal = new Vector3();
      const vertex = new Vector3();
      let groupCount = 0;
      const slope = (radiusBottom - radiusTop) / height;
      for (let y2 = 0; y2 <= heightSegments; y2++) {
        const indexRow = [];
        const v2 = y2 / heightSegments;
        const radius = v2 * (radiusBottom - radiusTop) + radiusTop;
        for (let x2 = 0; x2 <= radialSegments; x2++) {
          const u2 = x2 / radialSegments;
          const theta = u2 * thetaLength + thetaStart;
          const sinTheta = Math.sin(theta);
          const cosTheta = Math.cos(theta);
          vertex.x = radius * sinTheta;
          vertex.y = -v2 * height + halfHeight;
          vertex.z = radius * cosTheta;
          vertices.push(vertex.x, vertex.y, vertex.z);
          normal.set(sinTheta, slope, cosTheta).normalize();
          normals.push(normal.x, normal.y, normal.z);
          uvs.push(u2, 1 - v2);
          indexRow.push(index++);
        }
        indexArray.push(indexRow);
      }
      for (let x2 = 0; x2 < radialSegments; x2++) {
        for (let y2 = 0; y2 < heightSegments; y2++) {
          const a2 = indexArray[y2][x2];
          const b2 = indexArray[y2 + 1][x2];
          const c2 = indexArray[y2 + 1][x2 + 1];
          const d = indexArray[y2][x2 + 1];
          indices.push(a2, b2, d);
          indices.push(b2, c2, d);
          groupCount += 6;
        }
      }
      scope.addGroup(groupStart, groupCount, 0);
      groupStart += groupCount;
    }
    function generateCap(top) {
      const centerIndexStart = index;
      const uv = new Vector2();
      const vertex = new Vector3();
      let groupCount = 0;
      const radius = top === true ? radiusTop : radiusBottom;
      const sign2 = top === true ? 1 : -1;
      for (let x2 = 1; x2 <= radialSegments; x2++) {
        vertices.push(0, halfHeight * sign2, 0);
        normals.push(0, sign2, 0);
        uvs.push(0.5, 0.5);
        index++;
      }
      const centerIndexEnd = index;
      for (let x2 = 0; x2 <= radialSegments; x2++) {
        const u2 = x2 / radialSegments;
        const theta = u2 * thetaLength + thetaStart;
        const cosTheta = Math.cos(theta);
        const sinTheta = Math.sin(theta);
        vertex.x = radius * sinTheta;
        vertex.y = halfHeight * sign2;
        vertex.z = radius * cosTheta;
        vertices.push(vertex.x, vertex.y, vertex.z);
        normals.push(0, sign2, 0);
        uv.x = cosTheta * 0.5 + 0.5;
        uv.y = sinTheta * 0.5 * sign2 + 0.5;
        uvs.push(uv.x, uv.y);
        index++;
      }
      for (let x2 = 0; x2 < radialSegments; x2++) {
        const c2 = centerIndexStart + x2;
        const i2 = centerIndexEnd + x2;
        if (top === true) {
          indices.push(i2, i2 + 1, c2);
        } else {
          indices.push(i2 + 1, i2, c2);
        }
        groupCount += 3;
      }
      scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
      groupStart += groupCount;
    }
  }
}
class CylinderGeometry extends Geometry {
  constructor(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
    super();
    this.type = "CylinderGeometry";
    this.parameters = {
      radiusTop,
      radiusBottom,
      height,
      radialSegments,
      heightSegments,
      openEnded,
      thetaStart,
      thetaLength
    };
    this.fromBufferGeometry(new CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength));
    this.mergeVertices();
  }
}
class ConeGeometry extends CylinderGeometry {
  constructor(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
    super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
    this.type = "ConeGeometry";
    this.parameters = {
      radius,
      height,
      radialSegments,
      heightSegments,
      openEnded,
      thetaStart,
      thetaLength
    };
  }
}
class ConeBufferGeometry extends CylinderBufferGeometry {
  constructor(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
    super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
    this.type = "ConeBufferGeometry";
    this.parameters = {
      radius,
      height,
      radialSegments,
      heightSegments,
      openEnded,
      thetaStart,
      thetaLength
    };
  }
}
class PolyhedronBufferGeometry extends BufferGeometry {
  constructor(vertices, indices, radius, detail) {
    super();
    this.type = "PolyhedronBufferGeometry";
    this.parameters = {
      vertices,
      indices,
      radius,
      detail
    };
    radius = radius || 1;
    detail = detail || 0;
    const vertexBuffer = [];
    const uvBuffer = [];
    subdivide(detail);
    applyRadius(radius);
    generateUVs();
    this.setAttribute("position", new Float32BufferAttribute(vertexBuffer, 3));
    this.setAttribute("normal", new Float32BufferAttribute(vertexBuffer.slice(), 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvBuffer, 2));
    if (detail === 0) {
      this.computeVertexNormals();
    } else {
      this.normalizeNormals();
    }
    function subdivide(detail2) {
      const a2 = new Vector3();
      const b2 = new Vector3();
      const c2 = new Vector3();
      for (let i2 = 0; i2 < indices.length; i2 += 3) {
        getVertexByIndex(indices[i2 + 0], a2);
        getVertexByIndex(indices[i2 + 1], b2);
        getVertexByIndex(indices[i2 + 2], c2);
        subdivideFace(a2, b2, c2, detail2);
      }
    }
    function subdivideFace(a2, b2, c2, detail2) {
      const cols = detail2 + 1;
      const v2 = [];
      for (let i2 = 0; i2 <= cols; i2++) {
        v2[i2] = [];
        const aj = a2.clone().lerp(c2, i2 / cols);
        const bj = b2.clone().lerp(c2, i2 / cols);
        const rows = cols - i2;
        for (let j2 = 0; j2 <= rows; j2++) {
          if (j2 === 0 && i2 === cols) {
            v2[i2][j2] = aj;
          } else {
            v2[i2][j2] = aj.clone().lerp(bj, j2 / rows);
          }
        }
      }
      for (let i2 = 0; i2 < cols; i2++) {
        for (let j2 = 0; j2 < 2 * (cols - i2) - 1; j2++) {
          const k2 = Math.floor(j2 / 2);
          if (j2 % 2 === 0) {
            pushVertex(v2[i2][k2 + 1]);
            pushVertex(v2[i2 + 1][k2]);
            pushVertex(v2[i2][k2]);
          } else {
            pushVertex(v2[i2][k2 + 1]);
            pushVertex(v2[i2 + 1][k2 + 1]);
            pushVertex(v2[i2 + 1][k2]);
          }
        }
      }
    }
    function applyRadius(radius2) {
      const vertex = new Vector3();
      for (let i2 = 0; i2 < vertexBuffer.length; i2 += 3) {
        vertex.x = vertexBuffer[i2 + 0];
        vertex.y = vertexBuffer[i2 + 1];
        vertex.z = vertexBuffer[i2 + 2];
        vertex.normalize().multiplyScalar(radius2);
        vertexBuffer[i2 + 0] = vertex.x;
        vertexBuffer[i2 + 1] = vertex.y;
        vertexBuffer[i2 + 2] = vertex.z;
      }
    }
    function generateUVs() {
      const vertex = new Vector3();
      for (let i2 = 0; i2 < vertexBuffer.length; i2 += 3) {
        vertex.x = vertexBuffer[i2 + 0];
        vertex.y = vertexBuffer[i2 + 1];
        vertex.z = vertexBuffer[i2 + 2];
        const u2 = azimuth(vertex) / 2 / Math.PI + 0.5;
        const v2 = inclination(vertex) / Math.PI + 0.5;
        uvBuffer.push(u2, 1 - v2);
      }
      correctUVs();
      correctSeam();
    }
    function correctSeam() {
      for (let i2 = 0; i2 < uvBuffer.length; i2 += 6) {
        const x0 = uvBuffer[i2 + 0];
        const x1 = uvBuffer[i2 + 2];
        const x2 = uvBuffer[i2 + 4];
        const max = Math.max(x0, x1, x2);
        const min = Math.min(x0, x1, x2);
        if (max > 0.9 && min < 0.1) {
          if (x0 < 0.2)
            uvBuffer[i2 + 0] += 1;
          if (x1 < 0.2)
            uvBuffer[i2 + 2] += 1;
          if (x2 < 0.2)
            uvBuffer[i2 + 4] += 1;
        }
      }
    }
    function pushVertex(vertex) {
      vertexBuffer.push(vertex.x, vertex.y, vertex.z);
    }
    function getVertexByIndex(index, vertex) {
      const stride = index * 3;
      vertex.x = vertices[stride + 0];
      vertex.y = vertices[stride + 1];
      vertex.z = vertices[stride + 2];
    }
    function correctUVs() {
      const a2 = new Vector3();
      const b2 = new Vector3();
      const c2 = new Vector3();
      const centroid = new Vector3();
      const uvA = new Vector2();
      const uvB = new Vector2();
      const uvC = new Vector2();
      for (let i2 = 0, j2 = 0; i2 < vertexBuffer.length; i2 += 9, j2 += 6) {
        a2.set(vertexBuffer[i2 + 0], vertexBuffer[i2 + 1], vertexBuffer[i2 + 2]);
        b2.set(vertexBuffer[i2 + 3], vertexBuffer[i2 + 4], vertexBuffer[i2 + 5]);
        c2.set(vertexBuffer[i2 + 6], vertexBuffer[i2 + 7], vertexBuffer[i2 + 8]);
        uvA.set(uvBuffer[j2 + 0], uvBuffer[j2 + 1]);
        uvB.set(uvBuffer[j2 + 2], uvBuffer[j2 + 3]);
        uvC.set(uvBuffer[j2 + 4], uvBuffer[j2 + 5]);
        centroid.copy(a2).add(b2).add(c2).divideScalar(3);
        const azi = azimuth(centroid);
        correctUV(uvA, j2 + 0, a2, azi);
        correctUV(uvB, j2 + 2, b2, azi);
        correctUV(uvC, j2 + 4, c2, azi);
      }
    }
    function correctUV(uv, stride, vector, azimuth2) {
      if (azimuth2 < 0 && uv.x === 1) {
        uvBuffer[stride] = uv.x - 1;
      }
      if (vector.x === 0 && vector.z === 0) {
        uvBuffer[stride] = azimuth2 / 2 / Math.PI + 0.5;
      }
    }
    function azimuth(vector) {
      return Math.atan2(vector.z, -vector.x);
    }
    function inclination(vector) {
      return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
    }
  }
}
class DodecahedronBufferGeometry extends PolyhedronBufferGeometry {
  constructor(radius, detail) {
    const t3 = (1 + Math.sqrt(5)) / 2;
    const r2 = 1 / t3;
    const vertices = [
      -1,
      -1,
      -1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      -1,
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      1,
      1,
      -1,
      1,
      1,
      1,
      0,
      -r2,
      -t3,
      0,
      -r2,
      t3,
      0,
      r2,
      -t3,
      0,
      r2,
      t3,
      -r2,
      -t3,
      0,
      -r2,
      t3,
      0,
      r2,
      -t3,
      0,
      r2,
      t3,
      0,
      -t3,
      0,
      -r2,
      t3,
      0,
      -r2,
      -t3,
      0,
      r2,
      t3,
      0,
      r2
    ];
    const indices = [
      3,
      11,
      7,
      3,
      7,
      15,
      3,
      15,
      13,
      7,
      19,
      17,
      7,
      17,
      6,
      7,
      6,
      15,
      17,
      4,
      8,
      17,
      8,
      10,
      17,
      10,
      6,
      8,
      0,
      16,
      8,
      16,
      2,
      8,
      2,
      10,
      0,
      12,
      1,
      0,
      1,
      18,
      0,
      18,
      16,
      6,
      10,
      2,
      6,
      2,
      13,
      6,
      13,
      15,
      2,
      16,
      18,
      2,
      18,
      3,
      2,
      3,
      13,
      18,
      1,
      9,
      18,
      9,
      11,
      18,
      11,
      3,
      4,
      14,
      12,
      4,
      12,
      0,
      4,
      0,
      8,
      11,
      9,
      5,
      11,
      5,
      19,
      11,
      19,
      7,
      19,
      5,
      14,
      19,
      14,
      4,
      19,
      4,
      17,
      1,
      12,
      14,
      1,
      14,
      5,
      1,
      5,
      9
    ];
    super(vertices, indices, radius, detail);
    this.type = "DodecahedronBufferGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
}
class DodecahedronGeometry extends Geometry {
  constructor(radius, detail) {
    super();
    this.type = "DodecahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
    this.fromBufferGeometry(new DodecahedronBufferGeometry(radius, detail));
    this.mergeVertices();
  }
}
const _v0$2 = new Vector3();
const _v1$5 = new Vector3();
const _normal$1 = new Vector3();
const _triangle = new Triangle();
class EdgesGeometry extends BufferGeometry {
  constructor(geometry, thresholdAngle) {
    super();
    this.type = "EdgesGeometry";
    this.parameters = {
      thresholdAngle
    };
    thresholdAngle = thresholdAngle !== void 0 ? thresholdAngle : 1;
    if (geometry.isGeometry) {
      geometry = new BufferGeometry().fromGeometry(geometry);
    }
    const precisionPoints = 4;
    const precision = Math.pow(10, precisionPoints);
    const thresholdDot = Math.cos(MathUtils.DEG2RAD * thresholdAngle);
    const indexAttr = geometry.getIndex();
    const positionAttr = geometry.getAttribute("position");
    const indexCount = indexAttr ? indexAttr.count : positionAttr.count;
    const indexArr = [0, 0, 0];
    const vertKeys = ["a", "b", "c"];
    const hashes = new Array(3);
    const edgeData = {};
    const vertices = [];
    for (let i2 = 0; i2 < indexCount; i2 += 3) {
      if (indexAttr) {
        indexArr[0] = indexAttr.getX(i2);
        indexArr[1] = indexAttr.getX(i2 + 1);
        indexArr[2] = indexAttr.getX(i2 + 2);
      } else {
        indexArr[0] = i2;
        indexArr[1] = i2 + 1;
        indexArr[2] = i2 + 2;
      }
      const { a: a2, b: b2, c: c2 } = _triangle;
      a2.fromBufferAttribute(positionAttr, indexArr[0]);
      b2.fromBufferAttribute(positionAttr, indexArr[1]);
      c2.fromBufferAttribute(positionAttr, indexArr[2]);
      _triangle.getNormal(_normal$1);
      hashes[0] = `${Math.round(a2.x * precision)},${Math.round(a2.y * precision)},${Math.round(a2.z * precision)}`;
      hashes[1] = `${Math.round(b2.x * precision)},${Math.round(b2.y * precision)},${Math.round(b2.z * precision)}`;
      hashes[2] = `${Math.round(c2.x * precision)},${Math.round(c2.y * precision)},${Math.round(c2.z * precision)}`;
      if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {
        continue;
      }
      for (let j2 = 0; j2 < 3; j2++) {
        const jNext = (j2 + 1) % 3;
        const vecHash0 = hashes[j2];
        const vecHash1 = hashes[jNext];
        const v0 = _triangle[vertKeys[j2]];
        const v1 = _triangle[vertKeys[jNext]];
        const hash = `${vecHash0}_${vecHash1}`;
        const reverseHash = `${vecHash1}_${vecHash0}`;
        if (reverseHash in edgeData && edgeData[reverseHash]) {
          if (_normal$1.dot(edgeData[reverseHash].normal) <= thresholdDot) {
            vertices.push(v0.x, v0.y, v0.z);
            vertices.push(v1.x, v1.y, v1.z);
          }
          edgeData[reverseHash] = null;
        } else if (!(hash in edgeData)) {
          edgeData[hash] = {
            index0: indexArr[j2],
            index1: indexArr[jNext],
            normal: _normal$1.clone()
          };
        }
      }
    }
    for (const key in edgeData) {
      if (edgeData[key]) {
        const { index0, index1 } = edgeData[key];
        _v0$2.fromBufferAttribute(positionAttr, index0);
        _v1$5.fromBufferAttribute(positionAttr, index1);
        vertices.push(_v0$2.x, _v0$2.y, _v0$2.z);
        vertices.push(_v1$5.x, _v1$5.y, _v1$5.z);
      }
    }
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
  }
}
const Earcut = {
  triangulate: function(data, holeIndices, dim) {
    dim = dim || 2;
    const hasHoles = holeIndices && holeIndices.length;
    const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
    let outerNode = linkedList(data, 0, outerLen, dim, true);
    const triangles = [];
    if (!outerNode || outerNode.next === outerNode.prev)
      return triangles;
    let minX, minY, maxX, maxY, x2, y2, invSize;
    if (hasHoles)
      outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
    if (data.length > 80 * dim) {
      minX = maxX = data[0];
      minY = maxY = data[1];
      for (let i2 = dim; i2 < outerLen; i2 += dim) {
        x2 = data[i2];
        y2 = data[i2 + 1];
        if (x2 < minX)
          minX = x2;
        if (y2 < minY)
          minY = y2;
        if (x2 > maxX)
          maxX = x2;
        if (y2 > maxY)
          maxY = y2;
      }
      invSize = Math.max(maxX - minX, maxY - minY);
      invSize = invSize !== 0 ? 1 / invSize : 0;
    }
    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
    return triangles;
  }
};
function linkedList(data, start, end, dim, clockwise) {
  let i2, last;
  if (clockwise === signedArea(data, start, end, dim) > 0) {
    for (i2 = start; i2 < end; i2 += dim)
      last = insertNode(i2, data[i2], data[i2 + 1], last);
  } else {
    for (i2 = end - dim; i2 >= start; i2 -= dim)
      last = insertNode(i2, data[i2], data[i2 + 1], last);
  }
  if (last && equals(last, last.next)) {
    removeNode(last);
    last = last.next;
  }
  return last;
}
function filterPoints(start, end) {
  if (!start)
    return start;
  if (!end)
    end = start;
  let p2 = start, again;
  do {
    again = false;
    if (!p2.steiner && (equals(p2, p2.next) || area(p2.prev, p2, p2.next) === 0)) {
      removeNode(p2);
      p2 = end = p2.prev;
      if (p2 === p2.next)
        break;
      again = true;
    } else {
      p2 = p2.next;
    }
  } while (again || p2 !== end);
  return end;
}
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
  if (!ear)
    return;
  if (!pass && invSize)
    indexCurve(ear, minX, minY, invSize);
  let stop = ear, prev, next;
  while (ear.prev !== ear.next) {
    prev = ear.prev;
    next = ear.next;
    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
      triangles.push(prev.i / dim);
      triangles.push(ear.i / dim);
      triangles.push(next.i / dim);
      removeNode(ear);
      ear = next.next;
      stop = next.next;
      continue;
    }
    ear = next;
    if (ear === stop) {
      if (!pass) {
        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
      } else if (pass === 1) {
        ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
      } else if (pass === 2) {
        splitEarcut(ear, triangles, dim, minX, minY, invSize);
      }
      break;
    }
  }
}
function isEar(ear) {
  const a2 = ear.prev, b2 = ear, c2 = ear.next;
  if (area(a2, b2, c2) >= 0)
    return false;
  let p2 = ear.next.next;
  while (p2 !== ear.prev) {
    if (pointInTriangle(a2.x, a2.y, b2.x, b2.y, c2.x, c2.y, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0)
      return false;
    p2 = p2.next;
  }
  return true;
}
function isEarHashed(ear, minX, minY, invSize) {
  const a2 = ear.prev, b2 = ear, c2 = ear.next;
  if (area(a2, b2, c2) >= 0)
    return false;
  const minTX = a2.x < b2.x ? a2.x < c2.x ? a2.x : c2.x : b2.x < c2.x ? b2.x : c2.x, minTY = a2.y < b2.y ? a2.y < c2.y ? a2.y : c2.y : b2.y < c2.y ? b2.y : c2.y, maxTX = a2.x > b2.x ? a2.x > c2.x ? a2.x : c2.x : b2.x > c2.x ? b2.x : c2.x, maxTY = a2.y > b2.y ? a2.y > c2.y ? a2.y : c2.y : b2.y > c2.y ? b2.y : c2.y;
  const minZ = zOrder(minTX, minTY, minX, minY, invSize), maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);
  let p2 = ear.prevZ, n2 = ear.nextZ;
  while (p2 && p2.z >= minZ && n2 && n2.z <= maxZ) {
    if (p2 !== ear.prev && p2 !== ear.next && pointInTriangle(a2.x, a2.y, b2.x, b2.y, c2.x, c2.y, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0)
      return false;
    p2 = p2.prevZ;
    if (n2 !== ear.prev && n2 !== ear.next && pointInTriangle(a2.x, a2.y, b2.x, b2.y, c2.x, c2.y, n2.x, n2.y) && area(n2.prev, n2, n2.next) >= 0)
      return false;
    n2 = n2.nextZ;
  }
  while (p2 && p2.z >= minZ) {
    if (p2 !== ear.prev && p2 !== ear.next && pointInTriangle(a2.x, a2.y, b2.x, b2.y, c2.x, c2.y, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0)
      return false;
    p2 = p2.prevZ;
  }
  while (n2 && n2.z <= maxZ) {
    if (n2 !== ear.prev && n2 !== ear.next && pointInTriangle(a2.x, a2.y, b2.x, b2.y, c2.x, c2.y, n2.x, n2.y) && area(n2.prev, n2, n2.next) >= 0)
      return false;
    n2 = n2.nextZ;
  }
  return true;
}
function cureLocalIntersections(start, triangles, dim) {
  let p2 = start;
  do {
    const a2 = p2.prev, b2 = p2.next.next;
    if (!equals(a2, b2) && intersects(a2, p2, p2.next, b2) && locallyInside(a2, b2) && locallyInside(b2, a2)) {
      triangles.push(a2.i / dim);
      triangles.push(p2.i / dim);
      triangles.push(b2.i / dim);
      removeNode(p2);
      removeNode(p2.next);
      p2 = start = b2;
    }
    p2 = p2.next;
  } while (p2 !== start);
  return filterPoints(p2);
}
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
  let a2 = start;
  do {
    let b2 = a2.next.next;
    while (b2 !== a2.prev) {
      if (a2.i !== b2.i && isValidDiagonal(a2, b2)) {
        let c2 = splitPolygon(a2, b2);
        a2 = filterPoints(a2, a2.next);
        c2 = filterPoints(c2, c2.next);
        earcutLinked(a2, triangles, dim, minX, minY, invSize);
        earcutLinked(c2, triangles, dim, minX, minY, invSize);
        return;
      }
      b2 = b2.next;
    }
    a2 = a2.next;
  } while (a2 !== start);
}
function eliminateHoles(data, holeIndices, outerNode, dim) {
  const queue2 = [];
  let i2, len, start, end, list;
  for (i2 = 0, len = holeIndices.length; i2 < len; i2++) {
    start = holeIndices[i2] * dim;
    end = i2 < len - 1 ? holeIndices[i2 + 1] * dim : data.length;
    list = linkedList(data, start, end, dim, false);
    if (list === list.next)
      list.steiner = true;
    queue2.push(getLeftmost(list));
  }
  queue2.sort(compareX);
  for (i2 = 0; i2 < queue2.length; i2++) {
    eliminateHole(queue2[i2], outerNode);
    outerNode = filterPoints(outerNode, outerNode.next);
  }
  return outerNode;
}
function compareX(a2, b2) {
  return a2.x - b2.x;
}
function eliminateHole(hole, outerNode) {
  outerNode = findHoleBridge(hole, outerNode);
  if (outerNode) {
    const b2 = splitPolygon(outerNode, hole);
    filterPoints(outerNode, outerNode.next);
    filterPoints(b2, b2.next);
  }
}
function findHoleBridge(hole, outerNode) {
  let p2 = outerNode;
  const hx = hole.x;
  const hy = hole.y;
  let qx = -Infinity, m2;
  do {
    if (hy <= p2.y && hy >= p2.next.y && p2.next.y !== p2.y) {
      const x2 = p2.x + (hy - p2.y) * (p2.next.x - p2.x) / (p2.next.y - p2.y);
      if (x2 <= hx && x2 > qx) {
        qx = x2;
        if (x2 === hx) {
          if (hy === p2.y)
            return p2;
          if (hy === p2.next.y)
            return p2.next;
        }
        m2 = p2.x < p2.next.x ? p2 : p2.next;
      }
    }
    p2 = p2.next;
  } while (p2 !== outerNode);
  if (!m2)
    return null;
  if (hx === qx)
    return m2;
  const stop = m2, mx = m2.x, my = m2.y;
  let tanMin = Infinity, tan;
  p2 = m2;
  do {
    if (hx >= p2.x && p2.x >= mx && hx !== p2.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p2.x, p2.y)) {
      tan = Math.abs(hy - p2.y) / (hx - p2.x);
      if (locallyInside(p2, hole) && (tan < tanMin || tan === tanMin && (p2.x > m2.x || p2.x === m2.x && sectorContainsSector(m2, p2)))) {
        m2 = p2;
        tanMin = tan;
      }
    }
    p2 = p2.next;
  } while (p2 !== stop);
  return m2;
}
function sectorContainsSector(m2, p2) {
  return area(m2.prev, m2, p2.prev) < 0 && area(p2.next, m2, m2.next) < 0;
}
function indexCurve(start, minX, minY, invSize) {
  let p2 = start;
  do {
    if (p2.z === null)
      p2.z = zOrder(p2.x, p2.y, minX, minY, invSize);
    p2.prevZ = p2.prev;
    p2.nextZ = p2.next;
    p2 = p2.next;
  } while (p2 !== start);
  p2.prevZ.nextZ = null;
  p2.prevZ = null;
  sortLinked(p2);
}
function sortLinked(list) {
  let i2, p2, q2, e2, tail, numMerges, pSize, qSize, inSize = 1;
  do {
    p2 = list;
    list = null;
    tail = null;
    numMerges = 0;
    while (p2) {
      numMerges++;
      q2 = p2;
      pSize = 0;
      for (i2 = 0; i2 < inSize; i2++) {
        pSize++;
        q2 = q2.nextZ;
        if (!q2)
          break;
      }
      qSize = inSize;
      while (pSize > 0 || qSize > 0 && q2) {
        if (pSize !== 0 && (qSize === 0 || !q2 || p2.z <= q2.z)) {
          e2 = p2;
          p2 = p2.nextZ;
          pSize--;
        } else {
          e2 = q2;
          q2 = q2.nextZ;
          qSize--;
        }
        if (tail)
          tail.nextZ = e2;
        else
          list = e2;
        e2.prevZ = tail;
        tail = e2;
      }
      p2 = q2;
    }
    tail.nextZ = null;
    inSize *= 2;
  } while (numMerges > 1);
  return list;
}
function zOrder(x2, y2, minX, minY, invSize) {
  x2 = 32767 * (x2 - minX) * invSize;
  y2 = 32767 * (y2 - minY) * invSize;
  x2 = (x2 | x2 << 8) & 16711935;
  x2 = (x2 | x2 << 4) & 252645135;
  x2 = (x2 | x2 << 2) & 858993459;
  x2 = (x2 | x2 << 1) & 1431655765;
  y2 = (y2 | y2 << 8) & 16711935;
  y2 = (y2 | y2 << 4) & 252645135;
  y2 = (y2 | y2 << 2) & 858993459;
  y2 = (y2 | y2 << 1) & 1431655765;
  return x2 | y2 << 1;
}
function getLeftmost(start) {
  let p2 = start, leftmost = start;
  do {
    if (p2.x < leftmost.x || p2.x === leftmost.x && p2.y < leftmost.y)
      leftmost = p2;
    p2 = p2.next;
  } while (p2 !== start);
  return leftmost;
}
function pointInTriangle(ax, ay, bx, by, cx, cy, px2, py2) {
  return (cx - px2) * (ay - py2) - (ax - px2) * (cy - py2) >= 0 && (ax - px2) * (by - py2) - (bx - px2) * (ay - py2) >= 0 && (bx - px2) * (cy - py2) - (cx - px2) * (by - py2) >= 0;
}
function isValidDiagonal(a2, b2) {
  return a2.next.i !== b2.i && a2.prev.i !== b2.i && !intersectsPolygon(a2, b2) && (locallyInside(a2, b2) && locallyInside(b2, a2) && middleInside(a2, b2) && (area(a2.prev, a2, b2.prev) || area(a2, b2.prev, b2)) || equals(a2, b2) && area(a2.prev, a2, a2.next) > 0 && area(b2.prev, b2, b2.next) > 0);
}
function area(p2, q2, r2) {
  return (q2.y - p2.y) * (r2.x - q2.x) - (q2.x - p2.x) * (r2.y - q2.y);
}
function equals(p1, p2) {
  return p1.x === p2.x && p1.y === p2.y;
}
function intersects(p1, q1, p2, q2) {
  const o1 = sign(area(p1, q1, p2));
  const o2 = sign(area(p1, q1, q2));
  const o3 = sign(area(p2, q2, p1));
  const o4 = sign(area(p2, q2, q1));
  if (o1 !== o2 && o3 !== o4)
    return true;
  if (o1 === 0 && onSegment(p1, p2, q1))
    return true;
  if (o2 === 0 && onSegment(p1, q2, q1))
    return true;
  if (o3 === 0 && onSegment(p2, p1, q2))
    return true;
  if (o4 === 0 && onSegment(p2, q1, q2))
    return true;
  return false;
}
function onSegment(p2, q2, r2) {
  return q2.x <= Math.max(p2.x, r2.x) && q2.x >= Math.min(p2.x, r2.x) && q2.y <= Math.max(p2.y, r2.y) && q2.y >= Math.min(p2.y, r2.y);
}
function sign(num) {
  return num > 0 ? 1 : num < 0 ? -1 : 0;
}
function intersectsPolygon(a2, b2) {
  let p2 = a2;
  do {
    if (p2.i !== a2.i && p2.next.i !== a2.i && p2.i !== b2.i && p2.next.i !== b2.i && intersects(p2, p2.next, a2, b2))
      return true;
    p2 = p2.next;
  } while (p2 !== a2);
  return false;
}
function locallyInside(a2, b2) {
  return area(a2.prev, a2, a2.next) < 0 ? area(a2, b2, a2.next) >= 0 && area(a2, a2.prev, b2) >= 0 : area(a2, b2, a2.prev) < 0 || area(a2, a2.next, b2) < 0;
}
function middleInside(a2, b2) {
  let p2 = a2, inside = false;
  const px2 = (a2.x + b2.x) / 2, py2 = (a2.y + b2.y) / 2;
  do {
    if (p2.y > py2 !== p2.next.y > py2 && p2.next.y !== p2.y && px2 < (p2.next.x - p2.x) * (py2 - p2.y) / (p2.next.y - p2.y) + p2.x)
      inside = !inside;
    p2 = p2.next;
  } while (p2 !== a2);
  return inside;
}
function splitPolygon(a2, b2) {
  const a22 = new Node$1(a2.i, a2.x, a2.y), b22 = new Node$1(b2.i, b2.x, b2.y), an2 = a2.next, bp = b2.prev;
  a2.next = b2;
  b2.prev = a2;
  a22.next = an2;
  an2.prev = a22;
  b22.next = a22;
  a22.prev = b22;
  bp.next = b22;
  b22.prev = bp;
  return b22;
}
function insertNode(i2, x2, y2, last) {
  const p2 = new Node$1(i2, x2, y2);
  if (!last) {
    p2.prev = p2;
    p2.next = p2;
  } else {
    p2.next = last.next;
    p2.prev = last;
    last.next.prev = p2;
    last.next = p2;
  }
  return p2;
}
function removeNode(p2) {
  p2.next.prev = p2.prev;
  p2.prev.next = p2.next;
  if (p2.prevZ)
    p2.prevZ.nextZ = p2.nextZ;
  if (p2.nextZ)
    p2.nextZ.prevZ = p2.prevZ;
}
function Node$1(i2, x2, y2) {
  this.i = i2;
  this.x = x2;
  this.y = y2;
  this.prev = null;
  this.next = null;
  this.z = null;
  this.prevZ = null;
  this.nextZ = null;
  this.steiner = false;
}
function signedArea(data, start, end, dim) {
  let sum = 0;
  for (let i2 = start, j2 = end - dim; i2 < end; i2 += dim) {
    sum += (data[j2] - data[i2]) * (data[i2 + 1] + data[j2 + 1]);
    j2 = i2;
  }
  return sum;
}
const ShapeUtils = {
  area: function(contour) {
    const n2 = contour.length;
    let a2 = 0;
    for (let p2 = n2 - 1, q2 = 0; q2 < n2; p2 = q2++) {
      a2 += contour[p2].x * contour[q2].y - contour[q2].x * contour[p2].y;
    }
    return a2 * 0.5;
  },
  isClockWise: function(pts) {
    return ShapeUtils.area(pts) < 0;
  },
  triangulateShape: function(contour, holes) {
    const vertices = [];
    const holeIndices = [];
    const faces = [];
    removeDupEndPts(contour);
    addContour(vertices, contour);
    let holeIndex = contour.length;
    holes.forEach(removeDupEndPts);
    for (let i2 = 0; i2 < holes.length; i2++) {
      holeIndices.push(holeIndex);
      holeIndex += holes[i2].length;
      addContour(vertices, holes[i2]);
    }
    const triangles = Earcut.triangulate(vertices, holeIndices);
    for (let i2 = 0; i2 < triangles.length; i2 += 3) {
      faces.push(triangles.slice(i2, i2 + 3));
    }
    return faces;
  }
};
function removeDupEndPts(points) {
  const l2 = points.length;
  if (l2 > 2 && points[l2 - 1].equals(points[0])) {
    points.pop();
  }
}
function addContour(vertices, contour) {
  for (let i2 = 0; i2 < contour.length; i2++) {
    vertices.push(contour[i2].x);
    vertices.push(contour[i2].y);
  }
}
class ExtrudeBufferGeometry extends BufferGeometry {
  constructor(shapes, options) {
    super();
    this.type = "ExtrudeBufferGeometry";
    this.parameters = {
      shapes,
      options
    };
    shapes = Array.isArray(shapes) ? shapes : [shapes];
    const scope = this;
    const verticesArray = [];
    const uvArray = [];
    for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
      const shape = shapes[i2];
      addShape(shape);
    }
    this.setAttribute("position", new Float32BufferAttribute(verticesArray, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvArray, 2));
    this.computeVertexNormals();
    function addShape(shape) {
      const placeholder = [];
      const curveSegments = options.curveSegments !== void 0 ? options.curveSegments : 12;
      const steps = options.steps !== void 0 ? options.steps : 1;
      let depth = options.depth !== void 0 ? options.depth : 100;
      let bevelEnabled = options.bevelEnabled !== void 0 ? options.bevelEnabled : true;
      let bevelThickness = options.bevelThickness !== void 0 ? options.bevelThickness : 6;
      let bevelSize = options.bevelSize !== void 0 ? options.bevelSize : bevelThickness - 2;
      let bevelOffset = options.bevelOffset !== void 0 ? options.bevelOffset : 0;
      let bevelSegments = options.bevelSegments !== void 0 ? options.bevelSegments : 3;
      const extrudePath = options.extrudePath;
      const uvgen = options.UVGenerator !== void 0 ? options.UVGenerator : WorldUVGenerator;
      if (options.amount !== void 0) {
        console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth.");
        depth = options.amount;
      }
      let extrudePts, extrudeByPath = false;
      let splineTube, binormal, normal, position2;
      if (extrudePath) {
        extrudePts = extrudePath.getSpacedPoints(steps);
        extrudeByPath = true;
        bevelEnabled = false;
        splineTube = extrudePath.computeFrenetFrames(steps, false);
        binormal = new Vector3();
        normal = new Vector3();
        position2 = new Vector3();
      }
      if (!bevelEnabled) {
        bevelSegments = 0;
        bevelThickness = 0;
        bevelSize = 0;
        bevelOffset = 0;
      }
      const shapePoints = shape.extractPoints(curveSegments);
      let vertices = shapePoints.shape;
      const holes = shapePoints.holes;
      const reverse = !ShapeUtils.isClockWise(vertices);
      if (reverse) {
        vertices = vertices.reverse();
        for (let h = 0, hl = holes.length; h < hl; h++) {
          const ahole = holes[h];
          if (ShapeUtils.isClockWise(ahole)) {
            holes[h] = ahole.reverse();
          }
        }
      }
      const faces = ShapeUtils.triangulateShape(vertices, holes);
      const contour = vertices;
      for (let h = 0, hl = holes.length; h < hl; h++) {
        const ahole = holes[h];
        vertices = vertices.concat(ahole);
      }
      function scalePt2(pt2, vec, size2) {
        if (!vec)
          console.error("THREE.ExtrudeGeometry: vec does not exist");
        return vec.clone().multiplyScalar(size2).add(pt2);
      }
      const vlen = vertices.length, flen = faces.length;
      function getBevelVec(inPt, inPrev, inNext) {
        let v_trans_x, v_trans_y, shrink_by;
        const v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
        const v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
        const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
        const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
        if (Math.abs(collinear0) > Number.EPSILON) {
          const v_prev_len = Math.sqrt(v_prev_lensq);
          const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
          const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
          const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
          const ptNextShift_x = inNext.x - v_next_y / v_next_len;
          const ptNextShift_y = inNext.y + v_next_x / v_next_len;
          const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
          v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
          v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
          const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
          if (v_trans_lensq <= 2) {
            return new Vector2(v_trans_x, v_trans_y);
          } else {
            shrink_by = Math.sqrt(v_trans_lensq / 2);
          }
        } else {
          let direction_eq = false;
          if (v_prev_x > Number.EPSILON) {
            if (v_next_x > Number.EPSILON) {
              direction_eq = true;
            }
          } else {
            if (v_prev_x < -Number.EPSILON) {
              if (v_next_x < -Number.EPSILON) {
                direction_eq = true;
              }
            } else {
              if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {
                direction_eq = true;
              }
            }
          }
          if (direction_eq) {
            v_trans_x = -v_prev_y;
            v_trans_y = v_prev_x;
            shrink_by = Math.sqrt(v_prev_lensq);
          } else {
            v_trans_x = v_prev_x;
            v_trans_y = v_prev_y;
            shrink_by = Math.sqrt(v_prev_lensq / 2);
          }
        }
        return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
      }
      const contourMovements = [];
      for (let i2 = 0, il = contour.length, j2 = il - 1, k2 = i2 + 1; i2 < il; i2++, j2++, k2++) {
        if (j2 === il)
          j2 = 0;
        if (k2 === il)
          k2 = 0;
        contourMovements[i2] = getBevelVec(contour[i2], contour[j2], contour[k2]);
      }
      const holesMovements = [];
      let oneHoleMovements, verticesMovements = contourMovements.concat();
      for (let h = 0, hl = holes.length; h < hl; h++) {
        const ahole = holes[h];
        oneHoleMovements = [];
        for (let i2 = 0, il = ahole.length, j2 = il - 1, k2 = i2 + 1; i2 < il; i2++, j2++, k2++) {
          if (j2 === il)
            j2 = 0;
          if (k2 === il)
            k2 = 0;
          oneHoleMovements[i2] = getBevelVec(ahole[i2], ahole[j2], ahole[k2]);
        }
        holesMovements.push(oneHoleMovements);
        verticesMovements = verticesMovements.concat(oneHoleMovements);
      }
      for (let b2 = 0; b2 < bevelSegments; b2++) {
        const t3 = b2 / bevelSegments;
        const z2 = bevelThickness * Math.cos(t3 * Math.PI / 2);
        const bs3 = bevelSize * Math.sin(t3 * Math.PI / 2) + bevelOffset;
        for (let i2 = 0, il = contour.length; i2 < il; i2++) {
          const vert = scalePt2(contour[i2], contourMovements[i2], bs3);
          v2(vert.x, vert.y, -z2);
        }
        for (let h = 0, hl = holes.length; h < hl; h++) {
          const ahole = holes[h];
          oneHoleMovements = holesMovements[h];
          for (let i2 = 0, il = ahole.length; i2 < il; i2++) {
            const vert = scalePt2(ahole[i2], oneHoleMovements[i2], bs3);
            v2(vert.x, vert.y, -z2);
          }
        }
      }
      const bs2 = bevelSize + bevelOffset;
      for (let i2 = 0; i2 < vlen; i2++) {
        const vert = bevelEnabled ? scalePt2(vertices[i2], verticesMovements[i2], bs2) : vertices[i2];
        if (!extrudeByPath) {
          v2(vert.x, vert.y, 0);
        } else {
          normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
          binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
          position2.copy(extrudePts[0]).add(normal).add(binormal);
          v2(position2.x, position2.y, position2.z);
        }
      }
      for (let s2 = 1; s2 <= steps; s2++) {
        for (let i2 = 0; i2 < vlen; i2++) {
          const vert = bevelEnabled ? scalePt2(vertices[i2], verticesMovements[i2], bs2) : vertices[i2];
          if (!extrudeByPath) {
            v2(vert.x, vert.y, depth / steps * s2);
          } else {
            normal.copy(splineTube.normals[s2]).multiplyScalar(vert.x);
            binormal.copy(splineTube.binormals[s2]).multiplyScalar(vert.y);
            position2.copy(extrudePts[s2]).add(normal).add(binormal);
            v2(position2.x, position2.y, position2.z);
          }
        }
      }
      for (let b2 = bevelSegments - 1; b2 >= 0; b2--) {
        const t3 = b2 / bevelSegments;
        const z2 = bevelThickness * Math.cos(t3 * Math.PI / 2);
        const bs3 = bevelSize * Math.sin(t3 * Math.PI / 2) + bevelOffset;
        for (let i2 = 0, il = contour.length; i2 < il; i2++) {
          const vert = scalePt2(contour[i2], contourMovements[i2], bs3);
          v2(vert.x, vert.y, depth + z2);
        }
        for (let h = 0, hl = holes.length; h < hl; h++) {
          const ahole = holes[h];
          oneHoleMovements = holesMovements[h];
          for (let i2 = 0, il = ahole.length; i2 < il; i2++) {
            const vert = scalePt2(ahole[i2], oneHoleMovements[i2], bs3);
            if (!extrudeByPath) {
              v2(vert.x, vert.y, depth + z2);
            } else {
              v2(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z2);
            }
          }
        }
      }
      buildLidFaces();
      buildSideFaces();
      function buildLidFaces() {
        const start = verticesArray.length / 3;
        if (bevelEnabled) {
          let layer = 0;
          let offset = vlen * layer;
          for (let i2 = 0; i2 < flen; i2++) {
            const face = faces[i2];
            f3(face[2] + offset, face[1] + offset, face[0] + offset);
          }
          layer = steps + bevelSegments * 2;
          offset = vlen * layer;
          for (let i2 = 0; i2 < flen; i2++) {
            const face = faces[i2];
            f3(face[0] + offset, face[1] + offset, face[2] + offset);
          }
        } else {
          for (let i2 = 0; i2 < flen; i2++) {
            const face = faces[i2];
            f3(face[2], face[1], face[0]);
          }
          for (let i2 = 0; i2 < flen; i2++) {
            const face = faces[i2];
            f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
          }
        }
        scope.addGroup(start, verticesArray.length / 3 - start, 0);
      }
      function buildSideFaces() {
        const start = verticesArray.length / 3;
        let layeroffset = 0;
        sidewalls(contour, layeroffset);
        layeroffset += contour.length;
        for (let h = 0, hl = holes.length; h < hl; h++) {
          const ahole = holes[h];
          sidewalls(ahole, layeroffset);
          layeroffset += ahole.length;
        }
        scope.addGroup(start, verticesArray.length / 3 - start, 1);
      }
      function sidewalls(contour2, layeroffset) {
        let i2 = contour2.length;
        while (--i2 >= 0) {
          const j2 = i2;
          let k2 = i2 - 1;
          if (k2 < 0)
            k2 = contour2.length - 1;
          for (let s2 = 0, sl = steps + bevelSegments * 2; s2 < sl; s2++) {
            const slen1 = vlen * s2;
            const slen2 = vlen * (s2 + 1);
            const a2 = layeroffset + j2 + slen1, b2 = layeroffset + k2 + slen1, c2 = layeroffset + k2 + slen2, d = layeroffset + j2 + slen2;
            f4(a2, b2, c2, d);
          }
        }
      }
      function v2(x2, y2, z2) {
        placeholder.push(x2);
        placeholder.push(y2);
        placeholder.push(z2);
      }
      function f3(a2, b2, c2) {
        addVertex(a2);
        addVertex(b2);
        addVertex(c2);
        const nextIndex = verticesArray.length / 3;
        const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
        addUV(uvs[0]);
        addUV(uvs[1]);
        addUV(uvs[2]);
      }
      function f4(a2, b2, c2, d) {
        addVertex(a2);
        addVertex(b2);
        addVertex(d);
        addVertex(b2);
        addVertex(c2);
        addVertex(d);
        const nextIndex = verticesArray.length / 3;
        const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
        addUV(uvs[0]);
        addUV(uvs[1]);
        addUV(uvs[3]);
        addUV(uvs[1]);
        addUV(uvs[2]);
        addUV(uvs[3]);
      }
      function addVertex(index) {
        verticesArray.push(placeholder[index * 3 + 0]);
        verticesArray.push(placeholder[index * 3 + 1]);
        verticesArray.push(placeholder[index * 3 + 2]);
      }
      function addUV(vector2) {
        uvArray.push(vector2.x);
        uvArray.push(vector2.y);
      }
    }
  }
  toJSON() {
    const data = BufferGeometry.prototype.toJSON.call(this);
    const shapes = this.parameters.shapes;
    const options = this.parameters.options;
    return toJSON(shapes, options, data);
  }
}
const WorldUVGenerator = {
  generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
    const a_x = vertices[indexA * 3];
    const a_y = vertices[indexA * 3 + 1];
    const b_x = vertices[indexB * 3];
    const b_y = vertices[indexB * 3 + 1];
    const c_x = vertices[indexC * 3];
    const c_y = vertices[indexC * 3 + 1];
    return [
      new Vector2(a_x, a_y),
      new Vector2(b_x, b_y),
      new Vector2(c_x, c_y)
    ];
  },
  generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
    const a_x = vertices[indexA * 3];
    const a_y = vertices[indexA * 3 + 1];
    const a_z = vertices[indexA * 3 + 2];
    const b_x = vertices[indexB * 3];
    const b_y = vertices[indexB * 3 + 1];
    const b_z = vertices[indexB * 3 + 2];
    const c_x = vertices[indexC * 3];
    const c_y = vertices[indexC * 3 + 1];
    const c_z = vertices[indexC * 3 + 2];
    const d_x = vertices[indexD * 3];
    const d_y = vertices[indexD * 3 + 1];
    const d_z = vertices[indexD * 3 + 2];
    if (Math.abs(a_y - b_y) < 0.01) {
      return [
        new Vector2(a_x, 1 - a_z),
        new Vector2(b_x, 1 - b_z),
        new Vector2(c_x, 1 - c_z),
        new Vector2(d_x, 1 - d_z)
      ];
    } else {
      return [
        new Vector2(a_y, 1 - a_z),
        new Vector2(b_y, 1 - b_z),
        new Vector2(c_y, 1 - c_z),
        new Vector2(d_y, 1 - d_z)
      ];
    }
  }
};
function toJSON(shapes, options, data) {
  data.shapes = [];
  if (Array.isArray(shapes)) {
    for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
      const shape = shapes[i2];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }
  if (options.extrudePath !== void 0)
    data.options.extrudePath = options.extrudePath.toJSON();
  return data;
}
class ExtrudeGeometry extends Geometry {
  constructor(shapes, options) {
    super();
    this.type = "ExtrudeGeometry";
    this.parameters = {
      shapes,
      options
    };
    this.fromBufferGeometry(new ExtrudeBufferGeometry(shapes, options));
    this.mergeVertices();
  }
  toJSON() {
    const data = super.toJSON();
    const shapes = this.parameters.shapes;
    const options = this.parameters.options;
    return toJSON$1(shapes, options, data);
  }
}
function toJSON$1(shapes, options, data) {
  data.shapes = [];
  if (Array.isArray(shapes)) {
    for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
      const shape = shapes[i2];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }
  if (options.extrudePath !== void 0)
    data.options.extrudePath = options.extrudePath.toJSON();
  return data;
}
class IcosahedronBufferGeometry extends PolyhedronBufferGeometry {
  constructor(radius, detail) {
    const t3 = (1 + Math.sqrt(5)) / 2;
    const vertices = [
      -1,
      t3,
      0,
      1,
      t3,
      0,
      -1,
      -t3,
      0,
      1,
      -t3,
      0,
      0,
      -1,
      t3,
      0,
      1,
      t3,
      0,
      -1,
      -t3,
      0,
      1,
      -t3,
      t3,
      0,
      -1,
      t3,
      0,
      1,
      -t3,
      0,
      -1,
      -t3,
      0,
      1
    ];
    const indices = [
      0,
      11,
      5,
      0,
      5,
      1,
      0,
      1,
      7,
      0,
      7,
      10,
      0,
      10,
      11,
      1,
      5,
      9,
      5,
      11,
      4,
      11,
      10,
      2,
      10,
      7,
      6,
      7,
      1,
      8,
      3,
      9,
      4,
      3,
      4,
      2,
      3,
      2,
      6,
      3,
      6,
      8,
      3,
      8,
      9,
      4,
      9,
      5,
      2,
      4,
      11,
      6,
      2,
      10,
      8,
      6,
      7,
      9,
      8,
      1
    ];
    super(vertices, indices, radius, detail);
    this.type = "IcosahedronBufferGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
}
class IcosahedronGeometry extends Geometry {
  constructor(radius, detail) {
    super();
    this.type = "IcosahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
    this.fromBufferGeometry(new IcosahedronBufferGeometry(radius, detail));
    this.mergeVertices();
  }
}
class LatheBufferGeometry extends BufferGeometry {
  constructor(points, segments, phiStart, phiLength) {
    super();
    this.type = "LatheBufferGeometry";
    this.parameters = {
      points,
      segments,
      phiStart,
      phiLength
    };
    segments = Math.floor(segments) || 12;
    phiStart = phiStart || 0;
    phiLength = phiLength || Math.PI * 2;
    phiLength = MathUtils.clamp(phiLength, 0, Math.PI * 2);
    const indices = [];
    const vertices = [];
    const uvs = [];
    const inverseSegments = 1 / segments;
    const vertex = new Vector3();
    const uv = new Vector2();
    for (let i2 = 0; i2 <= segments; i2++) {
      const phi = phiStart + i2 * inverseSegments * phiLength;
      const sin = Math.sin(phi);
      const cos = Math.cos(phi);
      for (let j2 = 0; j2 <= points.length - 1; j2++) {
        vertex.x = points[j2].x * sin;
        vertex.y = points[j2].y;
        vertex.z = points[j2].x * cos;
        vertices.push(vertex.x, vertex.y, vertex.z);
        uv.x = i2 / segments;
        uv.y = j2 / (points.length - 1);
        uvs.push(uv.x, uv.y);
      }
    }
    for (let i2 = 0; i2 < segments; i2++) {
      for (let j2 = 0; j2 < points.length - 1; j2++) {
        const base = j2 + i2 * points.length;
        const a2 = base;
        const b2 = base + points.length;
        const c2 = base + points.length + 1;
        const d = base + 1;
        indices.push(a2, b2, d);
        indices.push(b2, c2, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    this.computeVertexNormals();
    if (phiLength === Math.PI * 2) {
      const normals = this.attributes.normal.array;
      const n1 = new Vector3();
      const n2 = new Vector3();
      const n3 = new Vector3();
      const base = segments * points.length * 3;
      for (let i2 = 0, j2 = 0; i2 < points.length; i2++, j2 += 3) {
        n1.x = normals[j2 + 0];
        n1.y = normals[j2 + 1];
        n1.z = normals[j2 + 2];
        n2.x = normals[base + j2 + 0];
        n2.y = normals[base + j2 + 1];
        n2.z = normals[base + j2 + 2];
        n3.addVectors(n1, n2).normalize();
        normals[j2 + 0] = normals[base + j2 + 0] = n3.x;
        normals[j2 + 1] = normals[base + j2 + 1] = n3.y;
        normals[j2 + 2] = normals[base + j2 + 2] = n3.z;
      }
    }
  }
}
class LatheGeometry extends Geometry {
  constructor(points, segments, phiStart, phiLength) {
    super();
    this.type = "LatheGeometry";
    this.parameters = {
      points,
      segments,
      phiStart,
      phiLength
    };
    this.fromBufferGeometry(new LatheBufferGeometry(points, segments, phiStart, phiLength));
    this.mergeVertices();
  }
}
class OctahedronBufferGeometry extends PolyhedronBufferGeometry {
  constructor(radius, detail) {
    const vertices = [
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1
    ];
    const indices = [
      0,
      2,
      4,
      0,
      4,
      3,
      0,
      3,
      5,
      0,
      5,
      2,
      1,
      2,
      5,
      1,
      5,
      3,
      1,
      3,
      4,
      1,
      4,
      2
    ];
    super(vertices, indices, radius, detail);
    this.type = "OctahedronBufferGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
}
class OctahedronGeometry extends Geometry {
  constructor(radius, detail) {
    super();
    this.type = "OctahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
    this.fromBufferGeometry(new OctahedronBufferGeometry(radius, detail));
    this.mergeVertices();
  }
}
function ParametricBufferGeometry(func, slices, stacks) {
  BufferGeometry.call(this);
  this.type = "ParametricBufferGeometry";
  this.parameters = {
    func,
    slices,
    stacks
  };
  const indices = [];
  const vertices = [];
  const normals = [];
  const uvs = [];
  const EPS = 1e-5;
  const normal = new Vector3();
  const p0 = new Vector3(), p1 = new Vector3();
  const pu2 = new Vector3(), pv = new Vector3();
  if (func.length < 3) {
    console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");
  }
  const sliceCount = slices + 1;
  for (let i2 = 0; i2 <= stacks; i2++) {
    const v2 = i2 / stacks;
    for (let j2 = 0; j2 <= slices; j2++) {
      const u2 = j2 / slices;
      func(u2, v2, p0);
      vertices.push(p0.x, p0.y, p0.z);
      if (u2 - EPS >= 0) {
        func(u2 - EPS, v2, p1);
        pu2.subVectors(p0, p1);
      } else {
        func(u2 + EPS, v2, p1);
        pu2.subVectors(p1, p0);
      }
      if (v2 - EPS >= 0) {
        func(u2, v2 - EPS, p1);
        pv.subVectors(p0, p1);
      } else {
        func(u2, v2 + EPS, p1);
        pv.subVectors(p1, p0);
      }
      normal.crossVectors(pu2, pv).normalize();
      normals.push(normal.x, normal.y, normal.z);
      uvs.push(u2, v2);
    }
  }
  for (let i2 = 0; i2 < stacks; i2++) {
    for (let j2 = 0; j2 < slices; j2++) {
      const a2 = i2 * sliceCount + j2;
      const b2 = i2 * sliceCount + j2 + 1;
      const c2 = (i2 + 1) * sliceCount + j2 + 1;
      const d = (i2 + 1) * sliceCount + j2;
      indices.push(a2, b2, d);
      indices.push(b2, c2, d);
    }
  }
  this.setIndex(indices);
  this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
  this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
  this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
}
ParametricBufferGeometry.prototype = Object.create(BufferGeometry.prototype);
ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;
function ParametricGeometry(func, slices, stacks) {
  Geometry.call(this);
  this.type = "ParametricGeometry";
  this.parameters = {
    func,
    slices,
    stacks
  };
  this.fromBufferGeometry(new ParametricBufferGeometry(func, slices, stacks));
  this.mergeVertices();
}
ParametricGeometry.prototype = Object.create(Geometry.prototype);
ParametricGeometry.prototype.constructor = ParametricGeometry;
class PlaneGeometry extends Geometry {
  constructor(width, height, widthSegments, heightSegments) {
    super();
    this.type = "PlaneGeometry";
    this.parameters = {
      width,
      height,
      widthSegments,
      heightSegments
    };
    this.fromBufferGeometry(new PlaneBufferGeometry(width, height, widthSegments, heightSegments));
    this.mergeVertices();
  }
}
class PolyhedronGeometry extends Geometry {
  constructor(vertices, indices, radius, detail) {
    super();
    this.type = "PolyhedronGeometry";
    this.parameters = {
      vertices,
      indices,
      radius,
      detail
    };
    this.fromBufferGeometry(new PolyhedronBufferGeometry(vertices, indices, radius, detail));
    this.mergeVertices();
  }
}
class RingBufferGeometry extends BufferGeometry {
  constructor(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {
    super();
    this.type = "RingBufferGeometry";
    this.parameters = {
      innerRadius,
      outerRadius,
      thetaSegments,
      phiSegments,
      thetaStart,
      thetaLength
    };
    innerRadius = innerRadius || 0.5;
    outerRadius = outerRadius || 1;
    thetaStart = thetaStart !== void 0 ? thetaStart : 0;
    thetaLength = thetaLength !== void 0 ? thetaLength : Math.PI * 2;
    thetaSegments = thetaSegments !== void 0 ? Math.max(3, thetaSegments) : 8;
    phiSegments = phiSegments !== void 0 ? Math.max(1, phiSegments) : 1;
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let radius = innerRadius;
    const radiusStep = (outerRadius - innerRadius) / phiSegments;
    const vertex = new Vector3();
    const uv = new Vector2();
    for (let j2 = 0; j2 <= phiSegments; j2++) {
      for (let i2 = 0; i2 <= thetaSegments; i2++) {
        const segment = thetaStart + i2 / thetaSegments * thetaLength;
        vertex.x = radius * Math.cos(segment);
        vertex.y = radius * Math.sin(segment);
        vertices.push(vertex.x, vertex.y, vertex.z);
        normals.push(0, 0, 1);
        uv.x = (vertex.x / outerRadius + 1) / 2;
        uv.y = (vertex.y / outerRadius + 1) / 2;
        uvs.push(uv.x, uv.y);
      }
      radius += radiusStep;
    }
    for (let j2 = 0; j2 < phiSegments; j2++) {
      const thetaSegmentLevel = j2 * (thetaSegments + 1);
      for (let i2 = 0; i2 < thetaSegments; i2++) {
        const segment = i2 + thetaSegmentLevel;
        const a2 = segment;
        const b2 = segment + thetaSegments + 1;
        const c2 = segment + thetaSegments + 2;
        const d = segment + 1;
        indices.push(a2, b2, d);
        indices.push(b2, c2, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
}
class RingGeometry extends Geometry {
  constructor(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {
    super();
    this.type = "RingGeometry";
    this.parameters = {
      innerRadius,
      outerRadius,
      thetaSegments,
      phiSegments,
      thetaStart,
      thetaLength
    };
    this.fromBufferGeometry(new RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength));
    this.mergeVertices();
  }
}
class ShapeBufferGeometry extends BufferGeometry {
  constructor(shapes, curveSegments) {
    super();
    this.type = "ShapeBufferGeometry";
    this.parameters = {
      shapes,
      curveSegments
    };
    curveSegments = curveSegments || 12;
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let groupStart = 0;
    let groupCount = 0;
    if (Array.isArray(shapes) === false) {
      addShape(shapes);
    } else {
      for (let i2 = 0; i2 < shapes.length; i2++) {
        addShape(shapes[i2]);
        this.addGroup(groupStart, groupCount, i2);
        groupStart += groupCount;
        groupCount = 0;
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function addShape(shape) {
      const indexOffset = vertices.length / 3;
      const points = shape.extractPoints(curveSegments);
      let shapeVertices = points.shape;
      const shapeHoles = points.holes;
      if (ShapeUtils.isClockWise(shapeVertices) === false) {
        shapeVertices = shapeVertices.reverse();
      }
      for (let i2 = 0, l2 = shapeHoles.length; i2 < l2; i2++) {
        const shapeHole = shapeHoles[i2];
        if (ShapeUtils.isClockWise(shapeHole) === true) {
          shapeHoles[i2] = shapeHole.reverse();
        }
      }
      const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);
      for (let i2 = 0, l2 = shapeHoles.length; i2 < l2; i2++) {
        const shapeHole = shapeHoles[i2];
        shapeVertices = shapeVertices.concat(shapeHole);
      }
      for (let i2 = 0, l2 = shapeVertices.length; i2 < l2; i2++) {
        const vertex = shapeVertices[i2];
        vertices.push(vertex.x, vertex.y, 0);
        normals.push(0, 0, 1);
        uvs.push(vertex.x, vertex.y);
      }
      for (let i2 = 0, l2 = faces.length; i2 < l2; i2++) {
        const face = faces[i2];
        const a2 = face[0] + indexOffset;
        const b2 = face[1] + indexOffset;
        const c2 = face[2] + indexOffset;
        indices.push(a2, b2, c2);
        groupCount += 3;
      }
    }
  }
  toJSON() {
    const data = BufferGeometry.prototype.toJSON.call(this);
    const shapes = this.parameters.shapes;
    return toJSON$2(shapes, data);
  }
}
function toJSON$2(shapes, data) {
  data.shapes = [];
  if (Array.isArray(shapes)) {
    for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
      const shape = shapes[i2];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }
  return data;
}
class ShapeGeometry extends Geometry {
  constructor(shapes, curveSegments) {
    super();
    this.type = "ShapeGeometry";
    if (typeof curveSegments === "object") {
      console.warn("THREE.ShapeGeometry: Options parameter has been removed.");
      curveSegments = curveSegments.curveSegments;
    }
    this.parameters = {
      shapes,
      curveSegments
    };
    this.fromBufferGeometry(new ShapeBufferGeometry(shapes, curveSegments));
    this.mergeVertices();
  }
  toJSON() {
    const data = Geometry.prototype.toJSON.call(this);
    const shapes = this.parameters.shapes;
    return toJSON$3(shapes, data);
  }
}
function toJSON$3(shapes, data) {
  data.shapes = [];
  if (Array.isArray(shapes)) {
    for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
      const shape = shapes[i2];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }
  return data;
}
class SphereBufferGeometry extends BufferGeometry {
  constructor(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
    super();
    this.type = "SphereBufferGeometry";
    this.parameters = {
      radius,
      widthSegments,
      heightSegments,
      phiStart,
      phiLength,
      thetaStart,
      thetaLength
    };
    radius = radius || 1;
    widthSegments = Math.max(3, Math.floor(widthSegments) || 8);
    heightSegments = Math.max(2, Math.floor(heightSegments) || 6);
    phiStart = phiStart !== void 0 ? phiStart : 0;
    phiLength = phiLength !== void 0 ? phiLength : Math.PI * 2;
    thetaStart = thetaStart !== void 0 ? thetaStart : 0;
    thetaLength = thetaLength !== void 0 ? thetaLength : Math.PI;
    const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
    let index = 0;
    const grid = [];
    const vertex = new Vector3();
    const normal = new Vector3();
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    for (let iy = 0; iy <= heightSegments; iy++) {
      const verticesRow = [];
      const v2 = iy / heightSegments;
      let uOffset = 0;
      if (iy == 0 && thetaStart == 0) {
        uOffset = 0.5 / widthSegments;
      } else if (iy == heightSegments && thetaEnd == Math.PI) {
        uOffset = -0.5 / widthSegments;
      }
      for (let ix = 0; ix <= widthSegments; ix++) {
        const u2 = ix / widthSegments;
        vertex.x = -radius * Math.cos(phiStart + u2 * phiLength) * Math.sin(thetaStart + v2 * thetaLength);
        vertex.y = radius * Math.cos(thetaStart + v2 * thetaLength);
        vertex.z = radius * Math.sin(phiStart + u2 * phiLength) * Math.sin(thetaStart + v2 * thetaLength);
        vertices.push(vertex.x, vertex.y, vertex.z);
        normal.copy(vertex).normalize();
        normals.push(normal.x, normal.y, normal.z);
        uvs.push(u2 + uOffset, 1 - v2);
        verticesRow.push(index++);
      }
      grid.push(verticesRow);
    }
    for (let iy = 0; iy < heightSegments; iy++) {
      for (let ix = 0; ix < widthSegments; ix++) {
        const a2 = grid[iy][ix + 1];
        const b2 = grid[iy][ix];
        const c2 = grid[iy + 1][ix];
        const d = grid[iy + 1][ix + 1];
        if (iy !== 0 || thetaStart > 0)
          indices.push(a2, b2, d);
        if (iy !== heightSegments - 1 || thetaEnd < Math.PI)
          indices.push(b2, c2, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
}
class SphereGeometry extends Geometry {
  constructor(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
    super();
    this.type = "SphereGeometry";
    this.parameters = {
      radius,
      widthSegments,
      heightSegments,
      phiStart,
      phiLength,
      thetaStart,
      thetaLength
    };
    this.fromBufferGeometry(new SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength));
    this.mergeVertices();
  }
}
class TetrahedronBufferGeometry extends PolyhedronBufferGeometry {
  constructor(radius, detail) {
    const vertices = [
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      1,
      -1,
      -1
    ];
    const indices = [
      2,
      1,
      0,
      0,
      3,
      2,
      1,
      3,
      0,
      2,
      3,
      1
    ];
    super(vertices, indices, radius, detail);
    this.type = "TetrahedronBufferGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
}
class TetrahedronGeometry extends Geometry {
  constructor(radius, detail) {
    super();
    this.type = "TetrahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
    this.fromBufferGeometry(new TetrahedronBufferGeometry(radius, detail));
    this.mergeVertices();
  }
}
class TextBufferGeometry extends ExtrudeBufferGeometry {
  constructor(text, parameters) {
    parameters = parameters || {};
    const font = parameters.font;
    if (!(font && font.isFont)) {
      console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font.");
      return new BufferGeometry();
    }
    const shapes = font.generateShapes(text, parameters.size);
    parameters.depth = parameters.height !== void 0 ? parameters.height : 50;
    if (parameters.bevelThickness === void 0)
      parameters.bevelThickness = 10;
    if (parameters.bevelSize === void 0)
      parameters.bevelSize = 8;
    if (parameters.bevelEnabled === void 0)
      parameters.bevelEnabled = false;
    super(shapes, parameters);
    this.type = "TextBufferGeometry";
  }
}
class TextGeometry extends Geometry {
  constructor(text, parameters) {
    super();
    this.type = "TextGeometry";
    this.parameters = {
      text,
      parameters
    };
    this.fromBufferGeometry(new TextBufferGeometry(text, parameters));
    this.mergeVertices();
  }
}
class TorusBufferGeometry extends BufferGeometry {
  constructor(radius, tube, radialSegments, tubularSegments, arc) {
    super();
    this.type = "TorusBufferGeometry";
    this.parameters = {
      radius,
      tube,
      radialSegments,
      tubularSegments,
      arc
    };
    radius = radius || 1;
    tube = tube || 0.4;
    radialSegments = Math.floor(radialSegments) || 8;
    tubularSegments = Math.floor(tubularSegments) || 6;
    arc = arc || Math.PI * 2;
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    const center = new Vector3();
    const vertex = new Vector3();
    const normal = new Vector3();
    for (let j2 = 0; j2 <= radialSegments; j2++) {
      for (let i2 = 0; i2 <= tubularSegments; i2++) {
        const u2 = i2 / tubularSegments * arc;
        const v2 = j2 / radialSegments * Math.PI * 2;
        vertex.x = (radius + tube * Math.cos(v2)) * Math.cos(u2);
        vertex.y = (radius + tube * Math.cos(v2)) * Math.sin(u2);
        vertex.z = tube * Math.sin(v2);
        vertices.push(vertex.x, vertex.y, vertex.z);
        center.x = radius * Math.cos(u2);
        center.y = radius * Math.sin(u2);
        normal.subVectors(vertex, center).normalize();
        normals.push(normal.x, normal.y, normal.z);
        uvs.push(i2 / tubularSegments);
        uvs.push(j2 / radialSegments);
      }
    }
    for (let j2 = 1; j2 <= radialSegments; j2++) {
      for (let i2 = 1; i2 <= tubularSegments; i2++) {
        const a2 = (tubularSegments + 1) * j2 + i2 - 1;
        const b2 = (tubularSegments + 1) * (j2 - 1) + i2 - 1;
        const c2 = (tubularSegments + 1) * (j2 - 1) + i2;
        const d = (tubularSegments + 1) * j2 + i2;
        indices.push(a2, b2, d);
        indices.push(b2, c2, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
}
class TorusGeometry extends Geometry {
  constructor(radius, tube, radialSegments, tubularSegments, arc) {
    super();
    this.type = "TorusGeometry";
    this.parameters = {
      radius,
      tube,
      radialSegments,
      tubularSegments,
      arc
    };
    this.fromBufferGeometry(new TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc));
    this.mergeVertices();
  }
}
class TorusKnotBufferGeometry extends BufferGeometry {
  constructor(radius, tube, tubularSegments, radialSegments, p2, q2) {
    super();
    this.type = "TorusKnotBufferGeometry";
    this.parameters = {
      radius,
      tube,
      tubularSegments,
      radialSegments,
      p: p2,
      q: q2
    };
    radius = radius || 1;
    tube = tube || 0.4;
    tubularSegments = Math.floor(tubularSegments) || 64;
    radialSegments = Math.floor(radialSegments) || 8;
    p2 = p2 || 2;
    q2 = q2 || 3;
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    const vertex = new Vector3();
    const normal = new Vector3();
    const P1 = new Vector3();
    const P2 = new Vector3();
    const B2 = new Vector3();
    const T2 = new Vector3();
    const N2 = new Vector3();
    for (let i2 = 0; i2 <= tubularSegments; ++i2) {
      const u2 = i2 / tubularSegments * p2 * Math.PI * 2;
      calculatePositionOnCurve(u2, p2, q2, radius, P1);
      calculatePositionOnCurve(u2 + 0.01, p2, q2, radius, P2);
      T2.subVectors(P2, P1);
      N2.addVectors(P2, P1);
      B2.crossVectors(T2, N2);
      N2.crossVectors(B2, T2);
      B2.normalize();
      N2.normalize();
      for (let j2 = 0; j2 <= radialSegments; ++j2) {
        const v2 = j2 / radialSegments * Math.PI * 2;
        const cx = -tube * Math.cos(v2);
        const cy = tube * Math.sin(v2);
        vertex.x = P1.x + (cx * N2.x + cy * B2.x);
        vertex.y = P1.y + (cx * N2.y + cy * B2.y);
        vertex.z = P1.z + (cx * N2.z + cy * B2.z);
        vertices.push(vertex.x, vertex.y, vertex.z);
        normal.subVectors(vertex, P1).normalize();
        normals.push(normal.x, normal.y, normal.z);
        uvs.push(i2 / tubularSegments);
        uvs.push(j2 / radialSegments);
      }
    }
    for (let j2 = 1; j2 <= tubularSegments; j2++) {
      for (let i2 = 1; i2 <= radialSegments; i2++) {
        const a2 = (radialSegments + 1) * (j2 - 1) + (i2 - 1);
        const b2 = (radialSegments + 1) * j2 + (i2 - 1);
        const c2 = (radialSegments + 1) * j2 + i2;
        const d = (radialSegments + 1) * (j2 - 1) + i2;
        indices.push(a2, b2, d);
        indices.push(b2, c2, d);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function calculatePositionOnCurve(u2, p3, q3, radius2, position) {
      const cu2 = Math.cos(u2);
      const su2 = Math.sin(u2);
      const quOverP = q3 / p3 * u2;
      const cs2 = Math.cos(quOverP);
      position.x = radius2 * (2 + cs2) * 0.5 * cu2;
      position.y = radius2 * (2 + cs2) * su2 * 0.5;
      position.z = radius2 * Math.sin(quOverP) * 0.5;
    }
  }
}
class TorusKnotGeometry extends Geometry {
  constructor(radius, tube, tubularSegments, radialSegments, p2, q2, heightScale) {
    super();
    this.type = "TorusKnotGeometry";
    this.parameters = {
      radius,
      tube,
      tubularSegments,
      radialSegments,
      p: p2,
      q: q2
    };
    if (heightScale !== void 0)
      console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.");
    this.fromBufferGeometry(new TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p2, q2));
    this.mergeVertices();
  }
}
class TubeBufferGeometry extends BufferGeometry {
  constructor(path, tubularSegments, radius, radialSegments, closed) {
    super();
    this.type = "TubeBufferGeometry";
    this.parameters = {
      path,
      tubularSegments,
      radius,
      radialSegments,
      closed
    };
    tubularSegments = tubularSegments || 64;
    radius = radius || 1;
    radialSegments = radialSegments || 8;
    closed = closed || false;
    const frames = path.computeFrenetFrames(tubularSegments, closed);
    this.tangents = frames.tangents;
    this.normals = frames.normals;
    this.binormals = frames.binormals;
    const vertex = new Vector3();
    const normal = new Vector3();
    const uv = new Vector2();
    let P2 = new Vector3();
    const vertices = [];
    const normals = [];
    const uvs = [];
    const indices = [];
    generateBufferData();
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function generateBufferData() {
      for (let i2 = 0; i2 < tubularSegments; i2++) {
        generateSegment(i2);
      }
      generateSegment(closed === false ? tubularSegments : 0);
      generateUVs();
      generateIndices();
    }
    function generateSegment(i2) {
      P2 = path.getPointAt(i2 / tubularSegments, P2);
      const N2 = frames.normals[i2];
      const B2 = frames.binormals[i2];
      for (let j2 = 0; j2 <= radialSegments; j2++) {
        const v2 = j2 / radialSegments * Math.PI * 2;
        const sin = Math.sin(v2);
        const cos = -Math.cos(v2);
        normal.x = cos * N2.x + sin * B2.x;
        normal.y = cos * N2.y + sin * B2.y;
        normal.z = cos * N2.z + sin * B2.z;
        normal.normalize();
        normals.push(normal.x, normal.y, normal.z);
        vertex.x = P2.x + radius * normal.x;
        vertex.y = P2.y + radius * normal.y;
        vertex.z = P2.z + radius * normal.z;
        vertices.push(vertex.x, vertex.y, vertex.z);
      }
    }
    function generateIndices() {
      for (let j2 = 1; j2 <= tubularSegments; j2++) {
        for (let i2 = 1; i2 <= radialSegments; i2++) {
          const a2 = (radialSegments + 1) * (j2 - 1) + (i2 - 1);
          const b2 = (radialSegments + 1) * j2 + (i2 - 1);
          const c2 = (radialSegments + 1) * j2 + i2;
          const d = (radialSegments + 1) * (j2 - 1) + i2;
          indices.push(a2, b2, d);
          indices.push(b2, c2, d);
        }
      }
    }
    function generateUVs() {
      for (let i2 = 0; i2 <= tubularSegments; i2++) {
        for (let j2 = 0; j2 <= radialSegments; j2++) {
          uv.x = i2 / tubularSegments;
          uv.y = j2 / radialSegments;
          uvs.push(uv.x, uv.y);
        }
      }
    }
  }
  toJSON() {
    const data = BufferGeometry.prototype.toJSON.call(this);
    data.path = this.parameters.path.toJSON();
    return data;
  }
}
class TubeGeometry extends Geometry {
  constructor(path, tubularSegments, radius, radialSegments, closed, taper) {
    super();
    this.type = "TubeGeometry";
    this.parameters = {
      path,
      tubularSegments,
      radius,
      radialSegments,
      closed
    };
    if (taper !== void 0)
      console.warn("THREE.TubeGeometry: taper has been removed.");
    const bufferGeometry = new TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed);
    this.tangents = bufferGeometry.tangents;
    this.normals = bufferGeometry.normals;
    this.binormals = bufferGeometry.binormals;
    this.fromBufferGeometry(bufferGeometry);
    this.mergeVertices();
  }
}
class WireframeGeometry extends BufferGeometry {
  constructor(geometry) {
    super();
    this.type = "WireframeGeometry";
    const vertices = [];
    const edge = [0, 0], edges = {};
    const keys = ["a", "b", "c"];
    if (geometry && geometry.isGeometry) {
      const faces = geometry.faces;
      for (let i2 = 0, l2 = faces.length; i2 < l2; i2++) {
        const face = faces[i2];
        for (let j2 = 0; j2 < 3; j2++) {
          const edge1 = face[keys[j2]];
          const edge2 = face[keys[(j2 + 1) % 3]];
          edge[0] = Math.min(edge1, edge2);
          edge[1] = Math.max(edge1, edge2);
          const key = edge[0] + "," + edge[1];
          if (edges[key] === void 0) {
            edges[key] = { index1: edge[0], index2: edge[1] };
          }
        }
      }
      for (const key in edges) {
        const e2 = edges[key];
        let vertex = geometry.vertices[e2.index1];
        vertices.push(vertex.x, vertex.y, vertex.z);
        vertex = geometry.vertices[e2.index2];
        vertices.push(vertex.x, vertex.y, vertex.z);
      }
    } else if (geometry && geometry.isBufferGeometry) {
      const vertex = new Vector3();
      if (geometry.index !== null) {
        const position = geometry.attributes.position;
        const indices = geometry.index;
        let groups = geometry.groups;
        if (groups.length === 0) {
          groups = [{ start: 0, count: indices.count, materialIndex: 0 }];
        }
        for (let o2 = 0, ol = groups.length; o2 < ol; ++o2) {
          const group = groups[o2];
          const start = group.start;
          const count = group.count;
          for (let i2 = start, l2 = start + count; i2 < l2; i2 += 3) {
            for (let j2 = 0; j2 < 3; j2++) {
              const edge1 = indices.getX(i2 + j2);
              const edge2 = indices.getX(i2 + (j2 + 1) % 3);
              edge[0] = Math.min(edge1, edge2);
              edge[1] = Math.max(edge1, edge2);
              const key = edge[0] + "," + edge[1];
              if (edges[key] === void 0) {
                edges[key] = { index1: edge[0], index2: edge[1] };
              }
            }
          }
        }
        for (const key in edges) {
          const e2 = edges[key];
          vertex.fromBufferAttribute(position, e2.index1);
          vertices.push(vertex.x, vertex.y, vertex.z);
          vertex.fromBufferAttribute(position, e2.index2);
          vertices.push(vertex.x, vertex.y, vertex.z);
        }
      } else {
        const position = geometry.attributes.position;
        for (let i2 = 0, l2 = position.count / 3; i2 < l2; i2++) {
          for (let j2 = 0; j2 < 3; j2++) {
            const index1 = 3 * i2 + j2;
            vertex.fromBufferAttribute(position, index1);
            vertices.push(vertex.x, vertex.y, vertex.z);
            const index2 = 3 * i2 + (j2 + 1) % 3;
            vertex.fromBufferAttribute(position, index2);
            vertices.push(vertex.x, vertex.y, vertex.z);
          }
        }
      }
    }
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
  }
}
var Geometries = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  BoxGeometry,
  BoxBufferGeometry,
  CircleGeometry,
  CircleBufferGeometry,
  ConeGeometry,
  ConeBufferGeometry,
  CylinderGeometry,
  CylinderBufferGeometry,
  DodecahedronGeometry,
  DodecahedronBufferGeometry,
  EdgesGeometry,
  ExtrudeGeometry,
  ExtrudeBufferGeometry,
  IcosahedronGeometry,
  IcosahedronBufferGeometry,
  LatheGeometry,
  LatheBufferGeometry,
  OctahedronGeometry,
  OctahedronBufferGeometry,
  ParametricGeometry,
  ParametricBufferGeometry,
  PlaneGeometry,
  PlaneBufferGeometry,
  PolyhedronGeometry,
  PolyhedronBufferGeometry,
  RingGeometry,
  RingBufferGeometry,
  ShapeGeometry,
  ShapeBufferGeometry,
  SphereGeometry,
  SphereBufferGeometry,
  TetrahedronGeometry,
  TetrahedronBufferGeometry,
  TextGeometry,
  TextBufferGeometry,
  TorusGeometry,
  TorusBufferGeometry,
  TorusKnotGeometry,
  TorusKnotBufferGeometry,
  TubeGeometry,
  TubeBufferGeometry,
  WireframeGeometry
});
function ShadowMaterial(parameters) {
  Material.call(this);
  this.type = "ShadowMaterial";
  this.color = new Color(0);
  this.transparent = true;
  this.setValues(parameters);
}
ShadowMaterial.prototype = Object.create(Material.prototype);
ShadowMaterial.prototype.constructor = ShadowMaterial;
ShadowMaterial.prototype.isShadowMaterial = true;
ShadowMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  return this;
};
function RawShaderMaterial(parameters) {
  ShaderMaterial.call(this, parameters);
  this.type = "RawShaderMaterial";
}
RawShaderMaterial.prototype = Object.create(ShaderMaterial.prototype);
RawShaderMaterial.prototype.constructor = RawShaderMaterial;
RawShaderMaterial.prototype.isRawShaderMaterial = true;
function MeshStandardMaterial(parameters) {
  Material.call(this);
  this.defines = { "STANDARD": "" };
  this.type = "MeshStandardMaterial";
  this.color = new Color(16777215);
  this.roughness = 1;
  this.metalness = 0;
  this.map = null;
  this.lightMap = null;
  this.lightMapIntensity = 1;
  this.aoMap = null;
  this.aoMapIntensity = 1;
  this.emissive = new Color(0);
  this.emissiveIntensity = 1;
  this.emissiveMap = null;
  this.bumpMap = null;
  this.bumpScale = 1;
  this.normalMap = null;
  this.normalMapType = TangentSpaceNormalMap;
  this.normalScale = new Vector2(1, 1);
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.roughnessMap = null;
  this.metalnessMap = null;
  this.alphaMap = null;
  this.envMap = null;
  this.envMapIntensity = 1;
  this.refractionRatio = 0.98;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = "round";
  this.wireframeLinejoin = "round";
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.vertexTangents = false;
  this.setValues(parameters);
}
MeshStandardMaterial.prototype = Object.create(Material.prototype);
MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;
MeshStandardMaterial.prototype.isMeshStandardMaterial = true;
MeshStandardMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.defines = { "STANDARD": "" };
  this.color.copy(source.color);
  this.roughness = source.roughness;
  this.metalness = source.metalness;
  this.map = source.map;
  this.lightMap = source.lightMap;
  this.lightMapIntensity = source.lightMapIntensity;
  this.aoMap = source.aoMap;
  this.aoMapIntensity = source.aoMapIntensity;
  this.emissive.copy(source.emissive);
  this.emissiveMap = source.emissiveMap;
  this.emissiveIntensity = source.emissiveIntensity;
  this.bumpMap = source.bumpMap;
  this.bumpScale = source.bumpScale;
  this.normalMap = source.normalMap;
  this.normalMapType = source.normalMapType;
  this.normalScale.copy(source.normalScale);
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.roughnessMap = source.roughnessMap;
  this.metalnessMap = source.metalnessMap;
  this.alphaMap = source.alphaMap;
  this.envMap = source.envMap;
  this.envMapIntensity = source.envMapIntensity;
  this.refractionRatio = source.refractionRatio;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.wireframeLinecap = source.wireframeLinecap;
  this.wireframeLinejoin = source.wireframeLinejoin;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  this.vertexTangents = source.vertexTangents;
  return this;
};
function MeshPhysicalMaterial(parameters) {
  MeshStandardMaterial.call(this);
  this.defines = {
    "STANDARD": "",
    "PHYSICAL": ""
  };
  this.type = "MeshPhysicalMaterial";
  this.clearcoat = 0;
  this.clearcoatMap = null;
  this.clearcoatRoughness = 0;
  this.clearcoatRoughnessMap = null;
  this.clearcoatNormalScale = new Vector2(1, 1);
  this.clearcoatNormalMap = null;
  this.reflectivity = 0.5;
  Object.defineProperty(this, "ior", {
    get: function() {
      return (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);
    },
    set: function(ior) {
      this.reflectivity = MathUtils.clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);
    }
  });
  this.sheen = null;
  this.transmission = 0;
  this.transmissionMap = null;
  this.setValues(parameters);
}
MeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);
MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;
MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;
MeshPhysicalMaterial.prototype.copy = function(source) {
  MeshStandardMaterial.prototype.copy.call(this, source);
  this.defines = {
    "STANDARD": "",
    "PHYSICAL": ""
  };
  this.clearcoat = source.clearcoat;
  this.clearcoatMap = source.clearcoatMap;
  this.clearcoatRoughness = source.clearcoatRoughness;
  this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
  this.clearcoatNormalMap = source.clearcoatNormalMap;
  this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
  this.reflectivity = source.reflectivity;
  if (source.sheen) {
    this.sheen = (this.sheen || new Color()).copy(source.sheen);
  } else {
    this.sheen = null;
  }
  this.transmission = source.transmission;
  this.transmissionMap = source.transmissionMap;
  return this;
};
function MeshPhongMaterial(parameters) {
  Material.call(this);
  this.type = "MeshPhongMaterial";
  this.color = new Color(16777215);
  this.specular = new Color(1118481);
  this.shininess = 30;
  this.map = null;
  this.lightMap = null;
  this.lightMapIntensity = 1;
  this.aoMap = null;
  this.aoMapIntensity = 1;
  this.emissive = new Color(0);
  this.emissiveIntensity = 1;
  this.emissiveMap = null;
  this.bumpMap = null;
  this.bumpScale = 1;
  this.normalMap = null;
  this.normalMapType = TangentSpaceNormalMap;
  this.normalScale = new Vector2(1, 1);
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.specularMap = null;
  this.alphaMap = null;
  this.envMap = null;
  this.combine = MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = 0.98;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = "round";
  this.wireframeLinejoin = "round";
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters);
}
MeshPhongMaterial.prototype = Object.create(Material.prototype);
MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;
MeshPhongMaterial.prototype.isMeshPhongMaterial = true;
MeshPhongMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.specular.copy(source.specular);
  this.shininess = source.shininess;
  this.map = source.map;
  this.lightMap = source.lightMap;
  this.lightMapIntensity = source.lightMapIntensity;
  this.aoMap = source.aoMap;
  this.aoMapIntensity = source.aoMapIntensity;
  this.emissive.copy(source.emissive);
  this.emissiveMap = source.emissiveMap;
  this.emissiveIntensity = source.emissiveIntensity;
  this.bumpMap = source.bumpMap;
  this.bumpScale = source.bumpScale;
  this.normalMap = source.normalMap;
  this.normalMapType = source.normalMapType;
  this.normalScale.copy(source.normalScale);
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.specularMap = source.specularMap;
  this.alphaMap = source.alphaMap;
  this.envMap = source.envMap;
  this.combine = source.combine;
  this.reflectivity = source.reflectivity;
  this.refractionRatio = source.refractionRatio;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.wireframeLinecap = source.wireframeLinecap;
  this.wireframeLinejoin = source.wireframeLinejoin;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  return this;
};
function MeshToonMaterial(parameters) {
  Material.call(this);
  this.defines = { "TOON": "" };
  this.type = "MeshToonMaterial";
  this.color = new Color(16777215);
  this.map = null;
  this.gradientMap = null;
  this.lightMap = null;
  this.lightMapIntensity = 1;
  this.aoMap = null;
  this.aoMapIntensity = 1;
  this.emissive = new Color(0);
  this.emissiveIntensity = 1;
  this.emissiveMap = null;
  this.bumpMap = null;
  this.bumpScale = 1;
  this.normalMap = null;
  this.normalMapType = TangentSpaceNormalMap;
  this.normalScale = new Vector2(1, 1);
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.alphaMap = null;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = "round";
  this.wireframeLinejoin = "round";
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters);
}
MeshToonMaterial.prototype = Object.create(Material.prototype);
MeshToonMaterial.prototype.constructor = MeshToonMaterial;
MeshToonMaterial.prototype.isMeshToonMaterial = true;
MeshToonMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.map = source.map;
  this.gradientMap = source.gradientMap;
  this.lightMap = source.lightMap;
  this.lightMapIntensity = source.lightMapIntensity;
  this.aoMap = source.aoMap;
  this.aoMapIntensity = source.aoMapIntensity;
  this.emissive.copy(source.emissive);
  this.emissiveMap = source.emissiveMap;
  this.emissiveIntensity = source.emissiveIntensity;
  this.bumpMap = source.bumpMap;
  this.bumpScale = source.bumpScale;
  this.normalMap = source.normalMap;
  this.normalMapType = source.normalMapType;
  this.normalScale.copy(source.normalScale);
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.alphaMap = source.alphaMap;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.wireframeLinecap = source.wireframeLinecap;
  this.wireframeLinejoin = source.wireframeLinejoin;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  return this;
};
function MeshNormalMaterial(parameters) {
  Material.call(this);
  this.type = "MeshNormalMaterial";
  this.bumpMap = null;
  this.bumpScale = 1;
  this.normalMap = null;
  this.normalMapType = TangentSpaceNormalMap;
  this.normalScale = new Vector2(1, 1);
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.fog = false;
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters);
}
MeshNormalMaterial.prototype = Object.create(Material.prototype);
MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;
MeshNormalMaterial.prototype.isMeshNormalMaterial = true;
MeshNormalMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.bumpMap = source.bumpMap;
  this.bumpScale = source.bumpScale;
  this.normalMap = source.normalMap;
  this.normalMapType = source.normalMapType;
  this.normalScale.copy(source.normalScale);
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  return this;
};
function MeshLambertMaterial(parameters) {
  Material.call(this);
  this.type = "MeshLambertMaterial";
  this.color = new Color(16777215);
  this.map = null;
  this.lightMap = null;
  this.lightMapIntensity = 1;
  this.aoMap = null;
  this.aoMapIntensity = 1;
  this.emissive = new Color(0);
  this.emissiveIntensity = 1;
  this.emissiveMap = null;
  this.specularMap = null;
  this.alphaMap = null;
  this.envMap = null;
  this.combine = MultiplyOperation;
  this.reflectivity = 1;
  this.refractionRatio = 0.98;
  this.wireframe = false;
  this.wireframeLinewidth = 1;
  this.wireframeLinecap = "round";
  this.wireframeLinejoin = "round";
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters);
}
MeshLambertMaterial.prototype = Object.create(Material.prototype);
MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;
MeshLambertMaterial.prototype.isMeshLambertMaterial = true;
MeshLambertMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.color.copy(source.color);
  this.map = source.map;
  this.lightMap = source.lightMap;
  this.lightMapIntensity = source.lightMapIntensity;
  this.aoMap = source.aoMap;
  this.aoMapIntensity = source.aoMapIntensity;
  this.emissive.copy(source.emissive);
  this.emissiveMap = source.emissiveMap;
  this.emissiveIntensity = source.emissiveIntensity;
  this.specularMap = source.specularMap;
  this.alphaMap = source.alphaMap;
  this.envMap = source.envMap;
  this.combine = source.combine;
  this.reflectivity = source.reflectivity;
  this.refractionRatio = source.refractionRatio;
  this.wireframe = source.wireframe;
  this.wireframeLinewidth = source.wireframeLinewidth;
  this.wireframeLinecap = source.wireframeLinecap;
  this.wireframeLinejoin = source.wireframeLinejoin;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  return this;
};
function MeshMatcapMaterial(parameters) {
  Material.call(this);
  this.defines = { "MATCAP": "" };
  this.type = "MeshMatcapMaterial";
  this.color = new Color(16777215);
  this.matcap = null;
  this.map = null;
  this.bumpMap = null;
  this.bumpScale = 1;
  this.normalMap = null;
  this.normalMapType = TangentSpaceNormalMap;
  this.normalScale = new Vector2(1, 1);
  this.displacementMap = null;
  this.displacementScale = 1;
  this.displacementBias = 0;
  this.alphaMap = null;
  this.skinning = false;
  this.morphTargets = false;
  this.morphNormals = false;
  this.setValues(parameters);
}
MeshMatcapMaterial.prototype = Object.create(Material.prototype);
MeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;
MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;
MeshMatcapMaterial.prototype.copy = function(source) {
  Material.prototype.copy.call(this, source);
  this.defines = { "MATCAP": "" };
  this.color.copy(source.color);
  this.matcap = source.matcap;
  this.map = source.map;
  this.bumpMap = source.bumpMap;
  this.bumpScale = source.bumpScale;
  this.normalMap = source.normalMap;
  this.normalMapType = source.normalMapType;
  this.normalScale.copy(source.normalScale);
  this.displacementMap = source.displacementMap;
  this.displacementScale = source.displacementScale;
  this.displacementBias = source.displacementBias;
  this.alphaMap = source.alphaMap;
  this.skinning = source.skinning;
  this.morphTargets = source.morphTargets;
  this.morphNormals = source.morphNormals;
  return this;
};
function LineDashedMaterial(parameters) {
  LineBasicMaterial.call(this);
  this.type = "LineDashedMaterial";
  this.scale = 1;
  this.dashSize = 3;
  this.gapSize = 1;
  this.setValues(parameters);
}
LineDashedMaterial.prototype = Object.create(LineBasicMaterial.prototype);
LineDashedMaterial.prototype.constructor = LineDashedMaterial;
LineDashedMaterial.prototype.isLineDashedMaterial = true;
LineDashedMaterial.prototype.copy = function(source) {
  LineBasicMaterial.prototype.copy.call(this, source);
  this.scale = source.scale;
  this.dashSize = source.dashSize;
  this.gapSize = source.gapSize;
  return this;
};
var Materials = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ShadowMaterial,
  SpriteMaterial,
  RawShaderMaterial,
  ShaderMaterial,
  PointsMaterial,
  MeshPhysicalMaterial,
  MeshStandardMaterial,
  MeshPhongMaterial,
  MeshToonMaterial,
  MeshNormalMaterial,
  MeshLambertMaterial,
  MeshDepthMaterial,
  MeshDistanceMaterial,
  MeshBasicMaterial,
  MeshMatcapMaterial,
  LineDashedMaterial,
  LineBasicMaterial,
  Material
});
const AnimationUtils = {
  arraySlice: function(array, from, to2) {
    if (AnimationUtils.isTypedArray(array)) {
      return new array.constructor(array.subarray(from, to2 !== void 0 ? to2 : array.length));
    }
    return array.slice(from, to2);
  },
  convertArray: function(array, type, forceClone) {
    if (!array || !forceClone && array.constructor === type)
      return array;
    if (typeof type.BYTES_PER_ELEMENT === "number") {
      return new type(array);
    }
    return Array.prototype.slice.call(array);
  },
  isTypedArray: function(object) {
    return ArrayBuffer.isView(object) && !(object instanceof DataView);
  },
  getKeyframeOrder: function(times) {
    function compareTime(i2, j2) {
      return times[i2] - times[j2];
    }
    const n2 = times.length;
    const result = new Array(n2);
    for (let i2 = 0; i2 !== n2; ++i2)
      result[i2] = i2;
    result.sort(compareTime);
    return result;
  },
  sortedArray: function(values, stride, order) {
    const nValues = values.length;
    const result = new values.constructor(nValues);
    for (let i2 = 0, dstOffset = 0; dstOffset !== nValues; ++i2) {
      const srcOffset = order[i2] * stride;
      for (let j2 = 0; j2 !== stride; ++j2) {
        result[dstOffset++] = values[srcOffset + j2];
      }
    }
    return result;
  },
  flattenJSON: function(jsonKeys, times, values, valuePropertyName) {
    let i2 = 1, key = jsonKeys[0];
    while (key !== void 0 && key[valuePropertyName] === void 0) {
      key = jsonKeys[i2++];
    }
    if (key === void 0)
      return;
    let value = key[valuePropertyName];
    if (value === void 0)
      return;
    if (Array.isArray(value)) {
      do {
        value = key[valuePropertyName];
        if (value !== void 0) {
          times.push(key.time);
          values.push.apply(values, value);
        }
        key = jsonKeys[i2++];
      } while (key !== void 0);
    } else if (value.toArray !== void 0) {
      do {
        value = key[valuePropertyName];
        if (value !== void 0) {
          times.push(key.time);
          value.toArray(values, values.length);
        }
        key = jsonKeys[i2++];
      } while (key !== void 0);
    } else {
      do {
        value = key[valuePropertyName];
        if (value !== void 0) {
          times.push(key.time);
          values.push(value);
        }
        key = jsonKeys[i2++];
      } while (key !== void 0);
    }
  },
  subclip: function(sourceClip, name, startFrame, endFrame, fps) {
    fps = fps || 30;
    const clip = sourceClip.clone();
    clip.name = name;
    const tracks = [];
    for (let i2 = 0; i2 < clip.tracks.length; ++i2) {
      const track2 = clip.tracks[i2];
      const valueSize = track2.getValueSize();
      const times = [];
      const values = [];
      for (let j2 = 0; j2 < track2.times.length; ++j2) {
        const frame = track2.times[j2] * fps;
        if (frame < startFrame || frame >= endFrame)
          continue;
        times.push(track2.times[j2]);
        for (let k2 = 0; k2 < valueSize; ++k2) {
          values.push(track2.values[j2 * valueSize + k2]);
        }
      }
      if (times.length === 0)
        continue;
      track2.times = AnimationUtils.convertArray(times, track2.times.constructor);
      track2.values = AnimationUtils.convertArray(values, track2.values.constructor);
      tracks.push(track2);
    }
    clip.tracks = tracks;
    let minStartTime = Infinity;
    for (let i2 = 0; i2 < clip.tracks.length; ++i2) {
      if (minStartTime > clip.tracks[i2].times[0]) {
        minStartTime = clip.tracks[i2].times[0];
      }
    }
    for (let i2 = 0; i2 < clip.tracks.length; ++i2) {
      clip.tracks[i2].shift(-1 * minStartTime);
    }
    clip.resetDuration();
    return clip;
  },
  makeClipAdditive: function(targetClip, referenceFrame, referenceClip, fps) {
    if (referenceFrame === void 0)
      referenceFrame = 0;
    if (referenceClip === void 0)
      referenceClip = targetClip;
    if (fps === void 0 || fps <= 0)
      fps = 30;
    const numTracks = referenceClip.tracks.length;
    const referenceTime = referenceFrame / fps;
    for (let i2 = 0; i2 < numTracks; ++i2) {
      const referenceTrack = referenceClip.tracks[i2];
      const referenceTrackType = referenceTrack.ValueTypeName;
      if (referenceTrackType === "bool" || referenceTrackType === "string")
        continue;
      const targetTrack = targetClip.tracks.find(function(track2) {
        return track2.name === referenceTrack.name && track2.ValueTypeName === referenceTrackType;
      });
      if (targetTrack === void 0)
        continue;
      let referenceOffset = 0;
      const referenceValueSize = referenceTrack.getValueSize();
      if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
        referenceOffset = referenceValueSize / 3;
      }
      let targetOffset = 0;
      const targetValueSize = targetTrack.getValueSize();
      if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {
        targetOffset = targetValueSize / 3;
      }
      const lastIndex = referenceTrack.times.length - 1;
      let referenceValue;
      if (referenceTime <= referenceTrack.times[0]) {
        const startIndex = referenceOffset;
        const endIndex = referenceValueSize - referenceOffset;
        referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
      } else if (referenceTime >= referenceTrack.times[lastIndex]) {
        const startIndex = lastIndex * referenceValueSize + referenceOffset;
        const endIndex = startIndex + referenceValueSize - referenceOffset;
        referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
      } else {
        const interpolant = referenceTrack.createInterpolant();
        const startIndex = referenceOffset;
        const endIndex = referenceValueSize - referenceOffset;
        interpolant.evaluate(referenceTime);
        referenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, startIndex, endIndex);
      }
      if (referenceTrackType === "quaternion") {
        const referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();
        referenceQuat.toArray(referenceValue);
      }
      const numTimes = targetTrack.times.length;
      for (let j2 = 0; j2 < numTimes; ++j2) {
        const valueStart = j2 * targetValueSize + targetOffset;
        if (referenceTrackType === "quaternion") {
          Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);
        } else {
          const valueEnd = targetValueSize - targetOffset * 2;
          for (let k2 = 0; k2 < valueEnd; ++k2) {
            targetTrack.values[valueStart + k2] -= referenceValue[k2];
          }
        }
      }
    }
    targetClip.blendMode = AdditiveAnimationBlendMode;
    return targetClip;
  }
};
function Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
  this.parameterPositions = parameterPositions;
  this._cachedIndex = 0;
  this.resultBuffer = resultBuffer !== void 0 ? resultBuffer : new sampleValues.constructor(sampleSize);
  this.sampleValues = sampleValues;
  this.valueSize = sampleSize;
}
Object.assign(Interpolant.prototype, {
  evaluate: function(t3) {
    const pp = this.parameterPositions;
    let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
    validate_interval: {
      seek: {
        let right;
        linear_scan: {
          forward_scan:
            if (!(t3 < t1)) {
              for (let giveUpAt = i1 + 2; ; ) {
                if (t1 === void 0) {
                  if (t3 < t0)
                    break forward_scan;
                  i1 = pp.length;
                  this._cachedIndex = i1;
                  return this.afterEnd_(i1 - 1, t3, t0);
                }
                if (i1 === giveUpAt)
                  break;
                t0 = t1;
                t1 = pp[++i1];
                if (t3 < t1) {
                  break seek;
                }
              }
              right = pp.length;
              break linear_scan;
            }
          if (!(t3 >= t0)) {
            const t1global = pp[1];
            if (t3 < t1global) {
              i1 = 2;
              t0 = t1global;
            }
            for (let giveUpAt = i1 - 2; ; ) {
              if (t0 === void 0) {
                this._cachedIndex = 0;
                return this.beforeStart_(0, t3, t1);
              }
              if (i1 === giveUpAt)
                break;
              t1 = t0;
              t0 = pp[--i1 - 1];
              if (t3 >= t0) {
                break seek;
              }
            }
            right = i1;
            i1 = 0;
            break linear_scan;
          }
          break validate_interval;
        }
        while (i1 < right) {
          const mid = i1 + right >>> 1;
          if (t3 < pp[mid]) {
            right = mid;
          } else {
            i1 = mid + 1;
          }
        }
        t1 = pp[i1];
        t0 = pp[i1 - 1];
        if (t0 === void 0) {
          this._cachedIndex = 0;
          return this.beforeStart_(0, t3, t1);
        }
        if (t1 === void 0) {
          i1 = pp.length;
          this._cachedIndex = i1;
          return this.afterEnd_(i1 - 1, t0, t3);
        }
      }
      this._cachedIndex = i1;
      this.intervalChanged_(i1, t0, t1);
    }
    return this.interpolate_(i1, t0, t3, t1);
  },
  settings: null,
  DefaultSettings_: {},
  getSettings_: function() {
    return this.settings || this.DefaultSettings_;
  },
  copySampleValue_: function(index) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
    for (let i2 = 0; i2 !== stride; ++i2) {
      result[i2] = values[offset + i2];
    }
    return result;
  },
  interpolate_: function() {
    throw new Error("call to abstract method");
  },
  intervalChanged_: function() {
  }
});
Object.assign(Interpolant.prototype, {
  beforeStart_: Interpolant.prototype.copySampleValue_,
  afterEnd_: Interpolant.prototype.copySampleValue_
});
function CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
  Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
  this._weightPrev = -0;
  this._offsetPrev = -0;
  this._weightNext = -0;
  this._offsetNext = -0;
}
CubicInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
  constructor: CubicInterpolant,
  DefaultSettings_: {
    endingStart: ZeroCurvatureEnding,
    endingEnd: ZeroCurvatureEnding
  },
  intervalChanged_: function(i1, t0, t1) {
    const pp = this.parameterPositions;
    let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
    if (tPrev === void 0) {
      switch (this.getSettings_().endingStart) {
        case ZeroSlopeEnding:
          iPrev = i1;
          tPrev = 2 * t0 - t1;
          break;
        case WrapAroundEnding:
          iPrev = pp.length - 2;
          tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
          break;
        default:
          iPrev = i1;
          tPrev = t1;
      }
    }
    if (tNext === void 0) {
      switch (this.getSettings_().endingEnd) {
        case ZeroSlopeEnding:
          iNext = i1;
          tNext = 2 * t1 - t0;
          break;
        case WrapAroundEnding:
          iNext = 1;
          tNext = t1 + pp[1] - pp[0];
          break;
        default:
          iNext = i1 - 1;
          tNext = t0;
      }
    }
    const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
    this._weightPrev = halfDt / (t0 - tPrev);
    this._weightNext = halfDt / (tNext - t1);
    this._offsetPrev = iPrev * stride;
    this._offsetNext = iNext * stride;
  },
  interpolate_: function(i1, t0, t3, t1) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p2 = (t3 - t0) / (t1 - t0), pp = p2 * p2, ppp = pp * p2;
    const sP = -wP * ppp + 2 * wP * pp - wP * p2;
    const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p2 + 1;
    const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p2;
    const sN = wN * ppp - wN * pp;
    for (let i2 = 0; i2 !== stride; ++i2) {
      result[i2] = sP * values[oP + i2] + s0 * values[o0 + i2] + s1 * values[o1 + i2] + sN * values[oN + i2];
    }
    return result;
  }
});
function LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
  Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
}
LinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
  constructor: LinearInterpolant,
  interpolate_: function(i1, t0, t3, t1) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t3 - t0) / (t1 - t0), weight0 = 1 - weight1;
    for (let i2 = 0; i2 !== stride; ++i2) {
      result[i2] = values[offset0 + i2] * weight0 + values[offset1 + i2] * weight1;
    }
    return result;
  }
});
function DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
  Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
}
DiscreteInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
  constructor: DiscreteInterpolant,
  interpolate_: function(i1) {
    return this.copySampleValue_(i1 - 1);
  }
});
function KeyframeTrack(name, times, values, interpolation) {
  if (name === void 0)
    throw new Error("THREE.KeyframeTrack: track name is undefined");
  if (times === void 0 || times.length === 0)
    throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
  this.name = name;
  this.times = AnimationUtils.convertArray(times, this.TimeBufferType);
  this.values = AnimationUtils.convertArray(values, this.ValueBufferType);
  this.setInterpolation(interpolation || this.DefaultInterpolation);
}
Object.assign(KeyframeTrack, {
  toJSON: function(track2) {
    const trackType = track2.constructor;
    let json;
    if (trackType.toJSON !== void 0) {
      json = trackType.toJSON(track2);
    } else {
      json = {
        "name": track2.name,
        "times": AnimationUtils.convertArray(track2.times, Array),
        "values": AnimationUtils.convertArray(track2.values, Array)
      };
      const interpolation = track2.getInterpolation();
      if (interpolation !== track2.DefaultInterpolation) {
        json.interpolation = interpolation;
      }
    }
    json.type = track2.ValueTypeName;
    return json;
  }
});
Object.assign(KeyframeTrack.prototype, {
  constructor: KeyframeTrack,
  TimeBufferType: Float32Array,
  ValueBufferType: Float32Array,
  DefaultInterpolation: InterpolateLinear,
  InterpolantFactoryMethodDiscrete: function(result) {
    return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
  },
  InterpolantFactoryMethodLinear: function(result) {
    return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
  },
  InterpolantFactoryMethodSmooth: function(result) {
    return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
  },
  setInterpolation: function(interpolation) {
    let factoryMethod;
    switch (interpolation) {
      case InterpolateDiscrete:
        factoryMethod = this.InterpolantFactoryMethodDiscrete;
        break;
      case InterpolateLinear:
        factoryMethod = this.InterpolantFactoryMethodLinear;
        break;
      case InterpolateSmooth:
        factoryMethod = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (factoryMethod === void 0) {
      const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0) {
        if (interpolation !== this.DefaultInterpolation) {
          this.setInterpolation(this.DefaultInterpolation);
        } else {
          throw new Error(message);
        }
      }
      console.warn("THREE.KeyframeTrack:", message);
      return this;
    }
    this.createInterpolant = factoryMethod;
    return this;
  },
  getInterpolation: function() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return InterpolateDiscrete;
      case this.InterpolantFactoryMethodLinear:
        return InterpolateLinear;
      case this.InterpolantFactoryMethodSmooth:
        return InterpolateSmooth;
    }
  },
  getValueSize: function() {
    return this.values.length / this.times.length;
  },
  shift: function(timeOffset) {
    if (timeOffset !== 0) {
      const times = this.times;
      for (let i2 = 0, n2 = times.length; i2 !== n2; ++i2) {
        times[i2] += timeOffset;
      }
    }
    return this;
  },
  scale: function(timeScale) {
    if (timeScale !== 1) {
      const times = this.times;
      for (let i2 = 0, n2 = times.length; i2 !== n2; ++i2) {
        times[i2] *= timeScale;
      }
    }
    return this;
  },
  trim: function(startTime, endTime) {
    const times = this.times, nKeys = times.length;
    let from = 0, to2 = nKeys - 1;
    while (from !== nKeys && times[from] < startTime) {
      ++from;
    }
    while (to2 !== -1 && times[to2] > endTime) {
      --to2;
    }
    ++to2;
    if (from !== 0 || to2 !== nKeys) {
      if (from >= to2) {
        to2 = Math.max(to2, 1);
        from = to2 - 1;
      }
      const stride = this.getValueSize();
      this.times = AnimationUtils.arraySlice(times, from, to2);
      this.values = AnimationUtils.arraySlice(this.values, from * stride, to2 * stride);
    }
    return this;
  },
  validate: function() {
    let valid = true;
    const valueSize = this.getValueSize();
    if (valueSize - Math.floor(valueSize) !== 0) {
      console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
      valid = false;
    }
    const times = this.times, values = this.values, nKeys = times.length;
    if (nKeys === 0) {
      console.error("THREE.KeyframeTrack: Track is empty.", this);
      valid = false;
    }
    let prevTime = null;
    for (let i2 = 0; i2 !== nKeys; i2++) {
      const currTime = times[i2];
      if (typeof currTime === "number" && isNaN(currTime)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i2, currTime);
        valid = false;
        break;
      }
      if (prevTime !== null && prevTime > currTime) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, i2, currTime, prevTime);
        valid = false;
        break;
      }
      prevTime = currTime;
    }
    if (values !== void 0) {
      if (AnimationUtils.isTypedArray(values)) {
        for (let i2 = 0, n2 = values.length; i2 !== n2; ++i2) {
          const value = values[i2];
          if (isNaN(value)) {
            console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i2, value);
            valid = false;
            break;
          }
        }
      }
    }
    return valid;
  },
  optimize: function() {
    const times = AnimationUtils.arraySlice(this.times), values = AnimationUtils.arraySlice(this.values), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, lastIndex = times.length - 1;
    let writeIndex = 1;
    for (let i2 = 1; i2 < lastIndex; ++i2) {
      let keep = false;
      const time = times[i2];
      const timeNext = times[i2 + 1];
      if (time !== timeNext && (i2 !== 1 || time !== time[0])) {
        if (!smoothInterpolation) {
          const offset = i2 * stride, offsetP = offset - stride, offsetN = offset + stride;
          for (let j2 = 0; j2 !== stride; ++j2) {
            const value = values[offset + j2];
            if (value !== values[offsetP + j2] || value !== values[offsetN + j2]) {
              keep = true;
              break;
            }
          }
        } else {
          keep = true;
        }
      }
      if (keep) {
        if (i2 !== writeIndex) {
          times[writeIndex] = times[i2];
          const readOffset = i2 * stride, writeOffset = writeIndex * stride;
          for (let j2 = 0; j2 !== stride; ++j2) {
            values[writeOffset + j2] = values[readOffset + j2];
          }
        }
        ++writeIndex;
      }
    }
    if (lastIndex > 0) {
      times[writeIndex] = times[lastIndex];
      for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j2 = 0; j2 !== stride; ++j2) {
        values[writeOffset + j2] = values[readOffset + j2];
      }
      ++writeIndex;
    }
    if (writeIndex !== times.length) {
      this.times = AnimationUtils.arraySlice(times, 0, writeIndex);
      this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);
    } else {
      this.times = times;
      this.values = values;
    }
    return this;
  },
  clone: function() {
    const times = AnimationUtils.arraySlice(this.times, 0);
    const values = AnimationUtils.arraySlice(this.values, 0);
    const TypedKeyframeTrack = this.constructor;
    const track2 = new TypedKeyframeTrack(this.name, times, values);
    track2.createInterpolant = this.createInterpolant;
    return track2;
  }
});
function BooleanKeyframeTrack(name, times, values) {
  KeyframeTrack.call(this, name, times, values);
}
BooleanKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: BooleanKeyframeTrack,
  ValueTypeName: "bool",
  ValueBufferType: Array,
  DefaultInterpolation: InterpolateDiscrete,
  InterpolantFactoryMethodLinear: void 0,
  InterpolantFactoryMethodSmooth: void 0
});
function ColorKeyframeTrack(name, times, values, interpolation) {
  KeyframeTrack.call(this, name, times, values, interpolation);
}
ColorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: ColorKeyframeTrack,
  ValueTypeName: "color"
});
function NumberKeyframeTrack(name, times, values, interpolation) {
  KeyframeTrack.call(this, name, times, values, interpolation);
}
NumberKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: NumberKeyframeTrack,
  ValueTypeName: "number"
});
function QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
  Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
}
QuaternionLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
  constructor: QuaternionLinearInterpolant,
  interpolate_: function(i1, t0, t3, t1) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t3 - t0) / (t1 - t0);
    let offset = i1 * stride;
    for (let end = offset + stride; offset !== end; offset += 4) {
      Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
    }
    return result;
  }
});
function QuaternionKeyframeTrack(name, times, values, interpolation) {
  KeyframeTrack.call(this, name, times, values, interpolation);
}
QuaternionKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: QuaternionKeyframeTrack,
  ValueTypeName: "quaternion",
  DefaultInterpolation: InterpolateLinear,
  InterpolantFactoryMethodLinear: function(result) {
    return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
  },
  InterpolantFactoryMethodSmooth: void 0
});
function StringKeyframeTrack(name, times, values, interpolation) {
  KeyframeTrack.call(this, name, times, values, interpolation);
}
StringKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: StringKeyframeTrack,
  ValueTypeName: "string",
  ValueBufferType: Array,
  DefaultInterpolation: InterpolateDiscrete,
  InterpolantFactoryMethodLinear: void 0,
  InterpolantFactoryMethodSmooth: void 0
});
function VectorKeyframeTrack(name, times, values, interpolation) {
  KeyframeTrack.call(this, name, times, values, interpolation);
}
VectorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
  constructor: VectorKeyframeTrack,
  ValueTypeName: "vector"
});
function AnimationClip(name, duration, tracks, blendMode) {
  this.name = name;
  this.tracks = tracks;
  this.duration = duration !== void 0 ? duration : -1;
  this.blendMode = blendMode !== void 0 ? blendMode : NormalAnimationBlendMode;
  this.uuid = MathUtils.generateUUID();
  if (this.duration < 0) {
    this.resetDuration();
  }
}
function getTrackTypeForValueTypeName(typeName) {
  switch (typeName.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return NumberKeyframeTrack;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return VectorKeyframeTrack;
    case "color":
      return ColorKeyframeTrack;
    case "quaternion":
      return QuaternionKeyframeTrack;
    case "bool":
    case "boolean":
      return BooleanKeyframeTrack;
    case "string":
      return StringKeyframeTrack;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + typeName);
}
function parseKeyframeTrack(json) {
  if (json.type === void 0) {
    throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  }
  const trackType = getTrackTypeForValueTypeName(json.type);
  if (json.times === void 0) {
    const times = [], values = [];
    AnimationUtils.flattenJSON(json.keys, times, values, "value");
    json.times = times;
    json.values = values;
  }
  if (trackType.parse !== void 0) {
    return trackType.parse(json);
  } else {
    return new trackType(json.name, json.times, json.values, json.interpolation);
  }
}
Object.assign(AnimationClip, {
  parse: function(json) {
    const tracks = [], jsonTracks = json.tracks, frameTime = 1 / (json.fps || 1);
    for (let i2 = 0, n2 = jsonTracks.length; i2 !== n2; ++i2) {
      tracks.push(parseKeyframeTrack(jsonTracks[i2]).scale(frameTime));
    }
    return new AnimationClip(json.name, json.duration, tracks, json.blendMode);
  },
  toJSON: function(clip) {
    const tracks = [], clipTracks = clip.tracks;
    const json = {
      "name": clip.name,
      "duration": clip.duration,
      "tracks": tracks,
      "uuid": clip.uuid,
      "blendMode": clip.blendMode
    };
    for (let i2 = 0, n2 = clipTracks.length; i2 !== n2; ++i2) {
      tracks.push(KeyframeTrack.toJSON(clipTracks[i2]));
    }
    return json;
  },
  CreateFromMorphTargetSequence: function(name, morphTargetSequence, fps, noLoop) {
    const numMorphTargets = morphTargetSequence.length;
    const tracks = [];
    for (let i2 = 0; i2 < numMorphTargets; i2++) {
      let times = [];
      let values = [];
      times.push((i2 + numMorphTargets - 1) % numMorphTargets, i2, (i2 + 1) % numMorphTargets);
      values.push(0, 1, 0);
      const order = AnimationUtils.getKeyframeOrder(times);
      times = AnimationUtils.sortedArray(times, 1, order);
      values = AnimationUtils.sortedArray(values, 1, order);
      if (!noLoop && times[0] === 0) {
        times.push(numMorphTargets);
        values.push(values[0]);
      }
      tracks.push(new NumberKeyframeTrack(".morphTargetInfluences[" + morphTargetSequence[i2].name + "]", times, values).scale(1 / fps));
    }
    return new AnimationClip(name, -1, tracks);
  },
  findByName: function(objectOrClipArray, name) {
    let clipArray = objectOrClipArray;
    if (!Array.isArray(objectOrClipArray)) {
      const o2 = objectOrClipArray;
      clipArray = o2.geometry && o2.geometry.animations || o2.animations;
    }
    for (let i2 = 0; i2 < clipArray.length; i2++) {
      if (clipArray[i2].name === name) {
        return clipArray[i2];
      }
    }
    return null;
  },
  CreateClipsFromMorphTargetSequences: function(morphTargets, fps, noLoop) {
    const animationToMorphTargets = {};
    const pattern = /^([\w-]*?)([\d]+)$/;
    for (let i2 = 0, il = morphTargets.length; i2 < il; i2++) {
      const morphTarget = morphTargets[i2];
      const parts = morphTarget.name.match(pattern);
      if (parts && parts.length > 1) {
        const name = parts[1];
        let animationMorphTargets = animationToMorphTargets[name];
        if (!animationMorphTargets) {
          animationToMorphTargets[name] = animationMorphTargets = [];
        }
        animationMorphTargets.push(morphTarget);
      }
    }
    const clips = [];
    for (const name in animationToMorphTargets) {
      clips.push(AnimationClip.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
    }
    return clips;
  },
  parseAnimation: function(animation, bones) {
    if (!animation) {
      console.error("THREE.AnimationClip: No animation in JSONLoader data.");
      return null;
    }
    const addNonemptyTrack = function(trackType, trackName, animationKeys, propertyName, destTracks) {
      if (animationKeys.length !== 0) {
        const times = [];
        const values = [];
        AnimationUtils.flattenJSON(animationKeys, times, values, propertyName);
        if (times.length !== 0) {
          destTracks.push(new trackType(trackName, times, values));
        }
      }
    };
    const tracks = [];
    const clipName = animation.name || "default";
    const fps = animation.fps || 30;
    const blendMode = animation.blendMode;
    let duration = animation.length || -1;
    const hierarchyTracks = animation.hierarchy || [];
    for (let h = 0; h < hierarchyTracks.length; h++) {
      const animationKeys = hierarchyTracks[h].keys;
      if (!animationKeys || animationKeys.length === 0)
        continue;
      if (animationKeys[0].morphTargets) {
        const morphTargetNames = {};
        let k2;
        for (k2 = 0; k2 < animationKeys.length; k2++) {
          if (animationKeys[k2].morphTargets) {
            for (let m2 = 0; m2 < animationKeys[k2].morphTargets.length; m2++) {
              morphTargetNames[animationKeys[k2].morphTargets[m2]] = -1;
            }
          }
        }
        for (const morphTargetName in morphTargetNames) {
          const times = [];
          const values = [];
          for (let m2 = 0; m2 !== animationKeys[k2].morphTargets.length; ++m2) {
            const animationKey = animationKeys[k2];
            times.push(animationKey.time);
            values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
          }
          tracks.push(new NumberKeyframeTrack(".morphTargetInfluence[" + morphTargetName + "]", times, values));
        }
        duration = morphTargetNames.length * (fps || 1);
      } else {
        const boneName = ".bones[" + bones[h].name + "]";
        addNonemptyTrack(VectorKeyframeTrack, boneName + ".position", animationKeys, "pos", tracks);
        addNonemptyTrack(QuaternionKeyframeTrack, boneName + ".quaternion", animationKeys, "rot", tracks);
        addNonemptyTrack(VectorKeyframeTrack, boneName + ".scale", animationKeys, "scl", tracks);
      }
    }
    if (tracks.length === 0) {
      return null;
    }
    const clip = new AnimationClip(clipName, duration, tracks, blendMode);
    return clip;
  }
});
Object.assign(AnimationClip.prototype, {
  resetDuration: function() {
    const tracks = this.tracks;
    let duration = 0;
    for (let i2 = 0, n2 = tracks.length; i2 !== n2; ++i2) {
      const track2 = this.tracks[i2];
      duration = Math.max(duration, track2.times[track2.times.length - 1]);
    }
    this.duration = duration;
    return this;
  },
  trim: function() {
    for (let i2 = 0; i2 < this.tracks.length; i2++) {
      this.tracks[i2].trim(0, this.duration);
    }
    return this;
  },
  validate: function() {
    let valid = true;
    for (let i2 = 0; i2 < this.tracks.length; i2++) {
      valid = valid && this.tracks[i2].validate();
    }
    return valid;
  },
  optimize: function() {
    for (let i2 = 0; i2 < this.tracks.length; i2++) {
      this.tracks[i2].optimize();
    }
    return this;
  },
  clone: function() {
    const tracks = [];
    for (let i2 = 0; i2 < this.tracks.length; i2++) {
      tracks.push(this.tracks[i2].clone());
    }
    return new AnimationClip(this.name, this.duration, tracks, this.blendMode);
  }
});
const Cache = {
  enabled: false,
  files: {},
  add: function(key, file) {
    if (this.enabled === false)
      return;
    this.files[key] = file;
  },
  get: function(key) {
    if (this.enabled === false)
      return;
    return this.files[key];
  },
  remove: function(key) {
    delete this.files[key];
  },
  clear: function() {
    this.files = {};
  }
};
function LoadingManager(onLoad, onProgress, onError) {
  const scope = this;
  let isLoading = false;
  let itemsLoaded = 0;
  let itemsTotal = 0;
  let urlModifier = void 0;
  const handlers = [];
  this.onStart = void 0;
  this.onLoad = onLoad;
  this.onProgress = onProgress;
  this.onError = onError;
  this.itemStart = function(url) {
    itemsTotal++;
    if (isLoading === false) {
      if (scope.onStart !== void 0) {
        scope.onStart(url, itemsLoaded, itemsTotal);
      }
    }
    isLoading = true;
  };
  this.itemEnd = function(url) {
    itemsLoaded++;
    if (scope.onProgress !== void 0) {
      scope.onProgress(url, itemsLoaded, itemsTotal);
    }
    if (itemsLoaded === itemsTotal) {
      isLoading = false;
      if (scope.onLoad !== void 0) {
        scope.onLoad();
      }
    }
  };
  this.itemError = function(url) {
    if (scope.onError !== void 0) {
      scope.onError(url);
    }
  };
  this.resolveURL = function(url) {
    if (urlModifier) {
      return urlModifier(url);
    }
    return url;
  };
  this.setURLModifier = function(transform) {
    urlModifier = transform;
    return this;
  };
  this.addHandler = function(regex, loader) {
    handlers.push(regex, loader);
    return this;
  };
  this.removeHandler = function(regex) {
    const index = handlers.indexOf(regex);
    if (index !== -1) {
      handlers.splice(index, 2);
    }
    return this;
  };
  this.getHandler = function(file) {
    for (let i2 = 0, l2 = handlers.length; i2 < l2; i2 += 2) {
      const regex = handlers[i2];
      const loader = handlers[i2 + 1];
      if (regex.global)
        regex.lastIndex = 0;
      if (regex.test(file)) {
        return loader;
      }
    }
    return null;
  };
}
const DefaultLoadingManager = new LoadingManager();
function Loader(manager) {
  this.manager = manager !== void 0 ? manager : DefaultLoadingManager;
  this.crossOrigin = "anonymous";
  this.withCredentials = false;
  this.path = "";
  this.resourcePath = "";
  this.requestHeader = {};
}
Object.assign(Loader.prototype, {
  load: function() {
  },
  loadAsync: function(url, onProgress) {
    const scope = this;
    return new Promise(function(resolve, reject) {
      scope.load(url, resolve, onProgress, reject);
    });
  },
  parse: function() {
  },
  setCrossOrigin: function(crossOrigin) {
    this.crossOrigin = crossOrigin;
    return this;
  },
  setWithCredentials: function(value) {
    this.withCredentials = value;
    return this;
  },
  setPath: function(path) {
    this.path = path;
    return this;
  },
  setResourcePath: function(resourcePath) {
    this.resourcePath = resourcePath;
    return this;
  },
  setRequestHeader: function(requestHeader) {
    this.requestHeader = requestHeader;
    return this;
  }
});
const loading = {};
function FileLoader(manager) {
  Loader.call(this, manager);
}
FileLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: FileLoader,
  load: function(url, onLoad, onProgress, onError) {
    if (url === void 0)
      url = "";
    if (this.path !== void 0)
      url = this.path + url;
    url = this.manager.resolveURL(url);
    const scope = this;
    const cached = Cache.get(url);
    if (cached !== void 0) {
      scope.manager.itemStart(url);
      setTimeout(function() {
        if (onLoad)
          onLoad(cached);
        scope.manager.itemEnd(url);
      }, 0);
      return cached;
    }
    if (loading[url] !== void 0) {
      loading[url].push({
        onLoad,
        onProgress,
        onError
      });
      return;
    }
    const dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
    const dataUriRegexResult = url.match(dataUriRegex);
    let request;
    if (dataUriRegexResult) {
      const mimeType = dataUriRegexResult[1];
      const isBase64 = !!dataUriRegexResult[2];
      let data = dataUriRegexResult[3];
      data = decodeURIComponent(data);
      if (isBase64)
        data = atob(data);
      try {
        let response;
        const responseType = (this.responseType || "").toLowerCase();
        switch (responseType) {
          case "arraybuffer":
          case "blob":
            const view = new Uint8Array(data.length);
            for (let i2 = 0; i2 < data.length; i2++) {
              view[i2] = data.charCodeAt(i2);
            }
            if (responseType === "blob") {
              response = new Blob([view.buffer], { type: mimeType });
            } else {
              response = view.buffer;
            }
            break;
          case "document":
            const parser = new DOMParser();
            response = parser.parseFromString(data, mimeType);
            break;
          case "json":
            response = JSON.parse(data);
            break;
          default:
            response = data;
            break;
        }
        setTimeout(function() {
          if (onLoad)
            onLoad(response);
          scope.manager.itemEnd(url);
        }, 0);
      } catch (error) {
        setTimeout(function() {
          if (onError)
            onError(error);
          scope.manager.itemError(url);
          scope.manager.itemEnd(url);
        }, 0);
      }
    } else {
      loading[url] = [];
      loading[url].push({
        onLoad,
        onProgress,
        onError
      });
      request = new XMLHttpRequest();
      request.open("GET", url, true);
      request.addEventListener("load", function(event) {
        const response = this.response;
        const callbacks = loading[url];
        delete loading[url];
        if (this.status === 200 || this.status === 0) {
          if (this.status === 0)
            console.warn("THREE.FileLoader: HTTP Status 0 received.");
          Cache.add(url, response);
          for (let i2 = 0, il = callbacks.length; i2 < il; i2++) {
            const callback = callbacks[i2];
            if (callback.onLoad)
              callback.onLoad(response);
          }
          scope.manager.itemEnd(url);
        } else {
          for (let i2 = 0, il = callbacks.length; i2 < il; i2++) {
            const callback = callbacks[i2];
            if (callback.onError)
              callback.onError(event);
          }
          scope.manager.itemError(url);
          scope.manager.itemEnd(url);
        }
      }, false);
      request.addEventListener("progress", function(event) {
        const callbacks = loading[url];
        for (let i2 = 0, il = callbacks.length; i2 < il; i2++) {
          const callback = callbacks[i2];
          if (callback.onProgress)
            callback.onProgress(event);
        }
      }, false);
      request.addEventListener("error", function(event) {
        const callbacks = loading[url];
        delete loading[url];
        for (let i2 = 0, il = callbacks.length; i2 < il; i2++) {
          const callback = callbacks[i2];
          if (callback.onError)
            callback.onError(event);
        }
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      }, false);
      request.addEventListener("abort", function(event) {
        const callbacks = loading[url];
        delete loading[url];
        for (let i2 = 0, il = callbacks.length; i2 < il; i2++) {
          const callback = callbacks[i2];
          if (callback.onError)
            callback.onError(event);
        }
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      }, false);
      if (this.responseType !== void 0)
        request.responseType = this.responseType;
      if (this.withCredentials !== void 0)
        request.withCredentials = this.withCredentials;
      if (request.overrideMimeType)
        request.overrideMimeType(this.mimeType !== void 0 ? this.mimeType : "text/plain");
      for (const header in this.requestHeader) {
        request.setRequestHeader(header, this.requestHeader[header]);
      }
      request.send(null);
    }
    scope.manager.itemStart(url);
    return request;
  },
  setResponseType: function(value) {
    this.responseType = value;
    return this;
  },
  setMimeType: function(value) {
    this.mimeType = value;
    return this;
  }
});
function AnimationLoader(manager) {
  Loader.call(this, manager);
}
AnimationLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: AnimationLoader,
  load: function(url, onLoad, onProgress, onError) {
    const scope = this;
    const loader = new FileLoader(scope.manager);
    loader.setPath(scope.path);
    loader.setRequestHeader(scope.requestHeader);
    loader.setWithCredentials(scope.withCredentials);
    loader.load(url, function(text) {
      try {
        onLoad(scope.parse(JSON.parse(text)));
      } catch (e2) {
        if (onError) {
          onError(e2);
        } else {
          console.error(e2);
        }
        scope.manager.itemError(url);
      }
    }, onProgress, onError);
  },
  parse: function(json) {
    const animations = [];
    for (let i2 = 0; i2 < json.length; i2++) {
      const clip = AnimationClip.parse(json[i2]);
      animations.push(clip);
    }
    return animations;
  }
});
function CompressedTextureLoader(manager) {
  Loader.call(this, manager);
}
CompressedTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: CompressedTextureLoader,
  load: function(url, onLoad, onProgress, onError) {
    const scope = this;
    const images = [];
    const texture = new CompressedTexture();
    texture.image = images;
    const loader = new FileLoader(this.manager);
    loader.setPath(this.path);
    loader.setResponseType("arraybuffer");
    loader.setRequestHeader(this.requestHeader);
    loader.setWithCredentials(scope.withCredentials);
    let loaded = 0;
    function loadTexture(i2) {
      loader.load(url[i2], function(buffer) {
        const texDatas = scope.parse(buffer, true);
        images[i2] = {
          width: texDatas.width,
          height: texDatas.height,
          format: texDatas.format,
          mipmaps: texDatas.mipmaps
        };
        loaded += 1;
        if (loaded === 6) {
          if (texDatas.mipmapCount === 1)
            texture.minFilter = LinearFilter;
          texture.format = texDatas.format;
          texture.needsUpdate = true;
          if (onLoad)
            onLoad(texture);
        }
      }, onProgress, onError);
    }
    if (Array.isArray(url)) {
      for (let i2 = 0, il = url.length; i2 < il; ++i2) {
        loadTexture(i2);
      }
    } else {
      loader.load(url, function(buffer) {
        const texDatas = scope.parse(buffer, true);
        if (texDatas.isCubemap) {
          const faces = texDatas.mipmaps.length / texDatas.mipmapCount;
          for (let f2 = 0; f2 < faces; f2++) {
            images[f2] = { mipmaps: [] };
            for (let i2 = 0; i2 < texDatas.mipmapCount; i2++) {
              images[f2].mipmaps.push(texDatas.mipmaps[f2 * texDatas.mipmapCount + i2]);
              images[f2].format = texDatas.format;
              images[f2].width = texDatas.width;
              images[f2].height = texDatas.height;
            }
          }
        } else {
          texture.image.width = texDatas.width;
          texture.image.height = texDatas.height;
          texture.mipmaps = texDatas.mipmaps;
        }
        if (texDatas.mipmapCount === 1) {
          texture.minFilter = LinearFilter;
        }
        texture.format = texDatas.format;
        texture.needsUpdate = true;
        if (onLoad)
          onLoad(texture);
      }, onProgress, onError);
    }
    return texture;
  }
});
function ImageLoader(manager) {
  Loader.call(this, manager);
}
ImageLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: ImageLoader,
  load: function(url, onLoad, onProgress, onError) {
    if (this.path !== void 0)
      url = this.path + url;
    url = this.manager.resolveURL(url);
    const scope = this;
    const cached = Cache.get(url);
    if (cached !== void 0) {
      scope.manager.itemStart(url);
      setTimeout(function() {
        if (onLoad)
          onLoad(cached);
        scope.manager.itemEnd(url);
      }, 0);
      return cached;
    }
    const image = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
    function onImageLoad() {
      image.removeEventListener("load", onImageLoad, false);
      image.removeEventListener("error", onImageError, false);
      Cache.add(url, this);
      if (onLoad)
        onLoad(this);
      scope.manager.itemEnd(url);
    }
    function onImageError(event) {
      image.removeEventListener("load", onImageLoad, false);
      image.removeEventListener("error", onImageError, false);
      if (onError)
        onError(event);
      scope.manager.itemError(url);
      scope.manager.itemEnd(url);
    }
    image.addEventListener("load", onImageLoad, false);
    image.addEventListener("error", onImageError, false);
    if (url.substr(0, 5) !== "data:") {
      if (this.crossOrigin !== void 0)
        image.crossOrigin = this.crossOrigin;
    }
    scope.manager.itemStart(url);
    image.src = url;
    return image;
  }
});
function CubeTextureLoader(manager) {
  Loader.call(this, manager);
}
CubeTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: CubeTextureLoader,
  load: function(urls, onLoad, onProgress, onError) {
    const texture = new CubeTexture();
    const loader = new ImageLoader(this.manager);
    loader.setCrossOrigin(this.crossOrigin);
    loader.setPath(this.path);
    let loaded = 0;
    function loadTexture(i2) {
      loader.load(urls[i2], function(image) {
        texture.images[i2] = image;
        loaded++;
        if (loaded === 6) {
          texture.needsUpdate = true;
          if (onLoad)
            onLoad(texture);
        }
      }, void 0, onError);
    }
    for (let i2 = 0; i2 < urls.length; ++i2) {
      loadTexture(i2);
    }
    return texture;
  }
});
function DataTextureLoader(manager) {
  Loader.call(this, manager);
}
DataTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: DataTextureLoader,
  load: function(url, onLoad, onProgress, onError) {
    const scope = this;
    const texture = new DataTexture();
    const loader = new FileLoader(this.manager);
    loader.setResponseType("arraybuffer");
    loader.setRequestHeader(this.requestHeader);
    loader.setPath(this.path);
    loader.setWithCredentials(scope.withCredentials);
    loader.load(url, function(buffer) {
      const texData = scope.parse(buffer);
      if (!texData)
        return;
      if (texData.image !== void 0) {
        texture.image = texData.image;
      } else if (texData.data !== void 0) {
        texture.image.width = texData.width;
        texture.image.height = texData.height;
        texture.image.data = texData.data;
      }
      texture.wrapS = texData.wrapS !== void 0 ? texData.wrapS : ClampToEdgeWrapping;
      texture.wrapT = texData.wrapT !== void 0 ? texData.wrapT : ClampToEdgeWrapping;
      texture.magFilter = texData.magFilter !== void 0 ? texData.magFilter : LinearFilter;
      texture.minFilter = texData.minFilter !== void 0 ? texData.minFilter : LinearFilter;
      texture.anisotropy = texData.anisotropy !== void 0 ? texData.anisotropy : 1;
      if (texData.format !== void 0) {
        texture.format = texData.format;
      }
      if (texData.type !== void 0) {
        texture.type = texData.type;
      }
      if (texData.mipmaps !== void 0) {
        texture.mipmaps = texData.mipmaps;
        texture.minFilter = LinearMipmapLinearFilter;
      }
      if (texData.mipmapCount === 1) {
        texture.minFilter = LinearFilter;
      }
      texture.needsUpdate = true;
      if (onLoad)
        onLoad(texture, texData);
    }, onProgress, onError);
    return texture;
  }
});
function TextureLoader(manager) {
  Loader.call(this, manager);
}
TextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: TextureLoader,
  load: function(url, onLoad, onProgress, onError) {
    const texture = new Texture();
    const loader = new ImageLoader(this.manager);
    loader.setCrossOrigin(this.crossOrigin);
    loader.setPath(this.path);
    loader.load(url, function(image) {
      texture.image = image;
      const isJPEG = url.search(/\.jpe?g($|\?)/i) > 0 || url.search(/^data\:image\/jpeg/) === 0;
      texture.format = isJPEG ? RGBFormat : RGBAFormat;
      texture.needsUpdate = true;
      if (onLoad !== void 0) {
        onLoad(texture);
      }
    }, onProgress, onError);
    return texture;
  }
});
function Curve() {
  this.type = "Curve";
  this.arcLengthDivisions = 200;
}
Object.assign(Curve.prototype, {
  getPoint: function() {
    console.warn("THREE.Curve: .getPoint() not implemented.");
    return null;
  },
  getPointAt: function(u2, optionalTarget) {
    const t3 = this.getUtoTmapping(u2);
    return this.getPoint(t3, optionalTarget);
  },
  getPoints: function(divisions) {
    if (divisions === void 0)
      divisions = 5;
    const points = [];
    for (let d = 0; d <= divisions; d++) {
      points.push(this.getPoint(d / divisions));
    }
    return points;
  },
  getSpacedPoints: function(divisions) {
    if (divisions === void 0)
      divisions = 5;
    const points = [];
    for (let d = 0; d <= divisions; d++) {
      points.push(this.getPointAt(d / divisions));
    }
    return points;
  },
  getLength: function() {
    const lengths = this.getLengths();
    return lengths[lengths.length - 1];
  },
  getLengths: function(divisions) {
    if (divisions === void 0)
      divisions = this.arcLengthDivisions;
    if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
      return this.cacheArcLengths;
    }
    this.needsUpdate = false;
    const cache = [];
    let current, last = this.getPoint(0);
    let sum = 0;
    cache.push(0);
    for (let p2 = 1; p2 <= divisions; p2++) {
      current = this.getPoint(p2 / divisions);
      sum += current.distanceTo(last);
      cache.push(sum);
      last = current;
    }
    this.cacheArcLengths = cache;
    return cache;
  },
  updateArcLengths: function() {
    this.needsUpdate = true;
    this.getLengths();
  },
  getUtoTmapping: function(u2, distance) {
    const arcLengths = this.getLengths();
    let i2 = 0;
    const il = arcLengths.length;
    let targetArcLength;
    if (distance) {
      targetArcLength = distance;
    } else {
      targetArcLength = u2 * arcLengths[il - 1];
    }
    let low = 0, high = il - 1, comparison;
    while (low <= high) {
      i2 = Math.floor(low + (high - low) / 2);
      comparison = arcLengths[i2] - targetArcLength;
      if (comparison < 0) {
        low = i2 + 1;
      } else if (comparison > 0) {
        high = i2 - 1;
      } else {
        high = i2;
        break;
      }
    }
    i2 = high;
    if (arcLengths[i2] === targetArcLength) {
      return i2 / (il - 1);
    }
    const lengthBefore = arcLengths[i2];
    const lengthAfter = arcLengths[i2 + 1];
    const segmentLength = lengthAfter - lengthBefore;
    const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
    const t3 = (i2 + segmentFraction) / (il - 1);
    return t3;
  },
  getTangent: function(t3, optionalTarget) {
    const delta = 1e-4;
    let t1 = t3 - delta;
    let t22 = t3 + delta;
    if (t1 < 0)
      t1 = 0;
    if (t22 > 1)
      t22 = 1;
    const pt1 = this.getPoint(t1);
    const pt2 = this.getPoint(t22);
    const tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());
    tangent.copy(pt2).sub(pt1).normalize();
    return tangent;
  },
  getTangentAt: function(u2, optionalTarget) {
    const t3 = this.getUtoTmapping(u2);
    return this.getTangent(t3, optionalTarget);
  },
  computeFrenetFrames: function(segments, closed) {
    const normal = new Vector3();
    const tangents = [];
    const normals = [];
    const binormals = [];
    const vec = new Vector3();
    const mat = new Matrix4();
    for (let i2 = 0; i2 <= segments; i2++) {
      const u2 = i2 / segments;
      tangents[i2] = this.getTangentAt(u2, new Vector3());
      tangents[i2].normalize();
    }
    normals[0] = new Vector3();
    binormals[0] = new Vector3();
    let min = Number.MAX_VALUE;
    const tx = Math.abs(tangents[0].x);
    const ty = Math.abs(tangents[0].y);
    const tz = Math.abs(tangents[0].z);
    if (tx <= min) {
      min = tx;
      normal.set(1, 0, 0);
    }
    if (ty <= min) {
      min = ty;
      normal.set(0, 1, 0);
    }
    if (tz <= min) {
      normal.set(0, 0, 1);
    }
    vec.crossVectors(tangents[0], normal).normalize();
    normals[0].crossVectors(tangents[0], vec);
    binormals[0].crossVectors(tangents[0], normals[0]);
    for (let i2 = 1; i2 <= segments; i2++) {
      normals[i2] = normals[i2 - 1].clone();
      binormals[i2] = binormals[i2 - 1].clone();
      vec.crossVectors(tangents[i2 - 1], tangents[i2]);
      if (vec.length() > Number.EPSILON) {
        vec.normalize();
        const theta = Math.acos(MathUtils.clamp(tangents[i2 - 1].dot(tangents[i2]), -1, 1));
        normals[i2].applyMatrix4(mat.makeRotationAxis(vec, theta));
      }
      binormals[i2].crossVectors(tangents[i2], normals[i2]);
    }
    if (closed === true) {
      let theta = Math.acos(MathUtils.clamp(normals[0].dot(normals[segments]), -1, 1));
      theta /= segments;
      if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {
        theta = -theta;
      }
      for (let i2 = 1; i2 <= segments; i2++) {
        normals[i2].applyMatrix4(mat.makeRotationAxis(tangents[i2], theta * i2));
        binormals[i2].crossVectors(tangents[i2], normals[i2]);
      }
    }
    return {
      tangents,
      normals,
      binormals
    };
  },
  clone: function() {
    return new this.constructor().copy(this);
  },
  copy: function(source) {
    this.arcLengthDivisions = source.arcLengthDivisions;
    return this;
  },
  toJSON: function() {
    const data = {
      metadata: {
        version: 4.5,
        type: "Curve",
        generator: "Curve.toJSON"
      }
    };
    data.arcLengthDivisions = this.arcLengthDivisions;
    data.type = this.type;
    return data;
  },
  fromJSON: function(json) {
    this.arcLengthDivisions = json.arcLengthDivisions;
    return this;
  }
});
function EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
  Curve.call(this);
  this.type = "EllipseCurve";
  this.aX = aX || 0;
  this.aY = aY || 0;
  this.xRadius = xRadius || 1;
  this.yRadius = yRadius || 1;
  this.aStartAngle = aStartAngle || 0;
  this.aEndAngle = aEndAngle || 2 * Math.PI;
  this.aClockwise = aClockwise || false;
  this.aRotation = aRotation || 0;
}
EllipseCurve.prototype = Object.create(Curve.prototype);
EllipseCurve.prototype.constructor = EllipseCurve;
EllipseCurve.prototype.isEllipseCurve = true;
EllipseCurve.prototype.getPoint = function(t3, optionalTarget) {
  const point = optionalTarget || new Vector2();
  const twoPi = Math.PI * 2;
  let deltaAngle = this.aEndAngle - this.aStartAngle;
  const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
  while (deltaAngle < 0)
    deltaAngle += twoPi;
  while (deltaAngle > twoPi)
    deltaAngle -= twoPi;
  if (deltaAngle < Number.EPSILON) {
    if (samePoints) {
      deltaAngle = 0;
    } else {
      deltaAngle = twoPi;
    }
  }
  if (this.aClockwise === true && !samePoints) {
    if (deltaAngle === twoPi) {
      deltaAngle = -twoPi;
    } else {
      deltaAngle = deltaAngle - twoPi;
    }
  }
  const angle = this.aStartAngle + t3 * deltaAngle;
  let x2 = this.aX + this.xRadius * Math.cos(angle);
  let y2 = this.aY + this.yRadius * Math.sin(angle);
  if (this.aRotation !== 0) {
    const cos = Math.cos(this.aRotation);
    const sin = Math.sin(this.aRotation);
    const tx = x2 - this.aX;
    const ty = y2 - this.aY;
    x2 = tx * cos - ty * sin + this.aX;
    y2 = tx * sin + ty * cos + this.aY;
  }
  return point.set(x2, y2);
};
EllipseCurve.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.aX = source.aX;
  this.aY = source.aY;
  this.xRadius = source.xRadius;
  this.yRadius = source.yRadius;
  this.aStartAngle = source.aStartAngle;
  this.aEndAngle = source.aEndAngle;
  this.aClockwise = source.aClockwise;
  this.aRotation = source.aRotation;
  return this;
};
EllipseCurve.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.aX = this.aX;
  data.aY = this.aY;
  data.xRadius = this.xRadius;
  data.yRadius = this.yRadius;
  data.aStartAngle = this.aStartAngle;
  data.aEndAngle = this.aEndAngle;
  data.aClockwise = this.aClockwise;
  data.aRotation = this.aRotation;
  return data;
};
EllipseCurve.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.aX = json.aX;
  this.aY = json.aY;
  this.xRadius = json.xRadius;
  this.yRadius = json.yRadius;
  this.aStartAngle = json.aStartAngle;
  this.aEndAngle = json.aEndAngle;
  this.aClockwise = json.aClockwise;
  this.aRotation = json.aRotation;
  return this;
};
function ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
  EllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
  this.type = "ArcCurve";
}
ArcCurve.prototype = Object.create(EllipseCurve.prototype);
ArcCurve.prototype.constructor = ArcCurve;
ArcCurve.prototype.isArcCurve = true;
function CubicPoly() {
  let c0 = 0, c1 = 0, c2 = 0, c3 = 0;
  function init(x0, x1, t0, t1) {
    c0 = x0;
    c1 = t0;
    c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
    c3 = 2 * x0 - 2 * x1 + t0 + t1;
  }
  return {
    initCatmullRom: function(x0, x1, x2, x3, tension) {
      init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
    },
    initNonuniformCatmullRom: function(x0, x1, x2, x3, dt0, dt1, dt2) {
      let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
      let t22 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
      t1 *= dt1;
      t22 *= dt1;
      init(x1, x2, t1, t22);
    },
    calc: function(t3) {
      const t22 = t3 * t3;
      const t32 = t22 * t3;
      return c0 + c1 * t3 + c2 * t22 + c3 * t32;
    }
  };
}
const tmp = new Vector3();
const px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();
function CatmullRomCurve3(points, closed, curveType, tension) {
  Curve.call(this);
  this.type = "CatmullRomCurve3";
  this.points = points || [];
  this.closed = closed || false;
  this.curveType = curveType || "centripetal";
  this.tension = tension !== void 0 ? tension : 0.5;
}
CatmullRomCurve3.prototype = Object.create(Curve.prototype);
CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;
CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;
CatmullRomCurve3.prototype.getPoint = function(t3, optionalTarget) {
  const point = optionalTarget || new Vector3();
  const points = this.points;
  const l2 = points.length;
  const p2 = (l2 - (this.closed ? 0 : 1)) * t3;
  let intPoint = Math.floor(p2);
  let weight = p2 - intPoint;
  if (this.closed) {
    intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l2) + 1) * l2;
  } else if (weight === 0 && intPoint === l2 - 1) {
    intPoint = l2 - 2;
    weight = 1;
  }
  let p0, p3;
  if (this.closed || intPoint > 0) {
    p0 = points[(intPoint - 1) % l2];
  } else {
    tmp.subVectors(points[0], points[1]).add(points[0]);
    p0 = tmp;
  }
  const p1 = points[intPoint % l2];
  const p22 = points[(intPoint + 1) % l2];
  if (this.closed || intPoint + 2 < l2) {
    p3 = points[(intPoint + 2) % l2];
  } else {
    tmp.subVectors(points[l2 - 1], points[l2 - 2]).add(points[l2 - 1]);
    p3 = tmp;
  }
  if (this.curveType === "centripetal" || this.curveType === "chordal") {
    const pow = this.curveType === "chordal" ? 0.5 : 0.25;
    let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
    let dt1 = Math.pow(p1.distanceToSquared(p22), pow);
    let dt2 = Math.pow(p22.distanceToSquared(p3), pow);
    if (dt1 < 1e-4)
      dt1 = 1;
    if (dt0 < 1e-4)
      dt0 = dt1;
    if (dt2 < 1e-4)
      dt2 = dt1;
    px.initNonuniformCatmullRom(p0.x, p1.x, p22.x, p3.x, dt0, dt1, dt2);
    py.initNonuniformCatmullRom(p0.y, p1.y, p22.y, p3.y, dt0, dt1, dt2);
    pz.initNonuniformCatmullRom(p0.z, p1.z, p22.z, p3.z, dt0, dt1, dt2);
  } else if (this.curveType === "catmullrom") {
    px.initCatmullRom(p0.x, p1.x, p22.x, p3.x, this.tension);
    py.initCatmullRom(p0.y, p1.y, p22.y, p3.y, this.tension);
    pz.initCatmullRom(p0.z, p1.z, p22.z, p3.z, this.tension);
  }
  point.set(px.calc(weight), py.calc(weight), pz.calc(weight));
  return point;
};
CatmullRomCurve3.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.points = [];
  for (let i2 = 0, l2 = source.points.length; i2 < l2; i2++) {
    const point = source.points[i2];
    this.points.push(point.clone());
  }
  this.closed = source.closed;
  this.curveType = source.curveType;
  this.tension = source.tension;
  return this;
};
CatmullRomCurve3.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.points = [];
  for (let i2 = 0, l2 = this.points.length; i2 < l2; i2++) {
    const point = this.points[i2];
    data.points.push(point.toArray());
  }
  data.closed = this.closed;
  data.curveType = this.curveType;
  data.tension = this.tension;
  return data;
};
CatmullRomCurve3.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.points = [];
  for (let i2 = 0, l2 = json.points.length; i2 < l2; i2++) {
    const point = json.points[i2];
    this.points.push(new Vector3().fromArray(point));
  }
  this.closed = json.closed;
  this.curveType = json.curveType;
  this.tension = json.tension;
  return this;
};
function CatmullRom(t3, p0, p1, p2, p3) {
  const v0 = (p2 - p0) * 0.5;
  const v1 = (p3 - p1) * 0.5;
  const t22 = t3 * t3;
  const t32 = t3 * t22;
  return (2 * p1 - 2 * p2 + v0 + v1) * t32 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t22 + v0 * t3 + p1;
}
function QuadraticBezierP0(t3, p2) {
  const k2 = 1 - t3;
  return k2 * k2 * p2;
}
function QuadraticBezierP1(t3, p2) {
  return 2 * (1 - t3) * t3 * p2;
}
function QuadraticBezierP2(t3, p2) {
  return t3 * t3 * p2;
}
function QuadraticBezier(t3, p0, p1, p2) {
  return QuadraticBezierP0(t3, p0) + QuadraticBezierP1(t3, p1) + QuadraticBezierP2(t3, p2);
}
function CubicBezierP0(t3, p2) {
  const k2 = 1 - t3;
  return k2 * k2 * k2 * p2;
}
function CubicBezierP1(t3, p2) {
  const k2 = 1 - t3;
  return 3 * k2 * k2 * t3 * p2;
}
function CubicBezierP2(t3, p2) {
  return 3 * (1 - t3) * t3 * t3 * p2;
}
function CubicBezierP3(t3, p2) {
  return t3 * t3 * t3 * p2;
}
function CubicBezier(t3, p0, p1, p2, p3) {
  return CubicBezierP0(t3, p0) + CubicBezierP1(t3, p1) + CubicBezierP2(t3, p2) + CubicBezierP3(t3, p3);
}
function CubicBezierCurve(v0, v1, v2, v3) {
  Curve.call(this);
  this.type = "CubicBezierCurve";
  this.v0 = v0 || new Vector2();
  this.v1 = v1 || new Vector2();
  this.v2 = v2 || new Vector2();
  this.v3 = v3 || new Vector2();
}
CubicBezierCurve.prototype = Object.create(Curve.prototype);
CubicBezierCurve.prototype.constructor = CubicBezierCurve;
CubicBezierCurve.prototype.isCubicBezierCurve = true;
CubicBezierCurve.prototype.getPoint = function(t3, optionalTarget) {
  const point = optionalTarget || new Vector2();
  const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
  point.set(CubicBezier(t3, v0.x, v1.x, v2.x, v3.x), CubicBezier(t3, v0.y, v1.y, v2.y, v3.y));
  return point;
};
CubicBezierCurve.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.v0.copy(source.v0);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  this.v3.copy(source.v3);
  return this;
};
CubicBezierCurve.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.v0 = this.v0.toArray();
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  data.v3 = this.v3.toArray();
  return data;
};
CubicBezierCurve.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v0.fromArray(json.v0);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  this.v3.fromArray(json.v3);
  return this;
};
function CubicBezierCurve3(v0, v1, v2, v3) {
  Curve.call(this);
  this.type = "CubicBezierCurve3";
  this.v0 = v0 || new Vector3();
  this.v1 = v1 || new Vector3();
  this.v2 = v2 || new Vector3();
  this.v3 = v3 || new Vector3();
}
CubicBezierCurve3.prototype = Object.create(Curve.prototype);
CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;
CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;
CubicBezierCurve3.prototype.getPoint = function(t3, optionalTarget) {
  const point = optionalTarget || new Vector3();
  const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
  point.set(CubicBezier(t3, v0.x, v1.x, v2.x, v3.x), CubicBezier(t3, v0.y, v1.y, v2.y, v3.y), CubicBezier(t3, v0.z, v1.z, v2.z, v3.z));
  return point;
};
CubicBezierCurve3.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.v0.copy(source.v0);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  this.v3.copy(source.v3);
  return this;
};
CubicBezierCurve3.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.v0 = this.v0.toArray();
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  data.v3 = this.v3.toArray();
  return data;
};
CubicBezierCurve3.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v0.fromArray(json.v0);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  this.v3.fromArray(json.v3);
  return this;
};
function LineCurve(v1, v2) {
  Curve.call(this);
  this.type = "LineCurve";
  this.v1 = v1 || new Vector2();
  this.v2 = v2 || new Vector2();
}
LineCurve.prototype = Object.create(Curve.prototype);
LineCurve.prototype.constructor = LineCurve;
LineCurve.prototype.isLineCurve = true;
LineCurve.prototype.getPoint = function(t3, optionalTarget) {
  const point = optionalTarget || new Vector2();
  if (t3 === 1) {
    point.copy(this.v2);
  } else {
    point.copy(this.v2).sub(this.v1);
    point.multiplyScalar(t3).add(this.v1);
  }
  return point;
};
LineCurve.prototype.getPointAt = function(u2, optionalTarget) {
  return this.getPoint(u2, optionalTarget);
};
LineCurve.prototype.getTangent = function(t3, optionalTarget) {
  const tangent = optionalTarget || new Vector2();
  tangent.copy(this.v2).sub(this.v1).normalize();
  return tangent;
};
LineCurve.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  return this;
};
LineCurve.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  return data;
};
LineCurve.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  return this;
};
function LineCurve3(v1, v2) {
  Curve.call(this);
  this.type = "LineCurve3";
  this.v1 = v1 || new Vector3();
  this.v2 = v2 || new Vector3();
}
LineCurve3.prototype = Object.create(Curve.prototype);
LineCurve3.prototype.constructor = LineCurve3;
LineCurve3.prototype.isLineCurve3 = true;
LineCurve3.prototype.getPoint = function(t3, optionalTarget) {
  const point = optionalTarget || new Vector3();
  if (t3 === 1) {
    point.copy(this.v2);
  } else {
    point.copy(this.v2).sub(this.v1);
    point.multiplyScalar(t3).add(this.v1);
  }
  return point;
};
LineCurve3.prototype.getPointAt = function(u2, optionalTarget) {
  return this.getPoint(u2, optionalTarget);
};
LineCurve3.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  return this;
};
LineCurve3.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  return data;
};
LineCurve3.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  return this;
};
function QuadraticBezierCurve(v0, v1, v2) {
  Curve.call(this);
  this.type = "QuadraticBezierCurve";
  this.v0 = v0 || new Vector2();
  this.v1 = v1 || new Vector2();
  this.v2 = v2 || new Vector2();
}
QuadraticBezierCurve.prototype = Object.create(Curve.prototype);
QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;
QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;
QuadraticBezierCurve.prototype.getPoint = function(t3, optionalTarget) {
  const point = optionalTarget || new Vector2();
  const v0 = this.v0, v1 = this.v1, v2 = this.v2;
  point.set(QuadraticBezier(t3, v0.x, v1.x, v2.x), QuadraticBezier(t3, v0.y, v1.y, v2.y));
  return point;
};
QuadraticBezierCurve.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.v0.copy(source.v0);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  return this;
};
QuadraticBezierCurve.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.v0 = this.v0.toArray();
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  return data;
};
QuadraticBezierCurve.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v0.fromArray(json.v0);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  return this;
};
function QuadraticBezierCurve3(v0, v1, v2) {
  Curve.call(this);
  this.type = "QuadraticBezierCurve3";
  this.v0 = v0 || new Vector3();
  this.v1 = v1 || new Vector3();
  this.v2 = v2 || new Vector3();
}
QuadraticBezierCurve3.prototype = Object.create(Curve.prototype);
QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;
QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;
QuadraticBezierCurve3.prototype.getPoint = function(t3, optionalTarget) {
  const point = optionalTarget || new Vector3();
  const v0 = this.v0, v1 = this.v1, v2 = this.v2;
  point.set(QuadraticBezier(t3, v0.x, v1.x, v2.x), QuadraticBezier(t3, v0.y, v1.y, v2.y), QuadraticBezier(t3, v0.z, v1.z, v2.z));
  return point;
};
QuadraticBezierCurve3.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.v0.copy(source.v0);
  this.v1.copy(source.v1);
  this.v2.copy(source.v2);
  return this;
};
QuadraticBezierCurve3.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.v0 = this.v0.toArray();
  data.v1 = this.v1.toArray();
  data.v2 = this.v2.toArray();
  return data;
};
QuadraticBezierCurve3.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.v0.fromArray(json.v0);
  this.v1.fromArray(json.v1);
  this.v2.fromArray(json.v2);
  return this;
};
function SplineCurve(points) {
  Curve.call(this);
  this.type = "SplineCurve";
  this.points = points || [];
}
SplineCurve.prototype = Object.create(Curve.prototype);
SplineCurve.prototype.constructor = SplineCurve;
SplineCurve.prototype.isSplineCurve = true;
SplineCurve.prototype.getPoint = function(t3, optionalTarget) {
  const point = optionalTarget || new Vector2();
  const points = this.points;
  const p2 = (points.length - 1) * t3;
  const intPoint = Math.floor(p2);
  const weight = p2 - intPoint;
  const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
  const p1 = points[intPoint];
  const p22 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
  const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
  point.set(CatmullRom(weight, p0.x, p1.x, p22.x, p3.x), CatmullRom(weight, p0.y, p1.y, p22.y, p3.y));
  return point;
};
SplineCurve.prototype.copy = function(source) {
  Curve.prototype.copy.call(this, source);
  this.points = [];
  for (let i2 = 0, l2 = source.points.length; i2 < l2; i2++) {
    const point = source.points[i2];
    this.points.push(point.clone());
  }
  return this;
};
SplineCurve.prototype.toJSON = function() {
  const data = Curve.prototype.toJSON.call(this);
  data.points = [];
  for (let i2 = 0, l2 = this.points.length; i2 < l2; i2++) {
    const point = this.points[i2];
    data.points.push(point.toArray());
  }
  return data;
};
SplineCurve.prototype.fromJSON = function(json) {
  Curve.prototype.fromJSON.call(this, json);
  this.points = [];
  for (let i2 = 0, l2 = json.points.length; i2 < l2; i2++) {
    const point = json.points[i2];
    this.points.push(new Vector2().fromArray(point));
  }
  return this;
};
var Curves = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcCurve,
  CatmullRomCurve3,
  CubicBezierCurve,
  CubicBezierCurve3,
  EllipseCurve,
  LineCurve,
  LineCurve3,
  QuadraticBezierCurve,
  QuadraticBezierCurve3,
  SplineCurve
});
function CurvePath() {
  Curve.call(this);
  this.type = "CurvePath";
  this.curves = [];
  this.autoClose = false;
}
CurvePath.prototype = Object.assign(Object.create(Curve.prototype), {
  constructor: CurvePath,
  add: function(curve) {
    this.curves.push(curve);
  },
  closePath: function() {
    const startPoint = this.curves[0].getPoint(0);
    const endPoint = this.curves[this.curves.length - 1].getPoint(1);
    if (!startPoint.equals(endPoint)) {
      this.curves.push(new LineCurve(endPoint, startPoint));
    }
  },
  getPoint: function(t3) {
    const d = t3 * this.getLength();
    const curveLengths = this.getCurveLengths();
    let i2 = 0;
    while (i2 < curveLengths.length) {
      if (curveLengths[i2] >= d) {
        const diff = curveLengths[i2] - d;
        const curve = this.curves[i2];
        const segmentLength = curve.getLength();
        const u2 = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
        return curve.getPointAt(u2);
      }
      i2++;
    }
    return null;
  },
  getLength: function() {
    const lens = this.getCurveLengths();
    return lens[lens.length - 1];
  },
  updateArcLengths: function() {
    this.needsUpdate = true;
    this.cacheLengths = null;
    this.getCurveLengths();
  },
  getCurveLengths: function() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
      return this.cacheLengths;
    }
    const lengths = [];
    let sums = 0;
    for (let i2 = 0, l2 = this.curves.length; i2 < l2; i2++) {
      sums += this.curves[i2].getLength();
      lengths.push(sums);
    }
    this.cacheLengths = lengths;
    return lengths;
  },
  getSpacedPoints: function(divisions) {
    if (divisions === void 0)
      divisions = 40;
    const points = [];
    for (let i2 = 0; i2 <= divisions; i2++) {
      points.push(this.getPoint(i2 / divisions));
    }
    if (this.autoClose) {
      points.push(points[0]);
    }
    return points;
  },
  getPoints: function(divisions) {
    divisions = divisions || 12;
    const points = [];
    let last;
    for (let i2 = 0, curves = this.curves; i2 < curves.length; i2++) {
      const curve = curves[i2];
      const resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;
      const pts = curve.getPoints(resolution);
      for (let j2 = 0; j2 < pts.length; j2++) {
        const point = pts[j2];
        if (last && last.equals(point))
          continue;
        points.push(point);
        last = point;
      }
    }
    if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
      points.push(points[0]);
    }
    return points;
  },
  copy: function(source) {
    Curve.prototype.copy.call(this, source);
    this.curves = [];
    for (let i2 = 0, l2 = source.curves.length; i2 < l2; i2++) {
      const curve = source.curves[i2];
      this.curves.push(curve.clone());
    }
    this.autoClose = source.autoClose;
    return this;
  },
  toJSON: function() {
    const data = Curve.prototype.toJSON.call(this);
    data.autoClose = this.autoClose;
    data.curves = [];
    for (let i2 = 0, l2 = this.curves.length; i2 < l2; i2++) {
      const curve = this.curves[i2];
      data.curves.push(curve.toJSON());
    }
    return data;
  },
  fromJSON: function(json) {
    Curve.prototype.fromJSON.call(this, json);
    this.autoClose = json.autoClose;
    this.curves = [];
    for (let i2 = 0, l2 = json.curves.length; i2 < l2; i2++) {
      const curve = json.curves[i2];
      this.curves.push(new Curves[curve.type]().fromJSON(curve));
    }
    return this;
  }
});
function Path(points) {
  CurvePath.call(this);
  this.type = "Path";
  this.currentPoint = new Vector2();
  if (points) {
    this.setFromPoints(points);
  }
}
Path.prototype = Object.assign(Object.create(CurvePath.prototype), {
  constructor: Path,
  setFromPoints: function(points) {
    this.moveTo(points[0].x, points[0].y);
    for (let i2 = 1, l2 = points.length; i2 < l2; i2++) {
      this.lineTo(points[i2].x, points[i2].y);
    }
    return this;
  },
  moveTo: function(x2, y2) {
    this.currentPoint.set(x2, y2);
    return this;
  },
  lineTo: function(x2, y2) {
    const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x2, y2));
    this.curves.push(curve);
    this.currentPoint.set(x2, y2);
    return this;
  },
  quadraticCurveTo: function(aCPx, aCPy, aX, aY) {
    const curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));
    this.curves.push(curve);
    this.currentPoint.set(aX, aY);
    return this;
  },
  bezierCurveTo: function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
    const curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));
    this.curves.push(curve);
    this.currentPoint.set(aX, aY);
    return this;
  },
  splineThru: function(pts) {
    const npts = [this.currentPoint.clone()].concat(pts);
    const curve = new SplineCurve(npts);
    this.curves.push(curve);
    this.currentPoint.copy(pts[pts.length - 1]);
    return this;
  },
  arc: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    const x0 = this.currentPoint.x;
    const y0 = this.currentPoint.y;
    this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
    return this;
  },
  absarc: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
    return this;
  },
  ellipse: function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
    const x0 = this.currentPoint.x;
    const y0 = this.currentPoint.y;
    this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
    return this;
  },
  absellipse: function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
    const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
    if (this.curves.length > 0) {
      const firstPoint = curve.getPoint(0);
      if (!firstPoint.equals(this.currentPoint)) {
        this.lineTo(firstPoint.x, firstPoint.y);
      }
    }
    this.curves.push(curve);
    const lastPoint = curve.getPoint(1);
    this.currentPoint.copy(lastPoint);
    return this;
  },
  copy: function(source) {
    CurvePath.prototype.copy.call(this, source);
    this.currentPoint.copy(source.currentPoint);
    return this;
  },
  toJSON: function() {
    const data = CurvePath.prototype.toJSON.call(this);
    data.currentPoint = this.currentPoint.toArray();
    return data;
  },
  fromJSON: function(json) {
    CurvePath.prototype.fromJSON.call(this, json);
    this.currentPoint.fromArray(json.currentPoint);
    return this;
  }
});
function Shape(points) {
  Path.call(this, points);
  this.uuid = MathUtils.generateUUID();
  this.type = "Shape";
  this.holes = [];
}
Shape.prototype = Object.assign(Object.create(Path.prototype), {
  constructor: Shape,
  getPointsHoles: function(divisions) {
    const holesPts = [];
    for (let i2 = 0, l2 = this.holes.length; i2 < l2; i2++) {
      holesPts[i2] = this.holes[i2].getPoints(divisions);
    }
    return holesPts;
  },
  extractPoints: function(divisions) {
    return {
      shape: this.getPoints(divisions),
      holes: this.getPointsHoles(divisions)
    };
  },
  copy: function(source) {
    Path.prototype.copy.call(this, source);
    this.holes = [];
    for (let i2 = 0, l2 = source.holes.length; i2 < l2; i2++) {
      const hole = source.holes[i2];
      this.holes.push(hole.clone());
    }
    return this;
  },
  toJSON: function() {
    const data = Path.prototype.toJSON.call(this);
    data.uuid = this.uuid;
    data.holes = [];
    for (let i2 = 0, l2 = this.holes.length; i2 < l2; i2++) {
      const hole = this.holes[i2];
      data.holes.push(hole.toJSON());
    }
    return data;
  },
  fromJSON: function(json) {
    Path.prototype.fromJSON.call(this, json);
    this.uuid = json.uuid;
    this.holes = [];
    for (let i2 = 0, l2 = json.holes.length; i2 < l2; i2++) {
      const hole = json.holes[i2];
      this.holes.push(new Path().fromJSON(hole));
    }
    return this;
  }
});
function Light(color, intensity) {
  Object3D.call(this);
  this.type = "Light";
  this.color = new Color(color);
  this.intensity = intensity !== void 0 ? intensity : 1;
}
Light.prototype = Object.assign(Object.create(Object3D.prototype), {
  constructor: Light,
  isLight: true,
  copy: function(source) {
    Object3D.prototype.copy.call(this, source);
    this.color.copy(source.color);
    this.intensity = source.intensity;
    return this;
  },
  toJSON: function(meta) {
    const data = Object3D.prototype.toJSON.call(this, meta);
    data.object.color = this.color.getHex();
    data.object.intensity = this.intensity;
    if (this.groundColor !== void 0)
      data.object.groundColor = this.groundColor.getHex();
    if (this.distance !== void 0)
      data.object.distance = this.distance;
    if (this.angle !== void 0)
      data.object.angle = this.angle;
    if (this.decay !== void 0)
      data.object.decay = this.decay;
    if (this.penumbra !== void 0)
      data.object.penumbra = this.penumbra;
    if (this.shadow !== void 0)
      data.object.shadow = this.shadow.toJSON();
    return data;
  }
});
function HemisphereLight(skyColor, groundColor, intensity) {
  Light.call(this, skyColor, intensity);
  this.type = "HemisphereLight";
  this.position.copy(Object3D.DefaultUp);
  this.updateMatrix();
  this.groundColor = new Color(groundColor);
}
HemisphereLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: HemisphereLight,
  isHemisphereLight: true,
  copy: function(source) {
    Light.prototype.copy.call(this, source);
    this.groundColor.copy(source.groundColor);
    return this;
  }
});
function LightShadow(camera) {
  this.camera = camera;
  this.bias = 0;
  this.normalBias = 0;
  this.radius = 1;
  this.mapSize = new Vector2(512, 512);
  this.map = null;
  this.mapPass = null;
  this.matrix = new Matrix4();
  this.autoUpdate = true;
  this.needsUpdate = false;
  this._frustum = new Frustum();
  this._frameExtents = new Vector2(1, 1);
  this._viewportCount = 1;
  this._viewports = [
    new Vector4(0, 0, 1, 1)
  ];
}
Object.assign(LightShadow.prototype, {
  _projScreenMatrix: new Matrix4(),
  _lightPositionWorld: new Vector3(),
  _lookTarget: new Vector3(),
  getViewportCount: function() {
    return this._viewportCount;
  },
  getFrustum: function() {
    return this._frustum;
  },
  updateMatrices: function(light) {
    const shadowCamera = this.camera, shadowMatrix = this.matrix, projScreenMatrix = this._projScreenMatrix, lookTarget = this._lookTarget, lightPositionWorld = this._lightPositionWorld;
    lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
    shadowCamera.position.copy(lightPositionWorld);
    lookTarget.setFromMatrixPosition(light.target.matrixWorld);
    shadowCamera.lookAt(lookTarget);
    shadowCamera.updateMatrixWorld();
    projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
    this._frustum.setFromProjectionMatrix(projScreenMatrix);
    shadowMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
    shadowMatrix.multiply(shadowCamera.projectionMatrix);
    shadowMatrix.multiply(shadowCamera.matrixWorldInverse);
  },
  getViewport: function(viewportIndex) {
    return this._viewports[viewportIndex];
  },
  getFrameExtents: function() {
    return this._frameExtents;
  },
  copy: function(source) {
    this.camera = source.camera.clone();
    this.bias = source.bias;
    this.radius = source.radius;
    this.mapSize.copy(source.mapSize);
    return this;
  },
  clone: function() {
    return new this.constructor().copy(this);
  },
  toJSON: function() {
    const object = {};
    if (this.bias !== 0)
      object.bias = this.bias;
    if (this.normalBias !== 0)
      object.normalBias = this.normalBias;
    if (this.radius !== 1)
      object.radius = this.radius;
    if (this.mapSize.x !== 512 || this.mapSize.y !== 512)
      object.mapSize = this.mapSize.toArray();
    object.camera = this.camera.toJSON(false).object;
    delete object.camera.matrix;
    return object;
  }
});
function SpotLightShadow() {
  LightShadow.call(this, new PerspectiveCamera(50, 1, 0.5, 500));
  this.focus = 1;
}
SpotLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
  constructor: SpotLightShadow,
  isSpotLightShadow: true,
  updateMatrices: function(light) {
    const camera = this.camera;
    const fov2 = MathUtils.RAD2DEG * 2 * light.angle * this.focus;
    const aspect2 = this.mapSize.width / this.mapSize.height;
    const far = light.distance || camera.far;
    if (fov2 !== camera.fov || aspect2 !== camera.aspect || far !== camera.far) {
      camera.fov = fov2;
      camera.aspect = aspect2;
      camera.far = far;
      camera.updateProjectionMatrix();
    }
    LightShadow.prototype.updateMatrices.call(this, light);
  }
});
function SpotLight(color, intensity, distance, angle, penumbra, decay) {
  Light.call(this, color, intensity);
  this.type = "SpotLight";
  this.position.copy(Object3D.DefaultUp);
  this.updateMatrix();
  this.target = new Object3D();
  Object.defineProperty(this, "power", {
    get: function() {
      return this.intensity * Math.PI;
    },
    set: function(power) {
      this.intensity = power / Math.PI;
    }
  });
  this.distance = distance !== void 0 ? distance : 0;
  this.angle = angle !== void 0 ? angle : Math.PI / 3;
  this.penumbra = penumbra !== void 0 ? penumbra : 0;
  this.decay = decay !== void 0 ? decay : 1;
  this.shadow = new SpotLightShadow();
}
SpotLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: SpotLight,
  isSpotLight: true,
  copy: function(source) {
    Light.prototype.copy.call(this, source);
    this.distance = source.distance;
    this.angle = source.angle;
    this.penumbra = source.penumbra;
    this.decay = source.decay;
    this.target = source.target.clone();
    this.shadow = source.shadow.clone();
    return this;
  }
});
function PointLightShadow() {
  LightShadow.call(this, new PerspectiveCamera(90, 1, 0.5, 500));
  this._frameExtents = new Vector2(4, 2);
  this._viewportCount = 6;
  this._viewports = [
    new Vector4(2, 1, 1, 1),
    new Vector4(0, 1, 1, 1),
    new Vector4(3, 1, 1, 1),
    new Vector4(1, 1, 1, 1),
    new Vector4(3, 0, 1, 1),
    new Vector4(1, 0, 1, 1)
  ];
  this._cubeDirections = [
    new Vector3(1, 0, 0),
    new Vector3(-1, 0, 0),
    new Vector3(0, 0, 1),
    new Vector3(0, 0, -1),
    new Vector3(0, 1, 0),
    new Vector3(0, -1, 0)
  ];
  this._cubeUps = [
    new Vector3(0, 1, 0),
    new Vector3(0, 1, 0),
    new Vector3(0, 1, 0),
    new Vector3(0, 1, 0),
    new Vector3(0, 0, 1),
    new Vector3(0, 0, -1)
  ];
}
PointLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
  constructor: PointLightShadow,
  isPointLightShadow: true,
  updateMatrices: function(light, viewportIndex) {
    if (viewportIndex === void 0)
      viewportIndex = 0;
    const camera = this.camera, shadowMatrix = this.matrix, lightPositionWorld = this._lightPositionWorld, lookTarget = this._lookTarget, projScreenMatrix = this._projScreenMatrix;
    lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
    camera.position.copy(lightPositionWorld);
    lookTarget.copy(camera.position);
    lookTarget.add(this._cubeDirections[viewportIndex]);
    camera.up.copy(this._cubeUps[viewportIndex]);
    camera.lookAt(lookTarget);
    camera.updateMatrixWorld();
    shadowMatrix.makeTranslation(-lightPositionWorld.x, -lightPositionWorld.y, -lightPositionWorld.z);
    projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
    this._frustum.setFromProjectionMatrix(projScreenMatrix);
  }
});
function PointLight(color, intensity, distance, decay) {
  Light.call(this, color, intensity);
  this.type = "PointLight";
  Object.defineProperty(this, "power", {
    get: function() {
      return this.intensity * 4 * Math.PI;
    },
    set: function(power) {
      this.intensity = power / (4 * Math.PI);
    }
  });
  this.distance = distance !== void 0 ? distance : 0;
  this.decay = decay !== void 0 ? decay : 1;
  this.shadow = new PointLightShadow();
}
PointLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: PointLight,
  isPointLight: true,
  copy: function(source) {
    Light.prototype.copy.call(this, source);
    this.distance = source.distance;
    this.decay = source.decay;
    this.shadow = source.shadow.clone();
    return this;
  }
});
function OrthographicCamera(left, right, top, bottom, near, far) {
  Camera.call(this);
  this.type = "OrthographicCamera";
  this.zoom = 1;
  this.view = null;
  this.left = left !== void 0 ? left : -1;
  this.right = right !== void 0 ? right : 1;
  this.top = top !== void 0 ? top : 1;
  this.bottom = bottom !== void 0 ? bottom : -1;
  this.near = near !== void 0 ? near : 0.1;
  this.far = far !== void 0 ? far : 2e3;
  this.updateProjectionMatrix();
}
OrthographicCamera.prototype = Object.assign(Object.create(Camera.prototype), {
  constructor: OrthographicCamera,
  isOrthographicCamera: true,
  copy: function(source, recursive) {
    Camera.prototype.copy.call(this, source, recursive);
    this.left = source.left;
    this.right = source.right;
    this.top = source.top;
    this.bottom = source.bottom;
    this.near = source.near;
    this.far = source.far;
    this.zoom = source.zoom;
    this.view = source.view === null ? null : Object.assign({}, source.view);
    return this;
  },
  setViewOffset: function(fullWidth, fullHeight, x2, y2, width, height) {
    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }
    this.view.enabled = true;
    this.view.fullWidth = fullWidth;
    this.view.fullHeight = fullHeight;
    this.view.offsetX = x2;
    this.view.offsetY = y2;
    this.view.width = width;
    this.view.height = height;
    this.updateProjectionMatrix();
  },
  clearViewOffset: function() {
    if (this.view !== null) {
      this.view.enabled = false;
    }
    this.updateProjectionMatrix();
  },
  updateProjectionMatrix: function() {
    const dx = (this.right - this.left) / (2 * this.zoom);
    const dy = (this.top - this.bottom) / (2 * this.zoom);
    const cx = (this.right + this.left) / 2;
    const cy = (this.top + this.bottom) / 2;
    let left = cx - dx;
    let right = cx + dx;
    let top = cy + dy;
    let bottom = cy - dy;
    if (this.view !== null && this.view.enabled) {
      const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
      const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      left += scaleW * this.view.offsetX;
      right = left + scaleW * this.view.width;
      top -= scaleH * this.view.offsetY;
      bottom = top - scaleH * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);
    this.projectionMatrixInverse.getInverse(this.projectionMatrix);
  },
  toJSON: function(meta) {
    const data = Object3D.prototype.toJSON.call(this, meta);
    data.object.zoom = this.zoom;
    data.object.left = this.left;
    data.object.right = this.right;
    data.object.top = this.top;
    data.object.bottom = this.bottom;
    data.object.near = this.near;
    data.object.far = this.far;
    if (this.view !== null)
      data.object.view = Object.assign({}, this.view);
    return data;
  }
});
function DirectionalLightShadow() {
  LightShadow.call(this, new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
}
DirectionalLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
  constructor: DirectionalLightShadow,
  isDirectionalLightShadow: true,
  updateMatrices: function(light) {
    LightShadow.prototype.updateMatrices.call(this, light);
  }
});
function DirectionalLight(color, intensity) {
  Light.call(this, color, intensity);
  this.type = "DirectionalLight";
  this.position.copy(Object3D.DefaultUp);
  this.updateMatrix();
  this.target = new Object3D();
  this.shadow = new DirectionalLightShadow();
}
DirectionalLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: DirectionalLight,
  isDirectionalLight: true,
  copy: function(source) {
    Light.prototype.copy.call(this, source);
    this.target = source.target.clone();
    this.shadow = source.shadow.clone();
    return this;
  }
});
function AmbientLight(color, intensity) {
  Light.call(this, color, intensity);
  this.type = "AmbientLight";
}
AmbientLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: AmbientLight,
  isAmbientLight: true
});
function RectAreaLight(color, intensity, width, height) {
  Light.call(this, color, intensity);
  this.type = "RectAreaLight";
  this.width = width !== void 0 ? width : 10;
  this.height = height !== void 0 ? height : 10;
}
RectAreaLight.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: RectAreaLight,
  isRectAreaLight: true,
  copy: function(source) {
    Light.prototype.copy.call(this, source);
    this.width = source.width;
    this.height = source.height;
    return this;
  },
  toJSON: function(meta) {
    const data = Light.prototype.toJSON.call(this, meta);
    data.object.width = this.width;
    data.object.height = this.height;
    return data;
  }
});
class SphericalHarmonics3 {
  constructor() {
    Object.defineProperty(this, "isSphericalHarmonics3", { value: true });
    this.coefficients = [];
    for (let i2 = 0; i2 < 9; i2++) {
      this.coefficients.push(new Vector3());
    }
  }
  set(coefficients) {
    for (let i2 = 0; i2 < 9; i2++) {
      this.coefficients[i2].copy(coefficients[i2]);
    }
    return this;
  }
  zero() {
    for (let i2 = 0; i2 < 9; i2++) {
      this.coefficients[i2].set(0, 0, 0);
    }
    return this;
  }
  getAt(normal, target) {
    const x2 = normal.x, y2 = normal.y, z2 = normal.z;
    const coeff = this.coefficients;
    target.copy(coeff[0]).multiplyScalar(0.282095);
    target.addScaledVector(coeff[1], 0.488603 * y2);
    target.addScaledVector(coeff[2], 0.488603 * z2);
    target.addScaledVector(coeff[3], 0.488603 * x2);
    target.addScaledVector(coeff[4], 1.092548 * (x2 * y2));
    target.addScaledVector(coeff[5], 1.092548 * (y2 * z2));
    target.addScaledVector(coeff[6], 0.315392 * (3 * z2 * z2 - 1));
    target.addScaledVector(coeff[7], 1.092548 * (x2 * z2));
    target.addScaledVector(coeff[8], 0.546274 * (x2 * x2 - y2 * y2));
    return target;
  }
  getIrradianceAt(normal, target) {
    const x2 = normal.x, y2 = normal.y, z2 = normal.z;
    const coeff = this.coefficients;
    target.copy(coeff[0]).multiplyScalar(0.886227);
    target.addScaledVector(coeff[1], 2 * 0.511664 * y2);
    target.addScaledVector(coeff[2], 2 * 0.511664 * z2);
    target.addScaledVector(coeff[3], 2 * 0.511664 * x2);
    target.addScaledVector(coeff[4], 2 * 0.429043 * x2 * y2);
    target.addScaledVector(coeff[5], 2 * 0.429043 * y2 * z2);
    target.addScaledVector(coeff[6], 0.743125 * z2 * z2 - 0.247708);
    target.addScaledVector(coeff[7], 2 * 0.429043 * x2 * z2);
    target.addScaledVector(coeff[8], 0.429043 * (x2 * x2 - y2 * y2));
    return target;
  }
  add(sh2) {
    for (let i2 = 0; i2 < 9; i2++) {
      this.coefficients[i2].add(sh2.coefficients[i2]);
    }
    return this;
  }
  addScaledSH(sh2, s2) {
    for (let i2 = 0; i2 < 9; i2++) {
      this.coefficients[i2].addScaledVector(sh2.coefficients[i2], s2);
    }
    return this;
  }
  scale(s2) {
    for (let i2 = 0; i2 < 9; i2++) {
      this.coefficients[i2].multiplyScalar(s2);
    }
    return this;
  }
  lerp(sh2, alpha) {
    for (let i2 = 0; i2 < 9; i2++) {
      this.coefficients[i2].lerp(sh2.coefficients[i2], alpha);
    }
    return this;
  }
  equals(sh2) {
    for (let i2 = 0; i2 < 9; i2++) {
      if (!this.coefficients[i2].equals(sh2.coefficients[i2])) {
        return false;
      }
    }
    return true;
  }
  copy(sh2) {
    return this.set(sh2.coefficients);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  fromArray(array, offset = 0) {
    const coefficients = this.coefficients;
    for (let i2 = 0; i2 < 9; i2++) {
      coefficients[i2].fromArray(array, offset + i2 * 3);
    }
    return this;
  }
  toArray(array = [], offset = 0) {
    const coefficients = this.coefficients;
    for (let i2 = 0; i2 < 9; i2++) {
      coefficients[i2].toArray(array, offset + i2 * 3);
    }
    return array;
  }
  static getBasisAt(normal, shBasis) {
    const x2 = normal.x, y2 = normal.y, z2 = normal.z;
    shBasis[0] = 0.282095;
    shBasis[1] = 0.488603 * y2;
    shBasis[2] = 0.488603 * z2;
    shBasis[3] = 0.488603 * x2;
    shBasis[4] = 1.092548 * x2 * y2;
    shBasis[5] = 1.092548 * y2 * z2;
    shBasis[6] = 0.315392 * (3 * z2 * z2 - 1);
    shBasis[7] = 1.092548 * x2 * z2;
    shBasis[8] = 0.546274 * (x2 * x2 - y2 * y2);
  }
}
function LightProbe(sh2, intensity) {
  Light.call(this, void 0, intensity);
  this.type = "LightProbe";
  this.sh = sh2 !== void 0 ? sh2 : new SphericalHarmonics3();
}
LightProbe.prototype = Object.assign(Object.create(Light.prototype), {
  constructor: LightProbe,
  isLightProbe: true,
  copy: function(source) {
    Light.prototype.copy.call(this, source);
    this.sh.copy(source.sh);
    return this;
  },
  fromJSON: function(json) {
    this.intensity = json.intensity;
    this.sh.fromArray(json.sh);
    return this;
  },
  toJSON: function(meta) {
    const data = Light.prototype.toJSON.call(this, meta);
    data.object.sh = this.sh.toArray();
    return data;
  }
});
function MaterialLoader(manager) {
  Loader.call(this, manager);
  this.textures = {};
}
MaterialLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: MaterialLoader,
  load: function(url, onLoad, onProgress, onError) {
    const scope = this;
    const loader = new FileLoader(scope.manager);
    loader.setPath(scope.path);
    loader.setRequestHeader(scope.requestHeader);
    loader.setWithCredentials(scope.withCredentials);
    loader.load(url, function(text) {
      try {
        onLoad(scope.parse(JSON.parse(text)));
      } catch (e2) {
        if (onError) {
          onError(e2);
        } else {
          console.error(e2);
        }
        scope.manager.itemError(url);
      }
    }, onProgress, onError);
  },
  parse: function(json) {
    const textures = this.textures;
    function getTexture(name) {
      if (textures[name] === void 0) {
        console.warn("THREE.MaterialLoader: Undefined texture", name);
      }
      return textures[name];
    }
    const material = new Materials[json.type]();
    if (json.uuid !== void 0)
      material.uuid = json.uuid;
    if (json.name !== void 0)
      material.name = json.name;
    if (json.color !== void 0 && material.color !== void 0)
      material.color.setHex(json.color);
    if (json.roughness !== void 0)
      material.roughness = json.roughness;
    if (json.metalness !== void 0)
      material.metalness = json.metalness;
    if (json.sheen !== void 0)
      material.sheen = new Color().setHex(json.sheen);
    if (json.emissive !== void 0 && material.emissive !== void 0)
      material.emissive.setHex(json.emissive);
    if (json.specular !== void 0 && material.specular !== void 0)
      material.specular.setHex(json.specular);
    if (json.shininess !== void 0)
      material.shininess = json.shininess;
    if (json.clearcoat !== void 0)
      material.clearcoat = json.clearcoat;
    if (json.clearcoatRoughness !== void 0)
      material.clearcoatRoughness = json.clearcoatRoughness;
    if (json.fog !== void 0)
      material.fog = json.fog;
    if (json.flatShading !== void 0)
      material.flatShading = json.flatShading;
    if (json.blending !== void 0)
      material.blending = json.blending;
    if (json.combine !== void 0)
      material.combine = json.combine;
    if (json.side !== void 0)
      material.side = json.side;
    if (json.opacity !== void 0)
      material.opacity = json.opacity;
    if (json.transparent !== void 0)
      material.transparent = json.transparent;
    if (json.alphaTest !== void 0)
      material.alphaTest = json.alphaTest;
    if (json.depthTest !== void 0)
      material.depthTest = json.depthTest;
    if (json.depthWrite !== void 0)
      material.depthWrite = json.depthWrite;
    if (json.colorWrite !== void 0)
      material.colorWrite = json.colorWrite;
    if (json.stencilWrite !== void 0)
      material.stencilWrite = json.stencilWrite;
    if (json.stencilWriteMask !== void 0)
      material.stencilWriteMask = json.stencilWriteMask;
    if (json.stencilFunc !== void 0)
      material.stencilFunc = json.stencilFunc;
    if (json.stencilRef !== void 0)
      material.stencilRef = json.stencilRef;
    if (json.stencilFuncMask !== void 0)
      material.stencilFuncMask = json.stencilFuncMask;
    if (json.stencilFail !== void 0)
      material.stencilFail = json.stencilFail;
    if (json.stencilZFail !== void 0)
      material.stencilZFail = json.stencilZFail;
    if (json.stencilZPass !== void 0)
      material.stencilZPass = json.stencilZPass;
    if (json.wireframe !== void 0)
      material.wireframe = json.wireframe;
    if (json.wireframeLinewidth !== void 0)
      material.wireframeLinewidth = json.wireframeLinewidth;
    if (json.wireframeLinecap !== void 0)
      material.wireframeLinecap = json.wireframeLinecap;
    if (json.wireframeLinejoin !== void 0)
      material.wireframeLinejoin = json.wireframeLinejoin;
    if (json.rotation !== void 0)
      material.rotation = json.rotation;
    if (json.linewidth !== 1)
      material.linewidth = json.linewidth;
    if (json.dashSize !== void 0)
      material.dashSize = json.dashSize;
    if (json.gapSize !== void 0)
      material.gapSize = json.gapSize;
    if (json.scale !== void 0)
      material.scale = json.scale;
    if (json.polygonOffset !== void 0)
      material.polygonOffset = json.polygonOffset;
    if (json.polygonOffsetFactor !== void 0)
      material.polygonOffsetFactor = json.polygonOffsetFactor;
    if (json.polygonOffsetUnits !== void 0)
      material.polygonOffsetUnits = json.polygonOffsetUnits;
    if (json.skinning !== void 0)
      material.skinning = json.skinning;
    if (json.morphTargets !== void 0)
      material.morphTargets = json.morphTargets;
    if (json.morphNormals !== void 0)
      material.morphNormals = json.morphNormals;
    if (json.dithering !== void 0)
      material.dithering = json.dithering;
    if (json.vertexTangents !== void 0)
      material.vertexTangents = json.vertexTangents;
    if (json.visible !== void 0)
      material.visible = json.visible;
    if (json.toneMapped !== void 0)
      material.toneMapped = json.toneMapped;
    if (json.userData !== void 0)
      material.userData = json.userData;
    if (json.vertexColors !== void 0) {
      if (typeof json.vertexColors === "number") {
        material.vertexColors = json.vertexColors > 0 ? true : false;
      } else {
        material.vertexColors = json.vertexColors;
      }
    }
    if (json.uniforms !== void 0) {
      for (const name in json.uniforms) {
        const uniform = json.uniforms[name];
        material.uniforms[name] = {};
        switch (uniform.type) {
          case "t":
            material.uniforms[name].value = getTexture(uniform.value);
            break;
          case "c":
            material.uniforms[name].value = new Color().setHex(uniform.value);
            break;
          case "v2":
            material.uniforms[name].value = new Vector2().fromArray(uniform.value);
            break;
          case "v3":
            material.uniforms[name].value = new Vector3().fromArray(uniform.value);
            break;
          case "v4":
            material.uniforms[name].value = new Vector4().fromArray(uniform.value);
            break;
          case "m3":
            material.uniforms[name].value = new Matrix3().fromArray(uniform.value);
            break;
          case "m4":
            material.uniforms[name].value = new Matrix4().fromArray(uniform.value);
            break;
          default:
            material.uniforms[name].value = uniform.value;
        }
      }
    }
    if (json.defines !== void 0)
      material.defines = json.defines;
    if (json.vertexShader !== void 0)
      material.vertexShader = json.vertexShader;
    if (json.fragmentShader !== void 0)
      material.fragmentShader = json.fragmentShader;
    if (json.extensions !== void 0) {
      for (const key in json.extensions) {
        material.extensions[key] = json.extensions[key];
      }
    }
    if (json.shading !== void 0)
      material.flatShading = json.shading === 1;
    if (json.size !== void 0)
      material.size = json.size;
    if (json.sizeAttenuation !== void 0)
      material.sizeAttenuation = json.sizeAttenuation;
    if (json.map !== void 0)
      material.map = getTexture(json.map);
    if (json.matcap !== void 0)
      material.matcap = getTexture(json.matcap);
    if (json.alphaMap !== void 0)
      material.alphaMap = getTexture(json.alphaMap);
    if (json.bumpMap !== void 0)
      material.bumpMap = getTexture(json.bumpMap);
    if (json.bumpScale !== void 0)
      material.bumpScale = json.bumpScale;
    if (json.normalMap !== void 0)
      material.normalMap = getTexture(json.normalMap);
    if (json.normalMapType !== void 0)
      material.normalMapType = json.normalMapType;
    if (json.normalScale !== void 0) {
      let normalScale = json.normalScale;
      if (Array.isArray(normalScale) === false) {
        normalScale = [normalScale, normalScale];
      }
      material.normalScale = new Vector2().fromArray(normalScale);
    }
    if (json.displacementMap !== void 0)
      material.displacementMap = getTexture(json.displacementMap);
    if (json.displacementScale !== void 0)
      material.displacementScale = json.displacementScale;
    if (json.displacementBias !== void 0)
      material.displacementBias = json.displacementBias;
    if (json.roughnessMap !== void 0)
      material.roughnessMap = getTexture(json.roughnessMap);
    if (json.metalnessMap !== void 0)
      material.metalnessMap = getTexture(json.metalnessMap);
    if (json.emissiveMap !== void 0)
      material.emissiveMap = getTexture(json.emissiveMap);
    if (json.emissiveIntensity !== void 0)
      material.emissiveIntensity = json.emissiveIntensity;
    if (json.specularMap !== void 0)
      material.specularMap = getTexture(json.specularMap);
    if (json.envMap !== void 0)
      material.envMap = getTexture(json.envMap);
    if (json.envMapIntensity !== void 0)
      material.envMapIntensity = json.envMapIntensity;
    if (json.reflectivity !== void 0)
      material.reflectivity = json.reflectivity;
    if (json.refractionRatio !== void 0)
      material.refractionRatio = json.refractionRatio;
    if (json.lightMap !== void 0)
      material.lightMap = getTexture(json.lightMap);
    if (json.lightMapIntensity !== void 0)
      material.lightMapIntensity = json.lightMapIntensity;
    if (json.aoMap !== void 0)
      material.aoMap = getTexture(json.aoMap);
    if (json.aoMapIntensity !== void 0)
      material.aoMapIntensity = json.aoMapIntensity;
    if (json.gradientMap !== void 0)
      material.gradientMap = getTexture(json.gradientMap);
    if (json.clearcoatMap !== void 0)
      material.clearcoatMap = getTexture(json.clearcoatMap);
    if (json.clearcoatRoughnessMap !== void 0)
      material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);
    if (json.clearcoatNormalMap !== void 0)
      material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);
    if (json.clearcoatNormalScale !== void 0)
      material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);
    if (json.transmission !== void 0)
      material.transmission = json.transmission;
    if (json.transmissionMap !== void 0)
      material.transmissionMap = getTexture(json.transmissionMap);
    return material;
  },
  setTextures: function(value) {
    this.textures = value;
    return this;
  }
});
const LoaderUtils = {
  decodeText: function(array) {
    if (typeof TextDecoder !== "undefined") {
      return new TextDecoder().decode(array);
    }
    let s2 = "";
    for (let i2 = 0, il = array.length; i2 < il; i2++) {
      s2 += String.fromCharCode(array[i2]);
    }
    try {
      return decodeURIComponent(escape(s2));
    } catch (e2) {
      return s2;
    }
  },
  extractUrlBase: function(url) {
    const index = url.lastIndexOf("/");
    if (index === -1)
      return "./";
    return url.substr(0, index + 1);
  }
};
function InstancedBufferGeometry() {
  BufferGeometry.call(this);
  this.type = "InstancedBufferGeometry";
  this.instanceCount = Infinity;
}
InstancedBufferGeometry.prototype = Object.assign(Object.create(BufferGeometry.prototype), {
  constructor: InstancedBufferGeometry,
  isInstancedBufferGeometry: true,
  copy: function(source) {
    BufferGeometry.prototype.copy.call(this, source);
    this.instanceCount = source.instanceCount;
    return this;
  },
  clone: function() {
    return new this.constructor().copy(this);
  },
  toJSON: function() {
    const data = BufferGeometry.prototype.toJSON.call(this);
    data.instanceCount = this.instanceCount;
    data.isInstancedBufferGeometry = true;
    return data;
  }
});
function InstancedBufferAttribute(array, itemSize, normalized, meshPerAttribute) {
  if (typeof normalized === "number") {
    meshPerAttribute = normalized;
    normalized = false;
    console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.");
  }
  BufferAttribute.call(this, array, itemSize, normalized);
  this.meshPerAttribute = meshPerAttribute || 1;
}
InstancedBufferAttribute.prototype = Object.assign(Object.create(BufferAttribute.prototype), {
  constructor: InstancedBufferAttribute,
  isInstancedBufferAttribute: true,
  copy: function(source) {
    BufferAttribute.prototype.copy.call(this, source);
    this.meshPerAttribute = source.meshPerAttribute;
    return this;
  },
  toJSON: function() {
    const data = BufferAttribute.prototype.toJSON.call(this);
    data.meshPerAttribute = this.meshPerAttribute;
    data.isInstancedBufferAttribute = true;
    return data;
  }
});
function BufferGeometryLoader(manager) {
  Loader.call(this, manager);
}
BufferGeometryLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: BufferGeometryLoader,
  load: function(url, onLoad, onProgress, onError) {
    const scope = this;
    const loader = new FileLoader(scope.manager);
    loader.setPath(scope.path);
    loader.setRequestHeader(scope.requestHeader);
    loader.setWithCredentials(scope.withCredentials);
    loader.load(url, function(text) {
      try {
        onLoad(scope.parse(JSON.parse(text)));
      } catch (e2) {
        if (onError) {
          onError(e2);
        } else {
          console.error(e2);
        }
        scope.manager.itemError(url);
      }
    }, onProgress, onError);
  },
  parse: function(json) {
    const interleavedBufferMap = {};
    const arrayBufferMap = {};
    function getInterleavedBuffer(json2, uuid) {
      if (interleavedBufferMap[uuid] !== void 0)
        return interleavedBufferMap[uuid];
      const interleavedBuffers = json2.interleavedBuffers;
      const interleavedBuffer = interleavedBuffers[uuid];
      const buffer = getArrayBuffer(json2, interleavedBuffer.buffer);
      const array = new TYPED_ARRAYS[interleavedBuffer.type](buffer);
      const ib = new InterleavedBuffer(array, interleavedBuffer.stride);
      ib.uuid = interleavedBuffer.uuid;
      interleavedBufferMap[uuid] = ib;
      return ib;
    }
    function getArrayBuffer(json2, uuid) {
      if (arrayBufferMap[uuid] !== void 0)
        return arrayBufferMap[uuid];
      const arrayBuffers = json2.arrayBuffers;
      const arrayBuffer = arrayBuffers[uuid];
      const ab = new Uint32Array(arrayBuffer).buffer;
      arrayBufferMap[uuid] = ab;
      return ab;
    }
    const geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
    const index = json.data.index;
    if (index !== void 0) {
      const typedArray = new TYPED_ARRAYS[index.type](index.array);
      geometry.setIndex(new BufferAttribute(typedArray, 1));
    }
    const attributes = json.data.attributes;
    for (const key in attributes) {
      const attribute = attributes[key];
      let bufferAttribute;
      if (attribute.isInterleavedBufferAttribute) {
        const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
        bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
      } else {
        const typedArray = new TYPED_ARRAYS[attribute.type](attribute.array);
        const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
        bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);
      }
      if (attribute.name !== void 0)
        bufferAttribute.name = attribute.name;
      geometry.setAttribute(key, bufferAttribute);
    }
    const morphAttributes = json.data.morphAttributes;
    if (morphAttributes) {
      for (const key in morphAttributes) {
        const attributeArray = morphAttributes[key];
        const array = [];
        for (let i2 = 0, il = attributeArray.length; i2 < il; i2++) {
          const attribute = attributeArray[i2];
          let bufferAttribute;
          if (attribute.isInterleavedBufferAttribute) {
            const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
            bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
          } else {
            const typedArray = new TYPED_ARRAYS[attribute.type](attribute.array);
            bufferAttribute = new BufferAttribute(typedArray, attribute.itemSize, attribute.normalized);
          }
          if (attribute.name !== void 0)
            bufferAttribute.name = attribute.name;
          array.push(bufferAttribute);
        }
        geometry.morphAttributes[key] = array;
      }
    }
    const morphTargetsRelative = json.data.morphTargetsRelative;
    if (morphTargetsRelative) {
      geometry.morphTargetsRelative = true;
    }
    const groups = json.data.groups || json.data.drawcalls || json.data.offsets;
    if (groups !== void 0) {
      for (let i2 = 0, n2 = groups.length; i2 !== n2; ++i2) {
        const group = groups[i2];
        geometry.addGroup(group.start, group.count, group.materialIndex);
      }
    }
    const boundingSphere = json.data.boundingSphere;
    if (boundingSphere !== void 0) {
      const center = new Vector3();
      if (boundingSphere.center !== void 0) {
        center.fromArray(boundingSphere.center);
      }
      geometry.boundingSphere = new Sphere(center, boundingSphere.radius);
    }
    if (json.name)
      geometry.name = json.name;
    if (json.userData)
      geometry.userData = json.userData;
    return geometry;
  }
});
const TYPED_ARRAYS = {
  Int8Array,
  Uint8Array,
  Uint8ClampedArray: typeof Uint8ClampedArray !== "undefined" ? Uint8ClampedArray : Uint8Array,
  Int16Array,
  Uint16Array,
  Int32Array,
  Uint32Array,
  Float32Array,
  Float64Array
};
class ObjectLoader extends Loader {
  constructor(manager) {
    super(manager);
  }
  load(url, onLoad, onProgress, onError) {
    const scope = this;
    const path = this.path === "" ? LoaderUtils.extractUrlBase(url) : this.path;
    this.resourcePath = this.resourcePath || path;
    const loader = new FileLoader(this.manager);
    loader.setPath(this.path);
    loader.setRequestHeader(this.requestHeader);
    loader.setWithCredentials(this.withCredentials);
    loader.load(url, function(text) {
      let json = null;
      try {
        json = JSON.parse(text);
      } catch (error) {
        if (onError !== void 0)
          onError(error);
        console.error("THREE:ObjectLoader: Can't parse " + url + ".", error.message);
        return;
      }
      const metadata = json.metadata;
      if (metadata === void 0 || metadata.type === void 0 || metadata.type.toLowerCase() === "geometry") {
        console.error("THREE.ObjectLoader: Can't load " + url);
        return;
      }
      scope.parse(json, onLoad);
    }, onProgress, onError);
  }
  parse(json, onLoad) {
    const shapes = this.parseShape(json.shapes);
    const geometries = this.parseGeometries(json.geometries, shapes);
    const images = this.parseImages(json.images, function() {
      if (onLoad !== void 0)
        onLoad(object);
    });
    const textures = this.parseTextures(json.textures, images);
    const materials = this.parseMaterials(json.materials, textures);
    const object = this.parseObject(json.object, geometries, materials);
    if (json.animations) {
      object.animations = this.parseAnimations(json.animations);
    }
    if (json.images === void 0 || json.images.length === 0) {
      if (onLoad !== void 0)
        onLoad(object);
    }
    return object;
  }
  parseShape(json) {
    const shapes = {};
    if (json !== void 0) {
      for (let i2 = 0, l2 = json.length; i2 < l2; i2++) {
        const shape = new Shape().fromJSON(json[i2]);
        shapes[shape.uuid] = shape;
      }
    }
    return shapes;
  }
  parseGeometries(json, shapes) {
    const geometries = {};
    let geometryShapes;
    if (json !== void 0) {
      const bufferGeometryLoader = new BufferGeometryLoader();
      for (let i2 = 0, l2 = json.length; i2 < l2; i2++) {
        let geometry;
        const data = json[i2];
        switch (data.type) {
          case "PlaneGeometry":
          case "PlaneBufferGeometry":
            geometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);
            break;
          case "BoxGeometry":
          case "BoxBufferGeometry":
          case "CubeGeometry":
            geometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
            break;
          case "CircleGeometry":
          case "CircleBufferGeometry":
            geometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);
            break;
          case "CylinderGeometry":
          case "CylinderBufferGeometry":
            geometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
            break;
          case "ConeGeometry":
          case "ConeBufferGeometry":
            geometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
            break;
          case "SphereGeometry":
          case "SphereBufferGeometry":
            geometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
            break;
          case "DodecahedronGeometry":
          case "DodecahedronBufferGeometry":
          case "IcosahedronGeometry":
          case "IcosahedronBufferGeometry":
          case "OctahedronGeometry":
          case "OctahedronBufferGeometry":
          case "TetrahedronGeometry":
          case "TetrahedronBufferGeometry":
            geometry = new Geometries[data.type](data.radius, data.detail);
            break;
          case "RingGeometry":
          case "RingBufferGeometry":
            geometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
            break;
          case "TorusGeometry":
          case "TorusBufferGeometry":
            geometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
            break;
          case "TorusKnotGeometry":
          case "TorusKnotBufferGeometry":
            geometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
            break;
          case "TubeGeometry":
          case "TubeBufferGeometry":
            geometry = new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);
            break;
          case "LatheGeometry":
          case "LatheBufferGeometry":
            geometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);
            break;
          case "PolyhedronGeometry":
          case "PolyhedronBufferGeometry":
            geometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);
            break;
          case "ShapeGeometry":
          case "ShapeBufferGeometry":
            geometryShapes = [];
            for (let j2 = 0, jl = data.shapes.length; j2 < jl; j2++) {
              const shape = shapes[data.shapes[j2]];
              geometryShapes.push(shape);
            }
            geometry = new Geometries[data.type](geometryShapes, data.curveSegments);
            break;
          case "ExtrudeGeometry":
          case "ExtrudeBufferGeometry":
            geometryShapes = [];
            for (let j2 = 0, jl = data.shapes.length; j2 < jl; j2++) {
              const shape = shapes[data.shapes[j2]];
              geometryShapes.push(shape);
            }
            const extrudePath = data.options.extrudePath;
            if (extrudePath !== void 0) {
              data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);
            }
            geometry = new Geometries[data.type](geometryShapes, data.options);
            break;
          case "BufferGeometry":
          case "InstancedBufferGeometry":
            geometry = bufferGeometryLoader.parse(data);
            break;
          case "Geometry":
            console.error('THREE.ObjectLoader: Loading "Geometry" is not supported anymore.');
            break;
          default:
            console.warn('THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"');
            continue;
        }
        geometry.uuid = data.uuid;
        if (data.name !== void 0)
          geometry.name = data.name;
        if (geometry.isBufferGeometry === true && data.userData !== void 0)
          geometry.userData = data.userData;
        geometries[data.uuid] = geometry;
      }
    }
    return geometries;
  }
  parseMaterials(json, textures) {
    const cache = {};
    const materials = {};
    if (json !== void 0) {
      const loader = new MaterialLoader();
      loader.setTextures(textures);
      for (let i2 = 0, l2 = json.length; i2 < l2; i2++) {
        const data = json[i2];
        if (data.type === "MultiMaterial") {
          const array = [];
          for (let j2 = 0; j2 < data.materials.length; j2++) {
            const material = data.materials[j2];
            if (cache[material.uuid] === void 0) {
              cache[material.uuid] = loader.parse(material);
            }
            array.push(cache[material.uuid]);
          }
          materials[data.uuid] = array;
        } else {
          if (cache[data.uuid] === void 0) {
            cache[data.uuid] = loader.parse(data);
          }
          materials[data.uuid] = cache[data.uuid];
        }
      }
    }
    return materials;
  }
  parseAnimations(json) {
    const animations = [];
    for (let i2 = 0; i2 < json.length; i2++) {
      const data = json[i2];
      const clip = AnimationClip.parse(data);
      if (data.uuid !== void 0)
        clip.uuid = data.uuid;
      animations.push(clip);
    }
    return animations;
  }
  parseImages(json, onLoad) {
    const scope = this;
    const images = {};
    let loader;
    function loadImage(url) {
      scope.manager.itemStart(url);
      return loader.load(url, function() {
        scope.manager.itemEnd(url);
      }, void 0, function() {
        scope.manager.itemError(url);
        scope.manager.itemEnd(url);
      });
    }
    if (json !== void 0 && json.length > 0) {
      const manager = new LoadingManager(onLoad);
      loader = new ImageLoader(manager);
      loader.setCrossOrigin(this.crossOrigin);
      for (let i2 = 0, il = json.length; i2 < il; i2++) {
        const image = json[i2];
        const url = image.url;
        if (Array.isArray(url)) {
          images[image.uuid] = [];
          for (let j2 = 0, jl = url.length; j2 < jl; j2++) {
            const currentUrl = url[j2];
            const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(currentUrl) ? currentUrl : scope.resourcePath + currentUrl;
            images[image.uuid].push(loadImage(path));
          }
        } else {
          const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(image.url) ? image.url : scope.resourcePath + image.url;
          images[image.uuid] = loadImage(path);
        }
      }
    }
    return images;
  }
  parseTextures(json, images) {
    function parseConstant(value, type) {
      if (typeof value === "number")
        return value;
      console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", value);
      return type[value];
    }
    const textures = {};
    if (json !== void 0) {
      for (let i2 = 0, l2 = json.length; i2 < l2; i2++) {
        const data = json[i2];
        if (data.image === void 0) {
          console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid);
        }
        if (images[data.image] === void 0) {
          console.warn("THREE.ObjectLoader: Undefined image", data.image);
        }
        let texture;
        if (Array.isArray(images[data.image])) {
          texture = new CubeTexture(images[data.image]);
        } else {
          texture = new Texture(images[data.image]);
        }
        texture.needsUpdate = true;
        texture.uuid = data.uuid;
        if (data.name !== void 0)
          texture.name = data.name;
        if (data.mapping !== void 0)
          texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);
        if (data.offset !== void 0)
          texture.offset.fromArray(data.offset);
        if (data.repeat !== void 0)
          texture.repeat.fromArray(data.repeat);
        if (data.center !== void 0)
          texture.center.fromArray(data.center);
        if (data.rotation !== void 0)
          texture.rotation = data.rotation;
        if (data.wrap !== void 0) {
          texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);
          texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);
        }
        if (data.format !== void 0)
          texture.format = data.format;
        if (data.type !== void 0)
          texture.type = data.type;
        if (data.encoding !== void 0)
          texture.encoding = data.encoding;
        if (data.minFilter !== void 0)
          texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);
        if (data.magFilter !== void 0)
          texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);
        if (data.anisotropy !== void 0)
          texture.anisotropy = data.anisotropy;
        if (data.flipY !== void 0)
          texture.flipY = data.flipY;
        if (data.premultiplyAlpha !== void 0)
          texture.premultiplyAlpha = data.premultiplyAlpha;
        if (data.unpackAlignment !== void 0)
          texture.unpackAlignment = data.unpackAlignment;
        textures[data.uuid] = texture;
      }
    }
    return textures;
  }
  parseObject(data, geometries, materials) {
    let object;
    function getGeometry(name) {
      if (geometries[name] === void 0) {
        console.warn("THREE.ObjectLoader: Undefined geometry", name);
      }
      return geometries[name];
    }
    function getMaterial(name) {
      if (name === void 0)
        return void 0;
      if (Array.isArray(name)) {
        const array = [];
        for (let i2 = 0, l2 = name.length; i2 < l2; i2++) {
          const uuid = name[i2];
          if (materials[uuid] === void 0) {
            console.warn("THREE.ObjectLoader: Undefined material", uuid);
          }
          array.push(materials[uuid]);
        }
        return array;
      }
      if (materials[name] === void 0) {
        console.warn("THREE.ObjectLoader: Undefined material", name);
      }
      return materials[name];
    }
    let geometry, material;
    switch (data.type) {
      case "Scene":
        object = new Scene();
        if (data.background !== void 0) {
          if (Number.isInteger(data.background)) {
            object.background = new Color(data.background);
          }
        }
        if (data.fog !== void 0) {
          if (data.fog.type === "Fog") {
            object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);
          } else if (data.fog.type === "FogExp2") {
            object.fog = new FogExp2(data.fog.color, data.fog.density);
          }
        }
        break;
      case "PerspectiveCamera":
        object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);
        if (data.focus !== void 0)
          object.focus = data.focus;
        if (data.zoom !== void 0)
          object.zoom = data.zoom;
        if (data.filmGauge !== void 0)
          object.filmGauge = data.filmGauge;
        if (data.filmOffset !== void 0)
          object.filmOffset = data.filmOffset;
        if (data.view !== void 0)
          object.view = Object.assign({}, data.view);
        break;
      case "OrthographicCamera":
        object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);
        if (data.zoom !== void 0)
          object.zoom = data.zoom;
        if (data.view !== void 0)
          object.view = Object.assign({}, data.view);
        break;
      case "AmbientLight":
        object = new AmbientLight(data.color, data.intensity);
        break;
      case "DirectionalLight":
        object = new DirectionalLight(data.color, data.intensity);
        break;
      case "PointLight":
        object = new PointLight(data.color, data.intensity, data.distance, data.decay);
        break;
      case "RectAreaLight":
        object = new RectAreaLight(data.color, data.intensity, data.width, data.height);
        break;
      case "SpotLight":
        object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
        break;
      case "HemisphereLight":
        object = new HemisphereLight(data.color, data.groundColor, data.intensity);
        break;
      case "LightProbe":
        object = new LightProbe().fromJSON(data);
        break;
      case "SkinnedMesh":
        console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
      case "Mesh":
        geometry = getGeometry(data.geometry);
        material = getMaterial(data.material);
        object = new Mesh(geometry, material);
        break;
      case "InstancedMesh":
        geometry = getGeometry(data.geometry);
        material = getMaterial(data.material);
        const count = data.count;
        const instanceMatrix = data.instanceMatrix;
        object = new InstancedMesh(geometry, material, count);
        object.instanceMatrix = new BufferAttribute(new Float32Array(instanceMatrix.array), 16);
        break;
      case "LOD":
        object = new LOD();
        break;
      case "Line":
        object = new Line(getGeometry(data.geometry), getMaterial(data.material), data.mode);
        break;
      case "LineLoop":
        object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));
        break;
      case "LineSegments":
        object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));
        break;
      case "PointCloud":
      case "Points":
        object = new Points(getGeometry(data.geometry), getMaterial(data.material));
        break;
      case "Sprite":
        object = new Sprite(getMaterial(data.material));
        break;
      case "Group":
        object = new Group();
        break;
      default:
        object = new Object3D();
    }
    object.uuid = data.uuid;
    if (data.name !== void 0)
      object.name = data.name;
    if (data.matrix !== void 0) {
      object.matrix.fromArray(data.matrix);
      if (data.matrixAutoUpdate !== void 0)
        object.matrixAutoUpdate = data.matrixAutoUpdate;
      if (object.matrixAutoUpdate)
        object.matrix.decompose(object.position, object.quaternion, object.scale);
    } else {
      if (data.position !== void 0)
        object.position.fromArray(data.position);
      if (data.rotation !== void 0)
        object.rotation.fromArray(data.rotation);
      if (data.quaternion !== void 0)
        object.quaternion.fromArray(data.quaternion);
      if (data.scale !== void 0)
        object.scale.fromArray(data.scale);
    }
    if (data.castShadow !== void 0)
      object.castShadow = data.castShadow;
    if (data.receiveShadow !== void 0)
      object.receiveShadow = data.receiveShadow;
    if (data.shadow) {
      if (data.shadow.bias !== void 0)
        object.shadow.bias = data.shadow.bias;
      if (data.shadow.normalBias !== void 0)
        object.shadow.normalBias = data.shadow.normalBias;
      if (data.shadow.radius !== void 0)
        object.shadow.radius = data.shadow.radius;
      if (data.shadow.mapSize !== void 0)
        object.shadow.mapSize.fromArray(data.shadow.mapSize);
      if (data.shadow.camera !== void 0)
        object.shadow.camera = this.parseObject(data.shadow.camera);
    }
    if (data.visible !== void 0)
      object.visible = data.visible;
    if (data.frustumCulled !== void 0)
      object.frustumCulled = data.frustumCulled;
    if (data.renderOrder !== void 0)
      object.renderOrder = data.renderOrder;
    if (data.userData !== void 0)
      object.userData = data.userData;
    if (data.layers !== void 0)
      object.layers.mask = data.layers;
    if (data.children !== void 0) {
      const children = data.children;
      for (let i2 = 0; i2 < children.length; i2++) {
        object.add(this.parseObject(children[i2], geometries, materials));
      }
    }
    if (data.type === "LOD") {
      if (data.autoUpdate !== void 0)
        object.autoUpdate = data.autoUpdate;
      const levels = data.levels;
      for (let l2 = 0; l2 < levels.length; l2++) {
        const level = levels[l2];
        const child = object.getObjectByProperty("uuid", level.object);
        if (child !== void 0) {
          object.addLevel(child, level.distance);
        }
      }
    }
    return object;
  }
  setTexturePath(value) {
    console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().");
    return this.setResourcePath(value);
  }
}
const TEXTURE_MAPPING = {
  UVMapping,
  CubeReflectionMapping,
  CubeRefractionMapping,
  EquirectangularReflectionMapping,
  EquirectangularRefractionMapping,
  CubeUVReflectionMapping,
  CubeUVRefractionMapping
};
const TEXTURE_WRAPPING = {
  RepeatWrapping,
  ClampToEdgeWrapping,
  MirroredRepeatWrapping
};
const TEXTURE_FILTER = {
  NearestFilter,
  NearestMipmapNearestFilter,
  NearestMipmapLinearFilter,
  LinearFilter,
  LinearMipmapNearestFilter,
  LinearMipmapLinearFilter
};
function ImageBitmapLoader(manager) {
  if (typeof createImageBitmap === "undefined") {
    console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");
  }
  if (typeof fetch === "undefined") {
    console.warn("THREE.ImageBitmapLoader: fetch() not supported.");
  }
  Loader.call(this, manager);
  this.options = { premultiplyAlpha: "none" };
}
ImageBitmapLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: ImageBitmapLoader,
  isImageBitmapLoader: true,
  setOptions: function setOptions(options) {
    this.options = options;
    return this;
  },
  load: function(url, onLoad, onProgress, onError) {
    if (url === void 0)
      url = "";
    if (this.path !== void 0)
      url = this.path + url;
    url = this.manager.resolveURL(url);
    const scope = this;
    const cached = Cache.get(url);
    if (cached !== void 0) {
      scope.manager.itemStart(url);
      setTimeout(function() {
        if (onLoad)
          onLoad(cached);
        scope.manager.itemEnd(url);
      }, 0);
      return cached;
    }
    const fetchOptions = {};
    fetchOptions.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include";
    fetch(url, fetchOptions).then(function(res) {
      return res.blob();
    }).then(function(blob) {
      return createImageBitmap(blob, scope.options);
    }).then(function(imageBitmap) {
      Cache.add(url, imageBitmap);
      if (onLoad)
        onLoad(imageBitmap);
      scope.manager.itemEnd(url);
    }).catch(function(e2) {
      if (onError)
        onError(e2);
      scope.manager.itemError(url);
      scope.manager.itemEnd(url);
    });
    scope.manager.itemStart(url);
  }
});
function ShapePath() {
  this.type = "ShapePath";
  this.color = new Color();
  this.subPaths = [];
  this.currentPath = null;
}
Object.assign(ShapePath.prototype, {
  moveTo: function(x2, y2) {
    this.currentPath = new Path();
    this.subPaths.push(this.currentPath);
    this.currentPath.moveTo(x2, y2);
    return this;
  },
  lineTo: function(x2, y2) {
    this.currentPath.lineTo(x2, y2);
    return this;
  },
  quadraticCurveTo: function(aCPx, aCPy, aX, aY) {
    this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
    return this;
  },
  bezierCurveTo: function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
    this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
    return this;
  },
  splineThru: function(pts) {
    this.currentPath.splineThru(pts);
    return this;
  },
  toShapes: function(isCCW, noHoles) {
    function toShapesNoHoles(inSubpaths) {
      const shapes2 = [];
      for (let i2 = 0, l2 = inSubpaths.length; i2 < l2; i2++) {
        const tmpPath2 = inSubpaths[i2];
        const tmpShape2 = new Shape();
        tmpShape2.curves = tmpPath2.curves;
        shapes2.push(tmpShape2);
      }
      return shapes2;
    }
    function isPointInsidePolygon(inPt, inPolygon) {
      const polyLen = inPolygon.length;
      let inside = false;
      for (let p2 = polyLen - 1, q2 = 0; q2 < polyLen; p2 = q2++) {
        let edgeLowPt = inPolygon[p2];
        let edgeHighPt = inPolygon[q2];
        let edgeDx = edgeHighPt.x - edgeLowPt.x;
        let edgeDy = edgeHighPt.y - edgeLowPt.y;
        if (Math.abs(edgeDy) > Number.EPSILON) {
          if (edgeDy < 0) {
            edgeLowPt = inPolygon[q2];
            edgeDx = -edgeDx;
            edgeHighPt = inPolygon[p2];
            edgeDy = -edgeDy;
          }
          if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y)
            continue;
          if (inPt.y === edgeLowPt.y) {
            if (inPt.x === edgeLowPt.x)
              return true;
          } else {
            const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
            if (perpEdge === 0)
              return true;
            if (perpEdge < 0)
              continue;
            inside = !inside;
          }
        } else {
          if (inPt.y !== edgeLowPt.y)
            continue;
          if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x)
            return true;
        }
      }
      return inside;
    }
    const isClockWise = ShapeUtils.isClockWise;
    const subPaths = this.subPaths;
    if (subPaths.length === 0)
      return [];
    if (noHoles === true)
      return toShapesNoHoles(subPaths);
    let solid, tmpPath, tmpShape;
    const shapes = [];
    if (subPaths.length === 1) {
      tmpPath = subPaths[0];
      tmpShape = new Shape();
      tmpShape.curves = tmpPath.curves;
      shapes.push(tmpShape);
      return shapes;
    }
    let holesFirst = !isClockWise(subPaths[0].getPoints());
    holesFirst = isCCW ? !holesFirst : holesFirst;
    const betterShapeHoles = [];
    const newShapes = [];
    let newShapeHoles = [];
    let mainIdx = 0;
    let tmpPoints;
    newShapes[mainIdx] = void 0;
    newShapeHoles[mainIdx] = [];
    for (let i2 = 0, l2 = subPaths.length; i2 < l2; i2++) {
      tmpPath = subPaths[i2];
      tmpPoints = tmpPath.getPoints();
      solid = isClockWise(tmpPoints);
      solid = isCCW ? !solid : solid;
      if (solid) {
        if (!holesFirst && newShapes[mainIdx])
          mainIdx++;
        newShapes[mainIdx] = { s: new Shape(), p: tmpPoints };
        newShapes[mainIdx].s.curves = tmpPath.curves;
        if (holesFirst)
          mainIdx++;
        newShapeHoles[mainIdx] = [];
      } else {
        newShapeHoles[mainIdx].push({ h: tmpPath, p: tmpPoints[0] });
      }
    }
    if (!newShapes[0])
      return toShapesNoHoles(subPaths);
    if (newShapes.length > 1) {
      let ambiguous = false;
      const toChange = [];
      for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
        betterShapeHoles[sIdx] = [];
      }
      for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
        const sho = newShapeHoles[sIdx];
        for (let hIdx = 0; hIdx < sho.length; hIdx++) {
          const ho2 = sho[hIdx];
          let hole_unassigned = true;
          for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {
            if (isPointInsidePolygon(ho2.p, newShapes[s2Idx].p)) {
              if (sIdx !== s2Idx)
                toChange.push({ froms: sIdx, tos: s2Idx, hole: hIdx });
              if (hole_unassigned) {
                hole_unassigned = false;
                betterShapeHoles[s2Idx].push(ho2);
              } else {
                ambiguous = true;
              }
            }
          }
          if (hole_unassigned) {
            betterShapeHoles[sIdx].push(ho2);
          }
        }
      }
      if (toChange.length > 0) {
        if (!ambiguous)
          newShapeHoles = betterShapeHoles;
      }
    }
    let tmpHoles;
    for (let i2 = 0, il = newShapes.length; i2 < il; i2++) {
      tmpShape = newShapes[i2].s;
      shapes.push(tmpShape);
      tmpHoles = newShapeHoles[i2];
      for (let j2 = 0, jl = tmpHoles.length; j2 < jl; j2++) {
        tmpShape.holes.push(tmpHoles[j2].h);
      }
    }
    return shapes;
  }
});
function Font(data) {
  this.type = "Font";
  this.data = data;
}
Object.assign(Font.prototype, {
  isFont: true,
  generateShapes: function(text, size2) {
    if (size2 === void 0)
      size2 = 100;
    const shapes = [];
    const paths = createPaths(text, size2, this.data);
    for (let p2 = 0, pl = paths.length; p2 < pl; p2++) {
      Array.prototype.push.apply(shapes, paths[p2].toShapes());
    }
    return shapes;
  }
});
function createPaths(text, size2, data) {
  const chars = Array.from ? Array.from(text) : String(text).split("");
  const scale = size2 / data.resolution;
  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;
  const paths = [];
  let offsetX = 0, offsetY = 0;
  for (let i2 = 0; i2 < chars.length; i2++) {
    const char = chars[i2];
    if (char === "\n") {
      offsetX = 0;
      offsetY -= line_height;
    } else {
      const ret = createPath(char, scale, offsetX, offsetY, data);
      offsetX += ret.offsetX;
      paths.push(ret.path);
    }
  }
  return paths;
}
function createPath(char, scale, offsetX, offsetY, data) {
  const glyph = data.glyphs[char] || data.glyphs["?"];
  if (!glyph) {
    console.error('THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + ".");
    return;
  }
  const path = new ShapePath();
  let x2, y2, cpx, cpy, cpx1, cpy1, cpx2, cpy2;
  if (glyph.o) {
    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(" "));
    for (let i2 = 0, l2 = outline.length; i2 < l2; ) {
      const action = outline[i2++];
      switch (action) {
        case "m":
          x2 = outline[i2++] * scale + offsetX;
          y2 = outline[i2++] * scale + offsetY;
          path.moveTo(x2, y2);
          break;
        case "l":
          x2 = outline[i2++] * scale + offsetX;
          y2 = outline[i2++] * scale + offsetY;
          path.lineTo(x2, y2);
          break;
        case "q":
          cpx = outline[i2++] * scale + offsetX;
          cpy = outline[i2++] * scale + offsetY;
          cpx1 = outline[i2++] * scale + offsetX;
          cpy1 = outline[i2++] * scale + offsetY;
          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);
          break;
        case "b":
          cpx = outline[i2++] * scale + offsetX;
          cpy = outline[i2++] * scale + offsetY;
          cpx1 = outline[i2++] * scale + offsetX;
          cpy1 = outline[i2++] * scale + offsetY;
          cpx2 = outline[i2++] * scale + offsetX;
          cpy2 = outline[i2++] * scale + offsetY;
          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);
          break;
      }
    }
  }
  return { offsetX: glyph.ha * scale, path };
}
function FontLoader(manager) {
  Loader.call(this, manager);
}
FontLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: FontLoader,
  load: function(url, onLoad, onProgress, onError) {
    const scope = this;
    const loader = new FileLoader(this.manager);
    loader.setPath(this.path);
    loader.setRequestHeader(this.requestHeader);
    loader.setWithCredentials(scope.withCredentials);
    loader.load(url, function(text) {
      let json;
      try {
        json = JSON.parse(text);
      } catch (e2) {
        console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.");
        json = JSON.parse(text.substring(65, text.length - 2));
      }
      const font = scope.parse(json);
      if (onLoad)
        onLoad(font);
    }, onProgress, onError);
  },
  parse: function(json) {
    return new Font(json);
  }
});
let _context;
const AudioContext = {
  getContext: function() {
    if (_context === void 0) {
      _context = new (window.AudioContext || window.webkitAudioContext)();
    }
    return _context;
  },
  setContext: function(value) {
    _context = value;
  }
};
function AudioLoader(manager) {
  Loader.call(this, manager);
}
AudioLoader.prototype = Object.assign(Object.create(Loader.prototype), {
  constructor: AudioLoader,
  load: function(url, onLoad, onProgress, onError) {
    const scope = this;
    const loader = new FileLoader(scope.manager);
    loader.setResponseType("arraybuffer");
    loader.setPath(scope.path);
    loader.setRequestHeader(scope.requestHeader);
    loader.setWithCredentials(scope.withCredentials);
    loader.load(url, function(buffer) {
      try {
        const bufferCopy = buffer.slice(0);
        const context = AudioContext.getContext();
        context.decodeAudioData(bufferCopy, function(audioBuffer) {
          onLoad(audioBuffer);
        });
      } catch (e2) {
        if (onError) {
          onError(e2);
        } else {
          console.error(e2);
        }
        scope.manager.itemError(url);
      }
    }, onProgress, onError);
  }
});
function HemisphereLightProbe(skyColor, groundColor, intensity) {
  LightProbe.call(this, void 0, intensity);
  const color1 = new Color().set(skyColor);
  const color2 = new Color().set(groundColor);
  const sky = new Vector3(color1.r, color1.g, color1.b);
  const ground = new Vector3(color2.r, color2.g, color2.b);
  const c0 = Math.sqrt(Math.PI);
  const c1 = c0 * Math.sqrt(0.75);
  this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);
  this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);
}
HemisphereLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {
  constructor: HemisphereLightProbe,
  isHemisphereLightProbe: true,
  copy: function(source) {
    LightProbe.prototype.copy.call(this, source);
    return this;
  },
  toJSON: function(meta) {
    const data = LightProbe.prototype.toJSON.call(this, meta);
    return data;
  }
});
function AmbientLightProbe(color, intensity) {
  LightProbe.call(this, void 0, intensity);
  const color1 = new Color().set(color);
  this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
}
AmbientLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {
  constructor: AmbientLightProbe,
  isAmbientLightProbe: true,
  copy: function(source) {
    LightProbe.prototype.copy.call(this, source);
    return this;
  },
  toJSON: function(meta) {
    const data = LightProbe.prototype.toJSON.call(this, meta);
    return data;
  }
});
const _eyeRight = new Matrix4();
const _eyeLeft = new Matrix4();
function StereoCamera() {
  this.type = "StereoCamera";
  this.aspect = 1;
  this.eyeSep = 0.064;
  this.cameraL = new PerspectiveCamera();
  this.cameraL.layers.enable(1);
  this.cameraL.matrixAutoUpdate = false;
  this.cameraR = new PerspectiveCamera();
  this.cameraR.layers.enable(2);
  this.cameraR.matrixAutoUpdate = false;
  this._cache = {
    focus: null,
    fov: null,
    aspect: null,
    near: null,
    far: null,
    zoom: null,
    eyeSep: null
  };
}
Object.assign(StereoCamera.prototype, {
  update: function(camera) {
    const cache = this._cache;
    const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;
    if (needsUpdate) {
      cache.focus = camera.focus;
      cache.fov = camera.fov;
      cache.aspect = camera.aspect * this.aspect;
      cache.near = camera.near;
      cache.far = camera.far;
      cache.zoom = camera.zoom;
      cache.eyeSep = this.eyeSep;
      const projectionMatrix = camera.projectionMatrix.clone();
      const eyeSepHalf = cache.eyeSep / 2;
      const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
      const ymax = cache.near * Math.tan(MathUtils.DEG2RAD * cache.fov * 0.5) / cache.zoom;
      let xmin, xmax;
      _eyeLeft.elements[12] = -eyeSepHalf;
      _eyeRight.elements[12] = eyeSepHalf;
      xmin = -ymax * cache.aspect + eyeSepOnProjection;
      xmax = ymax * cache.aspect + eyeSepOnProjection;
      projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
      projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
      this.cameraL.projectionMatrix.copy(projectionMatrix);
      xmin = -ymax * cache.aspect - eyeSepOnProjection;
      xmax = ymax * cache.aspect - eyeSepOnProjection;
      projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
      projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
      this.cameraR.projectionMatrix.copy(projectionMatrix);
    }
    this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);
    this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);
  }
});
class Clock {
  constructor(autoStart) {
    this.autoStart = autoStart !== void 0 ? autoStart : true;
    this.startTime = 0;
    this.oldTime = 0;
    this.elapsedTime = 0;
    this.running = false;
  }
  start() {
    this.startTime = (typeof performance === "undefined" ? Date : performance).now();
    this.oldTime = this.startTime;
    this.elapsedTime = 0;
    this.running = true;
  }
  stop() {
    this.getElapsedTime();
    this.running = false;
    this.autoStart = false;
  }
  getElapsedTime() {
    this.getDelta();
    return this.elapsedTime;
  }
  getDelta() {
    let diff = 0;
    if (this.autoStart && !this.running) {
      this.start();
      return 0;
    }
    if (this.running) {
      const newTime = (typeof performance === "undefined" ? Date : performance).now();
      diff = (newTime - this.oldTime) / 1e3;
      this.oldTime = newTime;
      this.elapsedTime += diff;
    }
    return diff;
  }
}
const _position$2 = /* @__PURE__ */ new Vector3();
const _quaternion$3 = /* @__PURE__ */ new Quaternion();
const _scale$1 = /* @__PURE__ */ new Vector3();
const _orientation = /* @__PURE__ */ new Vector3();
class AudioListener extends Object3D {
  constructor() {
    super();
    this.type = "AudioListener";
    this.context = AudioContext.getContext();
    this.gain = this.context.createGain();
    this.gain.connect(this.context.destination);
    this.filter = null;
    this.timeDelta = 0;
    this._clock = new Clock();
  }
  getInput() {
    return this.gain;
  }
  removeFilter() {
    if (this.filter !== null) {
      this.gain.disconnect(this.filter);
      this.filter.disconnect(this.context.destination);
      this.gain.connect(this.context.destination);
      this.filter = null;
    }
    return this;
  }
  getFilter() {
    return this.filter;
  }
  setFilter(value) {
    if (this.filter !== null) {
      this.gain.disconnect(this.filter);
      this.filter.disconnect(this.context.destination);
    } else {
      this.gain.disconnect(this.context.destination);
    }
    this.filter = value;
    this.gain.connect(this.filter);
    this.filter.connect(this.context.destination);
    return this;
  }
  getMasterVolume() {
    return this.gain.gain.value;
  }
  setMasterVolume(value) {
    this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
    return this;
  }
  updateMatrixWorld(force) {
    super.updateMatrixWorld(force);
    const listener = this.context.listener;
    const up = this.up;
    this.timeDelta = this._clock.getDelta();
    this.matrixWorld.decompose(_position$2, _quaternion$3, _scale$1);
    _orientation.set(0, 0, -1).applyQuaternion(_quaternion$3);
    if (listener.positionX) {
      const endTime = this.context.currentTime + this.timeDelta;
      listener.positionX.linearRampToValueAtTime(_position$2.x, endTime);
      listener.positionY.linearRampToValueAtTime(_position$2.y, endTime);
      listener.positionZ.linearRampToValueAtTime(_position$2.z, endTime);
      listener.forwardX.linearRampToValueAtTime(_orientation.x, endTime);
      listener.forwardY.linearRampToValueAtTime(_orientation.y, endTime);
      listener.forwardZ.linearRampToValueAtTime(_orientation.z, endTime);
      listener.upX.linearRampToValueAtTime(up.x, endTime);
      listener.upY.linearRampToValueAtTime(up.y, endTime);
      listener.upZ.linearRampToValueAtTime(up.z, endTime);
    } else {
      listener.setPosition(_position$2.x, _position$2.y, _position$2.z);
      listener.setOrientation(_orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z);
    }
  }
}
class Audio extends Object3D {
  constructor(listener) {
    super();
    this.type = "Audio";
    this.listener = listener;
    this.context = listener.context;
    this.gain = this.context.createGain();
    this.gain.connect(listener.getInput());
    this.autoplay = false;
    this.buffer = null;
    this.detune = 0;
    this.loop = false;
    this.loopStart = 0;
    this.loopEnd = 0;
    this.offset = 0;
    this.duration = void 0;
    this.playbackRate = 1;
    this.isPlaying = false;
    this.hasPlaybackControl = true;
    this.source = null;
    this.sourceType = "empty";
    this._startedAt = 0;
    this._progress = 0;
    this._connected = false;
    this.filters = [];
  }
  getOutput() {
    return this.gain;
  }
  setNodeSource(audioNode) {
    this.hasPlaybackControl = false;
    this.sourceType = "audioNode";
    this.source = audioNode;
    this.connect();
    return this;
  }
  setMediaElementSource(mediaElement) {
    this.hasPlaybackControl = false;
    this.sourceType = "mediaNode";
    this.source = this.context.createMediaElementSource(mediaElement);
    this.connect();
    return this;
  }
  setMediaStreamSource(mediaStream) {
    this.hasPlaybackControl = false;
    this.sourceType = "mediaStreamNode";
    this.source = this.context.createMediaStreamSource(mediaStream);
    this.connect();
    return this;
  }
  setBuffer(audioBuffer) {
    this.buffer = audioBuffer;
    this.sourceType = "buffer";
    if (this.autoplay)
      this.play();
    return this;
  }
  play(delay) {
    if (delay === void 0)
      delay = 0;
    if (this.isPlaying === true) {
      console.warn("THREE.Audio: Audio is already playing.");
      return;
    }
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._startedAt = this.context.currentTime + delay;
    const source = this.context.createBufferSource();
    source.buffer = this.buffer;
    source.loop = this.loop;
    source.loopStart = this.loopStart;
    source.loopEnd = this.loopEnd;
    source.onended = this.onEnded.bind(this);
    source.start(this._startedAt, this._progress + this.offset, this.duration);
    this.isPlaying = true;
    this.source = source;
    this.setDetune(this.detune);
    this.setPlaybackRate(this.playbackRate);
    return this.connect();
  }
  pause() {
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    if (this.isPlaying === true) {
      this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
      if (this.loop === true) {
        this._progress = this._progress % (this.duration || this.buffer.duration);
      }
      this.source.stop();
      this.source.onended = null;
      this.isPlaying = false;
    }
    return this;
  }
  stop() {
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._progress = 0;
    this.source.stop();
    this.source.onended = null;
    this.isPlaying = false;
    return this;
  }
  connect() {
    if (this.filters.length > 0) {
      this.source.connect(this.filters[0]);
      for (let i2 = 1, l2 = this.filters.length; i2 < l2; i2++) {
        this.filters[i2 - 1].connect(this.filters[i2]);
      }
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else {
      this.source.connect(this.getOutput());
    }
    this._connected = true;
    return this;
  }
  disconnect() {
    if (this.filters.length > 0) {
      this.source.disconnect(this.filters[0]);
      for (let i2 = 1, l2 = this.filters.length; i2 < l2; i2++) {
        this.filters[i2 - 1].disconnect(this.filters[i2]);
      }
      this.filters[this.filters.length - 1].disconnect(this.getOutput());
    } else {
      this.source.disconnect(this.getOutput());
    }
    this._connected = false;
    return this;
  }
  getFilters() {
    return this.filters;
  }
  setFilters(value) {
    if (!value)
      value = [];
    if (this._connected === true) {
      this.disconnect();
      this.filters = value.slice();
      this.connect();
    } else {
      this.filters = value.slice();
    }
    return this;
  }
  setDetune(value) {
    this.detune = value;
    if (this.source.detune === void 0)
      return;
    if (this.isPlaying === true) {
      this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
    }
    return this;
  }
  getDetune() {
    return this.detune;
  }
  getFilter() {
    return this.getFilters()[0];
  }
  setFilter(filter) {
    return this.setFilters(filter ? [filter] : []);
  }
  setPlaybackRate(value) {
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this.playbackRate = value;
    if (this.isPlaying === true) {
      this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
    }
    return this;
  }
  getPlaybackRate() {
    return this.playbackRate;
  }
  onEnded() {
    this.isPlaying = false;
  }
  getLoop() {
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return false;
    }
    return this.loop;
  }
  setLoop(value) {
    if (this.hasPlaybackControl === false) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this.loop = value;
    if (this.isPlaying === true) {
      this.source.loop = this.loop;
    }
    return this;
  }
  setLoopStart(value) {
    this.loopStart = value;
    return this;
  }
  setLoopEnd(value) {
    this.loopEnd = value;
    return this;
  }
  getVolume() {
    return this.gain.gain.value;
  }
  setVolume(value) {
    this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
    return this;
  }
}
const _position$3 = /* @__PURE__ */ new Vector3();
const _quaternion$4 = /* @__PURE__ */ new Quaternion();
const _scale$2 = /* @__PURE__ */ new Vector3();
const _orientation$1 = /* @__PURE__ */ new Vector3();
class PositionalAudio extends Audio {
  constructor(listener) {
    super(listener);
    this.panner = this.context.createPanner();
    this.panner.panningModel = "HRTF";
    this.panner.connect(this.gain);
  }
  getOutput() {
    return this.panner;
  }
  getRefDistance() {
    return this.panner.refDistance;
  }
  setRefDistance(value) {
    this.panner.refDistance = value;
    return this;
  }
  getRolloffFactor() {
    return this.panner.rolloffFactor;
  }
  setRolloffFactor(value) {
    this.panner.rolloffFactor = value;
    return this;
  }
  getDistanceModel() {
    return this.panner.distanceModel;
  }
  setDistanceModel(value) {
    this.panner.distanceModel = value;
    return this;
  }
  getMaxDistance() {
    return this.panner.maxDistance;
  }
  setMaxDistance(value) {
    this.panner.maxDistance = value;
    return this;
  }
  setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {
    this.panner.coneInnerAngle = coneInnerAngle;
    this.panner.coneOuterAngle = coneOuterAngle;
    this.panner.coneOuterGain = coneOuterGain;
    return this;
  }
  updateMatrixWorld(force) {
    super.updateMatrixWorld(force);
    if (this.hasPlaybackControl === true && this.isPlaying === false)
      return;
    this.matrixWorld.decompose(_position$3, _quaternion$4, _scale$2);
    _orientation$1.set(0, 0, 1).applyQuaternion(_quaternion$4);
    const panner = this.panner;
    if (panner.positionX) {
      const endTime = this.context.currentTime + this.listener.timeDelta;
      panner.positionX.linearRampToValueAtTime(_position$3.x, endTime);
      panner.positionY.linearRampToValueAtTime(_position$3.y, endTime);
      panner.positionZ.linearRampToValueAtTime(_position$3.z, endTime);
      panner.orientationX.linearRampToValueAtTime(_orientation$1.x, endTime);
      panner.orientationY.linearRampToValueAtTime(_orientation$1.y, endTime);
      panner.orientationZ.linearRampToValueAtTime(_orientation$1.z, endTime);
    } else {
      panner.setPosition(_position$3.x, _position$3.y, _position$3.z);
      panner.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z);
    }
  }
}
class AudioAnalyser {
  constructor(audio, fftSize) {
    this.analyser = audio.context.createAnalyser();
    this.analyser.fftSize = fftSize !== void 0 ? fftSize : 2048;
    this.data = new Uint8Array(this.analyser.frequencyBinCount);
    audio.getOutput().connect(this.analyser);
  }
  getFrequencyData() {
    this.analyser.getByteFrequencyData(this.data);
    return this.data;
  }
  getAverageFrequency() {
    let value = 0;
    const data = this.getFrequencyData();
    for (let i2 = 0; i2 < data.length; i2++) {
      value += data[i2];
    }
    return value / data.length;
  }
}
function PropertyMixer(binding, typeName, valueSize) {
  this.binding = binding;
  this.valueSize = valueSize;
  let mixFunction, mixFunctionAdditive, setIdentity;
  switch (typeName) {
    case "quaternion":
      mixFunction = this._slerp;
      mixFunctionAdditive = this._slerpAdditive;
      setIdentity = this._setAdditiveIdentityQuaternion;
      this.buffer = new Float64Array(valueSize * 6);
      this._workIndex = 5;
      break;
    case "string":
    case "bool":
      mixFunction = this._select;
      mixFunctionAdditive = this._select;
      setIdentity = this._setAdditiveIdentityOther;
      this.buffer = new Array(valueSize * 5);
      break;
    default:
      mixFunction = this._lerp;
      mixFunctionAdditive = this._lerpAdditive;
      setIdentity = this._setAdditiveIdentityNumeric;
      this.buffer = new Float64Array(valueSize * 5);
  }
  this._mixBufferRegion = mixFunction;
  this._mixBufferRegionAdditive = mixFunctionAdditive;
  this._setIdentity = setIdentity;
  this._origIndex = 3;
  this._addIndex = 4;
  this.cumulativeWeight = 0;
  this.cumulativeWeightAdditive = 0;
  this.useCount = 0;
  this.referenceCount = 0;
}
Object.assign(PropertyMixer.prototype, {
  accumulate: function(accuIndex, weight) {
    const buffer = this.buffer, stride = this.valueSize, offset = accuIndex * stride + stride;
    let currentWeight = this.cumulativeWeight;
    if (currentWeight === 0) {
      for (let i2 = 0; i2 !== stride; ++i2) {
        buffer[offset + i2] = buffer[i2];
      }
      currentWeight = weight;
    } else {
      currentWeight += weight;
      const mix = weight / currentWeight;
      this._mixBufferRegion(buffer, offset, 0, mix, stride);
    }
    this.cumulativeWeight = currentWeight;
  },
  accumulateAdditive: function(weight) {
    const buffer = this.buffer, stride = this.valueSize, offset = stride * this._addIndex;
    if (this.cumulativeWeightAdditive === 0) {
      this._setIdentity();
    }
    this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);
    this.cumulativeWeightAdditive += weight;
  },
  apply: function(accuIndex) {
    const stride = this.valueSize, buffer = this.buffer, offset = accuIndex * stride + stride, weight = this.cumulativeWeight, weightAdditive = this.cumulativeWeightAdditive, binding = this.binding;
    this.cumulativeWeight = 0;
    this.cumulativeWeightAdditive = 0;
    if (weight < 1) {
      const originalValueOffset = stride * this._origIndex;
      this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
    }
    if (weightAdditive > 0) {
      this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
    }
    for (let i2 = stride, e2 = stride + stride; i2 !== e2; ++i2) {
      if (buffer[i2] !== buffer[i2 + stride]) {
        binding.setValue(buffer, offset);
        break;
      }
    }
  },
  saveOriginalState: function() {
    const binding = this.binding;
    const buffer = this.buffer, stride = this.valueSize, originalValueOffset = stride * this._origIndex;
    binding.getValue(buffer, originalValueOffset);
    for (let i2 = stride, e2 = originalValueOffset; i2 !== e2; ++i2) {
      buffer[i2] = buffer[originalValueOffset + i2 % stride];
    }
    this._setIdentity();
    this.cumulativeWeight = 0;
    this.cumulativeWeightAdditive = 0;
  },
  restoreOriginalState: function() {
    const originalValueOffset = this.valueSize * 3;
    this.binding.setValue(this.buffer, originalValueOffset);
  },
  _setAdditiveIdentityNumeric: function() {
    const startIndex = this._addIndex * this.valueSize;
    const endIndex = startIndex + this.valueSize;
    for (let i2 = startIndex; i2 < endIndex; i2++) {
      this.buffer[i2] = 0;
    }
  },
  _setAdditiveIdentityQuaternion: function() {
    this._setAdditiveIdentityNumeric();
    this.buffer[this._addIndex * this.valueSize + 3] = 1;
  },
  _setAdditiveIdentityOther: function() {
    const startIndex = this._origIndex * this.valueSize;
    const targetIndex = this._addIndex * this.valueSize;
    for (let i2 = 0; i2 < this.valueSize; i2++) {
      this.buffer[targetIndex + i2] = this.buffer[startIndex + i2];
    }
  },
  _select: function(buffer, dstOffset, srcOffset, t3, stride) {
    if (t3 >= 0.5) {
      for (let i2 = 0; i2 !== stride; ++i2) {
        buffer[dstOffset + i2] = buffer[srcOffset + i2];
      }
    }
  },
  _slerp: function(buffer, dstOffset, srcOffset, t3) {
    Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t3);
  },
  _slerpAdditive: function(buffer, dstOffset, srcOffset, t3, stride) {
    const workOffset = this._workIndex * stride;
    Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset);
    Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t3);
  },
  _lerp: function(buffer, dstOffset, srcOffset, t3, stride) {
    const s2 = 1 - t3;
    for (let i2 = 0; i2 !== stride; ++i2) {
      const j2 = dstOffset + i2;
      buffer[j2] = buffer[j2] * s2 + buffer[srcOffset + i2] * t3;
    }
  },
  _lerpAdditive: function(buffer, dstOffset, srcOffset, t3, stride) {
    for (let i2 = 0; i2 !== stride; ++i2) {
      const j2 = dstOffset + i2;
      buffer[j2] = buffer[j2] + buffer[srcOffset + i2] * t3;
    }
  }
});
const _RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
const _reservedRe = new RegExp("[" + _RESERVED_CHARS_RE + "]", "g");
const _wordChar = "[^" + _RESERVED_CHARS_RE + "]";
const _wordCharOrDot = "[^" + _RESERVED_CHARS_RE.replace("\\.", "") + "]";
const _directoryRe = /((?:WC+[\/:])*)/.source.replace("WC", _wordChar);
const _nodeRe = /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot);
const _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar);
const _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar);
const _trackRe = new RegExp("^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + "$");
const _supportedObjectNames = ["material", "materials", "bones"];
function Composite(targetGroup, path, optionalParsedPath) {
  const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
  this._targetGroup = targetGroup;
  this._bindings = targetGroup.subscribe_(path, parsedPath);
}
Object.assign(Composite.prototype, {
  getValue: function(array, offset) {
    this.bind();
    const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
    if (binding !== void 0)
      binding.getValue(array, offset);
  },
  setValue: function(array, offset) {
    const bindings = this._bindings;
    for (let i2 = this._targetGroup.nCachedObjects_, n2 = bindings.length; i2 !== n2; ++i2) {
      bindings[i2].setValue(array, offset);
    }
  },
  bind: function() {
    const bindings = this._bindings;
    for (let i2 = this._targetGroup.nCachedObjects_, n2 = bindings.length; i2 !== n2; ++i2) {
      bindings[i2].bind();
    }
  },
  unbind: function() {
    const bindings = this._bindings;
    for (let i2 = this._targetGroup.nCachedObjects_, n2 = bindings.length; i2 !== n2; ++i2) {
      bindings[i2].unbind();
    }
  }
});
function PropertyBinding(rootNode, path, parsedPath) {
  this.path = path;
  this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);
  this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;
  this.rootNode = rootNode;
}
Object.assign(PropertyBinding, {
  Composite,
  create: function(root, path, parsedPath) {
    if (!(root && root.isAnimationObjectGroup)) {
      return new PropertyBinding(root, path, parsedPath);
    } else {
      return new PropertyBinding.Composite(root, path, parsedPath);
    }
  },
  sanitizeNodeName: function(name) {
    return name.replace(/\s/g, "_").replace(_reservedRe, "");
  },
  parseTrackName: function(trackName) {
    const matches = _trackRe.exec(trackName);
    if (!matches) {
      throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
    }
    const results = {
      nodeName: matches[2],
      objectName: matches[3],
      objectIndex: matches[4],
      propertyName: matches[5],
      propertyIndex: matches[6]
    };
    const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
    if (lastDot !== void 0 && lastDot !== -1) {
      const objectName = results.nodeName.substring(lastDot + 1);
      if (_supportedObjectNames.indexOf(objectName) !== -1) {
        results.nodeName = results.nodeName.substring(0, lastDot);
        results.objectName = objectName;
      }
    }
    if (results.propertyName === null || results.propertyName.length === 0) {
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
    }
    return results;
  },
  findNode: function(root, nodeName) {
    if (!nodeName || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {
      return root;
    }
    if (root.skeleton) {
      const bone = root.skeleton.getBoneByName(nodeName);
      if (bone !== void 0) {
        return bone;
      }
    }
    if (root.children) {
      const searchNodeSubtree = function(children) {
        for (let i2 = 0; i2 < children.length; i2++) {
          const childNode = children[i2];
          if (childNode.name === nodeName || childNode.uuid === nodeName) {
            return childNode;
          }
          const result = searchNodeSubtree(childNode.children);
          if (result)
            return result;
        }
        return null;
      };
      const subTreeNode = searchNodeSubtree(root.children);
      if (subTreeNode) {
        return subTreeNode;
      }
    }
    return null;
  }
});
Object.assign(PropertyBinding.prototype, {
  _getValue_unavailable: function() {
  },
  _setValue_unavailable: function() {
  },
  BindingType: {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
  },
  Versioning: {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
  },
  GetterByBindingType: [
    function getValue_direct(buffer, offset) {
      buffer[offset] = this.node[this.propertyName];
    },
    function getValue_array(buffer, offset) {
      const source = this.resolvedProperty;
      for (let i2 = 0, n2 = source.length; i2 !== n2; ++i2) {
        buffer[offset++] = source[i2];
      }
    },
    function getValue_arrayElement(buffer, offset) {
      buffer[offset] = this.resolvedProperty[this.propertyIndex];
    },
    function getValue_toArray(buffer, offset) {
      this.resolvedProperty.toArray(buffer, offset);
    }
  ],
  SetterByBindingTypeAndVersioning: [
    [
      function setValue_direct(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
      },
      function setValue_direct_setNeedsUpdate(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
        this.targetObject.needsUpdate = true;
      },
      function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
        this.targetObject.matrixWorldNeedsUpdate = true;
      }
    ],
    [
      function setValue_array(buffer, offset) {
        const dest = this.resolvedProperty;
        for (let i2 = 0, n2 = dest.length; i2 !== n2; ++i2) {
          dest[i2] = buffer[offset++];
        }
      },
      function setValue_array_setNeedsUpdate(buffer, offset) {
        const dest = this.resolvedProperty;
        for (let i2 = 0, n2 = dest.length; i2 !== n2; ++i2) {
          dest[i2] = buffer[offset++];
        }
        this.targetObject.needsUpdate = true;
      },
      function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
        const dest = this.resolvedProperty;
        for (let i2 = 0, n2 = dest.length; i2 !== n2; ++i2) {
          dest[i2] = buffer[offset++];
        }
        this.targetObject.matrixWorldNeedsUpdate = true;
      }
    ],
    [
      function setValue_arrayElement(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
      },
      function setValue_arrayElement_setNeedsUpdate(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
        this.targetObject.needsUpdate = true;
      },
      function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
        this.targetObject.matrixWorldNeedsUpdate = true;
      }
    ],
    [
      function setValue_fromArray(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
      },
      function setValue_fromArray_setNeedsUpdate(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
        this.targetObject.needsUpdate = true;
      },
      function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
        this.targetObject.matrixWorldNeedsUpdate = true;
      }
    ]
  ],
  getValue: function getValue_unbound(targetArray, offset) {
    this.bind();
    this.getValue(targetArray, offset);
  },
  setValue: function getValue_unbound2(sourceArray, offset) {
    this.bind();
    this.setValue(sourceArray, offset);
  },
  bind: function() {
    let targetObject = this.node;
    const parsedPath = this.parsedPath;
    const objectName = parsedPath.objectName;
    const propertyName = parsedPath.propertyName;
    let propertyIndex = parsedPath.propertyIndex;
    if (!targetObject) {
      targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;
      this.node = targetObject;
    }
    this.getValue = this._getValue_unavailable;
    this.setValue = this._setValue_unavailable;
    if (!targetObject) {
      console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
      return;
    }
    if (objectName) {
      let objectIndex = parsedPath.objectIndex;
      switch (objectName) {
        case "materials":
          if (!targetObject.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!targetObject.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          targetObject = targetObject.material.materials;
          break;
        case "bones":
          if (!targetObject.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          targetObject = targetObject.skeleton.bones;
          for (let i2 = 0; i2 < targetObject.length; i2++) {
            if (targetObject[i2].name === objectIndex) {
              objectIndex = i2;
              break;
            }
          }
          break;
        default:
          if (targetObject[objectName] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          targetObject = targetObject[objectName];
      }
      if (objectIndex !== void 0) {
        if (targetObject[objectIndex] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
          return;
        }
        targetObject = targetObject[objectIndex];
      }
    }
    const nodeProperty = targetObject[propertyName];
    if (nodeProperty === void 0) {
      const nodeName = parsedPath.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
      return;
    }
    let versioning = this.Versioning.None;
    this.targetObject = targetObject;
    if (targetObject.needsUpdate !== void 0) {
      versioning = this.Versioning.NeedsUpdate;
    } else if (targetObject.matrixWorldNeedsUpdate !== void 0) {
      versioning = this.Versioning.MatrixWorldNeedsUpdate;
    }
    let bindingType = this.BindingType.Direct;
    if (propertyIndex !== void 0) {
      if (propertyName === "morphTargetInfluences") {
        if (!targetObject.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (targetObject.geometry.isBufferGeometry) {
          if (!targetObject.geometry.morphAttributes) {
            console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
            return;
          }
          if (targetObject.morphTargetDictionary[propertyIndex] !== void 0) {
            propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
          }
        } else {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.", this);
          return;
        }
      }
      bindingType = this.BindingType.ArrayElement;
      this.resolvedProperty = nodeProperty;
      this.propertyIndex = propertyIndex;
    } else if (nodeProperty.fromArray !== void 0 && nodeProperty.toArray !== void 0) {
      bindingType = this.BindingType.HasFromToArray;
      this.resolvedProperty = nodeProperty;
    } else if (Array.isArray(nodeProperty)) {
      bindingType = this.BindingType.EntireArray;
      this.resolvedProperty = nodeProperty;
    } else {
      this.propertyName = propertyName;
    }
    this.getValue = this.GetterByBindingType[bindingType];
    this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
  },
  unbind: function() {
    this.node = null;
    this.getValue = this._getValue_unbound;
    this.setValue = this._setValue_unbound;
  }
});
Object.assign(PropertyBinding.prototype, {
  _getValue_unbound: PropertyBinding.prototype.getValue,
  _setValue_unbound: PropertyBinding.prototype.setValue
});
function AnimationObjectGroup() {
  this.uuid = MathUtils.generateUUID();
  this._objects = Array.prototype.slice.call(arguments);
  this.nCachedObjects_ = 0;
  const indices = {};
  this._indicesByUUID = indices;
  for (let i2 = 0, n2 = arguments.length; i2 !== n2; ++i2) {
    indices[arguments[i2].uuid] = i2;
  }
  this._paths = [];
  this._parsedPaths = [];
  this._bindings = [];
  this._bindingsIndicesByPath = {};
  const scope = this;
  this.stats = {
    objects: {
      get total() {
        return scope._objects.length;
      },
      get inUse() {
        return this.total - scope.nCachedObjects_;
      }
    },
    get bindingsPerObject() {
      return scope._bindings.length;
    }
  };
}
Object.assign(AnimationObjectGroup.prototype, {
  isAnimationObjectGroup: true,
  add: function() {
    const objects = this._objects, indicesByUUID = this._indicesByUUID, paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, nBindings = bindings.length;
    let knownObject = void 0, nObjects = objects.length, nCachedObjects = this.nCachedObjects_;
    for (let i2 = 0, n2 = arguments.length; i2 !== n2; ++i2) {
      const object = arguments[i2], uuid = object.uuid;
      let index = indicesByUUID[uuid];
      if (index === void 0) {
        index = nObjects++;
        indicesByUUID[uuid] = index;
        objects.push(object);
        for (let j2 = 0, m2 = nBindings; j2 !== m2; ++j2) {
          bindings[j2].push(new PropertyBinding(object, paths[j2], parsedPaths[j2]));
        }
      } else if (index < nCachedObjects) {
        knownObject = objects[index];
        const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex];
        indicesByUUID[lastCachedObject.uuid] = index;
        objects[index] = lastCachedObject;
        indicesByUUID[uuid] = firstActiveIndex;
        objects[firstActiveIndex] = object;
        for (let j2 = 0, m2 = nBindings; j2 !== m2; ++j2) {
          const bindingsForPath = bindings[j2], lastCached = bindingsForPath[firstActiveIndex];
          let binding = bindingsForPath[index];
          bindingsForPath[index] = lastCached;
          if (binding === void 0) {
            binding = new PropertyBinding(object, paths[j2], parsedPaths[j2]);
          }
          bindingsForPath[firstActiveIndex] = binding;
        }
      } else if (objects[index] !== knownObject) {
        console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
      }
    }
    this.nCachedObjects_ = nCachedObjects;
  },
  remove: function() {
    const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
    let nCachedObjects = this.nCachedObjects_;
    for (let i2 = 0, n2 = arguments.length; i2 !== n2; ++i2) {
      const object = arguments[i2], uuid = object.uuid, index = indicesByUUID[uuid];
      if (index !== void 0 && index >= nCachedObjects) {
        const lastCachedIndex = nCachedObjects++, firstActiveObject = objects[lastCachedIndex];
        indicesByUUID[firstActiveObject.uuid] = index;
        objects[index] = firstActiveObject;
        indicesByUUID[uuid] = lastCachedIndex;
        objects[lastCachedIndex] = object;
        for (let j2 = 0, m2 = nBindings; j2 !== m2; ++j2) {
          const bindingsForPath = bindings[j2], firstActive = bindingsForPath[lastCachedIndex], binding = bindingsForPath[index];
          bindingsForPath[index] = firstActive;
          bindingsForPath[lastCachedIndex] = binding;
        }
      }
    }
    this.nCachedObjects_ = nCachedObjects;
  },
  uncache: function() {
    const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
    let nCachedObjects = this.nCachedObjects_, nObjects = objects.length;
    for (let i2 = 0, n2 = arguments.length; i2 !== n2; ++i2) {
      const object = arguments[i2], uuid = object.uuid, index = indicesByUUID[uuid];
      if (index !== void 0) {
        delete indicesByUUID[uuid];
        if (index < nCachedObjects) {
          const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex], lastIndex = --nObjects, lastObject = objects[lastIndex];
          indicesByUUID[lastCachedObject.uuid] = index;
          objects[index] = lastCachedObject;
          indicesByUUID[lastObject.uuid] = firstActiveIndex;
          objects[firstActiveIndex] = lastObject;
          objects.pop();
          for (let j2 = 0, m2 = nBindings; j2 !== m2; ++j2) {
            const bindingsForPath = bindings[j2], lastCached = bindingsForPath[firstActiveIndex], last = bindingsForPath[lastIndex];
            bindingsForPath[index] = lastCached;
            bindingsForPath[firstActiveIndex] = last;
            bindingsForPath.pop();
          }
        } else {
          const lastIndex = --nObjects, lastObject = objects[lastIndex];
          if (lastIndex > 0) {
            indicesByUUID[lastObject.uuid] = index;
          }
          objects[index] = lastObject;
          objects.pop();
          for (let j2 = 0, m2 = nBindings; j2 !== m2; ++j2) {
            const bindingsForPath = bindings[j2];
            bindingsForPath[index] = bindingsForPath[lastIndex];
            bindingsForPath.pop();
          }
        }
      }
    }
    this.nCachedObjects_ = nCachedObjects;
  },
  subscribe_: function(path, parsedPath) {
    const indicesByPath = this._bindingsIndicesByPath;
    let index = indicesByPath[path];
    const bindings = this._bindings;
    if (index !== void 0)
      return bindings[index];
    const paths = this._paths, parsedPaths = this._parsedPaths, objects = this._objects, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, bindingsForPath = new Array(nObjects);
    index = bindings.length;
    indicesByPath[path] = index;
    paths.push(path);
    parsedPaths.push(parsedPath);
    bindings.push(bindingsForPath);
    for (let i2 = nCachedObjects, n2 = objects.length; i2 !== n2; ++i2) {
      const object = objects[i2];
      bindingsForPath[i2] = new PropertyBinding(object, path, parsedPath);
    }
    return bindingsForPath;
  },
  unsubscribe_: function(path) {
    const indicesByPath = this._bindingsIndicesByPath, index = indicesByPath[path];
    if (index !== void 0) {
      const paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, lastBindingsIndex = bindings.length - 1, lastBindings = bindings[lastBindingsIndex], lastBindingsPath = path[lastBindingsIndex];
      indicesByPath[lastBindingsPath] = index;
      bindings[index] = lastBindings;
      bindings.pop();
      parsedPaths[index] = parsedPaths[lastBindingsIndex];
      parsedPaths.pop();
      paths[index] = paths[lastBindingsIndex];
      paths.pop();
    }
  }
});
class AnimationAction {
  constructor(mixer, clip, localRoot, blendMode) {
    this._mixer = mixer;
    this._clip = clip;
    this._localRoot = localRoot || null;
    this.blendMode = blendMode || clip.blendMode;
    const tracks = clip.tracks, nTracks = tracks.length, interpolants = new Array(nTracks);
    const interpolantSettings = {
      endingStart: ZeroCurvatureEnding,
      endingEnd: ZeroCurvatureEnding
    };
    for (let i2 = 0; i2 !== nTracks; ++i2) {
      const interpolant = tracks[i2].createInterpolant(null);
      interpolants[i2] = interpolant;
      interpolant.settings = interpolantSettings;
    }
    this._interpolantSettings = interpolantSettings;
    this._interpolants = interpolants;
    this._propertyBindings = new Array(nTracks);
    this._cacheIndex = null;
    this._byClipCacheIndex = null;
    this._timeScaleInterpolant = null;
    this._weightInterpolant = null;
    this.loop = LoopRepeat;
    this._loopCount = -1;
    this._startTime = null;
    this.time = 0;
    this.timeScale = 1;
    this._effectiveTimeScale = 1;
    this.weight = 1;
    this._effectiveWeight = 1;
    this.repetitions = Infinity;
    this.paused = false;
    this.enabled = true;
    this.clampWhenFinished = false;
    this.zeroSlopeAtStart = true;
    this.zeroSlopeAtEnd = true;
  }
  play() {
    this._mixer._activateAction(this);
    return this;
  }
  stop() {
    this._mixer._deactivateAction(this);
    return this.reset();
  }
  reset() {
    this.paused = false;
    this.enabled = true;
    this.time = 0;
    this._loopCount = -1;
    this._startTime = null;
    return this.stopFading().stopWarping();
  }
  isRunning() {
    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
  }
  isScheduled() {
    return this._mixer._isActiveAction(this);
  }
  startAt(time) {
    this._startTime = time;
    return this;
  }
  setLoop(mode, repetitions) {
    this.loop = mode;
    this.repetitions = repetitions;
    return this;
  }
  setEffectiveWeight(weight) {
    this.weight = weight;
    this._effectiveWeight = this.enabled ? weight : 0;
    return this.stopFading();
  }
  getEffectiveWeight() {
    return this._effectiveWeight;
  }
  fadeIn(duration) {
    return this._scheduleFading(duration, 0, 1);
  }
  fadeOut(duration) {
    return this._scheduleFading(duration, 1, 0);
  }
  crossFadeFrom(fadeOutAction, duration, warp) {
    fadeOutAction.fadeOut(duration);
    this.fadeIn(duration);
    if (warp) {
      const fadeInDuration = this._clip.duration, fadeOutDuration = fadeOutAction._clip.duration, startEndRatio = fadeOutDuration / fadeInDuration, endStartRatio = fadeInDuration / fadeOutDuration;
      fadeOutAction.warp(1, startEndRatio, duration);
      this.warp(endStartRatio, 1, duration);
    }
    return this;
  }
  crossFadeTo(fadeInAction, duration, warp) {
    return fadeInAction.crossFadeFrom(this, duration, warp);
  }
  stopFading() {
    const weightInterpolant = this._weightInterpolant;
    if (weightInterpolant !== null) {
      this._weightInterpolant = null;
      this._mixer._takeBackControlInterpolant(weightInterpolant);
    }
    return this;
  }
  setEffectiveTimeScale(timeScale) {
    this.timeScale = timeScale;
    this._effectiveTimeScale = this.paused ? 0 : timeScale;
    return this.stopWarping();
  }
  getEffectiveTimeScale() {
    return this._effectiveTimeScale;
  }
  setDuration(duration) {
    this.timeScale = this._clip.duration / duration;
    return this.stopWarping();
  }
  syncWith(action) {
    this.time = action.time;
    this.timeScale = action.timeScale;
    return this.stopWarping();
  }
  halt(duration) {
    return this.warp(this._effectiveTimeScale, 0, duration);
  }
  warp(startTimeScale, endTimeScale, duration) {
    const mixer = this._mixer, now = mixer.time, timeScale = this.timeScale;
    let interpolant = this._timeScaleInterpolant;
    if (interpolant === null) {
      interpolant = mixer._lendControlInterpolant();
      this._timeScaleInterpolant = interpolant;
    }
    const times = interpolant.parameterPositions, values = interpolant.sampleValues;
    times[0] = now;
    times[1] = now + duration;
    values[0] = startTimeScale / timeScale;
    values[1] = endTimeScale / timeScale;
    return this;
  }
  stopWarping() {
    const timeScaleInterpolant = this._timeScaleInterpolant;
    if (timeScaleInterpolant !== null) {
      this._timeScaleInterpolant = null;
      this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
    }
    return this;
  }
  getMixer() {
    return this._mixer;
  }
  getClip() {
    return this._clip;
  }
  getRoot() {
    return this._localRoot || this._mixer._root;
  }
  _update(time, deltaTime, timeDirection, accuIndex) {
    if (!this.enabled) {
      this._updateWeight(time);
      return;
    }
    const startTime = this._startTime;
    if (startTime !== null) {
      const timeRunning = (time - startTime) * timeDirection;
      if (timeRunning < 0 || timeDirection === 0) {
        return;
      }
      this._startTime = null;
      deltaTime = timeDirection * timeRunning;
    }
    deltaTime *= this._updateTimeScale(time);
    const clipTime = this._updateTime(deltaTime);
    const weight = this._updateWeight(time);
    if (weight > 0) {
      const interpolants = this._interpolants;
      const propertyMixers = this._propertyBindings;
      switch (this.blendMode) {
        case AdditiveAnimationBlendMode:
          for (let j2 = 0, m2 = interpolants.length; j2 !== m2; ++j2) {
            interpolants[j2].evaluate(clipTime);
            propertyMixers[j2].accumulateAdditive(weight);
          }
          break;
        case NormalAnimationBlendMode:
        default:
          for (let j2 = 0, m2 = interpolants.length; j2 !== m2; ++j2) {
            interpolants[j2].evaluate(clipTime);
            propertyMixers[j2].accumulate(accuIndex, weight);
          }
      }
    }
  }
  _updateWeight(time) {
    let weight = 0;
    if (this.enabled) {
      weight = this.weight;
      const interpolant = this._weightInterpolant;
      if (interpolant !== null) {
        const interpolantValue = interpolant.evaluate(time)[0];
        weight *= interpolantValue;
        if (time > interpolant.parameterPositions[1]) {
          this.stopFading();
          if (interpolantValue === 0) {
            this.enabled = false;
          }
        }
      }
    }
    this._effectiveWeight = weight;
    return weight;
  }
  _updateTimeScale(time) {
    let timeScale = 0;
    if (!this.paused) {
      timeScale = this.timeScale;
      const interpolant = this._timeScaleInterpolant;
      if (interpolant !== null) {
        const interpolantValue = interpolant.evaluate(time)[0];
        timeScale *= interpolantValue;
        if (time > interpolant.parameterPositions[1]) {
          this.stopWarping();
          if (timeScale === 0) {
            this.paused = true;
          } else {
            this.timeScale = timeScale;
          }
        }
      }
    }
    this._effectiveTimeScale = timeScale;
    return timeScale;
  }
  _updateTime(deltaTime) {
    const duration = this._clip.duration;
    const loop = this.loop;
    let time = this.time + deltaTime;
    let loopCount = this._loopCount;
    const pingPong = loop === LoopPingPong;
    if (deltaTime === 0) {
      if (loopCount === -1)
        return time;
      return pingPong && (loopCount & 1) === 1 ? duration - time : time;
    }
    if (loop === LoopOnce) {
      if (loopCount === -1) {
        this._loopCount = 0;
        this._setEndings(true, true, false);
      }
      handle_stop: {
        if (time >= duration) {
          time = duration;
        } else if (time < 0) {
          time = 0;
        } else {
          this.time = time;
          break handle_stop;
        }
        if (this.clampWhenFinished)
          this.paused = true;
        else
          this.enabled = false;
        this.time = time;
        this._mixer.dispatchEvent({
          type: "finished",
          action: this,
          direction: deltaTime < 0 ? -1 : 1
        });
      }
    } else {
      if (loopCount === -1) {
        if (deltaTime >= 0) {
          loopCount = 0;
          this._setEndings(true, this.repetitions === 0, pingPong);
        } else {
          this._setEndings(this.repetitions === 0, true, pingPong);
        }
      }
      if (time >= duration || time < 0) {
        const loopDelta = Math.floor(time / duration);
        time -= duration * loopDelta;
        loopCount += Math.abs(loopDelta);
        const pending = this.repetitions - loopCount;
        if (pending <= 0) {
          if (this.clampWhenFinished)
            this.paused = true;
          else
            this.enabled = false;
          time = deltaTime > 0 ? duration : 0;
          this.time = time;
          this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: deltaTime > 0 ? 1 : -1
          });
        } else {
          if (pending === 1) {
            const atStart = deltaTime < 0;
            this._setEndings(atStart, !atStart, pingPong);
          } else {
            this._setEndings(false, false, pingPong);
          }
          this._loopCount = loopCount;
          this.time = time;
          this._mixer.dispatchEvent({
            type: "loop",
            action: this,
            loopDelta
          });
        }
      } else {
        this.time = time;
      }
      if (pingPong && (loopCount & 1) === 1) {
        return duration - time;
      }
    }
    return time;
  }
  _setEndings(atStart, atEnd, pingPong) {
    const settings = this._interpolantSettings;
    if (pingPong) {
      settings.endingStart = ZeroSlopeEnding;
      settings.endingEnd = ZeroSlopeEnding;
    } else {
      if (atStart) {
        settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
      } else {
        settings.endingStart = WrapAroundEnding;
      }
      if (atEnd) {
        settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
      } else {
        settings.endingEnd = WrapAroundEnding;
      }
    }
  }
  _scheduleFading(duration, weightNow, weightThen) {
    const mixer = this._mixer, now = mixer.time;
    let interpolant = this._weightInterpolant;
    if (interpolant === null) {
      interpolant = mixer._lendControlInterpolant();
      this._weightInterpolant = interpolant;
    }
    const times = interpolant.parameterPositions, values = interpolant.sampleValues;
    times[0] = now;
    values[0] = weightNow;
    times[1] = now + duration;
    values[1] = weightThen;
    return this;
  }
}
function AnimationMixer(root) {
  this._root = root;
  this._initMemoryManager();
  this._accuIndex = 0;
  this.time = 0;
  this.timeScale = 1;
}
AnimationMixer.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
  constructor: AnimationMixer,
  _bindAction: function(action, prototypeAction) {
    const root = action._localRoot || this._root, tracks = action._clip.tracks, nTracks = tracks.length, bindings = action._propertyBindings, interpolants = action._interpolants, rootUuid = root.uuid, bindingsByRoot = this._bindingsByRootAndName;
    let bindingsByName = bindingsByRoot[rootUuid];
    if (bindingsByName === void 0) {
      bindingsByName = {};
      bindingsByRoot[rootUuid] = bindingsByName;
    }
    for (let i2 = 0; i2 !== nTracks; ++i2) {
      const track2 = tracks[i2], trackName = track2.name;
      let binding = bindingsByName[trackName];
      if (binding !== void 0) {
        bindings[i2] = binding;
      } else {
        binding = bindings[i2];
        if (binding !== void 0) {
          if (binding._cacheIndex === null) {
            ++binding.referenceCount;
            this._addInactiveBinding(binding, rootUuid, trackName);
          }
          continue;
        }
        const path = prototypeAction && prototypeAction._propertyBindings[i2].binding.parsedPath;
        binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track2.ValueTypeName, track2.getValueSize());
        ++binding.referenceCount;
        this._addInactiveBinding(binding, rootUuid, trackName);
        bindings[i2] = binding;
      }
      interpolants[i2].resultBuffer = binding.buffer;
    }
  },
  _activateAction: function(action) {
    if (!this._isActiveAction(action)) {
      if (action._cacheIndex === null) {
        const rootUuid = (action._localRoot || this._root).uuid, clipUuid = action._clip.uuid, actionsForClip = this._actionsByClip[clipUuid];
        this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);
        this._addInactiveAction(action, clipUuid, rootUuid);
      }
      const bindings = action._propertyBindings;
      for (let i2 = 0, n2 = bindings.length; i2 !== n2; ++i2) {
        const binding = bindings[i2];
        if (binding.useCount++ === 0) {
          this._lendBinding(binding);
          binding.saveOriginalState();
        }
      }
      this._lendAction(action);
    }
  },
  _deactivateAction: function(action) {
    if (this._isActiveAction(action)) {
      const bindings = action._propertyBindings;
      for (let i2 = 0, n2 = bindings.length; i2 !== n2; ++i2) {
        const binding = bindings[i2];
        if (--binding.useCount === 0) {
          binding.restoreOriginalState();
          this._takeBackBinding(binding);
        }
      }
      this._takeBackAction(action);
    }
  },
  _initMemoryManager: function() {
    this._actions = [];
    this._nActiveActions = 0;
    this._actionsByClip = {};
    this._bindings = [];
    this._nActiveBindings = 0;
    this._bindingsByRootAndName = {};
    this._controlInterpolants = [];
    this._nActiveControlInterpolants = 0;
    const scope = this;
    this.stats = {
      actions: {
        get total() {
          return scope._actions.length;
        },
        get inUse() {
          return scope._nActiveActions;
        }
      },
      bindings: {
        get total() {
          return scope._bindings.length;
        },
        get inUse() {
          return scope._nActiveBindings;
        }
      },
      controlInterpolants: {
        get total() {
          return scope._controlInterpolants.length;
        },
        get inUse() {
          return scope._nActiveControlInterpolants;
        }
      }
    };
  },
  _isActiveAction: function(action) {
    const index = action._cacheIndex;
    return index !== null && index < this._nActiveActions;
  },
  _addInactiveAction: function(action, clipUuid, rootUuid) {
    const actions = this._actions, actionsByClip = this._actionsByClip;
    let actionsForClip = actionsByClip[clipUuid];
    if (actionsForClip === void 0) {
      actionsForClip = {
        knownActions: [action],
        actionByRoot: {}
      };
      action._byClipCacheIndex = 0;
      actionsByClip[clipUuid] = actionsForClip;
    } else {
      const knownActions = actionsForClip.knownActions;
      action._byClipCacheIndex = knownActions.length;
      knownActions.push(action);
    }
    action._cacheIndex = actions.length;
    actions.push(action);
    actionsForClip.actionByRoot[rootUuid] = action;
  },
  _removeInactiveAction: function(action) {
    const actions = this._actions, lastInactiveAction = actions[actions.length - 1], cacheIndex = action._cacheIndex;
    lastInactiveAction._cacheIndex = cacheIndex;
    actions[cacheIndex] = lastInactiveAction;
    actions.pop();
    action._cacheIndex = null;
    const clipUuid = action._clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid], knownActionsForClip = actionsForClip.knownActions, lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1], byClipCacheIndex = action._byClipCacheIndex;
    lastKnownAction._byClipCacheIndex = byClipCacheIndex;
    knownActionsForClip[byClipCacheIndex] = lastKnownAction;
    knownActionsForClip.pop();
    action._byClipCacheIndex = null;
    const actionByRoot = actionsForClip.actionByRoot, rootUuid = (action._localRoot || this._root).uuid;
    delete actionByRoot[rootUuid];
    if (knownActionsForClip.length === 0) {
      delete actionsByClip[clipUuid];
    }
    this._removeInactiveBindingsForAction(action);
  },
  _removeInactiveBindingsForAction: function(action) {
    const bindings = action._propertyBindings;
    for (let i2 = 0, n2 = bindings.length; i2 !== n2; ++i2) {
      const binding = bindings[i2];
      if (--binding.referenceCount === 0) {
        this._removeInactiveBinding(binding);
      }
    }
  },
  _lendAction: function(action) {
    const actions = this._actions, prevIndex = action._cacheIndex, lastActiveIndex = this._nActiveActions++, firstInactiveAction = actions[lastActiveIndex];
    action._cacheIndex = lastActiveIndex;
    actions[lastActiveIndex] = action;
    firstInactiveAction._cacheIndex = prevIndex;
    actions[prevIndex] = firstInactiveAction;
  },
  _takeBackAction: function(action) {
    const actions = this._actions, prevIndex = action._cacheIndex, firstInactiveIndex = --this._nActiveActions, lastActiveAction = actions[firstInactiveIndex];
    action._cacheIndex = firstInactiveIndex;
    actions[firstInactiveIndex] = action;
    lastActiveAction._cacheIndex = prevIndex;
    actions[prevIndex] = lastActiveAction;
  },
  _addInactiveBinding: function(binding, rootUuid, trackName) {
    const bindingsByRoot = this._bindingsByRootAndName, bindings = this._bindings;
    let bindingByName = bindingsByRoot[rootUuid];
    if (bindingByName === void 0) {
      bindingByName = {};
      bindingsByRoot[rootUuid] = bindingByName;
    }
    bindingByName[trackName] = binding;
    binding._cacheIndex = bindings.length;
    bindings.push(binding);
  },
  _removeInactiveBinding: function(binding) {
    const bindings = this._bindings, propBinding = binding.binding, rootUuid = propBinding.rootNode.uuid, trackName = propBinding.path, bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid], lastInactiveBinding = bindings[bindings.length - 1], cacheIndex = binding._cacheIndex;
    lastInactiveBinding._cacheIndex = cacheIndex;
    bindings[cacheIndex] = lastInactiveBinding;
    bindings.pop();
    delete bindingByName[trackName];
    if (Object.keys(bindingByName).length === 0) {
      delete bindingsByRoot[rootUuid];
    }
  },
  _lendBinding: function(binding) {
    const bindings = this._bindings, prevIndex = binding._cacheIndex, lastActiveIndex = this._nActiveBindings++, firstInactiveBinding = bindings[lastActiveIndex];
    binding._cacheIndex = lastActiveIndex;
    bindings[lastActiveIndex] = binding;
    firstInactiveBinding._cacheIndex = prevIndex;
    bindings[prevIndex] = firstInactiveBinding;
  },
  _takeBackBinding: function(binding) {
    const bindings = this._bindings, prevIndex = binding._cacheIndex, firstInactiveIndex = --this._nActiveBindings, lastActiveBinding = bindings[firstInactiveIndex];
    binding._cacheIndex = firstInactiveIndex;
    bindings[firstInactiveIndex] = binding;
    lastActiveBinding._cacheIndex = prevIndex;
    bindings[prevIndex] = lastActiveBinding;
  },
  _lendControlInterpolant: function() {
    const interpolants = this._controlInterpolants, lastActiveIndex = this._nActiveControlInterpolants++;
    let interpolant = interpolants[lastActiveIndex];
    if (interpolant === void 0) {
      interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);
      interpolant.__cacheIndex = lastActiveIndex;
      interpolants[lastActiveIndex] = interpolant;
    }
    return interpolant;
  },
  _takeBackControlInterpolant: function(interpolant) {
    const interpolants = this._controlInterpolants, prevIndex = interpolant.__cacheIndex, firstInactiveIndex = --this._nActiveControlInterpolants, lastActiveInterpolant = interpolants[firstInactiveIndex];
    interpolant.__cacheIndex = firstInactiveIndex;
    interpolants[firstInactiveIndex] = interpolant;
    lastActiveInterpolant.__cacheIndex = prevIndex;
    interpolants[prevIndex] = lastActiveInterpolant;
  },
  _controlInterpolantsResultBuffer: new Float32Array(1),
  clipAction: function(clip, optionalRoot, blendMode) {
    const root = optionalRoot || this._root, rootUuid = root.uuid;
    let clipObject = typeof clip === "string" ? AnimationClip.findByName(root, clip) : clip;
    const clipUuid = clipObject !== null ? clipObject.uuid : clip;
    const actionsForClip = this._actionsByClip[clipUuid];
    let prototypeAction = null;
    if (blendMode === void 0) {
      if (clipObject !== null) {
        blendMode = clipObject.blendMode;
      } else {
        blendMode = NormalAnimationBlendMode;
      }
    }
    if (actionsForClip !== void 0) {
      const existingAction = actionsForClip.actionByRoot[rootUuid];
      if (existingAction !== void 0 && existingAction.blendMode === blendMode) {
        return existingAction;
      }
      prototypeAction = actionsForClip.knownActions[0];
      if (clipObject === null)
        clipObject = prototypeAction._clip;
    }
    if (clipObject === null)
      return null;
    const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);
    this._bindAction(newAction, prototypeAction);
    this._addInactiveAction(newAction, clipUuid, rootUuid);
    return newAction;
  },
  existingAction: function(clip, optionalRoot) {
    const root = optionalRoot || this._root, rootUuid = root.uuid, clipObject = typeof clip === "string" ? AnimationClip.findByName(root, clip) : clip, clipUuid = clipObject ? clipObject.uuid : clip, actionsForClip = this._actionsByClip[clipUuid];
    if (actionsForClip !== void 0) {
      return actionsForClip.actionByRoot[rootUuid] || null;
    }
    return null;
  },
  stopAllAction: function() {
    const actions = this._actions, nActions = this._nActiveActions;
    for (let i2 = nActions - 1; i2 >= 0; --i2) {
      actions[i2].stop();
    }
    return this;
  },
  update: function(deltaTime) {
    deltaTime *= this.timeScale;
    const actions = this._actions, nActions = this._nActiveActions, time = this.time += deltaTime, timeDirection = Math.sign(deltaTime), accuIndex = this._accuIndex ^= 1;
    for (let i2 = 0; i2 !== nActions; ++i2) {
      const action = actions[i2];
      action._update(time, deltaTime, timeDirection, accuIndex);
    }
    const bindings = this._bindings, nBindings = this._nActiveBindings;
    for (let i2 = 0; i2 !== nBindings; ++i2) {
      bindings[i2].apply(accuIndex);
    }
    return this;
  },
  setTime: function(timeInSeconds) {
    this.time = 0;
    for (let i2 = 0; i2 < this._actions.length; i2++) {
      this._actions[i2].time = 0;
    }
    return this.update(timeInSeconds);
  },
  getRoot: function() {
    return this._root;
  },
  uncacheClip: function(clip) {
    const actions = this._actions, clipUuid = clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid];
    if (actionsForClip !== void 0) {
      const actionsToRemove = actionsForClip.knownActions;
      for (let i2 = 0, n2 = actionsToRemove.length; i2 !== n2; ++i2) {
        const action = actionsToRemove[i2];
        this._deactivateAction(action);
        const cacheIndex = action._cacheIndex, lastInactiveAction = actions[actions.length - 1];
        action._cacheIndex = null;
        action._byClipCacheIndex = null;
        lastInactiveAction._cacheIndex = cacheIndex;
        actions[cacheIndex] = lastInactiveAction;
        actions.pop();
        this._removeInactiveBindingsForAction(action);
      }
      delete actionsByClip[clipUuid];
    }
  },
  uncacheRoot: function(root) {
    const rootUuid = root.uuid, actionsByClip = this._actionsByClip;
    for (const clipUuid in actionsByClip) {
      const actionByRoot = actionsByClip[clipUuid].actionByRoot, action = actionByRoot[rootUuid];
      if (action !== void 0) {
        this._deactivateAction(action);
        this._removeInactiveAction(action);
      }
    }
    const bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid];
    if (bindingByName !== void 0) {
      for (const trackName in bindingByName) {
        const binding = bindingByName[trackName];
        binding.restoreOriginalState();
        this._removeInactiveBinding(binding);
      }
    }
  },
  uncacheAction: function(clip, optionalRoot) {
    const action = this.existingAction(clip, optionalRoot);
    if (action !== null) {
      this._deactivateAction(action);
      this._removeInactiveAction(action);
    }
  }
});
class Uniform {
  constructor(value) {
    if (typeof value === "string") {
      console.warn("THREE.Uniform: Type parameter is no longer needed.");
      value = arguments[1];
    }
    this.value = value;
  }
  clone() {
    return new Uniform(this.value.clone === void 0 ? this.value : this.value.clone());
  }
}
function InstancedInterleavedBuffer(array, stride, meshPerAttribute) {
  InterleavedBuffer.call(this, array, stride);
  this.meshPerAttribute = meshPerAttribute || 1;
}
InstancedInterleavedBuffer.prototype = Object.assign(Object.create(InterleavedBuffer.prototype), {
  constructor: InstancedInterleavedBuffer,
  isInstancedInterleavedBuffer: true,
  copy: function(source) {
    InterleavedBuffer.prototype.copy.call(this, source);
    this.meshPerAttribute = source.meshPerAttribute;
    return this;
  },
  clone: function(data) {
    const ib = InterleavedBuffer.prototype.clone.call(this, data);
    ib.meshPerAttribute = this.meshPerAttribute;
    return ib;
  },
  toJSON: function(data) {
    const json = InterleavedBuffer.prototype.toJSON.call(this, data);
    json.isInstancedInterleavedBuffer = true;
    json.meshPerAttribute = this.meshPerAttribute;
    return json;
  }
});
function GLBufferAttribute(buffer, type, itemSize, elementSize, count) {
  this.buffer = buffer;
  this.type = type;
  this.itemSize = itemSize;
  this.elementSize = elementSize;
  this.count = count;
  this.version = 0;
}
Object.defineProperty(GLBufferAttribute.prototype, "needsUpdate", {
  set: function(value) {
    if (value === true)
      this.version++;
  }
});
Object.assign(GLBufferAttribute.prototype, {
  isGLBufferAttribute: true,
  setBuffer: function(buffer) {
    this.buffer = buffer;
    return this;
  },
  setType: function(type, elementSize) {
    this.type = type;
    this.elementSize = elementSize;
    return this;
  },
  setItemSize: function(itemSize) {
    this.itemSize = itemSize;
    return this;
  },
  setCount: function(count) {
    this.count = count;
    return this;
  }
});
function Raycaster(origin, direction, near, far) {
  this.ray = new Ray(origin, direction);
  this.near = near || 0;
  this.far = far || Infinity;
  this.camera = null;
  this.layers = new Layers();
  this.params = {
    Mesh: {},
    Line: { threshold: 1 },
    LOD: {},
    Points: { threshold: 1 },
    Sprite: {}
  };
  Object.defineProperties(this.params, {
    PointCloud: {
      get: function() {
        console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");
        return this.Points;
      }
    }
  });
}
function ascSort(a2, b2) {
  return a2.distance - b2.distance;
}
function intersectObject(object, raycaster, intersects2, recursive) {
  if (object.layers.test(raycaster.layers)) {
    object.raycast(raycaster, intersects2);
  }
  if (recursive === true) {
    const children = object.children;
    for (let i2 = 0, l2 = children.length; i2 < l2; i2++) {
      intersectObject(children[i2], raycaster, intersects2, true);
    }
  }
}
Object.assign(Raycaster.prototype, {
  set: function(origin, direction) {
    this.ray.set(origin, direction);
  },
  setFromCamera: function(coords, camera) {
    if (camera && camera.isPerspectiveCamera) {
      this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
      this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();
      this.camera = camera;
    } else if (camera && camera.isOrthographicCamera) {
      this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);
      this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);
      this.camera = camera;
    } else {
      console.error("THREE.Raycaster: Unsupported camera type.");
    }
  },
  intersectObject: function(object, recursive, optionalTarget) {
    const intersects2 = optionalTarget || [];
    intersectObject(object, this, intersects2, recursive);
    intersects2.sort(ascSort);
    return intersects2;
  },
  intersectObjects: function(objects, recursive, optionalTarget) {
    const intersects2 = optionalTarget || [];
    if (Array.isArray(objects) === false) {
      console.warn("THREE.Raycaster.intersectObjects: objects is not an Array.");
      return intersects2;
    }
    for (let i2 = 0, l2 = objects.length; i2 < l2; i2++) {
      intersectObject(objects[i2], this, intersects2, recursive);
    }
    intersects2.sort(ascSort);
    return intersects2;
  }
});
class Spherical {
  constructor(radius = 1, phi = 0, theta = 0) {
    this.radius = radius;
    this.phi = phi;
    this.theta = theta;
    return this;
  }
  set(radius, phi, theta) {
    this.radius = radius;
    this.phi = phi;
    this.theta = theta;
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(other) {
    this.radius = other.radius;
    this.phi = other.phi;
    this.theta = other.theta;
    return this;
  }
  makeSafe() {
    const EPS = 1e-6;
    this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
    return this;
  }
  setFromVector3(v2) {
    return this.setFromCartesianCoords(v2.x, v2.y, v2.z);
  }
  setFromCartesianCoords(x2, y2, z2) {
    this.radius = Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2);
    if (this.radius === 0) {
      this.theta = 0;
      this.phi = 0;
    } else {
      this.theta = Math.atan2(x2, z2);
      this.phi = Math.acos(MathUtils.clamp(y2 / this.radius, -1, 1));
    }
    return this;
  }
}
class Cylindrical {
  constructor(radius, theta, y2) {
    this.radius = radius !== void 0 ? radius : 1;
    this.theta = theta !== void 0 ? theta : 0;
    this.y = y2 !== void 0 ? y2 : 0;
    return this;
  }
  set(radius, theta, y2) {
    this.radius = radius;
    this.theta = theta;
    this.y = y2;
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(other) {
    this.radius = other.radius;
    this.theta = other.theta;
    this.y = other.y;
    return this;
  }
  setFromVector3(v2) {
    return this.setFromCartesianCoords(v2.x, v2.y, v2.z);
  }
  setFromCartesianCoords(x2, y2, z2) {
    this.radius = Math.sqrt(x2 * x2 + z2 * z2);
    this.theta = Math.atan2(x2, z2);
    this.y = y2;
    return this;
  }
}
const _vector$7 = /* @__PURE__ */ new Vector2();
class Box2 {
  constructor(min, max) {
    Object.defineProperty(this, "isBox2", { value: true });
    this.min = min !== void 0 ? min : new Vector2(Infinity, Infinity);
    this.max = max !== void 0 ? max : new Vector2(-Infinity, -Infinity);
  }
  set(min, max) {
    this.min.copy(min);
    this.max.copy(max);
    return this;
  }
  setFromPoints(points) {
    this.makeEmpty();
    for (let i2 = 0, il = points.length; i2 < il; i2++) {
      this.expandByPoint(points[i2]);
    }
    return this;
  }
  setFromCenterAndSize(center, size2) {
    const halfSize = _vector$7.copy(size2).multiplyScalar(0.5);
    this.min.copy(center).sub(halfSize);
    this.max.copy(center).add(halfSize);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(box) {
    this.min.copy(box.min);
    this.max.copy(box.max);
    return this;
  }
  makeEmpty() {
    this.min.x = this.min.y = Infinity;
    this.max.x = this.max.y = -Infinity;
    return this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }
  getCenter(target) {
    if (target === void 0) {
      console.warn("THREE.Box2: .getCenter() target is now required");
      target = new Vector2();
    }
    return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(target) {
    if (target === void 0) {
      console.warn("THREE.Box2: .getSize() target is now required");
      target = new Vector2();
    }
    return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
  }
  expandByPoint(point) {
    this.min.min(point);
    this.max.max(point);
    return this;
  }
  expandByVector(vector) {
    this.min.sub(vector);
    this.max.add(vector);
    return this;
  }
  expandByScalar(scalar) {
    this.min.addScalar(-scalar);
    this.max.addScalar(scalar);
    return this;
  }
  containsPoint(point) {
    return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
  }
  containsBox(box) {
    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
  }
  getParameter(point, target) {
    if (target === void 0) {
      console.warn("THREE.Box2: .getParameter() target is now required");
      target = new Vector2();
    }
    return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));
  }
  intersectsBox(box) {
    return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
  }
  clampPoint(point, target) {
    if (target === void 0) {
      console.warn("THREE.Box2: .clampPoint() target is now required");
      target = new Vector2();
    }
    return target.copy(point).clamp(this.min, this.max);
  }
  distanceToPoint(point) {
    const clampedPoint = _vector$7.copy(point).clamp(this.min, this.max);
    return clampedPoint.sub(point).length();
  }
  intersect(box) {
    this.min.max(box.min);
    this.max.min(box.max);
    return this;
  }
  union(box) {
    this.min.min(box.min);
    this.max.max(box.max);
    return this;
  }
  translate(offset) {
    this.min.add(offset);
    this.max.add(offset);
    return this;
  }
  equals(box) {
    return box.min.equals(this.min) && box.max.equals(this.max);
  }
}
const _startP = /* @__PURE__ */ new Vector3();
const _startEnd = /* @__PURE__ */ new Vector3();
class Line3 {
  constructor(start, end) {
    this.start = start !== void 0 ? start : new Vector3();
    this.end = end !== void 0 ? end : new Vector3();
  }
  set(start, end) {
    this.start.copy(start);
    this.end.copy(end);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(line) {
    this.start.copy(line.start);
    this.end.copy(line.end);
    return this;
  }
  getCenter(target) {
    if (target === void 0) {
      console.warn("THREE.Line3: .getCenter() target is now required");
      target = new Vector3();
    }
    return target.addVectors(this.start, this.end).multiplyScalar(0.5);
  }
  delta(target) {
    if (target === void 0) {
      console.warn("THREE.Line3: .delta() target is now required");
      target = new Vector3();
    }
    return target.subVectors(this.end, this.start);
  }
  distanceSq() {
    return this.start.distanceToSquared(this.end);
  }
  distance() {
    return this.start.distanceTo(this.end);
  }
  at(t3, target) {
    if (target === void 0) {
      console.warn("THREE.Line3: .at() target is now required");
      target = new Vector3();
    }
    return this.delta(target).multiplyScalar(t3).add(this.start);
  }
  closestPointToPointParameter(point, clampToLine) {
    _startP.subVectors(point, this.start);
    _startEnd.subVectors(this.end, this.start);
    const startEnd2 = _startEnd.dot(_startEnd);
    const startEnd_startP = _startEnd.dot(_startP);
    let t3 = startEnd_startP / startEnd2;
    if (clampToLine) {
      t3 = MathUtils.clamp(t3, 0, 1);
    }
    return t3;
  }
  closestPointToPoint(point, clampToLine, target) {
    const t3 = this.closestPointToPointParameter(point, clampToLine);
    if (target === void 0) {
      console.warn("THREE.Line3: .closestPointToPoint() target is now required");
      target = new Vector3();
    }
    return this.delta(target).multiplyScalar(t3).add(this.start);
  }
  applyMatrix4(matrix) {
    this.start.applyMatrix4(matrix);
    this.end.applyMatrix4(matrix);
    return this;
  }
  equals(line) {
    return line.start.equals(this.start) && line.end.equals(this.end);
  }
}
function ImmediateRenderObject(material) {
  Object3D.call(this);
  this.material = material;
  this.render = function() {
  };
  this.hasPositions = false;
  this.hasNormals = false;
  this.hasColors = false;
  this.hasUvs = false;
  this.positionArray = null;
  this.normalArray = null;
  this.colorArray = null;
  this.uvArray = null;
  this.count = 0;
}
ImmediateRenderObject.prototype = Object.create(Object3D.prototype);
ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;
ImmediateRenderObject.prototype.isImmediateRenderObject = true;
const _vector$8 = /* @__PURE__ */ new Vector3();
class SpotLightHelper extends Object3D {
  constructor(light, color) {
    super();
    this.light = light;
    this.light.updateMatrixWorld();
    this.matrix = light.matrixWorld;
    this.matrixAutoUpdate = false;
    this.color = color;
    const geometry = new BufferGeometry();
    const positions = [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      -1,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      -1,
      1
    ];
    for (let i2 = 0, j2 = 1, l2 = 32; i2 < l2; i2++, j2++) {
      const p1 = i2 / l2 * Math.PI * 2;
      const p2 = j2 / l2 * Math.PI * 2;
      positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);
    }
    geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
    const material = new LineBasicMaterial({ fog: false, toneMapped: false });
    this.cone = new LineSegments(geometry, material);
    this.add(this.cone);
    this.update();
  }
  dispose() {
    this.cone.geometry.dispose();
    this.cone.material.dispose();
  }
  update() {
    this.light.updateMatrixWorld();
    const coneLength = this.light.distance ? this.light.distance : 1e3;
    const coneWidth = coneLength * Math.tan(this.light.angle);
    this.cone.scale.set(coneWidth, coneWidth, coneLength);
    _vector$8.setFromMatrixPosition(this.light.target.matrixWorld);
    this.cone.lookAt(_vector$8);
    if (this.color !== void 0) {
      this.cone.material.color.set(this.color);
    } else {
      this.cone.material.color.copy(this.light.color);
    }
  }
}
const _vector$9 = /* @__PURE__ */ new Vector3();
const _boneMatrix = /* @__PURE__ */ new Matrix4();
const _matrixWorldInv = /* @__PURE__ */ new Matrix4();
class SkeletonHelper extends LineSegments {
  constructor(object) {
    const bones = getBoneList(object);
    const geometry = new BufferGeometry();
    const vertices = [];
    const colors = [];
    const color1 = new Color(0, 0, 1);
    const color2 = new Color(0, 1, 0);
    for (let i2 = 0; i2 < bones.length; i2++) {
      const bone = bones[i2];
      if (bone.parent && bone.parent.isBone) {
        vertices.push(0, 0, 0);
        vertices.push(0, 0, 0);
        colors.push(color1.r, color1.g, color1.b);
        colors.push(color2.r, color2.g, color2.b);
      }
    }
    geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
    const material = new LineBasicMaterial({ vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true });
    super(geometry, material);
    this.type = "SkeletonHelper";
    this.isSkeletonHelper = true;
    this.root = object;
    this.bones = bones;
    this.matrix = object.matrixWorld;
    this.matrixAutoUpdate = false;
  }
  updateMatrixWorld(force) {
    const bones = this.bones;
    const geometry = this.geometry;
    const position = geometry.getAttribute("position");
    _matrixWorldInv.getInverse(this.root.matrixWorld);
    for (let i2 = 0, j2 = 0; i2 < bones.length; i2++) {
      const bone = bones[i2];
      if (bone.parent && bone.parent.isBone) {
        _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);
        _vector$9.setFromMatrixPosition(_boneMatrix);
        position.setXYZ(j2, _vector$9.x, _vector$9.y, _vector$9.z);
        _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);
        _vector$9.setFromMatrixPosition(_boneMatrix);
        position.setXYZ(j2 + 1, _vector$9.x, _vector$9.y, _vector$9.z);
        j2 += 2;
      }
    }
    geometry.getAttribute("position").needsUpdate = true;
    super.updateMatrixWorld(force);
  }
}
function getBoneList(object) {
  const boneList = [];
  if (object && object.isBone) {
    boneList.push(object);
  }
  for (let i2 = 0; i2 < object.children.length; i2++) {
    boneList.push.apply(boneList, getBoneList(object.children[i2]));
  }
  return boneList;
}
class PointLightHelper extends Mesh {
  constructor(light, sphereSize, color) {
    const geometry = new SphereBufferGeometry(sphereSize, 4, 2);
    const material = new MeshBasicMaterial({ wireframe: true, fog: false, toneMapped: false });
    super(geometry, material);
    this.light = light;
    this.light.updateMatrixWorld();
    this.color = color;
    this.type = "PointLightHelper";
    this.matrix = this.light.matrixWorld;
    this.matrixAutoUpdate = false;
    this.update();
  }
  dispose() {
    this.geometry.dispose();
    this.material.dispose();
  }
  update() {
    if (this.color !== void 0) {
      this.material.color.set(this.color);
    } else {
      this.material.color.copy(this.light.color);
    }
  }
}
const _vector$a = /* @__PURE__ */ new Vector3();
const _color1 = /* @__PURE__ */ new Color();
const _color2 = /* @__PURE__ */ new Color();
class HemisphereLightHelper extends Object3D {
  constructor(light, size2, color) {
    super();
    this.light = light;
    this.light.updateMatrixWorld();
    this.matrix = light.matrixWorld;
    this.matrixAutoUpdate = false;
    this.color = color;
    const geometry = new OctahedronBufferGeometry(size2);
    geometry.rotateY(Math.PI * 0.5);
    this.material = new MeshBasicMaterial({ wireframe: true, fog: false, toneMapped: false });
    if (this.color === void 0)
      this.material.vertexColors = true;
    const position = geometry.getAttribute("position");
    const colors = new Float32Array(position.count * 3);
    geometry.setAttribute("color", new BufferAttribute(colors, 3));
    this.add(new Mesh(geometry, this.material));
    this.update();
  }
  dispose() {
    this.children[0].geometry.dispose();
    this.children[0].material.dispose();
  }
  update() {
    const mesh = this.children[0];
    if (this.color !== void 0) {
      this.material.color.set(this.color);
    } else {
      const colors = mesh.geometry.getAttribute("color");
      _color1.copy(this.light.color);
      _color2.copy(this.light.groundColor);
      for (let i2 = 0, l2 = colors.count; i2 < l2; i2++) {
        const color = i2 < l2 / 2 ? _color1 : _color2;
        colors.setXYZ(i2, color.r, color.g, color.b);
      }
      colors.needsUpdate = true;
    }
    mesh.lookAt(_vector$a.setFromMatrixPosition(this.light.matrixWorld).negate());
  }
}
class GridHelper extends LineSegments {
  constructor(size2, divisions, color1, color2) {
    size2 = size2 || 10;
    divisions = divisions || 10;
    color1 = new Color(color1 !== void 0 ? color1 : 4473924);
    color2 = new Color(color2 !== void 0 ? color2 : 8947848);
    const center = divisions / 2;
    const step = size2 / divisions;
    const halfSize = size2 / 2;
    const vertices = [], colors = [];
    for (let i2 = 0, j2 = 0, k2 = -halfSize; i2 <= divisions; i2++, k2 += step) {
      vertices.push(-halfSize, 0, k2, halfSize, 0, k2);
      vertices.push(k2, 0, -halfSize, k2, 0, halfSize);
      const color = i2 === center ? color1 : color2;
      color.toArray(colors, j2);
      j2 += 3;
      color.toArray(colors, j2);
      j2 += 3;
      color.toArray(colors, j2);
      j2 += 3;
      color.toArray(colors, j2);
      j2 += 3;
    }
    const geometry = new BufferGeometry();
    geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
    const material = new LineBasicMaterial({ vertexColors: true, toneMapped: false });
    super(geometry, material);
    this.type = "GridHelper";
  }
}
class PolarGridHelper extends LineSegments {
  constructor(radius, radials, circles, divisions, color1, color2) {
    radius = radius || 10;
    radials = radials || 16;
    circles = circles || 8;
    divisions = divisions || 64;
    color1 = new Color(color1 !== void 0 ? color1 : 4473924);
    color2 = new Color(color2 !== void 0 ? color2 : 8947848);
    const vertices = [];
    const colors = [];
    for (let i2 = 0; i2 <= radials; i2++) {
      const v2 = i2 / radials * (Math.PI * 2);
      const x2 = Math.sin(v2) * radius;
      const z2 = Math.cos(v2) * radius;
      vertices.push(0, 0, 0);
      vertices.push(x2, 0, z2);
      const color = i2 & 1 ? color1 : color2;
      colors.push(color.r, color.g, color.b);
      colors.push(color.r, color.g, color.b);
    }
    for (let i2 = 0; i2 <= circles; i2++) {
      const color = i2 & 1 ? color1 : color2;
      const r2 = radius - radius / circles * i2;
      for (let j2 = 0; j2 < divisions; j2++) {
        let v2 = j2 / divisions * (Math.PI * 2);
        let x2 = Math.sin(v2) * r2;
        let z2 = Math.cos(v2) * r2;
        vertices.push(x2, 0, z2);
        colors.push(color.r, color.g, color.b);
        v2 = (j2 + 1) / divisions * (Math.PI * 2);
        x2 = Math.sin(v2) * r2;
        z2 = Math.cos(v2) * r2;
        vertices.push(x2, 0, z2);
        colors.push(color.r, color.g, color.b);
      }
    }
    const geometry = new BufferGeometry();
    geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
    const material = new LineBasicMaterial({ vertexColors: true, toneMapped: false });
    super(geometry, material);
    this.type = "PolarGridHelper";
  }
}
const _v1$6 = /* @__PURE__ */ new Vector3();
const _v2$3 = /* @__PURE__ */ new Vector3();
const _v3$1 = /* @__PURE__ */ new Vector3();
class DirectionalLightHelper extends Object3D {
  constructor(light, size2, color) {
    super();
    this.light = light;
    this.light.updateMatrixWorld();
    this.matrix = light.matrixWorld;
    this.matrixAutoUpdate = false;
    this.color = color;
    if (size2 === void 0)
      size2 = 1;
    let geometry = new BufferGeometry();
    geometry.setAttribute("position", new Float32BufferAttribute([
      -size2,
      size2,
      0,
      size2,
      size2,
      0,
      size2,
      -size2,
      0,
      -size2,
      -size2,
      0,
      -size2,
      size2,
      0
    ], 3));
    const material = new LineBasicMaterial({ fog: false, toneMapped: false });
    this.lightPlane = new Line(geometry, material);
    this.add(this.lightPlane);
    geometry = new BufferGeometry();
    geometry.setAttribute("position", new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));
    this.targetLine = new Line(geometry, material);
    this.add(this.targetLine);
    this.update();
  }
  dispose() {
    this.lightPlane.geometry.dispose();
    this.lightPlane.material.dispose();
    this.targetLine.geometry.dispose();
    this.targetLine.material.dispose();
  }
  update() {
    _v1$6.setFromMatrixPosition(this.light.matrixWorld);
    _v2$3.setFromMatrixPosition(this.light.target.matrixWorld);
    _v3$1.subVectors(_v2$3, _v1$6);
    this.lightPlane.lookAt(_v2$3);
    if (this.color !== void 0) {
      this.lightPlane.material.color.set(this.color);
      this.targetLine.material.color.set(this.color);
    } else {
      this.lightPlane.material.color.copy(this.light.color);
      this.targetLine.material.color.copy(this.light.color);
    }
    this.targetLine.lookAt(_v2$3);
    this.targetLine.scale.z = _v3$1.length();
  }
}
const _vector$b = /* @__PURE__ */ new Vector3();
const _camera = /* @__PURE__ */ new Camera();
class CameraHelper extends LineSegments {
  constructor(camera) {
    const geometry = new BufferGeometry();
    const material = new LineBasicMaterial({ color: 16777215, vertexColors: true, toneMapped: false });
    const vertices = [];
    const colors = [];
    const pointMap = {};
    const colorFrustum = new Color(16755200);
    const colorCone = new Color(16711680);
    const colorUp = new Color(43775);
    const colorTarget = new Color(16777215);
    const colorCross = new Color(3355443);
    addLine("n1", "n2", colorFrustum);
    addLine("n2", "n4", colorFrustum);
    addLine("n4", "n3", colorFrustum);
    addLine("n3", "n1", colorFrustum);
    addLine("f1", "f2", colorFrustum);
    addLine("f2", "f4", colorFrustum);
    addLine("f4", "f3", colorFrustum);
    addLine("f3", "f1", colorFrustum);
    addLine("n1", "f1", colorFrustum);
    addLine("n2", "f2", colorFrustum);
    addLine("n3", "f3", colorFrustum);
    addLine("n4", "f4", colorFrustum);
    addLine("p", "n1", colorCone);
    addLine("p", "n2", colorCone);
    addLine("p", "n3", colorCone);
    addLine("p", "n4", colorCone);
    addLine("u1", "u2", colorUp);
    addLine("u2", "u3", colorUp);
    addLine("u3", "u1", colorUp);
    addLine("c", "t", colorTarget);
    addLine("p", "c", colorCross);
    addLine("cn1", "cn2", colorCross);
    addLine("cn3", "cn4", colorCross);
    addLine("cf1", "cf2", colorCross);
    addLine("cf3", "cf4", colorCross);
    function addLine(a2, b2, color) {
      addPoint(a2, color);
      addPoint(b2, color);
    }
    function addPoint(id, color) {
      vertices.push(0, 0, 0);
      colors.push(color.r, color.g, color.b);
      if (pointMap[id] === void 0) {
        pointMap[id] = [];
      }
      pointMap[id].push(vertices.length / 3 - 1);
    }
    geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
    super(geometry, material);
    this.type = "CameraHelper";
    this.camera = camera;
    if (this.camera.updateProjectionMatrix)
      this.camera.updateProjectionMatrix();
    this.matrix = camera.matrixWorld;
    this.matrixAutoUpdate = false;
    this.pointMap = pointMap;
    this.update();
  }
  update() {
    const geometry = this.geometry;
    const pointMap = this.pointMap;
    const w2 = 1, h = 1;
    _camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
    setPoint("c", pointMap, geometry, _camera, 0, 0, -1);
    setPoint("t", pointMap, geometry, _camera, 0, 0, 1);
    setPoint("n1", pointMap, geometry, _camera, -w2, -h, -1);
    setPoint("n2", pointMap, geometry, _camera, w2, -h, -1);
    setPoint("n3", pointMap, geometry, _camera, -w2, h, -1);
    setPoint("n4", pointMap, geometry, _camera, w2, h, -1);
    setPoint("f1", pointMap, geometry, _camera, -w2, -h, 1);
    setPoint("f2", pointMap, geometry, _camera, w2, -h, 1);
    setPoint("f3", pointMap, geometry, _camera, -w2, h, 1);
    setPoint("f4", pointMap, geometry, _camera, w2, h, 1);
    setPoint("u1", pointMap, geometry, _camera, w2 * 0.7, h * 1.1, -1);
    setPoint("u2", pointMap, geometry, _camera, -w2 * 0.7, h * 1.1, -1);
    setPoint("u3", pointMap, geometry, _camera, 0, h * 2, -1);
    setPoint("cf1", pointMap, geometry, _camera, -w2, 0, 1);
    setPoint("cf2", pointMap, geometry, _camera, w2, 0, 1);
    setPoint("cf3", pointMap, geometry, _camera, 0, -h, 1);
    setPoint("cf4", pointMap, geometry, _camera, 0, h, 1);
    setPoint("cn1", pointMap, geometry, _camera, -w2, 0, -1);
    setPoint("cn2", pointMap, geometry, _camera, w2, 0, -1);
    setPoint("cn3", pointMap, geometry, _camera, 0, -h, -1);
    setPoint("cn4", pointMap, geometry, _camera, 0, h, -1);
    geometry.getAttribute("position").needsUpdate = true;
  }
}
function setPoint(point, pointMap, geometry, camera, x2, y2, z2) {
  _vector$b.set(x2, y2, z2).unproject(camera);
  const points = pointMap[point];
  if (points !== void 0) {
    const position = geometry.getAttribute("position");
    for (let i2 = 0, l2 = points.length; i2 < l2; i2++) {
      position.setXYZ(points[i2], _vector$b.x, _vector$b.y, _vector$b.z);
    }
  }
}
const _box$3 = /* @__PURE__ */ new Box3();
class BoxHelper extends LineSegments {
  constructor(object, color = 16776960) {
    const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
    const positions = new Float32Array(8 * 3);
    const geometry = new BufferGeometry();
    geometry.setIndex(new BufferAttribute(indices, 1));
    geometry.setAttribute("position", new BufferAttribute(positions, 3));
    super(geometry, new LineBasicMaterial({ color, toneMapped: false }));
    this.object = object;
    this.type = "BoxHelper";
    this.matrixAutoUpdate = false;
    this.update();
  }
  update(object) {
    if (object !== void 0) {
      console.warn("THREE.BoxHelper: .update() has no longer arguments.");
    }
    if (this.object !== void 0) {
      _box$3.setFromObject(this.object);
    }
    if (_box$3.isEmpty())
      return;
    const min = _box$3.min;
    const max = _box$3.max;
    const position = this.geometry.attributes.position;
    const array = position.array;
    array[0] = max.x;
    array[1] = max.y;
    array[2] = max.z;
    array[3] = min.x;
    array[4] = max.y;
    array[5] = max.z;
    array[6] = min.x;
    array[7] = min.y;
    array[8] = max.z;
    array[9] = max.x;
    array[10] = min.y;
    array[11] = max.z;
    array[12] = max.x;
    array[13] = max.y;
    array[14] = min.z;
    array[15] = min.x;
    array[16] = max.y;
    array[17] = min.z;
    array[18] = min.x;
    array[19] = min.y;
    array[20] = min.z;
    array[21] = max.x;
    array[22] = min.y;
    array[23] = min.z;
    position.needsUpdate = true;
    this.geometry.computeBoundingSphere();
  }
  setFromObject(object) {
    this.object = object;
    this.update();
    return this;
  }
  copy(source) {
    LineSegments.prototype.copy.call(this, source);
    this.object = source.object;
    return this;
  }
}
class Box3Helper extends LineSegments {
  constructor(box, color = 16776960) {
    const indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
    const positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];
    const geometry = new BufferGeometry();
    geometry.setIndex(new BufferAttribute(indices, 1));
    geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
    super(geometry, new LineBasicMaterial({ color, toneMapped: false }));
    this.box = box;
    this.type = "Box3Helper";
    this.geometry.computeBoundingSphere();
  }
  updateMatrixWorld(force) {
    const box = this.box;
    if (box.isEmpty())
      return;
    box.getCenter(this.position);
    box.getSize(this.scale);
    this.scale.multiplyScalar(0.5);
    super.updateMatrixWorld(force);
  }
}
class PlaneHelper extends Line {
  constructor(plane, size2, hex) {
    const color = hex !== void 0 ? hex : 16776960;
    const positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];
    const geometry = new BufferGeometry();
    geometry.setAttribute("position", new Float32BufferAttribute(positions, 3));
    geometry.computeBoundingSphere();
    super(geometry, new LineBasicMaterial({ color, toneMapped: false }));
    this.type = "PlaneHelper";
    this.plane = plane;
    this.size = size2 === void 0 ? 1 : size2;
    const positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];
    const geometry2 = new BufferGeometry();
    geometry2.setAttribute("position", new Float32BufferAttribute(positions2, 3));
    geometry2.computeBoundingSphere();
    this.add(new Mesh(geometry2, new MeshBasicMaterial({ color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false })));
  }
  updateMatrixWorld(force) {
    let scale = -this.plane.constant;
    if (Math.abs(scale) < 1e-8)
      scale = 1e-8;
    this.scale.set(0.5 * this.size, 0.5 * this.size, scale);
    this.children[0].material.side = scale < 0 ? BackSide : FrontSide;
    this.lookAt(this.plane.normal);
    super.updateMatrixWorld(force);
  }
}
const _axis = /* @__PURE__ */ new Vector3();
let _lineGeometry, _coneGeometry;
class ArrowHelper extends Object3D {
  constructor(dir, origin, length, color, headLength, headWidth) {
    super();
    this.type = "ArrowHelper";
    if (dir === void 0)
      dir = new Vector3(0, 0, 1);
    if (origin === void 0)
      origin = new Vector3(0, 0, 0);
    if (length === void 0)
      length = 1;
    if (color === void 0)
      color = 16776960;
    if (headLength === void 0)
      headLength = 0.2 * length;
    if (headWidth === void 0)
      headWidth = 0.2 * headLength;
    if (_lineGeometry === void 0) {
      _lineGeometry = new BufferGeometry();
      _lineGeometry.setAttribute("position", new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));
      _coneGeometry = new CylinderBufferGeometry(0, 0.5, 1, 5, 1);
      _coneGeometry.translate(0, -0.5, 0);
    }
    this.position.copy(origin);
    this.line = new Line(_lineGeometry, new LineBasicMaterial({ color, toneMapped: false }));
    this.line.matrixAutoUpdate = false;
    this.add(this.line);
    this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({ color, toneMapped: false }));
    this.cone.matrixAutoUpdate = false;
    this.add(this.cone);
    this.setDirection(dir);
    this.setLength(length, headLength, headWidth);
  }
  setDirection(dir) {
    if (dir.y > 0.99999) {
      this.quaternion.set(0, 0, 0, 1);
    } else if (dir.y < -0.99999) {
      this.quaternion.set(1, 0, 0, 0);
    } else {
      _axis.set(dir.z, 0, -dir.x).normalize();
      const radians = Math.acos(dir.y);
      this.quaternion.setFromAxisAngle(_axis, radians);
    }
  }
  setLength(length, headLength, headWidth) {
    if (headLength === void 0)
      headLength = 0.2 * length;
    if (headWidth === void 0)
      headWidth = 0.2 * headLength;
    this.line.scale.set(1, Math.max(1e-4, length - headLength), 1);
    this.line.updateMatrix();
    this.cone.scale.set(headWidth, headLength, headWidth);
    this.cone.position.y = length;
    this.cone.updateMatrix();
  }
  setColor(color) {
    this.line.material.color.set(color);
    this.cone.material.color.set(color);
  }
  copy(source) {
    super.copy(source, false);
    this.line.copy(source.line);
    this.cone.copy(source.cone);
    return this;
  }
}
class AxesHelper extends LineSegments {
  constructor(size2 = 1) {
    const vertices = [
      0,
      0,
      0,
      size2,
      0,
      0,
      0,
      0,
      0,
      0,
      size2,
      0,
      0,
      0,
      0,
      0,
      0,
      size2
    ];
    const colors = [
      1,
      0,
      0,
      1,
      0.6,
      0,
      0,
      1,
      0,
      0.6,
      1,
      0,
      0,
      0,
      1,
      0,
      0.6,
      1
    ];
    const geometry = new BufferGeometry();
    geometry.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    geometry.setAttribute("color", new Float32BufferAttribute(colors, 3));
    const material = new LineBasicMaterial({ vertexColors: true, toneMapped: false });
    super(geometry, material);
    this.type = "AxesHelper";
  }
}
const LOD_MIN = 4;
const LOD_MAX = 8;
const SIZE_MAX = Math.pow(2, LOD_MAX);
const EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
const TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
const MAX_SAMPLES = 20;
const ENCODINGS = {
  [LinearEncoding]: 0,
  [sRGBEncoding]: 1,
  [RGBEEncoding]: 2,
  [RGBM7Encoding]: 3,
  [RGBM16Encoding]: 4,
  [RGBDEncoding]: 5,
  [GammaEncoding]: 6
};
const _flatCamera = /* @__PURE__ */ new OrthographicCamera();
const { _lodPlanes, _sizeLods, _sigmas } = /* @__PURE__ */ _createPlanes();
let _oldTarget = null;
const PHI = (1 + Math.sqrt(5)) / 2;
const INV_PHI = 1 / PHI;
const _axisDirections = [
  /* @__PURE__ */ new Vector3(1, 1, 1),
  /* @__PURE__ */ new Vector3(-1, 1, 1),
  /* @__PURE__ */ new Vector3(1, 1, -1),
  /* @__PURE__ */ new Vector3(-1, 1, -1),
  /* @__PURE__ */ new Vector3(0, PHI, INV_PHI),
  /* @__PURE__ */ new Vector3(0, PHI, -INV_PHI),
  /* @__PURE__ */ new Vector3(INV_PHI, 0, PHI),
  /* @__PURE__ */ new Vector3(-INV_PHI, 0, PHI),
  /* @__PURE__ */ new Vector3(PHI, INV_PHI, 0),
  /* @__PURE__ */ new Vector3(-PHI, INV_PHI, 0)
];
class PMREMGenerator {
  constructor(renderer2) {
    this._renderer = renderer2;
    this._pingPongRenderTarget = null;
    this._blurMaterial = _getBlurShader(MAX_SAMPLES);
    this._equirectShader = null;
    this._cubemapShader = null;
    this._compileMaterial(this._blurMaterial);
  }
  fromScene(scene, sigma = 0, near = 0.1, far = 100) {
    _oldTarget = this._renderer.getRenderTarget();
    const cubeUVRenderTarget = this._allocateTargets();
    this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);
    if (sigma > 0) {
      this._blur(cubeUVRenderTarget, 0, 0, sigma);
    }
    this._applyPMREM(cubeUVRenderTarget);
    this._cleanup(cubeUVRenderTarget);
    return cubeUVRenderTarget;
  }
  fromEquirectangular(equirectangular) {
    return this._fromTexture(equirectangular);
  }
  fromCubemap(cubemap) {
    return this._fromTexture(cubemap);
  }
  compileCubemapShader() {
    if (this._cubemapShader === null) {
      this._cubemapShader = _getCubemapShader();
      this._compileMaterial(this._cubemapShader);
    }
  }
  compileEquirectangularShader() {
    if (this._equirectShader === null) {
      this._equirectShader = _getEquirectShader();
      this._compileMaterial(this._equirectShader);
    }
  }
  dispose() {
    this._blurMaterial.dispose();
    if (this._cubemapShader !== null)
      this._cubemapShader.dispose();
    if (this._equirectShader !== null)
      this._equirectShader.dispose();
    for (let i2 = 0; i2 < _lodPlanes.length; i2++) {
      _lodPlanes[i2].dispose();
    }
  }
  _cleanup(outputTarget) {
    this._pingPongRenderTarget.dispose();
    this._renderer.setRenderTarget(_oldTarget);
    outputTarget.scissorTest = false;
    _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
  }
  _fromTexture(texture) {
    _oldTarget = this._renderer.getRenderTarget();
    const cubeUVRenderTarget = this._allocateTargets(texture);
    this._textureToCubeUV(texture, cubeUVRenderTarget);
    this._applyPMREM(cubeUVRenderTarget);
    this._cleanup(cubeUVRenderTarget);
    return cubeUVRenderTarget;
  }
  _allocateTargets(texture) {
    const params = {
      magFilter: NearestFilter,
      minFilter: NearestFilter,
      generateMipmaps: false,
      type: UnsignedByteType,
      format: RGBEFormat,
      encoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,
      depthBuffer: false
    };
    const cubeUVRenderTarget = _createRenderTarget(params);
    cubeUVRenderTarget.depthBuffer = texture ? false : true;
    this._pingPongRenderTarget = _createRenderTarget(params);
    return cubeUVRenderTarget;
  }
  _compileMaterial(material) {
    const tmpMesh = new Mesh(_lodPlanes[0], material);
    this._renderer.compile(tmpMesh, _flatCamera);
  }
  _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
    const fov2 = 90;
    const aspect2 = 1;
    const cubeCamera = new PerspectiveCamera(fov2, aspect2, near, far);
    const upSign = [1, -1, 1, 1, 1, 1];
    const forwardSign = [1, 1, 1, -1, -1, -1];
    const renderer2 = this._renderer;
    const outputEncoding = renderer2.outputEncoding;
    const toneMapping = renderer2.toneMapping;
    const clearColor = renderer2.getClearColor();
    const clearAlpha = renderer2.getClearAlpha();
    renderer2.toneMapping = NoToneMapping;
    renderer2.outputEncoding = LinearEncoding;
    let background = scene.background;
    if (background && background.isColor) {
      background.convertSRGBToLinear();
      const maxComponent = Math.max(background.r, background.g, background.b);
      const fExp = Math.min(Math.max(Math.ceil(Math.log2(maxComponent)), -128), 127);
      background = background.multiplyScalar(Math.pow(2, -fExp));
      const alpha = (fExp + 128) / 255;
      renderer2.setClearColor(background, alpha);
      scene.background = null;
    }
    for (let i2 = 0; i2 < 6; i2++) {
      const col = i2 % 3;
      if (col == 0) {
        cubeCamera.up.set(0, upSign[i2], 0);
        cubeCamera.lookAt(forwardSign[i2], 0, 0);
      } else if (col == 1) {
        cubeCamera.up.set(0, 0, upSign[i2]);
        cubeCamera.lookAt(0, forwardSign[i2], 0);
      } else {
        cubeCamera.up.set(0, upSign[i2], 0);
        cubeCamera.lookAt(0, 0, forwardSign[i2]);
      }
      _setViewport(cubeUVRenderTarget, col * SIZE_MAX, i2 > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);
      renderer2.setRenderTarget(cubeUVRenderTarget);
      renderer2.render(scene, cubeCamera);
    }
    renderer2.toneMapping = toneMapping;
    renderer2.outputEncoding = outputEncoding;
    renderer2.setClearColor(clearColor, clearAlpha);
  }
  _textureToCubeUV(texture, cubeUVRenderTarget) {
    const renderer2 = this._renderer;
    if (texture.isCubeTexture) {
      if (this._cubemapShader == null) {
        this._cubemapShader = _getCubemapShader();
      }
    } else {
      if (this._equirectShader == null) {
        this._equirectShader = _getEquirectShader();
      }
    }
    const material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;
    const mesh = new Mesh(_lodPlanes[0], material);
    const uniforms = material.uniforms;
    uniforms["envMap"].value = texture;
    if (!texture.isCubeTexture) {
      uniforms["texelSize"].value.set(1 / texture.image.width, 1 / texture.image.height);
    }
    uniforms["inputEncoding"].value = ENCODINGS[texture.encoding];
    uniforms["outputEncoding"].value = ENCODINGS[cubeUVRenderTarget.texture.encoding];
    _setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);
    renderer2.setRenderTarget(cubeUVRenderTarget);
    renderer2.render(mesh, _flatCamera);
  }
  _applyPMREM(cubeUVRenderTarget) {
    const renderer2 = this._renderer;
    const autoClear = renderer2.autoClear;
    renderer2.autoClear = false;
    for (let i2 = 1; i2 < TOTAL_LODS; i2++) {
      const sigma = Math.sqrt(_sigmas[i2] * _sigmas[i2] - _sigmas[i2 - 1] * _sigmas[i2 - 1]);
      const poleAxis = _axisDirections[(i2 - 1) % _axisDirections.length];
      this._blur(cubeUVRenderTarget, i2 - 1, i2, sigma, poleAxis);
    }
    renderer2.autoClear = autoClear;
  }
  _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
    const pingPongRenderTarget = this._pingPongRenderTarget;
    this._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, "latitudinal", poleAxis);
    this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, "longitudinal", poleAxis);
  }
  _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
    const renderer2 = this._renderer;
    const blurMaterial = this._blurMaterial;
    if (direction !== "latitudinal" && direction !== "longitudinal") {
      console.error("blur direction must be either latitudinal or longitudinal!");
    }
    const STANDARD_DEVIATIONS = 3;
    const blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);
    const blurUniforms = blurMaterial.uniforms;
    const pixels = _sizeLods[lodIn] - 1;
    const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
    const sigmaPixels = sigmaRadians / radiansPerPixel;
    const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
    if (samples > MAX_SAMPLES) {
      console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
    }
    const weights = [];
    let sum = 0;
    for (let i2 = 0; i2 < MAX_SAMPLES; ++i2) {
      const x3 = i2 / sigmaPixels;
      const weight = Math.exp(-x3 * x3 / 2);
      weights.push(weight);
      if (i2 == 0) {
        sum += weight;
      } else if (i2 < samples) {
        sum += 2 * weight;
      }
    }
    for (let i2 = 0; i2 < weights.length; i2++) {
      weights[i2] = weights[i2] / sum;
    }
    blurUniforms["envMap"].value = targetIn.texture;
    blurUniforms["samples"].value = samples;
    blurUniforms["weights"].value = weights;
    blurUniforms["latitudinal"].value = direction === "latitudinal";
    if (poleAxis) {
      blurUniforms["poleAxis"].value = poleAxis;
    }
    blurUniforms["dTheta"].value = radiansPerPixel;
    blurUniforms["mipInt"].value = LOD_MAX - lodIn;
    blurUniforms["inputEncoding"].value = ENCODINGS[targetIn.texture.encoding];
    blurUniforms["outputEncoding"].value = ENCODINGS[targetIn.texture.encoding];
    const outputSize = _sizeLods[lodOut];
    const x2 = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);
    const y2 = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);
    _setViewport(targetOut, x2, y2, 3 * outputSize, 2 * outputSize);
    renderer2.setRenderTarget(targetOut);
    renderer2.render(blurMesh, _flatCamera);
  }
}
function _isLDR(texture) {
  if (texture === void 0 || texture.type !== UnsignedByteType)
    return false;
  return texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;
}
function _createPlanes() {
  const _lodPlanes2 = [];
  const _sizeLods2 = [];
  const _sigmas2 = [];
  let lod = LOD_MAX;
  for (let i2 = 0; i2 < TOTAL_LODS; i2++) {
    const sizeLod = Math.pow(2, lod);
    _sizeLods2.push(sizeLod);
    let sigma = 1 / sizeLod;
    if (i2 > LOD_MAX - LOD_MIN) {
      sigma = EXTRA_LOD_SIGMA[i2 - LOD_MAX + LOD_MIN - 1];
    } else if (i2 == 0) {
      sigma = 0;
    }
    _sigmas2.push(sigma);
    const texelSize = 1 / (sizeLod - 1);
    const min = -texelSize / 2;
    const max = 1 + texelSize / 2;
    const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];
    const cubeFaces = 6;
    const vertices = 6;
    const positionSize = 3;
    const uvSize = 2;
    const faceIndexSize = 1;
    const position = new Float32Array(positionSize * vertices * cubeFaces);
    const uv = new Float32Array(uvSize * vertices * cubeFaces);
    const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
    for (let face = 0; face < cubeFaces; face++) {
      const x2 = face % 3 * 2 / 3 - 1;
      const y2 = face > 2 ? 0 : -1;
      const coordinates = [
        x2,
        y2,
        0,
        x2 + 2 / 3,
        y2,
        0,
        x2 + 2 / 3,
        y2 + 1,
        0,
        x2,
        y2,
        0,
        x2 + 2 / 3,
        y2 + 1,
        0,
        x2,
        y2 + 1,
        0
      ];
      position.set(coordinates, positionSize * vertices * face);
      uv.set(uv1, uvSize * vertices * face);
      const fill = [face, face, face, face, face, face];
      faceIndex.set(fill, faceIndexSize * vertices * face);
    }
    const planes = new BufferGeometry();
    planes.setAttribute("position", new BufferAttribute(position, positionSize));
    planes.setAttribute("uv", new BufferAttribute(uv, uvSize));
    planes.setAttribute("faceIndex", new BufferAttribute(faceIndex, faceIndexSize));
    _lodPlanes2.push(planes);
    if (lod > LOD_MIN) {
      lod--;
    }
  }
  return { _lodPlanes: _lodPlanes2, _sizeLods: _sizeLods2, _sigmas: _sigmas2 };
}
function _createRenderTarget(params) {
  const cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);
  cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
  cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
  cubeUVRenderTarget.scissorTest = true;
  return cubeUVRenderTarget;
}
function _setViewport(target, x2, y2, width, height) {
  target.viewport.set(x2, y2, width, height);
  target.scissor.set(x2, y2, width, height);
}
function _getBlurShader(maxSamples) {
  const weights = new Float32Array(maxSamples);
  const poleAxis = new Vector3(0, 1, 0);
  const shaderMaterial = new RawShaderMaterial({
    name: "SphericalGaussianBlur",
    defines: { "n": maxSamples },
    uniforms: {
      "envMap": { value: null },
      "samples": { value: 1 },
      "weights": { value: weights },
      "latitudinal": { value: false },
      "dTheta": { value: 0 },
      "mipInt": { value: 0 },
      "poleAxis": { value: poleAxis },
      "inputEncoding": { value: ENCODINGS[LinearEncoding] },
      "outputEncoding": { value: ENCODINGS[LinearEncoding] }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			${_getEncodings()}

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
  return shaderMaterial;
}
function _getEquirectShader() {
  const texelSize = new Vector2(1, 1);
  const shaderMaterial = new RawShaderMaterial({
    name: "EquirectangularToCubeUV",
    uniforms: {
      "envMap": { value: null },
      "texelSize": { value: texelSize },
      "inputEncoding": { value: ENCODINGS[LinearEncoding] },
      "outputEncoding": { value: ENCODINGS[LinearEncoding] }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			${_getEncodings()}

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x += texelSize.x;
				vec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.y += texelSize.y;
				vec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
  return shaderMaterial;
}
function _getCubemapShader() {
  const shaderMaterial = new RawShaderMaterial({
    name: "CubemapToCubeUV",
    uniforms: {
      "envMap": { value: null },
      "inputEncoding": { value: ENCODINGS[LinearEncoding] },
      "outputEncoding": { value: ENCODINGS[LinearEncoding] }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			${_getEncodings()}

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;
				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
  return shaderMaterial;
}
function _getCommonVertexShader() {
  return `

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;
}
function _getEncodings() {
  return `

		uniform int inputEncoding;
		uniform int outputEncoding;

		#include <encodings_pars_fragment>

		vec4 inputTexelToLinear( vec4 value ) {

			if ( inputEncoding == 0 ) {

				return value;

			} else if ( inputEncoding == 1 ) {

				return sRGBToLinear( value );

			} else if ( inputEncoding == 2 ) {

				return RGBEToLinear( value );

			} else if ( inputEncoding == 3 ) {

				return RGBMToLinear( value, 7.0 );

			} else if ( inputEncoding == 4 ) {

				return RGBMToLinear( value, 16.0 );

			} else if ( inputEncoding == 5 ) {

				return RGBDToLinear( value, 256.0 );

			} else {

				return GammaToLinear( value, 2.2 );

			}

		}

		vec4 linearToOutputTexel( vec4 value ) {

			if ( outputEncoding == 0 ) {

				return value;

			} else if ( outputEncoding == 1 ) {

				return LinearTosRGB( value );

			} else if ( outputEncoding == 2 ) {

				return LinearToRGBE( value );

			} else if ( outputEncoding == 3 ) {

				return LinearToRGBM( value, 7.0 );

			} else if ( outputEncoding == 4 ) {

				return LinearToRGBM( value, 16.0 );

			} else if ( outputEncoding == 5 ) {

				return LinearToRGBD( value, 256.0 );

			} else {

				return LinearToGamma( value, 2.2 );

			}

		}

		vec4 envMapTexelToLinear( vec4 color ) {

			return inputTexelToLinear( color );

		}
	`;
}
function Face4(a2, b2, c2, d, normal, color, materialIndex) {
  console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");
  return new Face3(a2, b2, c2, normal, color, materialIndex);
}
const LineStrip = 0;
const LinePieces = 1;
const NoColors = 0;
const FaceColors = 1;
const VertexColors = 2;
function MeshFaceMaterial(materials) {
  console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");
  return materials;
}
function MultiMaterial(materials) {
  if (materials === void 0)
    materials = [];
  console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");
  materials.isMultiMaterial = true;
  materials.materials = materials;
  materials.clone = function() {
    return materials.slice();
  };
  return materials;
}
function PointCloud(geometry, material) {
  console.warn("THREE.PointCloud has been renamed to THREE.Points.");
  return new Points(geometry, material);
}
function Particle(material) {
  console.warn("THREE.Particle has been renamed to THREE.Sprite.");
  return new Sprite(material);
}
function ParticleSystem(geometry, material) {
  console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");
  return new Points(geometry, material);
}
function PointCloudMaterial(parameters) {
  console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");
  return new PointsMaterial(parameters);
}
function ParticleBasicMaterial(parameters) {
  console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");
  return new PointsMaterial(parameters);
}
function ParticleSystemMaterial(parameters) {
  console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");
  return new PointsMaterial(parameters);
}
function Vertex(x2, y2, z2) {
  console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");
  return new Vector3(x2, y2, z2);
}
function DynamicBufferAttribute(array, itemSize) {
  console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.");
  return new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);
}
function Int8Attribute(array, itemSize) {
  console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");
  return new Int8BufferAttribute(array, itemSize);
}
function Uint8Attribute(array, itemSize) {
  console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");
  return new Uint8BufferAttribute(array, itemSize);
}
function Uint8ClampedAttribute(array, itemSize) {
  console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");
  return new Uint8ClampedBufferAttribute(array, itemSize);
}
function Int16Attribute(array, itemSize) {
  console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");
  return new Int16BufferAttribute(array, itemSize);
}
function Uint16Attribute(array, itemSize) {
  console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");
  return new Uint16BufferAttribute(array, itemSize);
}
function Int32Attribute(array, itemSize) {
  console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");
  return new Int32BufferAttribute(array, itemSize);
}
function Uint32Attribute(array, itemSize) {
  console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");
  return new Uint32BufferAttribute(array, itemSize);
}
function Float32Attribute(array, itemSize) {
  console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");
  return new Float32BufferAttribute(array, itemSize);
}
function Float64Attribute(array, itemSize) {
  console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");
  return new Float64BufferAttribute(array, itemSize);
}
Curve.create = function(construct, getPoint) {
  console.log("THREE.Curve.create() has been deprecated");
  construct.prototype = Object.create(Curve.prototype);
  construct.prototype.constructor = construct;
  construct.prototype.getPoint = getPoint;
  return construct;
};
Object.assign(CurvePath.prototype, {
  createPointsGeometry: function(divisions) {
    console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    const pts = this.getPoints(divisions);
    return this.createGeometry(pts);
  },
  createSpacedPointsGeometry: function(divisions) {
    console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    const pts = this.getSpacedPoints(divisions);
    return this.createGeometry(pts);
  },
  createGeometry: function(points) {
    console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    const geometry = new Geometry();
    for (let i2 = 0, l2 = points.length; i2 < l2; i2++) {
      const point = points[i2];
      geometry.vertices.push(new Vector3(point.x, point.y, point.z || 0));
    }
    return geometry;
  }
});
Object.assign(Path.prototype, {
  fromPoints: function(points) {
    console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");
    return this.setFromPoints(points);
  }
});
function ClosedSplineCurve3(points) {
  console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
  CatmullRomCurve3.call(this, points);
  this.type = "catmullrom";
  this.closed = true;
}
ClosedSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype);
function SplineCurve3(points) {
  console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");
  CatmullRomCurve3.call(this, points);
  this.type = "catmullrom";
}
SplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype);
function Spline(points) {
  console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.");
  CatmullRomCurve3.call(this, points);
  this.type = "catmullrom";
}
Spline.prototype = Object.create(CatmullRomCurve3.prototype);
Object.assign(Spline.prototype, {
  initFromArray: function() {
    console.error("THREE.Spline: .initFromArray() has been removed.");
  },
  getControlPointsArray: function() {
    console.error("THREE.Spline: .getControlPointsArray() has been removed.");
  },
  reparametrizeByArcLength: function() {
    console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.");
  }
});
function AxisHelper(size2) {
  console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");
  return new AxesHelper(size2);
}
function BoundingBoxHelper(object, color) {
  console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");
  return new BoxHelper(object, color);
}
function EdgesHelper(object, hex) {
  console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");
  return new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({ color: hex !== void 0 ? hex : 16777215 }));
}
GridHelper.prototype.setColors = function() {
  console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
};
SkeletonHelper.prototype.update = function() {
  console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
};
function WireframeHelper(object, hex) {
  console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");
  return new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({ color: hex !== void 0 ? hex : 16777215 }));
}
Object.assign(Loader.prototype, {
  extractUrlBase: function(url) {
    console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");
    return LoaderUtils.extractUrlBase(url);
  }
});
Loader.Handlers = {
  add: function() {
    console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.");
  },
  get: function() {
    console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.");
  }
};
function XHRLoader(manager) {
  console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");
  return new FileLoader(manager);
}
function BinaryTextureLoader(manager) {
  console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");
  return new DataTextureLoader(manager);
}
Object.assign(Box2.prototype, {
  center: function(optionalTarget) {
    console.warn("THREE.Box2: .center() has been renamed to .getCenter().");
    return this.getCenter(optionalTarget);
  },
  empty: function() {
    console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  },
  isIntersectionBox: function(box) {
    console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(box);
  },
  size: function(optionalTarget) {
    console.warn("THREE.Box2: .size() has been renamed to .getSize().");
    return this.getSize(optionalTarget);
  }
});
Object.assign(Box3.prototype, {
  center: function(optionalTarget) {
    console.warn("THREE.Box3: .center() has been renamed to .getCenter().");
    return this.getCenter(optionalTarget);
  },
  empty: function() {
    console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  },
  isIntersectionBox: function(box) {
    console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(box);
  },
  isIntersectionSphere: function(sphere) {
    console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(sphere);
  },
  size: function(optionalTarget) {
    console.warn("THREE.Box3: .size() has been renamed to .getSize().");
    return this.getSize(optionalTarget);
  }
});
Object.assign(Sphere.prototype, {
  empty: function() {
    console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty().");
    return this.isEmpty();
  }
});
Frustum.prototype.setFromMatrix = function(m2) {
  console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().");
  return this.setFromProjectionMatrix(m2);
};
Line3.prototype.center = function(optionalTarget) {
  console.warn("THREE.Line3: .center() has been renamed to .getCenter().");
  return this.getCenter(optionalTarget);
};
Object.assign(MathUtils, {
  random16: function() {
    console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead.");
    return Math.random();
  },
  nearestPowerOfTwo: function(value) {
    console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().");
    return MathUtils.floorPowerOfTwo(value);
  },
  nextPowerOfTwo: function(value) {
    console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().");
    return MathUtils.ceilPowerOfTwo(value);
  }
});
Object.assign(Matrix3.prototype, {
  flattenToArrayOffset: function(array, offset) {
    console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(array, offset);
  },
  multiplyVector3: function(vector) {
    console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");
    return vector.applyMatrix3(this);
  },
  multiplyVector3Array: function() {
    console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
  },
  applyToBufferAttribute: function(attribute) {
    console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.");
    return attribute.applyMatrix3(this);
  },
  applyToVector3Array: function() {
    console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
  }
});
Object.assign(Matrix4.prototype, {
  extractPosition: function(m2) {
    console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
    return this.copyPosition(m2);
  },
  flattenToArrayOffset: function(array, offset) {
    console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");
    return this.toArray(array, offset);
  },
  getPosition: function() {
    console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");
    return new Vector3().setFromMatrixColumn(this, 3);
  },
  setRotationFromQuaternion: function(q2) {
    console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
    return this.makeRotationFromQuaternion(q2);
  },
  multiplyToArray: function() {
    console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
  },
  multiplyVector3: function(vector) {
    console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return vector.applyMatrix4(this);
  },
  multiplyVector4: function(vector) {
    console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return vector.applyMatrix4(this);
  },
  multiplyVector3Array: function() {
    console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
  },
  rotateAxis: function(v2) {
    console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");
    v2.transformDirection(this);
  },
  crossVector: function(vector) {
    console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");
    return vector.applyMatrix4(this);
  },
  translate: function() {
    console.error("THREE.Matrix4: .translate() has been removed.");
  },
  rotateX: function() {
    console.error("THREE.Matrix4: .rotateX() has been removed.");
  },
  rotateY: function() {
    console.error("THREE.Matrix4: .rotateY() has been removed.");
  },
  rotateZ: function() {
    console.error("THREE.Matrix4: .rotateZ() has been removed.");
  },
  rotateByAxis: function() {
    console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
  },
  applyToBufferAttribute: function(attribute) {
    console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.");
    return attribute.applyMatrix4(this);
  },
  applyToVector3Array: function() {
    console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
  },
  makeFrustum: function(left, right, bottom, top, near, far) {
    console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
    return this.makePerspective(left, right, top, bottom, near, far);
  }
});
Plane.prototype.isIntersectionLine = function(line) {
  console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");
  return this.intersectsLine(line);
};
Quaternion.prototype.multiplyVector3 = function(vector) {
  console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");
  return vector.applyQuaternion(this);
};
Object.assign(Ray.prototype, {
  isIntersectionBox: function(box) {
    console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(box);
  },
  isIntersectionPlane: function(plane) {
    console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");
    return this.intersectsPlane(plane);
  },
  isIntersectionSphere: function(sphere) {
    console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(sphere);
  }
});
Object.assign(Triangle.prototype, {
  area: function() {
    console.warn("THREE.Triangle: .area() has been renamed to .getArea().");
    return this.getArea();
  },
  barycoordFromPoint: function(point, target) {
    console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
    return this.getBarycoord(point, target);
  },
  midpoint: function(target) {
    console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");
    return this.getMidpoint(target);
  },
  normal: function(target) {
    console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
    return this.getNormal(target);
  },
  plane: function(target) {
    console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");
    return this.getPlane(target);
  }
});
Object.assign(Triangle, {
  barycoordFromPoint: function(point, a2, b2, c2, target) {
    console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");
    return Triangle.getBarycoord(point, a2, b2, c2, target);
  },
  normal: function(a2, b2, c2, target) {
    console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");
    return Triangle.getNormal(a2, b2, c2, target);
  }
});
Object.assign(Shape.prototype, {
  extractAllPoints: function(divisions) {
    console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");
    return this.extractPoints(divisions);
  },
  extrude: function(options) {
    console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");
    return new ExtrudeGeometry(this, options);
  },
  makeGeometry: function(options) {
    console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");
    return new ShapeGeometry(this, options);
  }
});
Object.assign(Vector2.prototype, {
  fromAttribute: function(attribute, index, offset) {
    console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(attribute, index, offset);
  },
  distanceToManhattan: function(v2) {
    console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
    return this.manhattanDistanceTo(v2);
  },
  lengthManhattan: function() {
    console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  }
});
Object.assign(Vector3.prototype, {
  setEulerFromRotationMatrix: function() {
    console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
  },
  setEulerFromQuaternion: function() {
    console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
  },
  getPositionFromMatrix: function(m2) {
    console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");
    return this.setFromMatrixPosition(m2);
  },
  getScaleFromMatrix: function(m2) {
    console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");
    return this.setFromMatrixScale(m2);
  },
  getColumnFromMatrix: function(index, matrix) {
    console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");
    return this.setFromMatrixColumn(matrix, index);
  },
  applyProjection: function(m2) {
    console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");
    return this.applyMatrix4(m2);
  },
  fromAttribute: function(attribute, index, offset) {
    console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(attribute, index, offset);
  },
  distanceToManhattan: function(v2) {
    console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
    return this.manhattanDistanceTo(v2);
  },
  lengthManhattan: function() {
    console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  }
});
Object.assign(Vector4.prototype, {
  fromAttribute: function(attribute, index, offset) {
    console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");
    return this.fromBufferAttribute(attribute, index, offset);
  },
  lengthManhattan: function() {
    console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength();
  }
});
Object.assign(Geometry.prototype, {
  computeTangents: function() {
    console.error("THREE.Geometry: .computeTangents() has been removed.");
  },
  computeLineDistances: function() {
    console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.");
  },
  applyMatrix: function(matrix) {
    console.warn("THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().");
    return this.applyMatrix4(matrix);
  }
});
Object.assign(Object3D.prototype, {
  getChildByName: function(name) {
    console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");
    return this.getObjectByName(name);
  },
  renderDepth: function() {
    console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
  },
  translate: function(distance, axis) {
    console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");
    return this.translateOnAxis(axis, distance);
  },
  getWorldRotation: function() {
    console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
  },
  applyMatrix: function(matrix) {
    console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().");
    return this.applyMatrix4(matrix);
  }
});
Object.defineProperties(Object3D.prototype, {
  eulerOrder: {
    get: function() {
      console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
      return this.rotation.order;
    },
    set: function(value) {
      console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
      this.rotation.order = value;
    }
  },
  useQuaternion: {
    get: function() {
      console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
    },
    set: function() {
      console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
    }
  }
});
Object.assign(Mesh.prototype, {
  setDrawMode: function() {
    console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
  }
});
Object.defineProperties(Mesh.prototype, {
  drawMode: {
    get: function() {
      console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.");
      return TrianglesDrawMode;
    },
    set: function() {
      console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.");
    }
  }
});
Object.defineProperties(LOD.prototype, {
  objects: {
    get: function() {
      console.warn("THREE.LOD: .objects has been renamed to .levels.");
      return this.levels;
    }
  }
});
Object.defineProperty(Skeleton.prototype, "useVertexTexture", {
  get: function() {
    console.warn("THREE.Skeleton: useVertexTexture has been removed.");
  },
  set: function() {
    console.warn("THREE.Skeleton: useVertexTexture has been removed.");
  }
});
SkinnedMesh.prototype.initBones = function() {
  console.error("THREE.SkinnedMesh: initBones() has been removed.");
};
Object.defineProperty(Curve.prototype, "__arcLengthDivisions", {
  get: function() {
    console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
    return this.arcLengthDivisions;
  },
  set: function(value) {
    console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
    this.arcLengthDivisions = value;
  }
});
PerspectiveCamera.prototype.setLens = function(focalLength, filmGauge) {
  console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");
  if (filmGauge !== void 0)
    this.filmGauge = filmGauge;
  this.setFocalLength(focalLength);
};
Object.defineProperties(Light.prototype, {
  onlyShadow: {
    set: function() {
      console.warn("THREE.Light: .onlyShadow has been removed.");
    }
  },
  shadowCameraFov: {
    set: function(value) {
      console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");
      this.shadow.camera.fov = value;
    }
  },
  shadowCameraLeft: {
    set: function(value) {
      console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");
      this.shadow.camera.left = value;
    }
  },
  shadowCameraRight: {
    set: function(value) {
      console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");
      this.shadow.camera.right = value;
    }
  },
  shadowCameraTop: {
    set: function(value) {
      console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");
      this.shadow.camera.top = value;
    }
  },
  shadowCameraBottom: {
    set: function(value) {
      console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
      this.shadow.camera.bottom = value;
    }
  },
  shadowCameraNear: {
    set: function(value) {
      console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");
      this.shadow.camera.near = value;
    }
  },
  shadowCameraFar: {
    set: function(value) {
      console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");
      this.shadow.camera.far = value;
    }
  },
  shadowCameraVisible: {
    set: function() {
      console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
    }
  },
  shadowBias: {
    set: function(value) {
      console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
      this.shadow.bias = value;
    }
  },
  shadowDarkness: {
    set: function() {
      console.warn("THREE.Light: .shadowDarkness has been removed.");
    }
  },
  shadowMapWidth: {
    set: function(value) {
      console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");
      this.shadow.mapSize.width = value;
    }
  },
  shadowMapHeight: {
    set: function(value) {
      console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");
      this.shadow.mapSize.height = value;
    }
  }
});
Object.defineProperties(BufferAttribute.prototype, {
  length: {
    get: function() {
      console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");
      return this.array.length;
    }
  },
  dynamic: {
    get: function() {
      console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
      return this.usage === DynamicDrawUsage;
    },
    set: function() {
      console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");
      this.setUsage(DynamicDrawUsage);
    }
  }
});
Object.assign(BufferAttribute.prototype, {
  setDynamic: function(value) {
    console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.");
    this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
    return this;
  },
  copyIndicesArray: function() {
    console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
  },
  setArray: function() {
    console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
  }
});
Object.assign(BufferGeometry.prototype, {
  addIndex: function(index) {
    console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");
    this.setIndex(index);
  },
  addAttribute: function(name, attribute) {
    console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().");
    if (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {
      console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).");
      return this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));
    }
    if (name === "index") {
      console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.");
      this.setIndex(attribute);
      return this;
    }
    return this.setAttribute(name, attribute);
  },
  addDrawCall: function(start, count, indexOffset) {
    if (indexOffset !== void 0) {
      console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");
    }
    console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");
    this.addGroup(start, count);
  },
  clearDrawCalls: function() {
    console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
    this.clearGroups();
  },
  computeTangents: function() {
    console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
  },
  computeOffsets: function() {
    console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
  },
  removeAttribute: function(name) {
    console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().");
    return this.deleteAttribute(name);
  },
  applyMatrix: function(matrix) {
    console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().");
    return this.applyMatrix4(matrix);
  }
});
Object.defineProperties(BufferGeometry.prototype, {
  drawcalls: {
    get: function() {
      console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");
      return this.groups;
    }
  },
  offsets: {
    get: function() {
      console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");
      return this.groups;
    }
  }
});
Object.defineProperties(InstancedBufferGeometry.prototype, {
  maxInstancedCount: {
    get: function() {
      console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.");
      return this.instanceCount;
    },
    set: function(value) {
      console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.");
      this.instanceCount = value;
    }
  }
});
Object.defineProperties(Raycaster.prototype, {
  linePrecision: {
    get: function() {
      console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.");
      return this.params.Line.threshold;
    },
    set: function(value) {
      console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.");
      this.params.Line.threshold = value;
    }
  }
});
Object.defineProperties(InterleavedBuffer.prototype, {
  dynamic: {
    get: function() {
      console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");
      return this.usage === DynamicDrawUsage;
    },
    set: function(value) {
      console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.");
      this.setUsage(value);
    }
  }
});
Object.assign(InterleavedBuffer.prototype, {
  setDynamic: function(value) {
    console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.");
    this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);
    return this;
  },
  setArray: function() {
    console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers");
  }
});
Object.assign(ExtrudeBufferGeometry.prototype, {
  getArrays: function() {
    console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.");
  },
  addShapeList: function() {
    console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.");
  },
  addShape: function() {
    console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.");
  }
});
Object.assign(Scene.prototype, {
  dispose: function() {
    console.error("THREE.Scene: .dispose() has been removed.");
  }
});
Object.defineProperties(Uniform.prototype, {
  dynamic: {
    set: function() {
      console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.");
    }
  },
  onUpdate: {
    value: function() {
      console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");
      return this;
    }
  }
});
Object.defineProperties(Material.prototype, {
  wrapAround: {
    get: function() {
      console.warn("THREE.Material: .wrapAround has been removed.");
    },
    set: function() {
      console.warn("THREE.Material: .wrapAround has been removed.");
    }
  },
  overdraw: {
    get: function() {
      console.warn("THREE.Material: .overdraw has been removed.");
    },
    set: function() {
      console.warn("THREE.Material: .overdraw has been removed.");
    }
  },
  wrapRGB: {
    get: function() {
      console.warn("THREE.Material: .wrapRGB has been removed.");
      return new Color();
    }
  },
  shading: {
    get: function() {
      console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
    },
    set: function(value) {
      console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
      this.flatShading = value === FlatShading;
    }
  },
  stencilMask: {
    get: function() {
      console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
      return this.stencilFuncMask;
    },
    set: function(value) {
      console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead.");
      this.stencilFuncMask = value;
    }
  }
});
Object.defineProperties(MeshPhongMaterial.prototype, {
  metal: {
    get: function() {
      console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");
      return false;
    },
    set: function() {
      console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead");
    }
  }
});
Object.defineProperties(MeshPhysicalMaterial.prototype, {
  transparency: {
    get: function() {
      console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.");
      return this.transmission;
    },
    set: function(value) {
      console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.");
      this.transmission = value;
    }
  }
});
Object.defineProperties(ShaderMaterial.prototype, {
  derivatives: {
    get: function() {
      console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
      return this.extensions.derivatives;
    },
    set: function(value) {
      console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");
      this.extensions.derivatives = value;
    }
  }
});
Object.assign(WebGLRenderer.prototype, {
  clearTarget: function(renderTarget, color, depth, stencil) {
    console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");
    this.setRenderTarget(renderTarget);
    this.clear(color, depth, stencil);
  },
  animate: function(callback) {
    console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");
    this.setAnimationLoop(callback);
  },
  getCurrentRenderTarget: function() {
    console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");
    return this.getRenderTarget();
  },
  getMaxAnisotropy: function() {
    console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");
    return this.capabilities.getMaxAnisotropy();
  },
  getPrecision: function() {
    console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");
    return this.capabilities.precision;
  },
  resetGLState: function() {
    console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");
    return this.state.reset();
  },
  supportsFloatTextures: function() {
    console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");
    return this.extensions.get("OES_texture_float");
  },
  supportsHalfFloatTextures: function() {
    console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");
    return this.extensions.get("OES_texture_half_float");
  },
  supportsStandardDerivatives: function() {
    console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
    return this.extensions.get("OES_standard_derivatives");
  },
  supportsCompressedTextureS3TC: function() {
    console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");
    return this.extensions.get("WEBGL_compressed_texture_s3tc");
  },
  supportsCompressedTexturePVRTC: function() {
    console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");
    return this.extensions.get("WEBGL_compressed_texture_pvrtc");
  },
  supportsBlendMinMax: function() {
    console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");
    return this.extensions.get("EXT_blend_minmax");
  },
  supportsVertexTextures: function() {
    console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");
    return this.capabilities.vertexTextures;
  },
  supportsInstancedArrays: function() {
    console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");
    return this.extensions.get("ANGLE_instanced_arrays");
  },
  enableScissorTest: function(boolean) {
    console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");
    this.setScissorTest(boolean);
  },
  initMaterial: function() {
    console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
  },
  addPrePlugin: function() {
    console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
  },
  addPostPlugin: function() {
    console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
  },
  updateShadowMap: function() {
    console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
  },
  setFaceCulling: function() {
    console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
  },
  allocTextureUnit: function() {
    console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.");
  },
  setTexture: function() {
    console.warn("THREE.WebGLRenderer: .setTexture() has been removed.");
  },
  setTexture2D: function() {
    console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.");
  },
  setTextureCube: function() {
    console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.");
  },
  getActiveMipMapLevel: function() {
    console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().");
    return this.getActiveMipmapLevel();
  }
});
Object.defineProperties(WebGLRenderer.prototype, {
  shadowMapEnabled: {
    get: function() {
      return this.shadowMap.enabled;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");
      this.shadowMap.enabled = value;
    }
  },
  shadowMapType: {
    get: function() {
      return this.shadowMap.type;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");
      this.shadowMap.type = value;
    }
  },
  shadowMapCullFace: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
      return void 0;
    },
    set: function() {
      console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
    }
  },
  context: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.");
      return this.getContext();
    }
  },
  vr: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr");
      return this.xr;
    }
  },
  gammaInput: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
      return false;
    },
    set: function() {
      console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");
    }
  },
  gammaOutput: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");
      return false;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");
      this.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;
    }
  },
  toneMappingWhitePoint: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
      return 1;
    },
    set: function() {
      console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");
    }
  }
});
Object.defineProperties(WebGLShadowMap.prototype, {
  cullFace: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
      return void 0;
    },
    set: function() {
      console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
    }
  },
  renderReverseSided: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
      return void 0;
    },
    set: function() {
      console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
    }
  },
  renderSingleSided: {
    get: function() {
      console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
      return void 0;
    },
    set: function() {
      console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
    }
  }
});
function WebGLRenderTargetCube(width, height, options) {
  console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).");
  return new WebGLCubeRenderTarget(width, options);
}
Object.defineProperties(WebGLRenderTarget.prototype, {
  wrapS: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
      return this.texture.wrapS;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
      this.texture.wrapS = value;
    }
  },
  wrapT: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
      return this.texture.wrapT;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");
      this.texture.wrapT = value;
    }
  },
  magFilter: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
      return this.texture.magFilter;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");
      this.texture.magFilter = value;
    }
  },
  minFilter: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
      return this.texture.minFilter;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");
      this.texture.minFilter = value;
    }
  },
  anisotropy: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
      return this.texture.anisotropy;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");
      this.texture.anisotropy = value;
    }
  },
  offset: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
      return this.texture.offset;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");
      this.texture.offset = value;
    }
  },
  repeat: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
      return this.texture.repeat;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");
      this.texture.repeat = value;
    }
  },
  format: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
      return this.texture.format;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
      this.texture.format = value;
    }
  },
  type: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
      return this.texture.type;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");
      this.texture.type = value;
    }
  },
  generateMipmaps: {
    get: function() {
      console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
      return this.texture.generateMipmaps;
    },
    set: function(value) {
      console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");
      this.texture.generateMipmaps = value;
    }
  }
});
Object.defineProperties(Audio.prototype, {
  load: {
    value: function(file) {
      console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
      const scope = this;
      const audioLoader = new AudioLoader();
      audioLoader.load(file, function(buffer) {
        scope.setBuffer(buffer);
      });
      return this;
    }
  },
  startTime: {
    set: function() {
      console.warn("THREE.Audio: .startTime is now .play( delay ).");
    }
  }
});
AudioAnalyser.prototype.getData = function() {
  console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");
  return this.getFrequencyData();
};
CubeCamera.prototype.updateCubeMap = function(renderer2, scene) {
  console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");
  return this.update(renderer2, scene);
};
CubeCamera.prototype.clear = function(renderer2, color, depth, stencil) {
  console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear().");
  return this.renderTarget.clear(renderer2, color, depth, stencil);
};
const GeometryUtils = {
  merge: function(geometry1, geometry2, materialIndexOffset) {
    console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");
    let matrix;
    if (geometry2.isMesh) {
      geometry2.matrixAutoUpdate && geometry2.updateMatrix();
      matrix = geometry2.matrix;
      geometry2 = geometry2.geometry;
    }
    geometry1.merge(geometry2, matrix, materialIndexOffset);
  },
  center: function(geometry) {
    console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");
    return geometry.center();
  }
};
ImageUtils.crossOrigin = void 0;
ImageUtils.loadTexture = function(url, mapping, onLoad, onError) {
  console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
  const loader = new TextureLoader();
  loader.setCrossOrigin(this.crossOrigin);
  const texture = loader.load(url, onLoad, void 0, onError);
  if (mapping)
    texture.mapping = mapping;
  return texture;
};
ImageUtils.loadTextureCube = function(urls, mapping, onLoad, onError) {
  console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
  const loader = new CubeTextureLoader();
  loader.setCrossOrigin(this.crossOrigin);
  const texture = loader.load(urls, onLoad, void 0, onError);
  if (mapping)
    texture.mapping = mapping;
  return texture;
};
ImageUtils.loadCompressedTexture = function() {
  console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.");
};
ImageUtils.loadCompressedTextureCube = function() {
  console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.");
};
function CanvasRenderer() {
  console.error("THREE.CanvasRenderer has been removed");
}
function JSONLoader() {
  console.error("THREE.JSONLoader has been removed.");
}
const SceneUtils = {
  createMultiMaterialObject: function() {
    console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
  },
  detach: function() {
    console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
  },
  attach: function() {
    console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js");
  }
};
function LensFlare() {
  console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js");
}
if (typeof __THREE_DEVTOOLS__ !== "undefined") {
  __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
    revision: REVISION
  } }));
}
var t = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  ACESFilmicToneMapping,
  AddEquation,
  AddOperation,
  AdditiveAnimationBlendMode,
  AdditiveBlending,
  AlphaFormat,
  AlwaysDepth,
  AlwaysStencilFunc,
  AmbientLight,
  AmbientLightProbe,
  AnimationClip,
  AnimationLoader,
  AnimationMixer,
  AnimationObjectGroup,
  AnimationUtils,
  ArcCurve,
  ArrayCamera,
  ArrowHelper,
  Audio,
  AudioAnalyser,
  AudioContext,
  AudioListener,
  AudioLoader,
  AxesHelper,
  AxisHelper,
  BackSide,
  BasicDepthPacking,
  BasicShadowMap,
  BinaryTextureLoader,
  Bone,
  BooleanKeyframeTrack,
  BoundingBoxHelper,
  Box2,
  Box3,
  Box3Helper,
  BoxBufferGeometry,
  BoxGeometry,
  BoxHelper,
  BufferAttribute,
  BufferGeometry,
  BufferGeometryLoader,
  ByteType,
  Cache,
  Camera,
  CameraHelper,
  CanvasRenderer,
  CanvasTexture,
  CatmullRomCurve3,
  CineonToneMapping,
  CircleBufferGeometry,
  CircleGeometry,
  ClampToEdgeWrapping,
  Clock,
  ClosedSplineCurve3,
  Color,
  ColorKeyframeTrack,
  CompressedTexture,
  CompressedTextureLoader,
  ConeBufferGeometry,
  ConeGeometry,
  CubeCamera,
  CubeGeometry: BoxGeometry,
  CubeReflectionMapping,
  CubeRefractionMapping,
  CubeTexture,
  CubeTextureLoader,
  CubeUVReflectionMapping,
  CubeUVRefractionMapping,
  CubicBezierCurve,
  CubicBezierCurve3,
  CubicInterpolant,
  CullFaceBack,
  CullFaceFront,
  CullFaceFrontBack,
  CullFaceNone,
  Curve,
  CurvePath,
  CustomBlending,
  CustomToneMapping,
  CylinderBufferGeometry,
  CylinderGeometry,
  Cylindrical,
  DataTexture,
  DataTexture2DArray,
  DataTexture3D,
  DataTextureLoader,
  DecrementStencilOp,
  DecrementWrapStencilOp,
  DefaultLoadingManager,
  DepthFormat,
  DepthStencilFormat,
  DepthTexture,
  DirectionalLight,
  DirectionalLightHelper,
  DiscreteInterpolant,
  DodecahedronBufferGeometry,
  DodecahedronGeometry,
  DoubleSide,
  DstAlphaFactor,
  DstColorFactor,
  DynamicBufferAttribute,
  DynamicCopyUsage,
  DynamicDrawUsage,
  DynamicReadUsage,
  EdgesGeometry,
  EdgesHelper,
  EllipseCurve,
  EqualDepth,
  EqualStencilFunc,
  EquirectangularReflectionMapping,
  EquirectangularRefractionMapping,
  Euler,
  EventDispatcher,
  ExtrudeBufferGeometry,
  ExtrudeGeometry,
  Face3,
  Face4,
  FaceColors,
  FileLoader,
  FlatShading,
  Float32Attribute,
  Float32BufferAttribute,
  Float64Attribute,
  Float64BufferAttribute,
  FloatType,
  Fog,
  FogExp2,
  Font,
  FontLoader,
  FrontSide,
  Frustum,
  GLBufferAttribute,
  GLSL1,
  GLSL3,
  GammaEncoding,
  Geometry,
  GeometryUtils,
  GreaterDepth,
  GreaterEqualDepth,
  GreaterEqualStencilFunc,
  GreaterStencilFunc,
  GridHelper,
  Group,
  HalfFloatType,
  HemisphereLight,
  HemisphereLightHelper,
  HemisphereLightProbe,
  IcosahedronBufferGeometry,
  IcosahedronGeometry,
  ImageBitmapLoader,
  ImageLoader,
  ImageUtils,
  ImmediateRenderObject,
  IncrementStencilOp,
  IncrementWrapStencilOp,
  InstancedBufferAttribute,
  InstancedBufferGeometry,
  InstancedInterleavedBuffer,
  InstancedMesh,
  Int16Attribute,
  Int16BufferAttribute,
  Int32Attribute,
  Int32BufferAttribute,
  Int8Attribute,
  Int8BufferAttribute,
  IntType,
  InterleavedBuffer,
  InterleavedBufferAttribute,
  Interpolant,
  InterpolateDiscrete,
  InterpolateLinear,
  InterpolateSmooth,
  InvertStencilOp,
  JSONLoader,
  KeepStencilOp,
  KeyframeTrack,
  LOD,
  LatheBufferGeometry,
  LatheGeometry,
  Layers,
  LensFlare,
  LessDepth,
  LessEqualDepth,
  LessEqualStencilFunc,
  LessStencilFunc,
  Light,
  LightProbe,
  Line,
  Line3,
  LineBasicMaterial,
  LineCurve,
  LineCurve3,
  LineDashedMaterial,
  LineLoop,
  LinePieces,
  LineSegments,
  LineStrip,
  LinearEncoding,
  LinearFilter,
  LinearInterpolant,
  LinearMipMapLinearFilter,
  LinearMipMapNearestFilter,
  LinearMipmapLinearFilter,
  LinearMipmapNearestFilter,
  LinearToneMapping,
  Loader,
  LoaderUtils,
  LoadingManager,
  LogLuvEncoding,
  LoopOnce,
  LoopPingPong,
  LoopRepeat,
  LuminanceAlphaFormat,
  LuminanceFormat,
  MOUSE,
  Material,
  MaterialLoader,
  Math: MathUtils,
  MathUtils,
  Matrix3,
  Matrix4,
  MaxEquation,
  Mesh,
  MeshBasicMaterial,
  MeshDepthMaterial,
  MeshDistanceMaterial,
  MeshFaceMaterial,
  MeshLambertMaterial,
  MeshMatcapMaterial,
  MeshNormalMaterial,
  MeshPhongMaterial,
  MeshPhysicalMaterial,
  MeshStandardMaterial,
  MeshToonMaterial,
  MinEquation,
  MirroredRepeatWrapping,
  MixOperation,
  MultiMaterial,
  MultiplyBlending,
  MultiplyOperation,
  NearestFilter,
  NearestMipMapLinearFilter,
  NearestMipMapNearestFilter,
  NearestMipmapLinearFilter,
  NearestMipmapNearestFilter,
  NeverDepth,
  NeverStencilFunc,
  NoBlending,
  NoColors,
  NoToneMapping,
  NormalAnimationBlendMode,
  NormalBlending,
  NotEqualDepth,
  NotEqualStencilFunc,
  NumberKeyframeTrack,
  Object3D,
  ObjectLoader,
  ObjectSpaceNormalMap,
  OctahedronBufferGeometry,
  OctahedronGeometry,
  OneFactor,
  OneMinusDstAlphaFactor,
  OneMinusDstColorFactor,
  OneMinusSrcAlphaFactor,
  OneMinusSrcColorFactor,
  OrthographicCamera,
  PCFShadowMap,
  PCFSoftShadowMap,
  PMREMGenerator,
  ParametricBufferGeometry,
  ParametricGeometry,
  Particle,
  ParticleBasicMaterial,
  ParticleSystem,
  ParticleSystemMaterial,
  Path,
  PerspectiveCamera,
  Plane,
  PlaneBufferGeometry,
  PlaneGeometry,
  PlaneHelper,
  PointCloud,
  PointCloudMaterial,
  PointLight,
  PointLightHelper,
  Points,
  PointsMaterial,
  PolarGridHelper,
  PolyhedronBufferGeometry,
  PolyhedronGeometry,
  PositionalAudio,
  PropertyBinding,
  PropertyMixer,
  QuadraticBezierCurve,
  QuadraticBezierCurve3,
  Quaternion,
  QuaternionKeyframeTrack,
  QuaternionLinearInterpolant,
  REVISION,
  RGBADepthPacking,
  RGBAFormat,
  RGBAIntegerFormat,
  RGBA_ASTC_10x10_Format,
  RGBA_ASTC_10x5_Format,
  RGBA_ASTC_10x6_Format,
  RGBA_ASTC_10x8_Format,
  RGBA_ASTC_12x10_Format,
  RGBA_ASTC_12x12_Format,
  RGBA_ASTC_4x4_Format,
  RGBA_ASTC_5x4_Format,
  RGBA_ASTC_5x5_Format,
  RGBA_ASTC_6x5_Format,
  RGBA_ASTC_6x6_Format,
  RGBA_ASTC_8x5_Format,
  RGBA_ASTC_8x6_Format,
  RGBA_ASTC_8x8_Format,
  RGBA_BPTC_Format,
  RGBA_ETC2_EAC_Format,
  RGBA_PVRTC_2BPPV1_Format,
  RGBA_PVRTC_4BPPV1_Format,
  RGBA_S3TC_DXT1_Format,
  RGBA_S3TC_DXT3_Format,
  RGBA_S3TC_DXT5_Format,
  RGBDEncoding,
  RGBEEncoding,
  RGBEFormat,
  RGBFormat,
  RGBIntegerFormat,
  RGBM16Encoding,
  RGBM7Encoding,
  RGB_ETC1_Format,
  RGB_ETC2_Format,
  RGB_PVRTC_2BPPV1_Format,
  RGB_PVRTC_4BPPV1_Format,
  RGB_S3TC_DXT1_Format,
  RGFormat,
  RGIntegerFormat,
  RawShaderMaterial,
  Ray,
  Raycaster,
  RectAreaLight,
  RedFormat,
  RedIntegerFormat,
  ReinhardToneMapping,
  RepeatWrapping,
  ReplaceStencilOp,
  ReverseSubtractEquation,
  RingBufferGeometry,
  RingGeometry,
  SRGB8_ALPHA8_ASTC_10x10_Format,
  SRGB8_ALPHA8_ASTC_10x5_Format,
  SRGB8_ALPHA8_ASTC_10x6_Format,
  SRGB8_ALPHA8_ASTC_10x8_Format,
  SRGB8_ALPHA8_ASTC_12x10_Format,
  SRGB8_ALPHA8_ASTC_12x12_Format,
  SRGB8_ALPHA8_ASTC_4x4_Format,
  SRGB8_ALPHA8_ASTC_5x4_Format,
  SRGB8_ALPHA8_ASTC_5x5_Format,
  SRGB8_ALPHA8_ASTC_6x5_Format,
  SRGB8_ALPHA8_ASTC_6x6_Format,
  SRGB8_ALPHA8_ASTC_8x5_Format,
  SRGB8_ALPHA8_ASTC_8x6_Format,
  SRGB8_ALPHA8_ASTC_8x8_Format,
  Scene,
  SceneUtils,
  ShaderChunk,
  ShaderLib,
  ShaderMaterial,
  ShadowMaterial,
  Shape,
  ShapeBufferGeometry,
  ShapeGeometry,
  ShapePath,
  ShapeUtils,
  ShortType,
  Skeleton,
  SkeletonHelper,
  SkinnedMesh,
  SmoothShading,
  Sphere,
  SphereBufferGeometry,
  SphereGeometry,
  Spherical,
  SphericalHarmonics3,
  Spline,
  SplineCurve,
  SplineCurve3,
  SpotLight,
  SpotLightHelper,
  Sprite,
  SpriteMaterial,
  SrcAlphaFactor,
  SrcAlphaSaturateFactor,
  SrcColorFactor,
  StaticCopyUsage,
  StaticDrawUsage,
  StaticReadUsage,
  StereoCamera,
  StreamCopyUsage,
  StreamDrawUsage,
  StreamReadUsage,
  StringKeyframeTrack,
  SubtractEquation,
  SubtractiveBlending,
  TOUCH,
  TangentSpaceNormalMap,
  TetrahedronBufferGeometry,
  TetrahedronGeometry,
  TextBufferGeometry,
  TextGeometry,
  Texture,
  TextureLoader,
  TorusBufferGeometry,
  TorusGeometry,
  TorusKnotBufferGeometry,
  TorusKnotGeometry,
  Triangle,
  TriangleFanDrawMode,
  TriangleStripDrawMode,
  TrianglesDrawMode,
  TubeBufferGeometry,
  TubeGeometry,
  UVMapping,
  Uint16Attribute,
  Uint16BufferAttribute,
  Uint32Attribute,
  Uint32BufferAttribute,
  Uint8Attribute,
  Uint8BufferAttribute,
  Uint8ClampedAttribute,
  Uint8ClampedBufferAttribute,
  Uniform,
  UniformsLib,
  UniformsUtils,
  UnsignedByteType,
  UnsignedInt248Type,
  UnsignedIntType,
  UnsignedShort4444Type,
  UnsignedShort5551Type,
  UnsignedShort565Type,
  UnsignedShortType,
  VSMShadowMap,
  Vector2,
  Vector3,
  Vector4,
  VectorKeyframeTrack,
  Vertex,
  VertexColors,
  VideoTexture,
  WebGL1Renderer,
  WebGLCubeRenderTarget,
  WebGLMultisampleRenderTarget,
  WebGLRenderTarget,
  WebGLRenderTargetCube,
  WebGLRenderer,
  WebGLUtils,
  WireframeGeometry,
  WireframeHelper,
  WrapAroundEnding,
  XHRLoader,
  ZeroCurvatureEnding,
  ZeroFactor,
  ZeroSlopeEnding,
  ZeroStencilOp,
  sRGBEncoding
});
class e {
  constructor(t3 = 0, e2 = 0) {
    this.x = t3, this.y = e2;
  }
  get width() {
    return this.x;
  }
  set width(t3) {
    this.x = t3;
  }
  get height() {
    return this.y;
  }
  set height(t3) {
    this.y = t3;
  }
  set(t3, e2) {
    return this.x = t3, this.y = e2, this;
  }
  setScalar(t3) {
    return this.x = t3, this.y = t3, this;
  }
  setX(t3) {
    return this.x = t3, this;
  }
  setY(t3) {
    return this.y = t3, this;
  }
  setComponent(t3, e2) {
    switch (t3) {
      case 0:
        this.x = e2;
        break;
      case 1:
        this.y = e2;
        break;
      default:
        throw new Error("index is out of range: " + t3);
    }
    return this;
  }
  getComponent(t3) {
    switch (t3) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + t3);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(t3) {
    return this.x = t3.x, this.y = t3.y, this;
  }
  add(t3, e2) {
    return e2 !== void 0 ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t3, e2)) : (this.x += t3.x, this.y += t3.y, this);
  }
  addScalar(t3) {
    return this.x += t3, this.y += t3, this;
  }
  addVectors(t3, e2) {
    return this.x = t3.x + e2.x, this.y = t3.y + e2.y, this;
  }
  addScaledVector(t3, e2) {
    return this.x += t3.x * e2, this.y += t3.y * e2, this;
  }
  sub(t3, e2) {
    return e2 !== void 0 ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t3, e2)) : (this.x -= t3.x, this.y -= t3.y, this);
  }
  subScalar(t3) {
    return this.x -= t3, this.y -= t3, this;
  }
  subVectors(t3, e2) {
    return this.x = t3.x - e2.x, this.y = t3.y - e2.y, this;
  }
  multiply(t3) {
    return this.x *= t3.x, this.y *= t3.y, this;
  }
  multiplyScalar(t3) {
    return this.x *= t3, this.y *= t3, this;
  }
  divide(t3) {
    return this.x /= t3.x, this.y /= t3.y, this;
  }
  divideScalar(t3) {
    return this.multiplyScalar(1 / t3);
  }
  applyMatrix3(t3) {
    const e2 = this.x, r2 = this.y, n2 = t3.elements;
    return this.x = n2[0] * e2 + n2[3] * r2 + n2[6], this.y = n2[1] * e2 + n2[4] * r2 + n2[7], this;
  }
  min(t3) {
    return this.x = Math.min(this.x, t3.x), this.y = Math.min(this.y, t3.y), this;
  }
  max(t3) {
    return this.x = Math.max(this.x, t3.x), this.y = Math.max(this.y, t3.y), this;
  }
  clamp(t3, e2) {
    return this.x = Math.max(t3.x, Math.min(e2.x, this.x)), this.y = Math.max(t3.y, Math.min(e2.y, this.y)), this;
  }
  clampScalar(t3, e2) {
    return this.x = Math.max(t3, Math.min(e2, this.x)), this.y = Math.max(t3, Math.min(e2, this.y)), this;
  }
  clampLength(t3, e2) {
    const r2 = this.length();
    return this.divideScalar(r2 || 1).multiplyScalar(Math.max(t3, Math.min(e2, r2)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
  }
  roundToZero() {
    return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this;
  }
  dot(t3) {
    return this.x * t3.x + this.y * t3.y;
  }
  cross(t3) {
    return this.x * t3.y - this.y * t3.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    return Math.atan2(-this.y, -this.x) + Math.PI;
  }
  distanceTo(t3) {
    return Math.sqrt(this.distanceToSquared(t3));
  }
  distanceToSquared(t3) {
    const e2 = this.x - t3.x, r2 = this.y - t3.y;
    return e2 * e2 + r2 * r2;
  }
  manhattanDistanceTo(t3) {
    return Math.abs(this.x - t3.x) + Math.abs(this.y - t3.y);
  }
  setLength(t3) {
    return this.normalize().multiplyScalar(t3);
  }
  lerp(t3, e2) {
    return this.x += (t3.x - this.x) * e2, this.y += (t3.y - this.y) * e2, this;
  }
  lerpVectors(t3, e2, r2) {
    return this.x = t3.x + (e2.x - t3.x) * r2, this.y = t3.y + (e2.y - t3.y) * r2, this;
  }
  equals(t3) {
    return t3.x === this.x && t3.y === this.y;
  }
  fromArray(t3, e2 = 0) {
    return this.x = t3[e2], this.y = t3[e2 + 1], this;
  }
  toArray(t3 = [], e2 = 0) {
    return t3[e2] = this.x, t3[e2 + 1] = this.y, t3;
  }
  fromBufferAttribute(t3, e2, r2) {
    return r2 !== void 0 && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."), this.x = t3.getX(e2), this.y = t3.getY(e2), this;
  }
  rotateAround(t3, e2) {
    const r2 = Math.cos(e2), n2 = Math.sin(e2), i2 = this.x - t3.x, s2 = this.y - t3.y;
    return this.x = i2 * r2 - s2 * n2 + t3.x, this.y = i2 * n2 + s2 * r2 + t3.y, this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this;
  }
}
e.prototype.isVector2 = true;
const r = [];
for (let qh = 0; qh < 256; qh++)
  r[qh] = (qh < 16 ? "0" : "") + qh.toString(16);
let n = 1234567;
const i = Math.PI / 180, s = 180 / Math.PI;
function a(t3, e2, r2) {
  return Math.max(e2, Math.min(r2, t3));
}
function o(t3, e2) {
  return (t3 % e2 + e2) % e2;
}
function u(t3, e2, r2) {
  return (1 - r2) * t3 + r2 * e2;
}
Object.freeze({ __proto__: null, [Symbol.toStringTag]: "Module", DEG2RAD: i, RAD2DEG: s, generateUUID: function() {
  const t3 = 4294967295 * Math.random() | 0, e2 = 4294967295 * Math.random() | 0, n2 = 4294967295 * Math.random() | 0, i2 = 4294967295 * Math.random() | 0;
  return (r[255 & t3] + r[t3 >> 8 & 255] + r[t3 >> 16 & 255] + r[t3 >> 24 & 255] + "-" + r[255 & e2] + r[e2 >> 8 & 255] + "-" + r[e2 >> 16 & 15 | 64] + r[e2 >> 24 & 255] + "-" + r[63 & n2 | 128] + r[n2 >> 8 & 255] + "-" + r[n2 >> 16 & 255] + r[n2 >> 24 & 255] + r[255 & i2] + r[i2 >> 8 & 255] + r[i2 >> 16 & 255] + r[i2 >> 24 & 255]).toUpperCase();
}, clamp: a, euclideanModulo: o, mapLinear: function(t3, e2, r2, n2, i2) {
  return n2 + (t3 - e2) * (i2 - n2) / (r2 - e2);
}, inverseLerp: function(t3, e2, r2) {
  return t3 !== e2 ? (r2 - t3) / (e2 - t3) : 0;
}, lerp: u, damp: function(t3, e2, r2, n2) {
  return u(t3, e2, 1 - Math.exp(-r2 * n2));
}, pingpong: function(t3, e2 = 1) {
  return e2 - Math.abs(o(t3, 2 * e2) - e2);
}, smoothstep: function(t3, e2, r2) {
  return t3 <= e2 ? 0 : t3 >= r2 ? 1 : (t3 = (t3 - e2) / (r2 - e2)) * t3 * (3 - 2 * t3);
}, smootherstep: function(t3, e2, r2) {
  return t3 <= e2 ? 0 : t3 >= r2 ? 1 : (t3 = (t3 - e2) / (r2 - e2)) * t3 * t3 * (t3 * (6 * t3 - 15) + 10);
}, randInt: function(t3, e2) {
  return t3 + Math.floor(Math.random() * (e2 - t3 + 1));
}, randFloat: function(t3, e2) {
  return t3 + Math.random() * (e2 - t3);
}, randFloatSpread: function(t3) {
  return t3 * (0.5 - Math.random());
}, seededRandom: function(t3) {
  return t3 !== void 0 && (n = t3 % 2147483647), n = 16807 * n % 2147483647, (n - 1) / 2147483646;
}, degToRad: function(t3) {
  return t3 * i;
}, radToDeg: function(t3) {
  return t3 * s;
}, isPowerOfTwo: function(t3) {
  return (t3 & t3 - 1) == 0 && t3 !== 0;
}, ceilPowerOfTwo: function(t3) {
  return Math.pow(2, Math.ceil(Math.log(t3) / Math.LN2));
}, floorPowerOfTwo: function(t3) {
  return Math.pow(2, Math.floor(Math.log(t3) / Math.LN2));
}, setQuaternionFromProperEuler: function(t3, e2, r2, n2, i2) {
  const s2 = Math.cos, a2 = Math.sin, o2 = s2(r2 / 2), u2 = a2(r2 / 2), h = s2((e2 + n2) / 2), c2 = a2((e2 + n2) / 2), l2 = s2((e2 - n2) / 2), p2 = a2((e2 - n2) / 2), f2 = s2((n2 - e2) / 2), d = a2((n2 - e2) / 2);
  switch (i2) {
    case "XYX":
      t3.set(o2 * c2, u2 * l2, u2 * p2, o2 * h);
      break;
    case "YZY":
      t3.set(u2 * p2, o2 * c2, u2 * l2, o2 * h);
      break;
    case "ZXZ":
      t3.set(u2 * l2, u2 * p2, o2 * c2, o2 * h);
      break;
    case "XZX":
      t3.set(o2 * c2, u2 * d, u2 * f2, o2 * h);
      break;
    case "YXY":
      t3.set(u2 * f2, o2 * c2, u2 * d, o2 * h);
      break;
    case "ZYZ":
      t3.set(u2 * d, u2 * f2, o2 * c2, o2 * h);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + i2);
  }
} });
class c {
  constructor(t3 = 0, e2 = 0, r2 = 0, n2 = 1) {
    this._x = t3, this._y = e2, this._z = r2, this._w = n2;
  }
  static slerp(t3, e2, r2, n2) {
    return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."), r2.slerpQuaternions(t3, e2, n2);
  }
  static slerpFlat(t3, e2, r2, n2, i2, s2, a2) {
    let o2 = r2[n2 + 0], u2 = r2[n2 + 1], h = r2[n2 + 2], c2 = r2[n2 + 3];
    const l2 = i2[s2 + 0], p2 = i2[s2 + 1], f2 = i2[s2 + 2], d = i2[s2 + 3];
    if (a2 === 0)
      return t3[e2 + 0] = o2, t3[e2 + 1] = u2, t3[e2 + 2] = h, void (t3[e2 + 3] = c2);
    if (a2 === 1)
      return t3[e2 + 0] = l2, t3[e2 + 1] = p2, t3[e2 + 2] = f2, void (t3[e2 + 3] = d);
    if (c2 !== d || o2 !== l2 || u2 !== p2 || h !== f2) {
      let t4 = 1 - a2;
      const e3 = o2 * l2 + u2 * p2 + h * f2 + c2 * d, r3 = e3 >= 0 ? 1 : -1, n3 = 1 - e3 * e3;
      if (n3 > Number.EPSILON) {
        const i4 = Math.sqrt(n3), s3 = Math.atan2(i4, e3 * r3);
        t4 = Math.sin(t4 * s3) / i4, a2 = Math.sin(a2 * s3) / i4;
      }
      const i3 = a2 * r3;
      if (o2 = o2 * t4 + l2 * i3, u2 = u2 * t4 + p2 * i3, h = h * t4 + f2 * i3, c2 = c2 * t4 + d * i3, t4 === 1 - a2) {
        const t5 = 1 / Math.sqrt(o2 * o2 + u2 * u2 + h * h + c2 * c2);
        o2 *= t5, u2 *= t5, h *= t5, c2 *= t5;
      }
    }
    t3[e2] = o2, t3[e2 + 1] = u2, t3[e2 + 2] = h, t3[e2 + 3] = c2;
  }
  static multiplyQuaternionsFlat(t3, e2, r2, n2, i2, s2) {
    const a2 = r2[n2], o2 = r2[n2 + 1], u2 = r2[n2 + 2], h = r2[n2 + 3], c2 = i2[s2], l2 = i2[s2 + 1], p2 = i2[s2 + 2], f2 = i2[s2 + 3];
    return t3[e2] = a2 * f2 + h * c2 + o2 * p2 - u2 * l2, t3[e2 + 1] = o2 * f2 + h * l2 + u2 * c2 - a2 * p2, t3[e2 + 2] = u2 * f2 + h * p2 + a2 * l2 - o2 * c2, t3[e2 + 3] = h * f2 - a2 * c2 - o2 * l2 - u2 * p2, t3;
  }
  get x() {
    return this._x;
  }
  set x(t3) {
    this._x = t3, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(t3) {
    this._y = t3, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(t3) {
    this._z = t3, this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(t3) {
    this._w = t3, this._onChangeCallback();
  }
  set(t3, e2, r2, n2) {
    return this._x = t3, this._y = e2, this._z = r2, this._w = n2, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(t3) {
    return this._x = t3.x, this._y = t3.y, this._z = t3.z, this._w = t3.w, this._onChangeCallback(), this;
  }
  setFromEuler(t3, e2) {
    if (!t3 || !t3.isEuler)
      throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
    const r2 = t3._x, n2 = t3._y, i2 = t3._z, s2 = t3._order, a2 = Math.cos, o2 = Math.sin, u2 = a2(r2 / 2), h = a2(n2 / 2), c2 = a2(i2 / 2), l2 = o2(r2 / 2), p2 = o2(n2 / 2), f2 = o2(i2 / 2);
    switch (s2) {
      case "XYZ":
        this._x = l2 * h * c2 + u2 * p2 * f2, this._y = u2 * p2 * c2 - l2 * h * f2, this._z = u2 * h * f2 + l2 * p2 * c2, this._w = u2 * h * c2 - l2 * p2 * f2;
        break;
      case "YXZ":
        this._x = l2 * h * c2 + u2 * p2 * f2, this._y = u2 * p2 * c2 - l2 * h * f2, this._z = u2 * h * f2 - l2 * p2 * c2, this._w = u2 * h * c2 + l2 * p2 * f2;
        break;
      case "ZXY":
        this._x = l2 * h * c2 - u2 * p2 * f2, this._y = u2 * p2 * c2 + l2 * h * f2, this._z = u2 * h * f2 + l2 * p2 * c2, this._w = u2 * h * c2 - l2 * p2 * f2;
        break;
      case "ZYX":
        this._x = l2 * h * c2 - u2 * p2 * f2, this._y = u2 * p2 * c2 + l2 * h * f2, this._z = u2 * h * f2 - l2 * p2 * c2, this._w = u2 * h * c2 + l2 * p2 * f2;
        break;
      case "YZX":
        this._x = l2 * h * c2 + u2 * p2 * f2, this._y = u2 * p2 * c2 + l2 * h * f2, this._z = u2 * h * f2 - l2 * p2 * c2, this._w = u2 * h * c2 - l2 * p2 * f2;
        break;
      case "XZY":
        this._x = l2 * h * c2 - u2 * p2 * f2, this._y = u2 * p2 * c2 - l2 * h * f2, this._z = u2 * h * f2 + l2 * p2 * c2, this._w = u2 * h * c2 + l2 * p2 * f2;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + s2);
    }
    return e2 !== false && this._onChangeCallback(), this;
  }
  setFromAxisAngle(t3, e2) {
    const r2 = e2 / 2, n2 = Math.sin(r2);
    return this._x = t3.x * n2, this._y = t3.y * n2, this._z = t3.z * n2, this._w = Math.cos(r2), this._onChangeCallback(), this;
  }
  setFromRotationMatrix(t3) {
    const e2 = t3.elements, r2 = e2[0], n2 = e2[4], i2 = e2[8], s2 = e2[1], a2 = e2[5], o2 = e2[9], u2 = e2[2], h = e2[6], c2 = e2[10], l2 = r2 + a2 + c2;
    if (l2 > 0) {
      const t4 = 0.5 / Math.sqrt(l2 + 1);
      this._w = 0.25 / t4, this._x = (h - o2) * t4, this._y = (i2 - u2) * t4, this._z = (s2 - n2) * t4;
    } else if (r2 > a2 && r2 > c2) {
      const t4 = 2 * Math.sqrt(1 + r2 - a2 - c2);
      this._w = (h - o2) / t4, this._x = 0.25 * t4, this._y = (n2 + s2) / t4, this._z = (i2 + u2) / t4;
    } else if (a2 > c2) {
      const t4 = 2 * Math.sqrt(1 + a2 - r2 - c2);
      this._w = (i2 - u2) / t4, this._x = (n2 + s2) / t4, this._y = 0.25 * t4, this._z = (o2 + h) / t4;
    } else {
      const t4 = 2 * Math.sqrt(1 + c2 - r2 - a2);
      this._w = (s2 - n2) / t4, this._x = (i2 + u2) / t4, this._y = (o2 + h) / t4, this._z = 0.25 * t4;
    }
    return this._onChangeCallback(), this;
  }
  setFromUnitVectors(t3, e2) {
    let r2 = t3.dot(e2) + 1;
    return r2 < Number.EPSILON ? (r2 = 0, Math.abs(t3.x) > Math.abs(t3.z) ? (this._x = -t3.y, this._y = t3.x, this._z = 0, this._w = r2) : (this._x = 0, this._y = -t3.z, this._z = t3.y, this._w = r2)) : (this._x = t3.y * e2.z - t3.z * e2.y, this._y = t3.z * e2.x - t3.x * e2.z, this._z = t3.x * e2.y - t3.y * e2.x, this._w = r2), this.normalize();
  }
  angleTo(t3) {
    return 2 * Math.acos(Math.abs(a(this.dot(t3), -1, 1)));
  }
  rotateTowards(t3, e2) {
    const r2 = this.angleTo(t3);
    if (r2 === 0)
      return this;
    const n2 = Math.min(1, e2 / r2);
    return this.slerp(t3, n2), this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  invert() {
    return this.conjugate();
  }
  conjugate() {
    return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
  }
  dot(t3) {
    return this._x * t3._x + this._y * t3._y + this._z * t3._z + this._w * t3._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let t3 = this.length();
    return t3 === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (t3 = 1 / t3, this._x = this._x * t3, this._y = this._y * t3, this._z = this._z * t3, this._w = this._w * t3), this._onChangeCallback(), this;
  }
  multiply(t3, e2) {
    return e2 !== void 0 ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(t3, e2)) : this.multiplyQuaternions(this, t3);
  }
  premultiply(t3) {
    return this.multiplyQuaternions(t3, this);
  }
  multiplyQuaternions(t3, e2) {
    const r2 = t3._x, n2 = t3._y, i2 = t3._z, s2 = t3._w, a2 = e2._x, o2 = e2._y, u2 = e2._z, h = e2._w;
    return this._x = r2 * h + s2 * a2 + n2 * u2 - i2 * o2, this._y = n2 * h + s2 * o2 + i2 * a2 - r2 * u2, this._z = i2 * h + s2 * u2 + r2 * o2 - n2 * a2, this._w = s2 * h - r2 * a2 - n2 * o2 - i2 * u2, this._onChangeCallback(), this;
  }
  slerp(t3, e2) {
    if (e2 === 0)
      return this;
    if (e2 === 1)
      return this.copy(t3);
    const r2 = this._x, n2 = this._y, i2 = this._z, s2 = this._w;
    let a2 = s2 * t3._w + r2 * t3._x + n2 * t3._y + i2 * t3._z;
    if (a2 < 0 ? (this._w = -t3._w, this._x = -t3._x, this._y = -t3._y, this._z = -t3._z, a2 = -a2) : this.copy(t3), a2 >= 1)
      return this._w = s2, this._x = r2, this._y = n2, this._z = i2, this;
    const o2 = 1 - a2 * a2;
    if (o2 <= Number.EPSILON) {
      const t4 = 1 - e2;
      return this._w = t4 * s2 + e2 * this._w, this._x = t4 * r2 + e2 * this._x, this._y = t4 * n2 + e2 * this._y, this._z = t4 * i2 + e2 * this._z, this.normalize(), this._onChangeCallback(), this;
    }
    const u2 = Math.sqrt(o2), h = Math.atan2(u2, a2), c2 = Math.sin((1 - e2) * h) / u2, l2 = Math.sin(e2 * h) / u2;
    return this._w = s2 * c2 + this._w * l2, this._x = r2 * c2 + this._x * l2, this._y = n2 * c2 + this._y * l2, this._z = i2 * c2 + this._z * l2, this._onChangeCallback(), this;
  }
  slerpQuaternions(t3, e2, r2) {
    this.copy(t3).slerp(e2, r2);
  }
  equals(t3) {
    return t3._x === this._x && t3._y === this._y && t3._z === this._z && t3._w === this._w;
  }
  fromArray(t3, e2 = 0) {
    return this._x = t3[e2], this._y = t3[e2 + 1], this._z = t3[e2 + 2], this._w = t3[e2 + 3], this._onChangeCallback(), this;
  }
  toArray(t3 = [], e2 = 0) {
    return t3[e2] = this._x, t3[e2 + 1] = this._y, t3[e2 + 2] = this._z, t3[e2 + 3] = this._w, t3;
  }
  fromBufferAttribute(t3, e2) {
    return this._x = t3.getX(e2), this._y = t3.getY(e2), this._z = t3.getZ(e2), this._w = t3.getW(e2), this;
  }
  _onChange(t3) {
    return this._onChangeCallback = t3, this;
  }
  _onChangeCallback() {
  }
}
c.prototype.isQuaternion = true;
class l {
  constructor(t3 = 0, e2 = 0, r2 = 0) {
    this.x = t3, this.y = e2, this.z = r2;
  }
  set(t3, e2, r2) {
    return r2 === void 0 && (r2 = this.z), this.x = t3, this.y = e2, this.z = r2, this;
  }
  setScalar(t3) {
    return this.x = t3, this.y = t3, this.z = t3, this;
  }
  setX(t3) {
    return this.x = t3, this;
  }
  setY(t3) {
    return this.y = t3, this;
  }
  setZ(t3) {
    return this.z = t3, this;
  }
  setComponent(t3, e2) {
    switch (t3) {
      case 0:
        this.x = e2;
        break;
      case 1:
        this.y = e2;
        break;
      case 2:
        this.z = e2;
        break;
      default:
        throw new Error("index is out of range: " + t3);
    }
    return this;
  }
  getComponent(t3) {
    switch (t3) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + t3);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(t3) {
    return this.x = t3.x, this.y = t3.y, this.z = t3.z, this;
  }
  add(t3, e2) {
    return e2 !== void 0 ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(t3, e2)) : (this.x += t3.x, this.y += t3.y, this.z += t3.z, this);
  }
  addScalar(t3) {
    return this.x += t3, this.y += t3, this.z += t3, this;
  }
  addVectors(t3, e2) {
    return this.x = t3.x + e2.x, this.y = t3.y + e2.y, this.z = t3.z + e2.z, this;
  }
  addScaledVector(t3, e2) {
    return this.x += t3.x * e2, this.y += t3.y * e2, this.z += t3.z * e2, this;
  }
  sub(t3, e2) {
    return e2 !== void 0 ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(t3, e2)) : (this.x -= t3.x, this.y -= t3.y, this.z -= t3.z, this);
  }
  subScalar(t3) {
    return this.x -= t3, this.y -= t3, this.z -= t3, this;
  }
  subVectors(t3, e2) {
    return this.x = t3.x - e2.x, this.y = t3.y - e2.y, this.z = t3.z - e2.z, this;
  }
  multiply(t3, e2) {
    return e2 !== void 0 ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(t3, e2)) : (this.x *= t3.x, this.y *= t3.y, this.z *= t3.z, this);
  }
  multiplyScalar(t3) {
    return this.x *= t3, this.y *= t3, this.z *= t3, this;
  }
  multiplyVectors(t3, e2) {
    return this.x = t3.x * e2.x, this.y = t3.y * e2.y, this.z = t3.z * e2.z, this;
  }
  applyEuler(t3) {
    return t3 && t3.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."), this.applyQuaternion(f.setFromEuler(t3));
  }
  applyAxisAngle(t3, e2) {
    return this.applyQuaternion(f.setFromAxisAngle(t3, e2));
  }
  applyMatrix3(t3) {
    const e2 = this.x, r2 = this.y, n2 = this.z, i2 = t3.elements;
    return this.x = i2[0] * e2 + i2[3] * r2 + i2[6] * n2, this.y = i2[1] * e2 + i2[4] * r2 + i2[7] * n2, this.z = i2[2] * e2 + i2[5] * r2 + i2[8] * n2, this;
  }
  applyNormalMatrix(t3) {
    return this.applyMatrix3(t3).normalize();
  }
  applyMatrix4(t3) {
    const e2 = this.x, r2 = this.y, n2 = this.z, i2 = t3.elements, s2 = 1 / (i2[3] * e2 + i2[7] * r2 + i2[11] * n2 + i2[15]);
    return this.x = (i2[0] * e2 + i2[4] * r2 + i2[8] * n2 + i2[12]) * s2, this.y = (i2[1] * e2 + i2[5] * r2 + i2[9] * n2 + i2[13]) * s2, this.z = (i2[2] * e2 + i2[6] * r2 + i2[10] * n2 + i2[14]) * s2, this;
  }
  applyQuaternion(t3) {
    const e2 = this.x, r2 = this.y, n2 = this.z, i2 = t3.x, s2 = t3.y, a2 = t3.z, o2 = t3.w, u2 = o2 * e2 + s2 * n2 - a2 * r2, h = o2 * r2 + a2 * e2 - i2 * n2, c2 = o2 * n2 + i2 * r2 - s2 * e2, l2 = -i2 * e2 - s2 * r2 - a2 * n2;
    return this.x = u2 * o2 + l2 * -i2 + h * -a2 - c2 * -s2, this.y = h * o2 + l2 * -s2 + c2 * -i2 - u2 * -a2, this.z = c2 * o2 + l2 * -a2 + u2 * -s2 - h * -i2, this;
  }
  project(t3) {
    return this.applyMatrix4(t3.matrixWorldInverse).applyMatrix4(t3.projectionMatrix);
  }
  unproject(t3) {
    return this.applyMatrix4(t3.projectionMatrixInverse).applyMatrix4(t3.matrixWorld);
  }
  transformDirection(t3) {
    const e2 = this.x, r2 = this.y, n2 = this.z, i2 = t3.elements;
    return this.x = i2[0] * e2 + i2[4] * r2 + i2[8] * n2, this.y = i2[1] * e2 + i2[5] * r2 + i2[9] * n2, this.z = i2[2] * e2 + i2[6] * r2 + i2[10] * n2, this.normalize();
  }
  divide(t3) {
    return this.x /= t3.x, this.y /= t3.y, this.z /= t3.z, this;
  }
  divideScalar(t3) {
    return this.multiplyScalar(1 / t3);
  }
  min(t3) {
    return this.x = Math.min(this.x, t3.x), this.y = Math.min(this.y, t3.y), this.z = Math.min(this.z, t3.z), this;
  }
  max(t3) {
    return this.x = Math.max(this.x, t3.x), this.y = Math.max(this.y, t3.y), this.z = Math.max(this.z, t3.z), this;
  }
  clamp(t3, e2) {
    return this.x = Math.max(t3.x, Math.min(e2.x, this.x)), this.y = Math.max(t3.y, Math.min(e2.y, this.y)), this.z = Math.max(t3.z, Math.min(e2.z, this.z)), this;
  }
  clampScalar(t3, e2) {
    return this.x = Math.max(t3, Math.min(e2, this.x)), this.y = Math.max(t3, Math.min(e2, this.y)), this.z = Math.max(t3, Math.min(e2, this.z)), this;
  }
  clampLength(t3, e2) {
    const r2 = this.length();
    return this.divideScalar(r2 || 1).multiplyScalar(Math.max(t3, Math.min(e2, r2)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
  }
  roundToZero() {
    return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
  }
  dot(t3) {
    return this.x * t3.x + this.y * t3.y + this.z * t3.z;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(t3) {
    return this.normalize().multiplyScalar(t3);
  }
  lerp(t3, e2) {
    return this.x += (t3.x - this.x) * e2, this.y += (t3.y - this.y) * e2, this.z += (t3.z - this.z) * e2, this;
  }
  lerpVectors(t3, e2, r2) {
    return this.x = t3.x + (e2.x - t3.x) * r2, this.y = t3.y + (e2.y - t3.y) * r2, this.z = t3.z + (e2.z - t3.z) * r2, this;
  }
  cross(t3, e2) {
    return e2 !== void 0 ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(t3, e2)) : this.crossVectors(this, t3);
  }
  crossVectors(t3, e2) {
    const r2 = t3.x, n2 = t3.y, i2 = t3.z, s2 = e2.x, a2 = e2.y, o2 = e2.z;
    return this.x = n2 * o2 - i2 * a2, this.y = i2 * s2 - r2 * o2, this.z = r2 * a2 - n2 * s2, this;
  }
  projectOnVector(t3) {
    const e2 = t3.lengthSq();
    if (e2 === 0)
      return this.set(0, 0, 0);
    const r2 = t3.dot(this) / e2;
    return this.copy(t3).multiplyScalar(r2);
  }
  projectOnPlane(t3) {
    return p.copy(this).projectOnVector(t3), this.sub(p);
  }
  reflect(t3) {
    return this.sub(p.copy(t3).multiplyScalar(2 * this.dot(t3)));
  }
  angleTo(t3) {
    const e2 = Math.sqrt(this.lengthSq() * t3.lengthSq());
    if (e2 === 0)
      return Math.PI / 2;
    const r2 = this.dot(t3) / e2;
    return Math.acos(a(r2, -1, 1));
  }
  distanceTo(t3) {
    return Math.sqrt(this.distanceToSquared(t3));
  }
  distanceToSquared(t3) {
    const e2 = this.x - t3.x, r2 = this.y - t3.y, n2 = this.z - t3.z;
    return e2 * e2 + r2 * r2 + n2 * n2;
  }
  manhattanDistanceTo(t3) {
    return Math.abs(this.x - t3.x) + Math.abs(this.y - t3.y) + Math.abs(this.z - t3.z);
  }
  setFromSpherical(t3) {
    return this.setFromSphericalCoords(t3.radius, t3.phi, t3.theta);
  }
  setFromSphericalCoords(t3, e2, r2) {
    const n2 = Math.sin(e2) * t3;
    return this.x = n2 * Math.sin(r2), this.y = Math.cos(e2) * t3, this.z = n2 * Math.cos(r2), this;
  }
  setFromCylindrical(t3) {
    return this.setFromCylindricalCoords(t3.radius, t3.theta, t3.y);
  }
  setFromCylindricalCoords(t3, e2, r2) {
    return this.x = t3 * Math.sin(e2), this.y = r2, this.z = t3 * Math.cos(e2), this;
  }
  setFromMatrixPosition(t3) {
    const e2 = t3.elements;
    return this.x = e2[12], this.y = e2[13], this.z = e2[14], this;
  }
  setFromMatrixScale(t3) {
    const e2 = this.setFromMatrixColumn(t3, 0).length(), r2 = this.setFromMatrixColumn(t3, 1).length(), n2 = this.setFromMatrixColumn(t3, 2).length();
    return this.x = e2, this.y = r2, this.z = n2, this;
  }
  setFromMatrixColumn(t3, e2) {
    return this.fromArray(t3.elements, 4 * e2);
  }
  setFromMatrix3Column(t3, e2) {
    return this.fromArray(t3.elements, 3 * e2);
  }
  equals(t3) {
    return t3.x === this.x && t3.y === this.y && t3.z === this.z;
  }
  fromArray(t3, e2 = 0) {
    return this.x = t3[e2], this.y = t3[e2 + 1], this.z = t3[e2 + 2], this;
  }
  toArray(t3 = [], e2 = 0) {
    return t3[e2] = this.x, t3[e2 + 1] = this.y, t3[e2 + 2] = this.z, t3;
  }
  fromBufferAttribute(t3, e2, r2) {
    return r2 !== void 0 && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."), this.x = t3.getX(e2), this.y = t3.getY(e2), this.z = t3.getZ(e2), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
  }
}
l.prototype.isVector3 = true;
const p = new l(), f = new c();
class m {
  constructor() {
    this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
  }
  set(t3, e2, r2, n2, i2, s2, a2, o2, u2, h, c2, l2, p2, f2, d, m2) {
    const y2 = this.elements;
    return y2[0] = t3, y2[4] = e2, y2[8] = r2, y2[12] = n2, y2[1] = i2, y2[5] = s2, y2[9] = a2, y2[13] = o2, y2[2] = u2, y2[6] = h, y2[10] = c2, y2[14] = l2, y2[3] = p2, y2[7] = f2, y2[11] = d, y2[15] = m2, this;
  }
  identity() {
    return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
  }
  clone() {
    return new m().fromArray(this.elements);
  }
  copy(t3) {
    const e2 = this.elements, r2 = t3.elements;
    return e2[0] = r2[0], e2[1] = r2[1], e2[2] = r2[2], e2[3] = r2[3], e2[4] = r2[4], e2[5] = r2[5], e2[6] = r2[6], e2[7] = r2[7], e2[8] = r2[8], e2[9] = r2[9], e2[10] = r2[10], e2[11] = r2[11], e2[12] = r2[12], e2[13] = r2[13], e2[14] = r2[14], e2[15] = r2[15], this;
  }
  copyPosition(t3) {
    const e2 = this.elements, r2 = t3.elements;
    return e2[12] = r2[12], e2[13] = r2[13], e2[14] = r2[14], this;
  }
  setFromMatrix3(t3) {
    const e2 = t3.elements;
    return this.set(e2[0], e2[3], e2[6], 0, e2[1], e2[4], e2[7], 0, e2[2], e2[5], e2[8], 0, 0, 0, 0, 1), this;
  }
  extractBasis(t3, e2, r2) {
    return t3.setFromMatrixColumn(this, 0), e2.setFromMatrixColumn(this, 1), r2.setFromMatrixColumn(this, 2), this;
  }
  makeBasis(t3, e2, r2) {
    return this.set(t3.x, e2.x, r2.x, 0, t3.y, e2.y, r2.y, 0, t3.z, e2.z, r2.z, 0, 0, 0, 0, 1), this;
  }
  extractRotation(t3) {
    const e2 = this.elements, r2 = t3.elements, n2 = 1 / y.setFromMatrixColumn(t3, 0).length(), i2 = 1 / y.setFromMatrixColumn(t3, 1).length(), s2 = 1 / y.setFromMatrixColumn(t3, 2).length();
    return e2[0] = r2[0] * n2, e2[1] = r2[1] * n2, e2[2] = r2[2] * n2, e2[3] = 0, e2[4] = r2[4] * i2, e2[5] = r2[5] * i2, e2[6] = r2[6] * i2, e2[7] = 0, e2[8] = r2[8] * s2, e2[9] = r2[9] * s2, e2[10] = r2[10] * s2, e2[11] = 0, e2[12] = 0, e2[13] = 0, e2[14] = 0, e2[15] = 1, this;
  }
  makeRotationFromEuler(t3) {
    t3 && t3.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
    const e2 = this.elements, r2 = t3.x, n2 = t3.y, i2 = t3.z, s2 = Math.cos(r2), a2 = Math.sin(r2), o2 = Math.cos(n2), u2 = Math.sin(n2), h = Math.cos(i2), c2 = Math.sin(i2);
    if (t3.order === "XYZ") {
      const t4 = s2 * h, r3 = s2 * c2, n3 = a2 * h, i3 = a2 * c2;
      e2[0] = o2 * h, e2[4] = -o2 * c2, e2[8] = u2, e2[1] = r3 + n3 * u2, e2[5] = t4 - i3 * u2, e2[9] = -a2 * o2, e2[2] = i3 - t4 * u2, e2[6] = n3 + r3 * u2, e2[10] = s2 * o2;
    } else if (t3.order === "YXZ") {
      const t4 = o2 * h, r3 = o2 * c2, n3 = u2 * h, i3 = u2 * c2;
      e2[0] = t4 + i3 * a2, e2[4] = n3 * a2 - r3, e2[8] = s2 * u2, e2[1] = s2 * c2, e2[5] = s2 * h, e2[9] = -a2, e2[2] = r3 * a2 - n3, e2[6] = i3 + t4 * a2, e2[10] = s2 * o2;
    } else if (t3.order === "ZXY") {
      const t4 = o2 * h, r3 = o2 * c2, n3 = u2 * h, i3 = u2 * c2;
      e2[0] = t4 - i3 * a2, e2[4] = -s2 * c2, e2[8] = n3 + r3 * a2, e2[1] = r3 + n3 * a2, e2[5] = s2 * h, e2[9] = i3 - t4 * a2, e2[2] = -s2 * u2, e2[6] = a2, e2[10] = s2 * o2;
    } else if (t3.order === "ZYX") {
      const t4 = s2 * h, r3 = s2 * c2, n3 = a2 * h, i3 = a2 * c2;
      e2[0] = o2 * h, e2[4] = n3 * u2 - r3, e2[8] = t4 * u2 + i3, e2[1] = o2 * c2, e2[5] = i3 * u2 + t4, e2[9] = r3 * u2 - n3, e2[2] = -u2, e2[6] = a2 * o2, e2[10] = s2 * o2;
    } else if (t3.order === "YZX") {
      const t4 = s2 * o2, r3 = s2 * u2, n3 = a2 * o2, i3 = a2 * u2;
      e2[0] = o2 * h, e2[4] = i3 - t4 * c2, e2[8] = n3 * c2 + r3, e2[1] = c2, e2[5] = s2 * h, e2[9] = -a2 * h, e2[2] = -u2 * h, e2[6] = r3 * c2 + n3, e2[10] = t4 - i3 * c2;
    } else if (t3.order === "XZY") {
      const t4 = s2 * o2, r3 = s2 * u2, n3 = a2 * o2, i3 = a2 * u2;
      e2[0] = o2 * h, e2[4] = -c2, e2[8] = u2 * h, e2[1] = t4 * c2 + i3, e2[5] = s2 * h, e2[9] = r3 * c2 - n3, e2[2] = n3 * c2 - r3, e2[6] = a2 * h, e2[10] = i3 * c2 + t4;
    }
    return e2[3] = 0, e2[7] = 0, e2[11] = 0, e2[12] = 0, e2[13] = 0, e2[14] = 0, e2[15] = 1, this;
  }
  makeRotationFromQuaternion(t3) {
    return this.compose(v, t3, x);
  }
  lookAt(t3, e2, r2) {
    const n2 = this.elements;
    return _.subVectors(t3, e2), _.lengthSq() === 0 && (_.z = 1), _.normalize(), w.crossVectors(r2, _), w.lengthSq() === 0 && (Math.abs(r2.z) === 1 ? _.x += 1e-4 : _.z += 1e-4, _.normalize(), w.crossVectors(r2, _)), w.normalize(), b.crossVectors(_, w), n2[0] = w.x, n2[4] = b.x, n2[8] = _.x, n2[1] = w.y, n2[5] = b.y, n2[9] = _.y, n2[2] = w.z, n2[6] = b.z, n2[10] = _.z, this;
  }
  multiply(t3, e2) {
    return e2 !== void 0 ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(t3, e2)) : this.multiplyMatrices(this, t3);
  }
  premultiply(t3) {
    return this.multiplyMatrices(t3, this);
  }
  multiplyMatrices(t3, e2) {
    const r2 = t3.elements, n2 = e2.elements, i2 = this.elements, s2 = r2[0], a2 = r2[4], o2 = r2[8], u2 = r2[12], h = r2[1], c2 = r2[5], l2 = r2[9], p2 = r2[13], f2 = r2[2], d = r2[6], m2 = r2[10], y2 = r2[14], g2 = r2[3], v2 = r2[7], x2 = r2[11], w2 = r2[15], b2 = n2[0], _2 = n2[4], M2 = n2[8], N2 = n2[12], E2 = n2[1], S2 = n2[5], T2 = n2[9], O2 = n2[13], z2 = n2[2], C2 = n2[6], A2 = n2[10], R2 = n2[14], D2 = n2[3], k2 = n2[7], I2 = n2[11], L2 = n2[15];
    return i2[0] = s2 * b2 + a2 * E2 + o2 * z2 + u2 * D2, i2[4] = s2 * _2 + a2 * S2 + o2 * C2 + u2 * k2, i2[8] = s2 * M2 + a2 * T2 + o2 * A2 + u2 * I2, i2[12] = s2 * N2 + a2 * O2 + o2 * R2 + u2 * L2, i2[1] = h * b2 + c2 * E2 + l2 * z2 + p2 * D2, i2[5] = h * _2 + c2 * S2 + l2 * C2 + p2 * k2, i2[9] = h * M2 + c2 * T2 + l2 * A2 + p2 * I2, i2[13] = h * N2 + c2 * O2 + l2 * R2 + p2 * L2, i2[2] = f2 * b2 + d * E2 + m2 * z2 + y2 * D2, i2[6] = f2 * _2 + d * S2 + m2 * C2 + y2 * k2, i2[10] = f2 * M2 + d * T2 + m2 * A2 + y2 * I2, i2[14] = f2 * N2 + d * O2 + m2 * R2 + y2 * L2, i2[3] = g2 * b2 + v2 * E2 + x2 * z2 + w2 * D2, i2[7] = g2 * _2 + v2 * S2 + x2 * C2 + w2 * k2, i2[11] = g2 * M2 + v2 * T2 + x2 * A2 + w2 * I2, i2[15] = g2 * N2 + v2 * O2 + x2 * R2 + w2 * L2, this;
  }
  multiplyScalar(t3) {
    const e2 = this.elements;
    return e2[0] *= t3, e2[4] *= t3, e2[8] *= t3, e2[12] *= t3, e2[1] *= t3, e2[5] *= t3, e2[9] *= t3, e2[13] *= t3, e2[2] *= t3, e2[6] *= t3, e2[10] *= t3, e2[14] *= t3, e2[3] *= t3, e2[7] *= t3, e2[11] *= t3, e2[15] *= t3, this;
  }
  determinant() {
    const t3 = this.elements, e2 = t3[0], r2 = t3[4], n2 = t3[8], i2 = t3[12], s2 = t3[1], a2 = t3[5], o2 = t3[9], u2 = t3[13], h = t3[2], c2 = t3[6], l2 = t3[10], p2 = t3[14];
    return t3[3] * (+i2 * o2 * c2 - n2 * u2 * c2 - i2 * a2 * l2 + r2 * u2 * l2 + n2 * a2 * p2 - r2 * o2 * p2) + t3[7] * (+e2 * o2 * p2 - e2 * u2 * l2 + i2 * s2 * l2 - n2 * s2 * p2 + n2 * u2 * h - i2 * o2 * h) + t3[11] * (+e2 * u2 * c2 - e2 * a2 * p2 - i2 * s2 * c2 + r2 * s2 * p2 + i2 * a2 * h - r2 * u2 * h) + t3[15] * (-n2 * a2 * h - e2 * o2 * c2 + e2 * a2 * l2 + n2 * s2 * c2 - r2 * s2 * l2 + r2 * o2 * h);
  }
  transpose() {
    const t3 = this.elements;
    let e2;
    return e2 = t3[1], t3[1] = t3[4], t3[4] = e2, e2 = t3[2], t3[2] = t3[8], t3[8] = e2, e2 = t3[6], t3[6] = t3[9], t3[9] = e2, e2 = t3[3], t3[3] = t3[12], t3[12] = e2, e2 = t3[7], t3[7] = t3[13], t3[13] = e2, e2 = t3[11], t3[11] = t3[14], t3[14] = e2, this;
  }
  setPosition(t3, e2, r2) {
    const n2 = this.elements;
    return t3.isVector3 ? (n2[12] = t3.x, n2[13] = t3.y, n2[14] = t3.z) : (n2[12] = t3, n2[13] = e2, n2[14] = r2), this;
  }
  invert() {
    const t3 = this.elements, e2 = t3[0], r2 = t3[1], n2 = t3[2], i2 = t3[3], s2 = t3[4], a2 = t3[5], o2 = t3[6], u2 = t3[7], h = t3[8], c2 = t3[9], l2 = t3[10], p2 = t3[11], f2 = t3[12], d = t3[13], m2 = t3[14], y2 = t3[15], g2 = c2 * m2 * u2 - d * l2 * u2 + d * o2 * p2 - a2 * m2 * p2 - c2 * o2 * y2 + a2 * l2 * y2, v2 = f2 * l2 * u2 - h * m2 * u2 - f2 * o2 * p2 + s2 * m2 * p2 + h * o2 * y2 - s2 * l2 * y2, x2 = h * d * u2 - f2 * c2 * u2 + f2 * a2 * p2 - s2 * d * p2 - h * a2 * y2 + s2 * c2 * y2, w2 = f2 * c2 * o2 - h * d * o2 - f2 * a2 * l2 + s2 * d * l2 + h * a2 * m2 - s2 * c2 * m2, b2 = e2 * g2 + r2 * v2 + n2 * x2 + i2 * w2;
    if (b2 === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const _2 = 1 / b2;
    return t3[0] = g2 * _2, t3[1] = (d * l2 * i2 - c2 * m2 * i2 - d * n2 * p2 + r2 * m2 * p2 + c2 * n2 * y2 - r2 * l2 * y2) * _2, t3[2] = (a2 * m2 * i2 - d * o2 * i2 + d * n2 * u2 - r2 * m2 * u2 - a2 * n2 * y2 + r2 * o2 * y2) * _2, t3[3] = (c2 * o2 * i2 - a2 * l2 * i2 - c2 * n2 * u2 + r2 * l2 * u2 + a2 * n2 * p2 - r2 * o2 * p2) * _2, t3[4] = v2 * _2, t3[5] = (h * m2 * i2 - f2 * l2 * i2 + f2 * n2 * p2 - e2 * m2 * p2 - h * n2 * y2 + e2 * l2 * y2) * _2, t3[6] = (f2 * o2 * i2 - s2 * m2 * i2 - f2 * n2 * u2 + e2 * m2 * u2 + s2 * n2 * y2 - e2 * o2 * y2) * _2, t3[7] = (s2 * l2 * i2 - h * o2 * i2 + h * n2 * u2 - e2 * l2 * u2 - s2 * n2 * p2 + e2 * o2 * p2) * _2, t3[8] = x2 * _2, t3[9] = (f2 * c2 * i2 - h * d * i2 - f2 * r2 * p2 + e2 * d * p2 + h * r2 * y2 - e2 * c2 * y2) * _2, t3[10] = (s2 * d * i2 - f2 * a2 * i2 + f2 * r2 * u2 - e2 * d * u2 - s2 * r2 * y2 + e2 * a2 * y2) * _2, t3[11] = (h * a2 * i2 - s2 * c2 * i2 - h * r2 * u2 + e2 * c2 * u2 + s2 * r2 * p2 - e2 * a2 * p2) * _2, t3[12] = w2 * _2, t3[13] = (h * d * n2 - f2 * c2 * n2 + f2 * r2 * l2 - e2 * d * l2 - h * r2 * m2 + e2 * c2 * m2) * _2, t3[14] = (f2 * a2 * n2 - s2 * d * n2 - f2 * r2 * o2 + e2 * d * o2 + s2 * r2 * m2 - e2 * a2 * m2) * _2, t3[15] = (s2 * c2 * n2 - h * a2 * n2 + h * r2 * o2 - e2 * c2 * o2 - s2 * r2 * l2 + e2 * a2 * l2) * _2, this;
  }
  scale(t3) {
    const e2 = this.elements, r2 = t3.x, n2 = t3.y, i2 = t3.z;
    return e2[0] *= r2, e2[4] *= n2, e2[8] *= i2, e2[1] *= r2, e2[5] *= n2, e2[9] *= i2, e2[2] *= r2, e2[6] *= n2, e2[10] *= i2, e2[3] *= r2, e2[7] *= n2, e2[11] *= i2, this;
  }
  getMaxScaleOnAxis() {
    const t3 = this.elements, e2 = t3[0] * t3[0] + t3[1] * t3[1] + t3[2] * t3[2], r2 = t3[4] * t3[4] + t3[5] * t3[5] + t3[6] * t3[6], n2 = t3[8] * t3[8] + t3[9] * t3[9] + t3[10] * t3[10];
    return Math.sqrt(Math.max(e2, r2, n2));
  }
  makeTranslation(t3, e2, r2) {
    return this.set(1, 0, 0, t3, 0, 1, 0, e2, 0, 0, 1, r2, 0, 0, 0, 1), this;
  }
  makeRotationX(t3) {
    const e2 = Math.cos(t3), r2 = Math.sin(t3);
    return this.set(1, 0, 0, 0, 0, e2, -r2, 0, 0, r2, e2, 0, 0, 0, 0, 1), this;
  }
  makeRotationY(t3) {
    const e2 = Math.cos(t3), r2 = Math.sin(t3);
    return this.set(e2, 0, r2, 0, 0, 1, 0, 0, -r2, 0, e2, 0, 0, 0, 0, 1), this;
  }
  makeRotationZ(t3) {
    const e2 = Math.cos(t3), r2 = Math.sin(t3);
    return this.set(e2, -r2, 0, 0, r2, e2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
  }
  makeRotationAxis(t3, e2) {
    const r2 = Math.cos(e2), n2 = Math.sin(e2), i2 = 1 - r2, s2 = t3.x, a2 = t3.y, o2 = t3.z, u2 = i2 * s2, h = i2 * a2;
    return this.set(u2 * s2 + r2, u2 * a2 - n2 * o2, u2 * o2 + n2 * a2, 0, u2 * a2 + n2 * o2, h * a2 + r2, h * o2 - n2 * s2, 0, u2 * o2 - n2 * a2, h * o2 + n2 * s2, i2 * o2 * o2 + r2, 0, 0, 0, 0, 1), this;
  }
  makeScale(t3, e2, r2) {
    return this.set(t3, 0, 0, 0, 0, e2, 0, 0, 0, 0, r2, 0, 0, 0, 0, 1), this;
  }
  makeShear(t3, e2, r2, n2, i2, s2) {
    return this.set(1, r2, i2, 0, t3, 1, s2, 0, e2, n2, 1, 0, 0, 0, 0, 1), this;
  }
  compose(t3, e2, r2) {
    const n2 = this.elements, i2 = e2._x, s2 = e2._y, a2 = e2._z, o2 = e2._w, u2 = i2 + i2, h = s2 + s2, c2 = a2 + a2, l2 = i2 * u2, p2 = i2 * h, f2 = i2 * c2, d = s2 * h, m2 = s2 * c2, y2 = a2 * c2, g2 = o2 * u2, v2 = o2 * h, x2 = o2 * c2, w2 = r2.x, b2 = r2.y, _2 = r2.z;
    return n2[0] = (1 - (d + y2)) * w2, n2[1] = (p2 + x2) * w2, n2[2] = (f2 - v2) * w2, n2[3] = 0, n2[4] = (p2 - x2) * b2, n2[5] = (1 - (l2 + y2)) * b2, n2[6] = (m2 + g2) * b2, n2[7] = 0, n2[8] = (f2 + v2) * _2, n2[9] = (m2 - g2) * _2, n2[10] = (1 - (l2 + d)) * _2, n2[11] = 0, n2[12] = t3.x, n2[13] = t3.y, n2[14] = t3.z, n2[15] = 1, this;
  }
  decompose(t3, e2, r2) {
    const n2 = this.elements;
    let i2 = y.set(n2[0], n2[1], n2[2]).length();
    const s2 = y.set(n2[4], n2[5], n2[6]).length(), a2 = y.set(n2[8], n2[9], n2[10]).length();
    this.determinant() < 0 && (i2 = -i2), t3.x = n2[12], t3.y = n2[13], t3.z = n2[14], g.copy(this);
    const o2 = 1 / i2, u2 = 1 / s2, h = 1 / a2;
    return g.elements[0] *= o2, g.elements[1] *= o2, g.elements[2] *= o2, g.elements[4] *= u2, g.elements[5] *= u2, g.elements[6] *= u2, g.elements[8] *= h, g.elements[9] *= h, g.elements[10] *= h, e2.setFromRotationMatrix(g), r2.x = i2, r2.y = s2, r2.z = a2, this;
  }
  makePerspective(t3, e2, r2, n2, i2, s2) {
    s2 === void 0 && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
    const a2 = this.elements, o2 = 2 * i2 / (e2 - t3), u2 = 2 * i2 / (r2 - n2), h = (e2 + t3) / (e2 - t3), c2 = (r2 + n2) / (r2 - n2), l2 = -(s2 + i2) / (s2 - i2), p2 = -2 * s2 * i2 / (s2 - i2);
    return a2[0] = o2, a2[4] = 0, a2[8] = h, a2[12] = 0, a2[1] = 0, a2[5] = u2, a2[9] = c2, a2[13] = 0, a2[2] = 0, a2[6] = 0, a2[10] = l2, a2[14] = p2, a2[3] = 0, a2[7] = 0, a2[11] = -1, a2[15] = 0, this;
  }
  makeOrthographic(t3, e2, r2, n2, i2, s2) {
    const a2 = this.elements, o2 = 1 / (e2 - t3), u2 = 1 / (r2 - n2), h = 1 / (s2 - i2), c2 = (e2 + t3) * o2, l2 = (r2 + n2) * u2, p2 = (s2 + i2) * h;
    return a2[0] = 2 * o2, a2[4] = 0, a2[8] = 0, a2[12] = -c2, a2[1] = 0, a2[5] = 2 * u2, a2[9] = 0, a2[13] = -l2, a2[2] = 0, a2[6] = 0, a2[10] = -2 * h, a2[14] = -p2, a2[3] = 0, a2[7] = 0, a2[11] = 0, a2[15] = 1, this;
  }
  equals(t3) {
    const e2 = this.elements, r2 = t3.elements;
    for (let n2 = 0; n2 < 16; n2++)
      if (e2[n2] !== r2[n2])
        return false;
    return true;
  }
  fromArray(t3, e2 = 0) {
    for (let r2 = 0; r2 < 16; r2++)
      this.elements[r2] = t3[r2 + e2];
    return this;
  }
  toArray(t3 = [], e2 = 0) {
    const r2 = this.elements;
    return t3[e2] = r2[0], t3[e2 + 1] = r2[1], t3[e2 + 2] = r2[2], t3[e2 + 3] = r2[3], t3[e2 + 4] = r2[4], t3[e2 + 5] = r2[5], t3[e2 + 6] = r2[6], t3[e2 + 7] = r2[7], t3[e2 + 8] = r2[8], t3[e2 + 9] = r2[9], t3[e2 + 10] = r2[10], t3[e2 + 11] = r2[11], t3[e2 + 12] = r2[12], t3[e2 + 13] = r2[13], t3[e2 + 14] = r2[14], t3[e2 + 15] = r2[15], t3;
  }
}
m.prototype.isMatrix4 = true;
const y = new l(), g = new m(), v = new l(0, 0, 0), x = new l(1, 1, 1), w = new l(), b = new l(), _ = new l(), M = new m(), N = new c();
class E {
  constructor(t3 = 0, e2 = 0, r2 = 0, n2 = E.DefaultOrder) {
    this._x = t3, this._y = e2, this._z = r2, this._order = n2;
  }
  get x() {
    return this._x;
  }
  set x(t3) {
    this._x = t3, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(t3) {
    this._y = t3, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(t3) {
    this._z = t3, this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(t3) {
    this._order = t3, this._onChangeCallback();
  }
  set(t3, e2, r2, n2) {
    return this._x = t3, this._y = e2, this._z = r2, this._order = n2 || this._order, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(t3) {
    return this._x = t3._x, this._y = t3._y, this._z = t3._z, this._order = t3._order, this._onChangeCallback(), this;
  }
  setFromRotationMatrix(t3, e2, r2) {
    const n2 = t3.elements, i2 = n2[0], s2 = n2[4], o2 = n2[8], u2 = n2[1], h = n2[5], c2 = n2[9], l2 = n2[2], p2 = n2[6], f2 = n2[10];
    switch (e2 = e2 || this._order) {
      case "XYZ":
        this._y = Math.asin(a(o2, -1, 1)), Math.abs(o2) < 0.9999999 ? (this._x = Math.atan2(-c2, f2), this._z = Math.atan2(-s2, i2)) : (this._x = Math.atan2(p2, h), this._z = 0);
        break;
      case "YXZ":
        this._x = Math.asin(-a(c2, -1, 1)), Math.abs(c2) < 0.9999999 ? (this._y = Math.atan2(o2, f2), this._z = Math.atan2(u2, h)) : (this._y = Math.atan2(-l2, i2), this._z = 0);
        break;
      case "ZXY":
        this._x = Math.asin(a(p2, -1, 1)), Math.abs(p2) < 0.9999999 ? (this._y = Math.atan2(-l2, f2), this._z = Math.atan2(-s2, h)) : (this._y = 0, this._z = Math.atan2(u2, i2));
        break;
      case "ZYX":
        this._y = Math.asin(-a(l2, -1, 1)), Math.abs(l2) < 0.9999999 ? (this._x = Math.atan2(p2, f2), this._z = Math.atan2(u2, i2)) : (this._x = 0, this._z = Math.atan2(-s2, h));
        break;
      case "YZX":
        this._z = Math.asin(a(u2, -1, 1)), Math.abs(u2) < 0.9999999 ? (this._x = Math.atan2(-c2, h), this._y = Math.atan2(-l2, i2)) : (this._x = 0, this._y = Math.atan2(o2, f2));
        break;
      case "XZY":
        this._z = Math.asin(-a(s2, -1, 1)), Math.abs(s2) < 0.9999999 ? (this._x = Math.atan2(p2, h), this._y = Math.atan2(o2, i2)) : (this._x = Math.atan2(-c2, f2), this._y = 0);
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + e2);
    }
    return this._order = e2, r2 !== false && this._onChangeCallback(), this;
  }
  setFromQuaternion(t3, e2, r2) {
    return M.makeRotationFromQuaternion(t3), this.setFromRotationMatrix(M, e2, r2);
  }
  setFromVector3(t3, e2) {
    return this.set(t3.x, t3.y, t3.z, e2 || this._order);
  }
  reorder(t3) {
    return N.setFromEuler(this), this.setFromQuaternion(N, t3);
  }
  equals(t3) {
    return t3._x === this._x && t3._y === this._y && t3._z === this._z && t3._order === this._order;
  }
  fromArray(t3) {
    return this._x = t3[0], this._y = t3[1], this._z = t3[2], t3[3] !== void 0 && (this._order = t3[3]), this._onChangeCallback(), this;
  }
  toArray(t3 = [], e2 = 0) {
    return t3[e2] = this._x, t3[e2 + 1] = this._y, t3[e2 + 2] = this._z, t3[e2 + 3] = this._order, t3;
  }
  toVector3(t3) {
    return t3 ? t3.set(this._x, this._y, this._z) : new l(this._x, this._y, this._z);
  }
  _onChange(t3) {
    return this._onChangeCallback = t3, this;
  }
  _onChangeCallback() {
  }
}
E.prototype.isEuler = true, E.DefaultOrder = "XYZ", E.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"];
const S = { aliceblue: 15792383, antiquewhite: 16444375, aqua: 65535, aquamarine: 8388564, azure: 15794175, beige: 16119260, bisque: 16770244, black: 0, blanchedalmond: 16772045, blue: 255, blueviolet: 9055202, brown: 10824234, burlywood: 14596231, cadetblue: 6266528, chartreuse: 8388352, chocolate: 13789470, coral: 16744272, cornflowerblue: 6591981, cornsilk: 16775388, crimson: 14423100, cyan: 65535, darkblue: 139, darkcyan: 35723, darkgoldenrod: 12092939, darkgray: 11119017, darkgreen: 25600, darkgrey: 11119017, darkkhaki: 12433259, darkmagenta: 9109643, darkolivegreen: 5597999, darkorange: 16747520, darkorchid: 10040012, darkred: 9109504, darksalmon: 15308410, darkseagreen: 9419919, darkslateblue: 4734347, darkslategray: 3100495, darkslategrey: 3100495, darkturquoise: 52945, darkviolet: 9699539, deeppink: 16716947, deepskyblue: 49151, dimgray: 6908265, dimgrey: 6908265, dodgerblue: 2003199, firebrick: 11674146, floralwhite: 16775920, forestgreen: 2263842, fuchsia: 16711935, gainsboro: 14474460, ghostwhite: 16316671, gold: 16766720, goldenrod: 14329120, gray: 8421504, green: 32768, greenyellow: 11403055, grey: 8421504, honeydew: 15794160, hotpink: 16738740, indianred: 13458524, indigo: 4915330, ivory: 16777200, khaki: 15787660, lavender: 15132410, lavenderblush: 16773365, lawngreen: 8190976, lemonchiffon: 16775885, lightblue: 11393254, lightcoral: 15761536, lightcyan: 14745599, lightgoldenrodyellow: 16448210, lightgray: 13882323, lightgreen: 9498256, lightgrey: 13882323, lightpink: 16758465, lightsalmon: 16752762, lightseagreen: 2142890, lightskyblue: 8900346, lightslategray: 7833753, lightslategrey: 7833753, lightsteelblue: 11584734, lightyellow: 16777184, lime: 65280, limegreen: 3329330, linen: 16445670, magenta: 16711935, maroon: 8388608, mediumaquamarine: 6737322, mediumblue: 205, mediumorchid: 12211667, mediumpurple: 9662683, mediumseagreen: 3978097, mediumslateblue: 8087790, mediumspringgreen: 64154, mediumturquoise: 4772300, mediumvioletred: 13047173, midnightblue: 1644912, mintcream: 16121850, mistyrose: 16770273, moccasin: 16770229, navajowhite: 16768685, navy: 128, oldlace: 16643558, olive: 8421376, olivedrab: 7048739, orange: 16753920, orangered: 16729344, orchid: 14315734, palegoldenrod: 15657130, palegreen: 10025880, paleturquoise: 11529966, palevioletred: 14381203, papayawhip: 16773077, peachpuff: 16767673, peru: 13468991, pink: 16761035, plum: 14524637, powderblue: 11591910, purple: 8388736, rebeccapurple: 6697881, red: 16711680, rosybrown: 12357519, royalblue: 4286945, saddlebrown: 9127187, salmon: 16416882, sandybrown: 16032864, seagreen: 3050327, seashell: 16774638, sienna: 10506797, silver: 12632256, skyblue: 8900331, slateblue: 6970061, slategray: 7372944, slategrey: 7372944, snow: 16775930, springgreen: 65407, steelblue: 4620980, tan: 13808780, teal: 32896, thistle: 14204888, tomato: 16737095, turquoise: 4251856, violet: 15631086, wheat: 16113331, white: 16777215, whitesmoke: 16119285, yellow: 16776960, yellowgreen: 10145074 }, T = { h: 0, s: 0, l: 0 }, O = { h: 0, s: 0, l: 0 };
function z(t3, e2, r2) {
  return r2 < 0 && (r2 += 1), r2 > 1 && (r2 -= 1), r2 < 1 / 6 ? t3 + 6 * (e2 - t3) * r2 : r2 < 0.5 ? e2 : r2 < 2 / 3 ? t3 + 6 * (e2 - t3) * (2 / 3 - r2) : t3;
}
function C(t3) {
  return t3 < 0.04045 ? 0.0773993808 * t3 : Math.pow(0.9478672986 * t3 + 0.0521327014, 2.4);
}
function A(t3) {
  return t3 < 31308e-7 ? 12.92 * t3 : 1.055 * Math.pow(t3, 0.41666) - 0.055;
}
class R {
  constructor(t3, e2, r2) {
    return e2 === void 0 && r2 === void 0 ? this.set(t3) : this.setRGB(t3, e2, r2);
  }
  set(t3) {
    return t3 && t3.isColor ? this.copy(t3) : typeof t3 == "number" ? this.setHex(t3) : typeof t3 == "string" && this.setStyle(t3), this;
  }
  setScalar(t3) {
    return this.r = t3, this.g = t3, this.b = t3, this;
  }
  setHex(t3) {
    return t3 = Math.floor(t3), this.r = (t3 >> 16 & 255) / 255, this.g = (t3 >> 8 & 255) / 255, this.b = (255 & t3) / 255, this;
  }
  setRGB(t3, e2, r2) {
    return this.r = t3, this.g = e2, this.b = r2, this;
  }
  setHSL(t3, e2, r2) {
    if (t3 = o(t3, 1), e2 = a(e2, 0, 1), r2 = a(r2, 0, 1), e2 === 0)
      this.r = this.g = this.b = r2;
    else {
      const n2 = r2 <= 0.5 ? r2 * (1 + e2) : r2 + e2 - r2 * e2, i2 = 2 * r2 - n2;
      this.r = z(i2, n2, t3 + 1 / 3), this.g = z(i2, n2, t3), this.b = z(i2, n2, t3 - 1 / 3);
    }
    return this;
  }
  setStyle(t3) {
    function e2(e3) {
      e3 !== void 0 && parseFloat(e3) < 1 && console.warn("THREE.Color: Alpha component of " + t3 + " will be ignored.");
    }
    let r2;
    if (r2 = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t3)) {
      let t4;
      const n2 = r2[1], i2 = r2[2];
      switch (n2) {
        case "rgb":
        case "rgba":
          if (t4 = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i2))
            return this.r = Math.min(255, parseInt(t4[1], 10)) / 255, this.g = Math.min(255, parseInt(t4[2], 10)) / 255, this.b = Math.min(255, parseInt(t4[3], 10)) / 255, e2(t4[4]), this;
          if (t4 = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i2))
            return this.r = Math.min(100, parseInt(t4[1], 10)) / 100, this.g = Math.min(100, parseInt(t4[2], 10)) / 100, this.b = Math.min(100, parseInt(t4[3], 10)) / 100, e2(t4[4]), this;
          break;
        case "hsl":
        case "hsla":
          if (t4 = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(i2)) {
            const r3 = parseFloat(t4[1]) / 360, n3 = parseInt(t4[2], 10) / 100, i3 = parseInt(t4[3], 10) / 100;
            return e2(t4[4]), this.setHSL(r3, n3, i3);
          }
      }
    } else if (r2 = /^\#([A-Fa-f\d]+)$/.exec(t3)) {
      const t4 = r2[1], e3 = t4.length;
      if (e3 === 3)
        return this.r = parseInt(t4.charAt(0) + t4.charAt(0), 16) / 255, this.g = parseInt(t4.charAt(1) + t4.charAt(1), 16) / 255, this.b = parseInt(t4.charAt(2) + t4.charAt(2), 16) / 255, this;
      if (e3 === 6)
        return this.r = parseInt(t4.charAt(0) + t4.charAt(1), 16) / 255, this.g = parseInt(t4.charAt(2) + t4.charAt(3), 16) / 255, this.b = parseInt(t4.charAt(4) + t4.charAt(5), 16) / 255, this;
    }
    return t3 && t3.length > 0 ? this.setColorName(t3) : this;
  }
  setColorName(t3) {
    const e2 = S[t3.toLowerCase()];
    return e2 !== void 0 ? this.setHex(e2) : console.warn("THREE.Color: Unknown color " + t3), this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(t3) {
    return this.r = t3.r, this.g = t3.g, this.b = t3.b, this;
  }
  copyGammaToLinear(t3, e2 = 2) {
    return this.r = Math.pow(t3.r, e2), this.g = Math.pow(t3.g, e2), this.b = Math.pow(t3.b, e2), this;
  }
  copyLinearToGamma(t3, e2 = 2) {
    const r2 = e2 > 0 ? 1 / e2 : 1;
    return this.r = Math.pow(t3.r, r2), this.g = Math.pow(t3.g, r2), this.b = Math.pow(t3.b, r2), this;
  }
  convertGammaToLinear(t3) {
    return this.copyGammaToLinear(this, t3), this;
  }
  convertLinearToGamma(t3) {
    return this.copyLinearToGamma(this, t3), this;
  }
  copySRGBToLinear(t3) {
    return this.r = C(t3.r), this.g = C(t3.g), this.b = C(t3.b), this;
  }
  copyLinearToSRGB(t3) {
    return this.r = A(t3.r), this.g = A(t3.g), this.b = A(t3.b), this;
  }
  convertSRGBToLinear() {
    return this.copySRGBToLinear(this), this;
  }
  convertLinearToSRGB() {
    return this.copyLinearToSRGB(this), this;
  }
  getHex() {
    return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
  }
  getHexString() {
    return ("000000" + this.getHex().toString(16)).slice(-6);
  }
  getHSL(t3) {
    t3 === void 0 && (console.warn("THREE.Color: .getHSL() target is now required"), t3 = { h: 0, s: 0, l: 0 });
    const e2 = this.r, r2 = this.g, n2 = this.b, i2 = Math.max(e2, r2, n2), s2 = Math.min(e2, r2, n2);
    let a2, o2;
    const u2 = (s2 + i2) / 2;
    if (s2 === i2)
      a2 = 0, o2 = 0;
    else {
      const t4 = i2 - s2;
      switch (o2 = u2 <= 0.5 ? t4 / (i2 + s2) : t4 / (2 - i2 - s2), i2) {
        case e2:
          a2 = (r2 - n2) / t4 + (r2 < n2 ? 6 : 0);
          break;
        case r2:
          a2 = (n2 - e2) / t4 + 2;
          break;
        case n2:
          a2 = (e2 - r2) / t4 + 4;
      }
      a2 /= 6;
    }
    return t3.h = a2, t3.s = o2, t3.l = u2, t3;
  }
  getStyle() {
    return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")";
  }
  offsetHSL(t3, e2, r2) {
    return this.getHSL(T), T.h += t3, T.s += e2, T.l += r2, this.setHSL(T.h, T.s, T.l), this;
  }
  add(t3) {
    return this.r += t3.r, this.g += t3.g, this.b += t3.b, this;
  }
  addColors(t3, e2) {
    return this.r = t3.r + e2.r, this.g = t3.g + e2.g, this.b = t3.b + e2.b, this;
  }
  addScalar(t3) {
    return this.r += t3, this.g += t3, this.b += t3, this;
  }
  sub(t3) {
    return this.r = Math.max(0, this.r - t3.r), this.g = Math.max(0, this.g - t3.g), this.b = Math.max(0, this.b - t3.b), this;
  }
  multiply(t3) {
    return this.r *= t3.r, this.g *= t3.g, this.b *= t3.b, this;
  }
  multiplyScalar(t3) {
    return this.r *= t3, this.g *= t3, this.b *= t3, this;
  }
  lerp(t3, e2) {
    return this.r += (t3.r - this.r) * e2, this.g += (t3.g - this.g) * e2, this.b += (t3.b - this.b) * e2, this;
  }
  lerpColors(t3, e2, r2) {
    return this.r = t3.r + (e2.r - t3.r) * r2, this.g = t3.g + (e2.g - t3.g) * r2, this.b = t3.b + (e2.b - t3.b) * r2, this;
  }
  lerpHSL(t3, e2) {
    this.getHSL(T), t3.getHSL(O);
    const r2 = u(T.h, O.h, e2), n2 = u(T.s, O.s, e2), i2 = u(T.l, O.l, e2);
    return this.setHSL(r2, n2, i2), this;
  }
  equals(t3) {
    return t3.r === this.r && t3.g === this.g && t3.b === this.b;
  }
  fromArray(t3, e2 = 0) {
    return this.r = t3[e2], this.g = t3[e2 + 1], this.b = t3[e2 + 2], this;
  }
  toArray(t3 = [], e2 = 0) {
    return t3[e2] = this.r, t3[e2 + 1] = this.g, t3[e2 + 2] = this.b, t3;
  }
  fromBufferAttribute(t3, e2) {
    return this.r = t3.getX(e2), this.g = t3.getY(e2), this.b = t3.getZ(e2), t3.normalized === true && (this.r /= 255, this.g /= 255, this.b /= 255), this;
  }
  toJSON() {
    return this.getHex();
  }
}
R.NAMES = S, R.prototype.isColor = true, R.prototype.r = 1, R.prototype.g = 1, R.prototype.b = 1;
const D = new e();
class k {
  constructor(t3 = new e(1 / 0, 1 / 0), r2 = new e(-1 / 0, -1 / 0)) {
    this.min = t3, this.max = r2;
  }
  set(t3, e2) {
    return this.min.copy(t3), this.max.copy(e2), this;
  }
  setFromPoints(t3) {
    this.makeEmpty();
    for (let e2 = 0, r2 = t3.length; e2 < r2; e2++)
      this.expandByPoint(t3[e2]);
    return this;
  }
  setFromCenterAndSize(t3, e2) {
    const r2 = D.copy(e2).multiplyScalar(0.5);
    return this.min.copy(t3).sub(r2), this.max.copy(t3).add(r2), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(t3) {
    return this.min.copy(t3.min), this.max.copy(t3.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }
  getCenter(t3) {
    return t3 === void 0 && (console.warn("THREE.Box2: .getCenter() target is now required"), t3 = new e()), this.isEmpty() ? t3.set(0, 0) : t3.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(t3) {
    return t3 === void 0 && (console.warn("THREE.Box2: .getSize() target is now required"), t3 = new e()), this.isEmpty() ? t3.set(0, 0) : t3.subVectors(this.max, this.min);
  }
  expandByPoint(t3) {
    return this.min.min(t3), this.max.max(t3), this;
  }
  expandByVector(t3) {
    return this.min.sub(t3), this.max.add(t3), this;
  }
  expandByScalar(t3) {
    return this.min.addScalar(-t3), this.max.addScalar(t3), this;
  }
  containsPoint(t3) {
    return !(t3.x < this.min.x || t3.x > this.max.x || t3.y < this.min.y || t3.y > this.max.y);
  }
  containsBox(t3) {
    return this.min.x <= t3.min.x && t3.max.x <= this.max.x && this.min.y <= t3.min.y && t3.max.y <= this.max.y;
  }
  getParameter(t3, r2) {
    return r2 === void 0 && (console.warn("THREE.Box2: .getParameter() target is now required"), r2 = new e()), r2.set((t3.x - this.min.x) / (this.max.x - this.min.x), (t3.y - this.min.y) / (this.max.y - this.min.y));
  }
  intersectsBox(t3) {
    return !(t3.max.x < this.min.x || t3.min.x > this.max.x || t3.max.y < this.min.y || t3.min.y > this.max.y);
  }
  clampPoint(t3, r2) {
    return r2 === void 0 && (console.warn("THREE.Box2: .clampPoint() target is now required"), r2 = new e()), r2.copy(t3).clamp(this.min, this.max);
  }
  distanceToPoint(t3) {
    return D.copy(t3).clamp(this.min, this.max).sub(t3).length();
  }
  intersect(t3) {
    return this.min.max(t3.min), this.max.min(t3.max), this;
  }
  union(t3) {
    return this.min.min(t3.min), this.max.max(t3.max), this;
  }
  translate(t3) {
    return this.min.add(t3), this.max.add(t3), this;
  }
  equals(t3) {
    return t3.min.equals(this.min) && t3.max.equals(this.max);
  }
}
k.prototype.isBox2 = true;
class I {
  constructor(t3 = new l(1 / 0, 1 / 0, 1 / 0), e2 = new l(-1 / 0, -1 / 0, -1 / 0)) {
    this.min = t3, this.max = e2;
  }
  set(t3, e2) {
    return this.min.copy(t3), this.max.copy(e2), this;
  }
  setFromArray(t3) {
    let e2 = 1 / 0, r2 = 1 / 0, n2 = 1 / 0, i2 = -1 / 0, s2 = -1 / 0, a2 = -1 / 0;
    for (let o2 = 0, u2 = t3.length; o2 < u2; o2 += 3) {
      const u3 = t3[o2], h = t3[o2 + 1], c2 = t3[o2 + 2];
      u3 < e2 && (e2 = u3), h < r2 && (r2 = h), c2 < n2 && (n2 = c2), u3 > i2 && (i2 = u3), h > s2 && (s2 = h), c2 > a2 && (a2 = c2);
    }
    return this.min.set(e2, r2, n2), this.max.set(i2, s2, a2), this;
  }
  setFromBufferAttribute(t3) {
    let e2 = 1 / 0, r2 = 1 / 0, n2 = 1 / 0, i2 = -1 / 0, s2 = -1 / 0, a2 = -1 / 0;
    for (let o2 = 0, u2 = t3.count; o2 < u2; o2++) {
      const u3 = t3.getX(o2), h = t3.getY(o2), c2 = t3.getZ(o2);
      u3 < e2 && (e2 = u3), h < r2 && (r2 = h), c2 < n2 && (n2 = c2), u3 > i2 && (i2 = u3), h > s2 && (s2 = h), c2 > a2 && (a2 = c2);
    }
    return this.min.set(e2, r2, n2), this.max.set(i2, s2, a2), this;
  }
  setFromPoints(t3) {
    this.makeEmpty();
    for (let e2 = 0, r2 = t3.length; e2 < r2; e2++)
      this.expandByPoint(t3[e2]);
    return this;
  }
  setFromCenterAndSize(t3, e2) {
    const r2 = B.copy(e2).multiplyScalar(0.5);
    return this.min.copy(t3).sub(r2), this.max.copy(t3).add(r2), this;
  }
  setFromObject(t3) {
    return this.makeEmpty(), this.expandByObject(t3);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(t3) {
    return this.min.copy(t3.min), this.max.copy(t3.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(t3) {
    return t3 === void 0 && (console.warn("THREE.Box3: .getCenter() target is now required"), t3 = new l()), this.isEmpty() ? t3.set(0, 0, 0) : t3.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(t3) {
    return t3 === void 0 && (console.warn("THREE.Box3: .getSize() target is now required"), t3 = new l()), this.isEmpty() ? t3.set(0, 0, 0) : t3.subVectors(this.max, this.min);
  }
  expandByPoint(t3) {
    return this.min.min(t3), this.max.max(t3), this;
  }
  expandByVector(t3) {
    return this.min.sub(t3), this.max.add(t3), this;
  }
  expandByScalar(t3) {
    return this.min.addScalar(-t3), this.max.addScalar(t3), this;
  }
  expandByObject(t3) {
    t3.updateWorldMatrix(false, false);
    const e2 = t3.geometry;
    e2 !== void 0 && (e2.boundingBox === null && e2.computeBoundingBox(), F.copy(e2.boundingBox), F.applyMatrix4(t3.matrixWorld), this.union(F));
    const r2 = t3.children;
    for (let n2 = 0, i2 = r2.length; n2 < i2; n2++)
      this.expandByObject(r2[n2]);
    return this;
  }
  containsPoint(t3) {
    return !(t3.x < this.min.x || t3.x > this.max.x || t3.y < this.min.y || t3.y > this.max.y || t3.z < this.min.z || t3.z > this.max.z);
  }
  containsBox(t3) {
    return this.min.x <= t3.min.x && t3.max.x <= this.max.x && this.min.y <= t3.min.y && t3.max.y <= this.max.y && this.min.z <= t3.min.z && t3.max.z <= this.max.z;
  }
  getParameter(t3, e2) {
    return e2 === void 0 && (console.warn("THREE.Box3: .getParameter() target is now required"), e2 = new l()), e2.set((t3.x - this.min.x) / (this.max.x - this.min.x), (t3.y - this.min.y) / (this.max.y - this.min.y), (t3.z - this.min.z) / (this.max.z - this.min.z));
  }
  intersectsBox(t3) {
    return !(t3.max.x < this.min.x || t3.min.x > this.max.x || t3.max.y < this.min.y || t3.min.y > this.max.y || t3.max.z < this.min.z || t3.min.z > this.max.z);
  }
  intersectsSphere(t3) {
    return this.clampPoint(t3.center, B), B.distanceToSquared(t3.center) <= t3.radius * t3.radius;
  }
  intersectsPlane(t3) {
    let e2, r2;
    return t3.normal.x > 0 ? (e2 = t3.normal.x * this.min.x, r2 = t3.normal.x * this.max.x) : (e2 = t3.normal.x * this.max.x, r2 = t3.normal.x * this.min.x), t3.normal.y > 0 ? (e2 += t3.normal.y * this.min.y, r2 += t3.normal.y * this.max.y) : (e2 += t3.normal.y * this.max.y, r2 += t3.normal.y * this.min.y), t3.normal.z > 0 ? (e2 += t3.normal.z * this.min.z, r2 += t3.normal.z * this.max.z) : (e2 += t3.normal.z * this.max.z, r2 += t3.normal.z * this.min.z), e2 <= -t3.constant && r2 >= -t3.constant;
  }
  intersectsTriangle(t3) {
    if (this.isEmpty())
      return false;
    this.getCenter($), G.subVectors(this.max, $), P.subVectors(t3.a, $), U.subVectors(t3.b, $), j.subVectors(t3.c, $), q.subVectors(U, P), H.subVectors(j, U), V.subVectors(P, j);
    let e2 = [0, -q.z, q.y, 0, -H.z, H.y, 0, -V.z, V.y, q.z, 0, -q.x, H.z, 0, -H.x, V.z, 0, -V.x, -q.y, q.x, 0, -H.y, H.x, 0, -V.y, V.x, 0];
    return !!Z(e2, P, U, j, G) && (e2 = [1, 0, 0, 0, 1, 0, 0, 0, 1], !!Z(e2, P, U, j, G) && (W.crossVectors(q, H), e2 = [W.x, W.y, W.z], Z(e2, P, U, j, G)));
  }
  clampPoint(t3, e2) {
    return e2 === void 0 && (console.warn("THREE.Box3: .clampPoint() target is now required"), e2 = new l()), e2.copy(t3).clamp(this.min, this.max);
  }
  distanceToPoint(t3) {
    return B.copy(t3).clamp(this.min, this.max).sub(t3).length();
  }
  getBoundingSphere(t3) {
    return t3 === void 0 && console.error("THREE.Box3: .getBoundingSphere() target is now required"), this.getCenter(t3.center), t3.radius = 0.5 * this.getSize(B).length(), t3;
  }
  intersect(t3) {
    return this.min.max(t3.min), this.max.min(t3.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(t3) {
    return this.min.min(t3.min), this.max.max(t3.max), this;
  }
  applyMatrix4(t3) {
    return this.isEmpty() || (L[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t3), L[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t3), L[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t3), L[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t3), L[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t3), L[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t3), L[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t3), L[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t3), this.setFromPoints(L)), this;
  }
  translate(t3) {
    return this.min.add(t3), this.max.add(t3), this;
  }
  equals(t3) {
    return t3.min.equals(this.min) && t3.max.equals(this.max);
  }
}
I.prototype.isBox3 = true;
const L = [new l(), new l(), new l(), new l(), new l(), new l(), new l(), new l()], B = new l(), F = new I(), P = new l(), U = new l(), j = new l(), q = new l(), H = new l(), V = new l(), $ = new l(), G = new l(), W = new l(), Y = new l();
function Z(t3, e2, r2, n2, i2) {
  for (let s2 = 0, a2 = t3.length - 3; s2 <= a2; s2 += 3) {
    Y.fromArray(t3, s2);
    const a3 = i2.x * Math.abs(Y.x) + i2.y * Math.abs(Y.y) + i2.z * Math.abs(Y.z), o2 = e2.dot(Y), u2 = r2.dot(Y), h = n2.dot(Y);
    if (Math.max(-Math.max(o2, u2, h), Math.min(o2, u2, h)) > a3)
      return false;
  }
  return true;
}
new l();
new l();
new l();
new l();
new l();
new l();
new l();
new l();
new l();
class ot {
  constructor() {
    this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1], arguments.length > 0 && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
  }
  set(t3, e2, r2, n2, i2, s2, a2, o2, u2) {
    const h = this.elements;
    return h[0] = t3, h[1] = n2, h[2] = a2, h[3] = e2, h[4] = i2, h[5] = o2, h[6] = r2, h[7] = s2, h[8] = u2, this;
  }
  identity() {
    return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
  }
  copy(t3) {
    const e2 = this.elements, r2 = t3.elements;
    return e2[0] = r2[0], e2[1] = r2[1], e2[2] = r2[2], e2[3] = r2[3], e2[4] = r2[4], e2[5] = r2[5], e2[6] = r2[6], e2[7] = r2[7], e2[8] = r2[8], this;
  }
  extractBasis(t3, e2, r2) {
    return t3.setFromMatrix3Column(this, 0), e2.setFromMatrix3Column(this, 1), r2.setFromMatrix3Column(this, 2), this;
  }
  setFromMatrix4(t3) {
    const e2 = t3.elements;
    return this.set(e2[0], e2[4], e2[8], e2[1], e2[5], e2[9], e2[2], e2[6], e2[10]), this;
  }
  multiply(t3) {
    return this.multiplyMatrices(this, t3);
  }
  premultiply(t3) {
    return this.multiplyMatrices(t3, this);
  }
  multiplyMatrices(t3, e2) {
    const r2 = t3.elements, n2 = e2.elements, i2 = this.elements, s2 = r2[0], a2 = r2[3], o2 = r2[6], u2 = r2[1], h = r2[4], c2 = r2[7], l2 = r2[2], p2 = r2[5], f2 = r2[8], d = n2[0], m2 = n2[3], y2 = n2[6], g2 = n2[1], v2 = n2[4], x2 = n2[7], w2 = n2[2], b2 = n2[5], _2 = n2[8];
    return i2[0] = s2 * d + a2 * g2 + o2 * w2, i2[3] = s2 * m2 + a2 * v2 + o2 * b2, i2[6] = s2 * y2 + a2 * x2 + o2 * _2, i2[1] = u2 * d + h * g2 + c2 * w2, i2[4] = u2 * m2 + h * v2 + c2 * b2, i2[7] = u2 * y2 + h * x2 + c2 * _2, i2[2] = l2 * d + p2 * g2 + f2 * w2, i2[5] = l2 * m2 + p2 * v2 + f2 * b2, i2[8] = l2 * y2 + p2 * x2 + f2 * _2, this;
  }
  multiplyScalar(t3) {
    const e2 = this.elements;
    return e2[0] *= t3, e2[3] *= t3, e2[6] *= t3, e2[1] *= t3, e2[4] *= t3, e2[7] *= t3, e2[2] *= t3, e2[5] *= t3, e2[8] *= t3, this;
  }
  determinant() {
    const t3 = this.elements, e2 = t3[0], r2 = t3[1], n2 = t3[2], i2 = t3[3], s2 = t3[4], a2 = t3[5], o2 = t3[6], u2 = t3[7], h = t3[8];
    return e2 * s2 * h - e2 * a2 * u2 - r2 * i2 * h + r2 * a2 * o2 + n2 * i2 * u2 - n2 * s2 * o2;
  }
  invert() {
    const t3 = this.elements, e2 = t3[0], r2 = t3[1], n2 = t3[2], i2 = t3[3], s2 = t3[4], a2 = t3[5], o2 = t3[6], u2 = t3[7], h = t3[8], c2 = h * s2 - a2 * u2, l2 = a2 * o2 - h * i2, p2 = u2 * i2 - s2 * o2, f2 = e2 * c2 + r2 * l2 + n2 * p2;
    if (f2 === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const d = 1 / f2;
    return t3[0] = c2 * d, t3[1] = (n2 * u2 - h * r2) * d, t3[2] = (a2 * r2 - n2 * s2) * d, t3[3] = l2 * d, t3[4] = (h * e2 - n2 * o2) * d, t3[5] = (n2 * i2 - a2 * e2) * d, t3[6] = p2 * d, t3[7] = (r2 * o2 - u2 * e2) * d, t3[8] = (s2 * e2 - r2 * i2) * d, this;
  }
  transpose() {
    let t3;
    const e2 = this.elements;
    return t3 = e2[1], e2[1] = e2[3], e2[3] = t3, t3 = e2[2], e2[2] = e2[6], e2[6] = t3, t3 = e2[5], e2[5] = e2[7], e2[7] = t3, this;
  }
  getNormalMatrix(t3) {
    return this.setFromMatrix4(t3).invert().transpose();
  }
  transposeIntoArray(t3) {
    const e2 = this.elements;
    return t3[0] = e2[0], t3[1] = e2[3], t3[2] = e2[6], t3[3] = e2[1], t3[4] = e2[4], t3[5] = e2[7], t3[6] = e2[2], t3[7] = e2[5], t3[8] = e2[8], this;
  }
  setUvTransform(t3, e2, r2, n2, i2, s2, a2) {
    const o2 = Math.cos(i2), u2 = Math.sin(i2);
    return this.set(r2 * o2, r2 * u2, -r2 * (o2 * s2 + u2 * a2) + s2 + t3, -n2 * u2, n2 * o2, -n2 * (-u2 * s2 + o2 * a2) + a2 + e2, 0, 0, 1), this;
  }
  scale(t3, e2) {
    const r2 = this.elements;
    return r2[0] *= t3, r2[3] *= t3, r2[6] *= t3, r2[1] *= e2, r2[4] *= e2, r2[7] *= e2, this;
  }
  rotate(t3) {
    const e2 = Math.cos(t3), r2 = Math.sin(t3), n2 = this.elements, i2 = n2[0], s2 = n2[3], a2 = n2[6], o2 = n2[1], u2 = n2[4], h = n2[7];
    return n2[0] = e2 * i2 + r2 * o2, n2[3] = e2 * s2 + r2 * u2, n2[6] = e2 * a2 + r2 * h, n2[1] = -r2 * i2 + e2 * o2, n2[4] = -r2 * s2 + e2 * u2, n2[7] = -r2 * a2 + e2 * h, this;
  }
  translate(t3, e2) {
    const r2 = this.elements;
    return r2[0] += t3 * r2[2], r2[3] += t3 * r2[5], r2[6] += t3 * r2[8], r2[1] += e2 * r2[2], r2[4] += e2 * r2[5], r2[7] += e2 * r2[8], this;
  }
  equals(t3) {
    const e2 = this.elements, r2 = t3.elements;
    for (let n2 = 0; n2 < 9; n2++)
      if (e2[n2] !== r2[n2])
        return false;
    return true;
  }
  fromArray(t3, e2 = 0) {
    for (let r2 = 0; r2 < 9; r2++)
      this.elements[r2] = t3[r2 + e2];
    return this;
  }
  toArray(t3 = [], e2 = 0) {
    const r2 = this.elements;
    return t3[e2] = r2[0], t3[e2 + 1] = r2[1], t3[e2 + 2] = r2[2], t3[e2 + 3] = r2[3], t3[e2 + 4] = r2[4], t3[e2 + 5] = r2[5], t3[e2 + 6] = r2[6], t3[e2 + 7] = r2[7], t3[e2 + 8] = r2[8], t3;
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
}
ot.prototype.isMatrix3 = true;
new l();
new l();
new ot();
const pt = Object.freeze(new e(0, 0));
Object.freeze(new e(1, 1));
const dt = Object.freeze(new l(0, 0, 0));
Object.freeze(new l(1, 0, 0));
Object.freeze(new l(0, 1, 0));
Object.freeze(new l(0, 0, 1));
const vt = Object.freeze(new l(1, 1, 1)), xt = Object.freeze(new c()), wt = { RIGHT: Object.freeze(new l(1, 0, 0)), UP: Object.freeze(new l(0, 1, 0)), NEAR: Object.freeze(new l(0, 0, 1)), LEFT: Object.freeze(new l(-1, 0, 0)), DOWN: Object.freeze(new l(0, -1, 0)), FAR: Object.freeze(new l(0, 0, -1)) };
function bt(t3, e2) {
  return typeof t3 == "number" ? function(t4, e3) {
    if (e3 === t4)
      return 0;
    const r3 = Math.abs(e3 - t4), n3 = (Math.abs(e3) + Math.abs(t4)) / 2;
    return r3 / n3;
  }(t3, e2) : "isVector3" in t3 ? function(t4, e3) {
    if (e3.equals(t4))
      return 0;
    const r3 = e3.distanceTo(t4), n3 = (e3.length() + t4.length()) / 2;
    return r3 / n3;
  }(t3, e2) : "isVector2" in t3 ? function(t4, e3) {
    if (e3.equals(t4))
      return 0;
    const r3 = e3.distanceTo(t4), n3 = (e3.length() + t4.length()) / 2;
    return r3 / n3;
  }(t3, e2) : "isBox3" in t3 ? function(t4, e3) {
    if (t4.equals(e3))
      return 0;
    const r3 = _t, n3 = e3.min.distanceTo(t4.min), i2 = e3.max.distanceTo(t4.max), s2 = (n3 + i2) / 2, a2 = (e3.getSize(r3).length() + t4.getSize(r3).length()) / 2;
    return s2 / a2;
  }(t3, e2) : "isQuaternion" in t3 ? (n2 = e2, (r2 = t3).equals(n2) ? 0 : r2.angleTo(n2) / Math.PI) : "isColor" in t3 ? function(t4, e3) {
    if (t4.equals(e3))
      return 0;
    return _t.set(Math.abs(e3.r - t4.r), Math.abs(e3.g - t4.g), Math.abs(e3.b - t4.b)).length() / Mt;
  }(t3, e2) : 1 / 0;
  var r2, n2;
}
const _t = new l();
const Mt = Math.sqrt(3), Nt = (t3 = 1) => {
  var e2 = Math.random();
  return (e2 % 1e-8 > 5e-9 ? 1 : -1) * Math.sqrt(-Math.log(Math.max(1e-9, e2))) * t3;
}, Et = (t3 = 1) => {
  const e2 = Math.sqrt(Math.sqrt(1 / (2 * t3)));
  return 1 / Nt(e2) ** 2;
}, St = (() => {
  const t3 = 2 * Math.PI, e2 = new l(0, 0, 1), r2 = new c(), n2 = new c(), i2 = new l(), s2 = new c();
  return function(a2 = 1, o2 = 1) {
    var u2 = (Math.random() - 0.5) * t3 * a2, h = Math.random() * t3, c2 = Math.random() * Math.PI * o2;
    return i2.set(1, 0, 0).applyAxisAngle(e2, h), r2.setFromAxisAngle(e2, u2), n2.setFromAxisAngle(i2, c2), s2.multiplyQuaternions(n2, r2);
  };
})();
function Tt(t3, e2) {
  let r2 = 0;
  for (let i2 = 0; i2 < t3.length; i2++)
    r2 += (e2 == null ? void 0 : e2[i2]) || 1;
  const n2 = Math.random() * r2;
  r2 = 0;
  for (let i2 = 0; i2 < t3.length; i2++)
    if (r2 += (e2 == null ? void 0 : e2[i2]) || 1, r2 > n2)
      return t3[i2];
  return t3[0];
}
(() => {
  const t3 = new l();
  return function(e2, r2, n2) {
    const i2 = t3.set(e2.x, e2.y, e2.z), s2 = r2.dot(i2), a2 = t3.copy(r2).multiplyScalar(s2), o2 = n2.set(a2.x, a2.y, a2.z, e2.w).normalize();
    return s2 < 0 && (o2.x = -o2.x, o2.y = -o2.y, o2.z = -o2.z, o2.w = -o2.w), o2;
  };
})();
class zt {
  constructor() {
    this.callbacks = [];
  }
  memoize(t3, ...e2) {
    e2.push(this);
    const r2 = function(t4) {
      let e3;
      const r3 = () => {
        if (r3.needsUpdate && (r3.needsUpdate = false, e3 = t4()), e3 === void 0)
          throw new Error("Possible recursive memoization detected");
        return e3;
      };
      return r3.needsUpdate = true, r3;
    }(t3);
    for (const n2 of e2)
      n2.callbacks.push(r2);
    return r2;
  }
  invalidateAll() {
    const t3 = this.callbacks;
    for (let e2 = 0; e2 < this.callbacks.length; e2++)
      t3[e2].needsUpdate = true;
  }
  isFullyInvalid() {
    const t3 = this.callbacks;
    for (let e2 = 0; e2 < this.callbacks.length; e2++)
      if (!t3[e2].needsUpdate)
        return false;
    return true;
  }
}
var Ct, At, Rt;
const Dt = Symbol("current"), kt = Symbol("target"), It = Symbol("previousTarget"), Lt = class {
  constructor(t3, e2) {
    this.mode = t3, this.metrics = e2, this._cache = new zt(), this.opacity = 1, this._parent = null, this._localMatrix = new m(), this._worldMatrix = new m(), this._worldMatrixInverse = new m(), this._worldPosition = new l(), this._worldOrientation = new c(), this._worldOrientationInverse = new c(), this._worldScale = new l(1, 1, 1), this._worldRotation = new m(), this._worldRotationInverse = new m(), this._relativePosition = new l(), this._relativeOrientation = new c(), this._relativeScale = new l(1, 1, 1), this._cachedWorldCenter = this._cache.memoize(() => this._worldCenter.copy(this.metrics.innerCenter).applyMatrix4(this.worldMatrix)), this._worldCenter = new l(), this._cachedSpatialMatrix = this._cache.memoize(() => {
      const t4 = this._worldFromSpatial.compose(this.outerOrigin, this.worldOrientation, vt);
      this._spatialFromWorld.copy(this._worldFromSpatial).invert(), this._localFromSpatial.multiplyMatrices(this.worldMatrixInverse, t4), this._spatialFromLocal.copy(this._localFromSpatial).invert();
      const e3 = this.referenceState;
      return e3 ? this._spatialFromReference.multiplyMatrices(this._spatialFromWorld, e3.worldMatrix) : this._spatialFromReference.copy(this._spatialFromWorld), t4;
    }), this._worldFromSpatial = new m(), this._spatialFromWorld = new m(), this._localFromSpatial = new m(), this._spatialFromLocal = new m(), this._spatialFromReference = new m(), this._cachedSpatialBounds = this._cache.memoize(() => {
      this._spatialBounds.copy(this.metrics.innerBounds);
      const t4 = this._spatialBounds.applyMatrix4(this.spatialFromLocal);
      return t4.getCenter(this._spatialCenter), t4.getSize(this._spatialSize), t4;
    }), this._spatialBounds = new I(), this._spatialSize = new l(), this._spatialCenter = new l(), this._cachedOuterBounds = this._cache.memoize(() => {
      const t4 = this._outerBounds, e3 = this.metrics.system.nodeAdapters.get(this.metrics.node);
      if (e3)
        t4.copy(e3.outerBounds[this.mode]);
      else {
        const e4 = this.referenceState;
        e4 ? t4.copy(e4.metrics.innerBounds) : t4.setFromCenterAndSize(dt, dt), t4.applyMatrix4(this.spatialFromReference);
      }
      return t4.getCenter(this._outerCenter), t4.getSize(this._outerSize), t4;
    }), this._outerBounds = new I(), this._outerCenter = new l(), this._outerSize = new l(), this._cachedOuterVisualBounds = this._cache.memoize(() => {
      const t4 = this._outerVisualBounds, e3 = this.metrics.system.nodeAdapters.get(this.metrics.node);
      if (e3)
        t4.copy(e3.outerVisualBounds[this.mode]);
      else {
        const e4 = this.referenceState;
        e4 ? t4.copy(e4.visualBounds) : t4.setFromCenterAndSize(dt, dt);
      }
      return t4.getCenter(this._outerVisualCenter), t4.getSize(this._outerVisualSize), t4;
    }), this._outerVisualBounds = new I(), this._outerVisualCenter = new l(), this._outerVisualSize = new l(), this._viewFromWorld = new m(), this._viewFromSpatial = new m(), this._spatialFromView = new m(), this._cachedNDCBounds = this._cache.memoize(() => {
      if (this.metrics.system.viewNode === this.metrics.node)
        return this._ndcBounds.min.setScalar(-1), this._ndcBounds.max.setScalar(1), this._ndcBounds;
      const t4 = this.metrics.system.viewFrustum.perspectiveProjectionMatrix, e3 = this.viewFromWorld, r2 = this._viewProjectionFromWorld.multiplyMatrices(t4, e3), n2 = this._ndcBounds.copy(this.metrics.innerBounds).applyMatrix4(r2);
      return n2.getCenter(this._ndcCenter), n2.getSize(this._ndcSize), isFinite(n2.min.x) && isFinite(n2.min.y) && isFinite(n2.min.z) && isFinite(n2.max.x) && isFinite(n2.max.y) && isFinite(n2.max.z) || (n2.min.setScalar(-1), n2.max.setScalar(1), n2.getCenter(this._ndcCenter), n2.getSize(this._ndcSize)), n2;
    }, this._viewState._cache), this._viewProjectionFromWorld = new m(), this._ndcBounds = new I(), this._ndcCenter = new l(), this._ndcSize = new l(), this._cachedVisualBounds = this._cache.memoize(() => {
      const t4 = this.metrics.system, e3 = t4.viewFrustum.perspectiveProjectionMatrix, r2 = this._inverseProjection.copy(e3).invert(), n2 = this._visualBounds.copy(this.ndcBounds), i2 = this._v1, s2 = i2.set(0, 0, n2.min.z).applyMatrix4(r2).z, a2 = i2.set(0, 0, n2.max.z).applyMatrix4(r2).z;
      return n2.min.z = a2, n2.max.z = s2, n2.min.x *= 0.5 * t4.viewResolution.x, n2.max.x *= 0.5 * t4.viewResolution.x, n2.min.y *= 0.5 * t4.viewResolution.y, n2.max.y *= 0.5 * t4.viewResolution.y, n2.getCenter(this._visualCenter), n2.getSize(this._visualSize), n2;
    }, this._viewState._cache), this._visualBounds = new I(), this._visualCenter = new l(), this._visualSize = new l(), this._v1 = new l(), this._inverseProjection = new m(), this._viewPosition = new l(), this._cachedViewAlignedOrientation = this._cache.memoize(() => {
      const t4 = this._relativeViewMatrix.multiplyMatrices(this.worldMatrixInverse, this._viewState.worldMatrix), e3 = this._relativeViewRotation.extractRotation(t4), r2 = this._relativeViewOrientation.setFromRotationMatrix(e3), n2 = this._relativeViewForward.set(0, 0, 1).applyQuaternion(r2), i2 = this._relativeViewUp.set(0, 1, 0).applyQuaternion(r2);
      let s2, a2, o2, u2 = 1 / 0, h = 1 / 0;
      for (o2 in wt) {
        const t5 = wt[o2];
        var c2 = i2.distanceToSquared(t5);
        c2 < h && (h = c2, a2 = t5);
      }
      for (o2 in wt) {
        const t5 = wt[o2];
        if (t5.x && a2.x)
          continue;
        if (t5.y && a2.y)
          continue;
        if (t5.z && a2.z)
          continue;
        const e4 = n2.distanceToSquared(t5);
        e4 < u2 && (u2 = e4, s2 = t5);
      }
      const l2 = this._orthogonalRotation.identity();
      return l2.lookAt(s2, dt, a2), this._orthogonalOrientation.setFromRotationMatrix(l2);
    }, this._viewState._cache), this._relativeViewMatrix = new m(), this._relativeViewRotation = new m(), this._relativeViewOrientation = new c(), this._relativeViewUp = new l(), this._relativeViewForward = new l(), this._orthogonalRotation = new m(), this._orthogonalOrientation = new c(), this._computeOcclusion = this._cache.memoize(() => {
      this._occludingPercent = 0, this._occludedPercent = 0;
      const t4 = this.metrics;
      if (t4.innerBounds.isEmpty())
        return;
      const e3 = t4.system.nodeAdapters.values(), r2 = this.visualBounds, n2 = r2.min.z, i2 = Lt._boxA, s2 = Lt._boxB;
      i2.min.set(r2.min.x, r2.min.y), i2.min.set(r2.max.x, r2.max.y);
      const a2 = i2.getSize(Lt._sizeA).length();
      for (const o2 of e3) {
        const e4 = o2.metrics;
        if (e4 === t4)
          continue;
        if (!e4.isAdaptive || e4.innerBounds.isEmpty())
          continue;
        if (e4.containedByNode(o2.node))
          continue;
        const u2 = (this.mode === "current" ? e4.current : e4.target).visualBounds;
        i2.min.set(r2.min.x, r2.min.y), i2.min.set(r2.max.x, r2.max.y), s2.min.set(u2.min.x, u2.min.y), s2.min.set(u2.max.x, u2.max.y);
        const h = i2.intersect(s2).getSize(Lt._sizeB).length() / a2;
        h > 0 && (n2 < u2.min.z ? this._occludingPercent += h : this._occludedPercent += h);
      }
    }, this._viewState._cache), this._occludingPercent = 0, this._occludedPercent = 0;
  }
  invalidate() {
    this._cache.invalidateAll();
  }
  get parent() {
    return this._parent;
  }
  set parent(t3) {
    this._parent !== t3 && (this._parent = t3, this.invalidate());
  }
  get parentState() {
    var t3;
    return (t3 = this.metrics.parentMetrics) == null ? void 0 : t3[this.mode];
  }
  get localMatrix() {
    var t3;
    const e2 = (t3 = this.parentState) == null ? void 0 : t3.worldMatrixInverse;
    return e2 ? this._localMatrix.multiplyMatrices(e2, this.worldMatrix) : this._localMatrix.copy(this.worldMatrix);
  }
  get referenceState() {
    var t3;
    return (t3 = this.metrics.referenceMetrics) == null ? void 0 : t3[this.mode];
  }
  get worldMatrix() {
    return this._worldMatrix;
  }
  set worldMatrix(t3) {
    if (isNaN(t3.elements[0]) || isNaN(t3.elements[15]) || t3.elements[0] === 0)
      throw new Error();
    this._worldMatrix.equals(t3) || (this.invalidate(), this._worldMatrix.copy(t3), this._worldMatrixInverse.copy(this._worldMatrix).invert(), this._worldMatrix.decompose(this._worldPosition, this._worldOrientation, this._worldScale), this._worldOrientationInverse.copy(this._worldOrientation).invert(), this._worldRotation.makeRotationFromQuaternion(this._worldOrientation), this._worldRotationInverse.makeRotationFromQuaternion(this._worldOrientationInverse));
  }
  get relativePosition() {
    var t3;
    const e2 = (t3 = this.referenceState) == null ? void 0 : t3.worldPosition;
    return e2 ? this._relativePosition.subVectors(this.worldPosition, e2) : this._relativePosition.copy(this.worldPosition);
  }
  get relativeOrientation() {
    var t3;
    const e2 = (t3 = this.referenceState) == null ? void 0 : t3.worldOrientationInverse;
    return e2 ? this._relativeOrientation.multiplyQuaternions(this.worldOrientation, e2) : this._relativeOrientation.copy(this.worldOrientation);
  }
  get relativeScale() {
    var t3;
    const e2 = (t3 = this.referenceState) == null ? void 0 : t3.worldScale;
    return e2 ? this._relativeScale.copy(this.worldScale).divide(e2) : this._relativeScale.copy(this.worldScale);
  }
  get worldMatrixInverse() {
    return this._worldMatrixInverse;
  }
  get worldPosition() {
    return this._worldPosition;
  }
  get worldOrientation() {
    return this._worldOrientation;
  }
  get worldScale() {
    return this._worldScale;
  }
  get worldOrientationInverse() {
    return this._worldOrientationInverse;
  }
  get worldRotation() {
    return this._worldRotation;
  }
  get worldRotationInverse() {
    return this._worldRotationInverse;
  }
  get worldCenter() {
    return this._cachedWorldCenter();
  }
  get spatialMatrix() {
    return this._cachedSpatialMatrix();
  }
  get spatialMatrixInverse() {
    return this.spatialMatrix, this._spatialFromWorld;
  }
  get localFromSpatial() {
    return this.spatialMatrix, this._localFromSpatial;
  }
  get spatialFromLocal() {
    return this.spatialMatrix, this._spatialFromLocal;
  }
  get spatialFromReference() {
    return this.spatialMatrix, this._spatialFromReference;
  }
  get spatialBounds() {
    return this._cachedSpatialBounds();
  }
  get spatialSize() {
    return this.spatialBounds, this._spatialSize;
  }
  get spatialCenter() {
    return this.spatialBounds, this._spatialCenter;
  }
  get outerBounds() {
    return this._cachedOuterBounds();
  }
  get outerCenter() {
    return this.outerBounds, this._outerCenter;
  }
  get outerSize() {
    return this.outerBounds, this._outerSize;
  }
  get outerOrigin() {
    return this.metrics.outerOrigin[this.mode]();
  }
  get outerOrientation() {
    var t3, e2;
    const r2 = this.metrics.system.nodeAdapters.get(this.metrics.node);
    return r2 ? r2.outerOrientation[this.mode] : (e2 = (t3 = this.referenceState) == null ? void 0 : t3.worldOrientation) != null ? e2 : xt;
  }
  get outerVisualBounds() {
    return this._cachedOuterVisualBounds();
  }
  get outerVisualCenter() {
    return this.outerVisualBounds, this._outerVisualCenter;
  }
  get outerVisualSize() {
    return this.outerVisualBounds, this._outerVisualSize;
  }
  get _viewState() {
    if (this.metrics.system.viewNode === this.metrics.node)
      return this;
    const t3 = this.metrics.system.viewMetrics;
    return this.mode === "current" ? t3[Dt] : t3[kt];
  }
  get viewFromWorld() {
    return this._viewFromWorld.multiplyMatrices(this._viewState.worldMatrixInverse, this.worldMatrix);
  }
  get viewFromSpatial() {
    return this._viewFromSpatial.multiplyMatrices(this._viewState.worldMatrixInverse, this.spatialMatrix);
  }
  get spatialFromView() {
    return this._spatialFromView.copy(this.viewFromSpatial).invert();
  }
  get ndcBounds() {
    return this._cachedNDCBounds();
  }
  get ndcCenter() {
    return this._cachedNDCBounds(), this._ndcCenter;
  }
  get ndcSize() {
    return this._cachedNDCBounds(), this._ndcSize;
  }
  get visualBounds() {
    return this._cachedVisualBounds();
  }
  get visualCenter() {
    return this._cachedVisualBounds(), this._visualCenter;
  }
  get visualSize() {
    return this._cachedVisualBounds(), this._visualSize;
  }
  get relativeViewPosition() {
    return this._viewPosition.copy(this._viewState.worldPosition).applyMatrix4(this.worldMatrixInverse);
  }
  get viewAlignedOrientation() {
    return this._cachedViewAlignedOrientation();
  }
  get occludingPercent() {
    return this._computeOcclusion(), this._occludingPercent;
  }
  get occludedPercent() {
    return this._computeOcclusion(), this._occludedPercent;
  }
  visualAverageEdgeLength() {
  }
};
let Bt = Lt;
Bt._boxA = new k(), Bt._boxB = new k(), Bt._sizeA = new e(), Bt._sizeB = new e();
class Ft {
  constructor(t3, e2) {
    this.system = t3, this.node = e2, this._cache = new zt(), this.needsUpdate = true, this._cachedInnerBounds = this._cache.memoize(() => {
      const t4 = this._innerBounds;
      if (!this.raw.parent)
        return t4.makeEmpty();
      if (this.node !== this.system.viewNode) {
        t4.copy(this.intrinsicBounds);
        const e4 = this._childBounds;
        for (const r3 of this.boundingChildMetrics)
          r3.update(), e4.copy(r3.innerBounds), e4.applyMatrix4(r3.raw.relativeMatrix), t4.union(e4);
      }
      const e3 = t4.getCenter(this._innerCenter), r2 = t4.getSize(this._innerSize);
      if (r2.length() > 0) {
        const n2 = this.system.epsillonMeters;
        Math.abs(r2.x) <= n2 && (r2.x = (Math.sign(r2.x) || 1) * n2 * 1e3), Math.abs(r2.y) <= n2 && (r2.y = (Math.sign(r2.y) || 1) * n2 * 1e3), Math.abs(r2.z) <= n2 && (r2.z = (Math.sign(r2.z) || 1) * n2 * 1e3, e3.z -= 1e3 * n2 / 2), t4.setFromCenterAndSize(e3, r2);
      }
      return t4;
    }), this._childBounds = new I(), this._innerBounds = new I(), this._innerCenter = new l(), this._innerSize = new l(), this._intrinsicBoundsNeedsUpdate = true, this._intrinsicBounds = new I(), this._intrinsicCenter = new l(), this._intrinsicSize = new l(), this._cachedNodeChildren = this._cache.memoize(() => (this.system.bindings.getChildren(this, this._nodeChildren), this._nodeChildren)), this._nodeChildren = new Array(), this._computeState = (() => {
      const t4 = new m(), e3 = new c(), r2 = new m(), n2 = new l(), i2 = new c(), s2 = new l(), a2 = new l(), o2 = new l(), u2 = new l(), h = new l();
      return function(c2) {
        var l2;
        c2.parent = this.raw.parent;
        const p2 = this._adapter, f2 = (l2 = this.referenceMetrics) == null ? void 0 : l2[c2.mode];
        e3.copy((p2 == null ? void 0 : p2.orientation.enabled) && (p2 == null ? void 0 : p2.orientation[c2.mode]) || this.raw.relativeOrientation);
        const d = (p2 == null ? void 0 : p2.bounds.enabled) && (p2 == null ? void 0 : p2.bounds[c2.mode]);
        if (d) {
          d.getCenter(a2), d.getSize(o2);
          const t5 = this.innerCenter, l3 = this.innerSize, p3 = this.system.epsillonMeters;
          Math.abs(o2.x) <= p3 && (o2.x = (Math.sign(o2.x) || 1) * p3 * 10), Math.abs(o2.y) <= p3 && (o2.y = (Math.sign(o2.y) || 1) * p3 * 10), Math.abs(o2.z) <= p3 && (o2.z = (Math.sign(o2.z) || 1) * p3 * 10), s2.copy(o2), Math.abs(l3.x) >= p3 && (s2.x /= l3.x), Math.abs(l3.y) >= p3 && (s2.y /= l3.y), Math.abs(l3.z) >= p3 && (s2.z /= l3.z), i2.multiplyQuaternions(c2.outerOrientation, e3).normalize(), u2.copy(a2).applyQuaternion(i2), h.copy(t5).multiply(s2).applyQuaternion(i2), n2.copy(c2.outerOrigin).add(u2).sub(h), r2.compose(n2, i2, s2), c2.worldMatrix = r2;
        } else
          t4.compose(this.raw.relativePosition, e3, this.raw.relativeScale), c2.worldMatrix = (f2 == null ? void 0 : f2.worldMatrix) ? r2.multiplyMatrices(f2 == null ? void 0 : f2.worldMatrix, t4) : t4;
        const m2 = (p2 == null ? void 0 : p2.opacity.enabled) && (p2 == null ? void 0 : p2.opacity[c2.mode]);
        return c2.opacity = typeof m2 == "number" ? m2 : 1, c2;
      };
    })(), this.raw = { parent: null, worldMatrix: new m(), relativeMatrix: new m(), opacity: 0, worldPosition: new l(), worldOrientation: new c(), worldScale: new l(), relativePosition: new l(), relativeOrientation: new c(), relativeScale: new l(), spatialBounds: new I(), worldFromSpatial: new m(), localFromSpatial: new m(), spatialFromLocal: new m() }, this.outerOrigin = { current: () => this._getOuterOrigin("current"), target: () => this._getOuterOrigin("target") }, this._cachedCurrentState = this._cache.memoize(() => this._computeState(this[Dt])), this[Ct] = new Bt("current", this), this._cachedTargetState = this._cache.memoize(() => this._computeState(this[kt])), this[At] = new Bt("target", this), this[Rt] = new Bt("target", this), this._cachedBoundsChildren = this._cache.memoize(() => {
      const t4 = this.nodeChildren, e3 = this._boundingChildren;
      e3.length = 0;
      for (const r2 of t4) {
        const t5 = this.system.getMetrics(r2);
        t5.isAdaptive || e3.push(t5);
      }
      return e3;
    }), this._boundingChildren = [];
  }
  update() {
    var t3, e2;
    if (this.needsUpdate) {
      this.needsUpdate = false;
      const r2 = this._adapter = this.system.nodeAdapters.get(this.node);
      this.parentNode = this.raw.parent, this.parentMetrics = this.parentNode && this.system.getMetrics(this.parentNode);
      const n2 = ((t3 = r2 == null ? void 0 : r2.activeLayout) == null ? void 0 : t3.referenceNode) || (r2 == null ? void 0 : r2.referenceNode) || this.parentNode;
      this.referenceMetrics = n2 && this.system.getMetrics(n2), (e2 = this.referenceMetrics) == null || e2.update(), r2 ? r2._update() : (this.invalidateInnerBounds(), this.invalidateStates(), this.updateRawState());
    }
  }
  get innerBounds() {
    return this._cachedInnerBounds();
  }
  get innerCenter() {
    return this.innerBounds, this._innerCenter;
  }
  get innerSize() {
    return this.innerBounds, this._innerSize;
  }
  get intrinsicBounds() {
    return this._intrinsicBoundsNeedsUpdate && (this._intrinsicBoundsNeedsUpdate = false, this.system.bindings.getIntrinsicBounds(this, this._intrinsicBounds), this._intrinsicBounds.getCenter(this._intrinsicCenter), this._intrinsicBounds.getSize(this._intrinsicSize)), this._intrinsicBounds;
  }
  get intrinsicCenter() {
    return this.intrinsicBounds, this._intrinsicCenter;
  }
  get intrinsicSize() {
    return this.intrinsicBounds, this._intrinsicSize;
  }
  invalidateIntrinsicBounds() {
    this._intrinsicBoundsNeedsUpdate = true;
    for (const t3 of this.boundingChildMetrics)
      t3.invalidateIntrinsicBounds();
  }
  invalidateInnerBounds() {
    if (!this._cachedInnerBounds.needsUpdate) {
      this._cachedNodeChildren.needsUpdate = true, this._cachedBoundsChildren.needsUpdate = true, this._cachedInnerBounds.needsUpdate = true;
      for (const t3 of this.boundingChildMetrics)
        t3.invalidateInnerBounds();
    }
  }
  containsNode(t3) {
    this.update();
    let e2 = this.system.getMetrics(t3);
    for (; e2; ) {
      if (e2.parentMetrics === this)
        return e2.node;
      e2 = e2.parentMetrics;
    }
    return false;
  }
  containedByNode(t3) {
    this.update();
    let e2 = this.parentMetrics;
    for (; e2; ) {
      if (e2.node === t3)
        return e2.node;
      e2 = e2.parentMetrics;
    }
    return false;
  }
  get nodeChildren() {
    return this._cachedNodeChildren();
  }
  invalidateStates() {
    this._cachedCurrentState.needsUpdate = true, this._cachedTargetState.needsUpdate = true, this[Dt].invalidate(), this[kt].invalidate();
  }
  updateRawState() {
    this.system.bindings.getState(this);
    const t3 = this.raw;
    t3.worldMatrix.decompose(t3.worldPosition, t3.worldOrientation, t3.worldScale), t3.relativeMatrix.decompose(t3.relativePosition, t3.relativeOrientation, t3.relativeScale), t3.worldFromSpatial.compose(this.outerOrigin.target(), t3.worldOrientation, vt), t3.localFromSpatial.copy(t3.worldMatrix).invert().multiply(t3.worldFromSpatial), t3.spatialFromLocal.copy(t3.localFromSpatial).invert(), t3.spatialBounds.copy(this.innerBounds).applyMatrix4(t3.spatialFromLocal);
  }
  _getOuterOrigin(t3) {
    var e2, r2, n2;
    const i2 = this.system.nodeAdapters.get(this.node);
    return i2 ? i2.outerOrigin[t3] : (n2 = (r2 = (e2 = this.referenceMetrics) == null ? void 0 : e2[t3]) == null ? void 0 : r2.worldCenter) != null ? n2 : dt;
  }
  get current() {
    return this.update(), this._cachedCurrentState();
  }
  get target() {
    return this.update(), this._cachedTargetState();
  }
  get previousTarget() {
    return this.update(), this[It];
  }
  get boundingChildMetrics() {
    return this._cachedBoundsChildren();
  }
  get isAdaptive() {
    return this.system.nodeAdapters.has(this.node);
  }
}
Ct = Dt, At = kt, Rt = It;
class Pt {
  constructor(t3) {
    t3 && Object.assign(this, t3);
  }
}
class Ut {
  constructor(t3) {
    this.system = t3, this._config = new Pt(), this._prevOrientation = new c(), this._prevBounds = new I(), this._scratchSolution = new Kt(), this._scratchBestSolution = new Kt();
  }
  _setConfig(t3) {
    var e2, r2, n2, i2, s2, a2, o2, u2, h, c2;
    const l2 = this.system.optimize;
    this._config.minFeasibleTime = (e2 = t3.minFeasibleTime) != null ? e2 : l2.minFeasibleTime, this._config.maxInfeasibleTime = (r2 = t3.maxInfeasibleTime) != null ? r2 : l2.maxInfeasibleTime, this._config.pulseRate = (n2 = t3.pulseRate) != null ? n2 : l2.pulseRate, this._config.maxIterationsPerFrame = (i2 = t3.maxIterationsPerFrame) != null ? i2 : l2.maxIterationsPerFrame, this._config.swarmSize = (s2 = t3.swarmSize) != null ? s2 : l2.swarmSize, this._config.pulseFrequencyMin = (a2 = t3.pulseFrequencyMin) != null ? a2 : l2.pulseFrequencyMin, this._config.pulseFrequencyMax = (o2 = t3.pulseFrequencyMax) != null ? o2 : l2.pulseFrequencyMax, this._config.stepSizeMax = (u2 = t3.stepSizeMax) != null ? u2 : l2.stepSizeMax, this._config.stepSizeMin = (h = t3.stepSizeMin) != null ? h : l2.stepSizeMin, this._config.stepSizeStart = (c2 = t3.stepSizeStart) != null ? c2 : l2.stepSizeStart;
  }
  update(t3) {
    if (t3.layouts.length === 0 || t3.metrics.innerBounds.isEmpty())
      return t3.activeLayout = null, false;
    const e2 = this._prevOrientation.copy(t3.orientation.target), r2 = this._prevBounds.copy(t3.bounds.target);
    for (const s2 of t3.layouts)
      this._setConfig(s2), this._updateLayout(t3, s2);
    let n2, i2;
    for (const s2 of t3.layouts) {
      const t4 = s2.solutions[0];
      if ((!i2 || !i2.isFeasible && t4.isFeasible) && (i2 = t4, n2 = s2, i2.isFeasible))
        break;
    }
    return t3.layoutFeasibleTime += t3.system.deltaTime, t3.layoutInfeasibleTime += t3.system.deltaTime, (i2 == null ? void 0 : i2.isFeasible) || (t3.layoutFeasibleTime = 0), i2 && i2.isFeasible && t3.layoutFeasibleTime >= this._config.minFeasibleTime || t3.layoutInfeasibleTime >= this._config.maxInfeasibleTime ? (t3.layoutInfeasibleTime = 0, i2.apply(false)) : (t3.orientation.target = e2, t3.bounds.target = r2, t3.metrics.invalidateStates()), t3.activeLayout = n2, true;
  }
  _updateLayout(t3, e2) {
    var r2;
    t3.measureBoundsCache.clear(), e2.processObjectives();
    const n2 = e2.solutions, i2 = this._config, s2 = this._scratchSolution, a2 = this._scratchBestSolution;
    let o2 = i2.maxIterationsPerFrame;
    ((r2 = e2.solutions[0]) == null ? void 0 : r2.isFeasible) && (o2 = 1), this._manageSolutionPopulation(t3, e2, i2.swarmSize, i2.stepSizeStart), n2[0].apply();
    for (let u2 = 0; u2 < o2; u2++) {
      e2.iteration++, a2.copy(n2[0]);
      let t4 = false;
      for (let r3 = 0; r3 < n2.length; r3++) {
        const o3 = n2[r3];
        let u3;
        if (s2.copy(o3), s2.mutationStrategies = o3.mutationStrategies, Math.random() < i2.pulseRate) {
          const t5 = a2 !== o3 ? a2 : n2[1];
          let r4;
          if (n2.length > 2)
            do {
              r4 = n2[Math.floor(Math.random() * n2.length)];
            } while (r4 === o3);
          s2.moveTowards(t5, i2.pulseFrequencyMin, i2.pulseFrequencyMax), r4 && e2.compareSolutions(r4, o3) <= 0 && s2.moveTowards(r4, i2.pulseFrequencyMin, i2.pulseFrequencyMax);
        } else
          u3 = s2.perturb();
        s2.apply();
        const h = e2.compareSolutions(s2, o3) < 0;
        if (h && (o3.copy(s2), o3 !== n2[0] && e2.compareSolutions(o3, n2[0]) < 0 && n2[0].copy(o3), t4 = true), u3)
          if (u3.stepSize *= h ? 1.5 : 0.9036020036098449, !h && u3.stepSize < i2.stepSizeMin || u3.stepSize > i2.stepSizeMax) {
            for (const t5 of o3.mutationStrategies)
              t5.stepSize = i2.stepSizeStart;
            o3 !== n2[0] && (e2.restartRate = 1e-3 + 0.999 * e2.restartRate, o3.randomize(1), o3.apply(), t4 = true);
          } else
            o3 !== n2[0] && (e2.restartRate = 0.999 * e2.restartRate);
      }
      t4 && e2.sortSolutions(), e2.compareSolutions(a2, n2[0]) <= 0 ? e2.successRate = 0.995 * e2.successRate : e2.successRate = 5e-3 + 0.995 * e2.successRate;
    }
  }
  _manageSolutionPopulation(t3, e2, r2, n2) {
    if (r2 <= 1)
      throw new Error("Swarm size must be larger than 1");
    if (e2.solutions.length < r2)
      for (; e2.solutions.length < r2; ) {
        const t4 = new Kt(e2);
        for (const e3 of t4.mutationStrategies)
          e3.stepSize = n2;
        t4.randomize(1), e2.solutions.push(t4);
      }
    else if (e2.solutions.length > r2)
      for (; e2.solutions.length > r2; )
        e2.solutions.pop();
  }
}
class jt {
  constructor(t3) {
    this.type = "ratio", this.sortBlame = 0, this.relativeTolerance = void 0, this.absoluteTolerance = void 0, this.computedAbsoluteTolerance = -1 / 0, this.computedRelativeTolerance = -1 / 0, this.priority = 0, this.index = -1, this.reduceFromOneOrManySpec = (t4, e2, r2) => {
      if (e2 === void 0)
        return 0;
      if (e2 instanceof Array) {
        let n2 = -1 / 0;
        for (const i2 of e2)
          n2 = Math.max(r2(t4, i2), n2);
        return n2;
      }
      return r2(t4, e2);
    }, this._getNumberScoreSingle = (t4, e2) => {
      let r2 = 0;
      if (typeof e2 != "object") {
        const n2 = this.layout.adapter.system.measureNumber(e2);
        r2 = -Math.abs(t4 - n2);
      } else {
        const n2 = "gt" in e2 ? this.layout.adapter.system.measureNumber(e2.gt) : void 0, i2 = "lt" in e2 ? this.layout.adapter.system.measureNumber(e2.lt) : void 0;
        n2 !== void 0 && t4 < n2 ? r2 = t4 - n2 : i2 !== void 0 && t4 > i2 && (r2 = i2 - t4);
      }
      return r2;
    }, this._getVector3ScoreSingle = (t4, e2) => ("x" in e2 && e2.x !== void 0 ? this.getNumberScore(t4.x, e2.x) : 0) + ("y" in e2 && e2.y !== void 0 ? this.getNumberScore(t4.y, e2.y) : 0) + ("z" in e2 && e2.z !== void 0 ? this.getNumberScore(t4.z, e2.z) : 0) + ("magnitude" in e2 && e2.magnitude !== void 0 ? this.getNumberScore(t4.length(), e2.magnitude) : 0), this._quat = new c(), this._euler = new E(), this._getQuaternionScoreSingle = (t4, e2) => {
      var r2, n2;
      if (e2 === void 0)
        return 0;
      if ("x" in e2) {
        return -this._quat.copy(e2).angleTo(t4) * s;
      }
      if ("swingRange" in e2) {
        const i2 = this._euler.setFromQuaternion(t4), a2 = i2.x * s, o2 = i2.y * s, u2 = i2.z * s, h = this.layout.adapter.system, c2 = h.mathScope.degree;
        let l2 = ((r2 = e2.swingRange) == null ? void 0 : r2.x) ? h.measureNumber(e2.swingRange.x, c2) : 0, p2 = ((n2 = e2.swingRange) == null ? void 0 : n2.y) ? h.measureNumber(e2.swingRange.y, c2) : 0;
        l2 = Math.max(l2, 0.01), p2 = Math.max(p2, 0.01);
        const f2 = 1 - (a2 / l2) ** 2 - (o2 / p2) ** 2, d = (e2.twistRange ? h.measureNumber(e2.twistRange, c2) : 0) - Math.abs(u2);
        return (f2 > 0 ? 0 : f2) + (d > 0 ? 0 : d);
      }
      return 0;
    }, this._getBoundsMeasureScoreSingle = (t4, e2, r2, n2) => {
      if (e2 === void 0)
        return 0;
      if (typeof e2 == "object") {
        if ("gt" in e2) {
          const i2 = this.layout.adapter.measureBounds(e2.gt, r2, n2);
          if (t4 < i2)
            return t4 - i2;
        }
        if ("lt" in e2) {
          const i2 = this.layout.adapter.measureBounds(e2.lt, r2, n2);
          if (t4 > i2)
            return i2 - t4;
        }
        return 0;
      }
      return -Math.abs(t4 - this.layout.adapter.measureBounds(e2, r2, n2));
    }, this.layout = t3;
  }
  static isDiscreteSpec(t3) {
    const e2 = typeof t3;
    return e2 === "string" || e2 === "number";
  }
  static isContinuousSpec(t3) {
    return t3 !== void 0 && t3 instanceof Array == false && typeof t3 == "object" && ("gt" in t3 || "lt" in t3) == true;
  }
  get bestScore() {
    return this.layout.solutions[0].scores[this.index];
  }
  getNumberScore(t3, e2) {
    return this.reduceFromOneOrManySpec(t3, e2, this._getNumberScoreSingle);
  }
  getVector3Score(t3, e2) {
    return this.reduceFromOneOrManySpec(t3, e2, this._getVector3ScoreSingle);
  }
  getQuaternionScore(t3, e2) {
    return this.reduceFromOneOrManySpec(t3, e2, this._getQuaternionScoreSingle);
  }
  getBoundsScore(t3, e2) {
    if (t3 === void 0)
      return 0;
    let r2 = 0;
    for (const n2 in t3) {
      if (n2 === "absolute")
        continue;
      let i2 = n2;
      if (i2 === "size" || i2 === "center") {
        const n3 = t3[i2];
        for (const t4 of $t) {
          let s2 = t4;
          if (e2 !== "spatial") {
            if (this.type === "meter" && s2 !== "z")
              continue;
            if (this.type === "pixel" && s2 === "z")
              continue;
          }
          r2 += this.getBoundsMeasureScore(n3 == null ? void 0 : n3[s2], e2, i2 + s2);
        }
      } else {
        if (e2 !== "spatial") {
          if (this.type === "meter" && i2 !== "back" && i2 !== "front")
            continue;
          if (this.type === "pixel" && (i2 === "back" || i2 === "front"))
            continue;
        }
        r2 += this.getBoundsMeasureScore(t3[i2], e2, i2);
      }
    }
    return r2;
  }
  getBoundsMeasureScore(t3, e2, r2) {
    if (t3 === void 0)
      return 0;
    const n2 = this.layout.adapter.metrics.target;
    let i2, s2, a2;
    switch (e2) {
      case "spatial":
        i2 = n2.spatialBounds, s2 = n2.spatialCenter, a2 = n2.spatialSize;
        break;
      case "visual":
      case "view":
        i2 = n2.visualBounds, s2 = n2.visualCenter, a2 = n2.visualSize;
        break;
      default:
        throw new Error(`Unknown measure type "${e2}.${r2}" in spec:
 "${t3}"`);
    }
    let o2 = 0;
    switch (r2) {
      case "left":
        o2 = i2.min.x;
        break;
      case "right":
        o2 = i2.max.x;
        break;
      case "bottom":
        o2 = i2.min.y;
        break;
      case "top":
        o2 = i2.max.y;
        break;
      case "back":
        o2 = i2.min.z;
        break;
      case "front":
        o2 = i2.max.z;
        break;
      case "centerx":
        o2 = s2.x;
        break;
      case "centery":
        o2 = s2.y;
        break;
      case "centerz":
        o2 = s2.z;
        break;
      case "centerdistance":
        o2 = e2 === "spatial" ? s2.length() : Math.sqrt(s2.x ** 2 + a2.y ** 2);
        break;
      case "sizex":
        o2 = a2.x;
        break;
      case "sizey":
        o2 = a2.y;
        break;
      case "sizez":
        o2 = a2.z;
        break;
      case "sizediagonal":
        o2 = e2 === "spatial" ? a2.length() : Math.sqrt(a2.x ** 2 + a2.y ** 2);
        break;
      default:
        throw new Error(`Unknown measure subtype ${e2}.${r2} in spec "${t3}"`);
    }
    if (t3 instanceof Array) {
      let n3 = -1 / 0;
      for (const i3 of t3)
        n3 = Math.max(this._getBoundsMeasureScoreSingle(o2, i3, e2, r2), n3);
      return n3;
    }
    return this._getBoundsMeasureScoreSingle(o2, t3, e2, r2);
  }
  attenuateVisualScore(t3) {
    let e2 = 0;
    const r2 = this.layout.getComputedAbsoluteTolerance("pixel"), n2 = this.layout.adapter, i2 = n2.system.viewResolution, s2 = n2.system.viewFrustum, a2 = i2.x, o2 = i2.y, u2 = i2.length(), h = n2.metrics.target.visualBounds, c2 = h.min.x - -a2 / 2 + r2, l2 = h.max.x - a2 / 2 - r2, p2 = h.min.y - -o2 / 2 + r2, f2 = h.max.y - o2 / 2 - r2, d = h.max.z + s2.nearMeters;
    return c2 < 0 && (e2 += Math.abs(c2 / a2)), l2 > 0 && (e2 += Math.abs(l2 / a2)), p2 < 0 && (e2 += Math.abs(p2 / o2)), f2 > 0 && (e2 += Math.abs(f2 / o2)), d > 0 && (e2 += 10 * d), t3 - Math.abs(u2) * e2;
  }
}
class qt extends jt {
  constructor(t3) {
    super(t3), this.type = "degree";
  }
  evaluate() {
    const t3 = this.layout.adapter.metrics.target;
    return this.getQuaternionScore(t3.relativeOrientation, this.spec);
  }
}
class Ht extends jt {
  constructor(t3) {
    super(t3), this.type = "ratio";
  }
  evaluate() {
    const t3 = this.layout.adapter.metrics.target;
    return this.getVector3Score(t3.worldScale, this.spec);
  }
}
class Vt extends jt {
  constructor(t3) {
    super(t3), this.mode = "xyz", this._scale = new l(), this.type = "ratio";
  }
  evaluate() {
    const t3 = this.layout.adapter.metrics.target, e2 = this.mode;
    if (!e2)
      return 0;
    const r2 = this._scale.copy(t3.worldScale), n2 = e2 === "xyz" ? Math.max(Math.abs(r2.x), Math.abs(r2.y), Math.abs(r2.z)) : Math.max(Math.abs(r2.x), Math.abs(r2.y)), i2 = r2.divideScalar(n2);
    return -1 / i2.x + 1 + -1 / i2.y + 1 + (e2 === "xyz" ? -1 / i2.z + 1 : i2.z > 1 ? 1 - i2.z : 0);
  }
}
const $t = ["x", "y", "z", "diagonal", "distance"];
class Gt extends jt {
  constructor(t3) {
    super(t3), this.type = "meter";
  }
  evaluate() {
    return this.getBoundsScore(this.spec, "spatial");
  }
}
class Wt extends jt {
  constructor(t3) {
    super(t3), this.pixelTolerance = void 0, this.meterTolerance = void 0, this.type = "pixel";
  }
  evaluate() {
    var t3;
    return this.type === "meter" && (this.absoluteTolerance = this.meterTolerance), this.type === "pixel" && (this.absoluteTolerance = this.pixelTolerance), this.getBoundsScore(this.spec, "visual") + this.getBoundsScore((t3 = this.spec) == null ? void 0 : t3.absolute, "view");
  }
}
class Yt extends jt {
  constructor(t3) {
    super(t3), this.minAreaPercent = 0, this.type = "pixel";
  }
  evaluate() {
    var t3;
    const e2 = this.layout.adapter.metrics.target, r2 = e2.visualSize, n2 = this.layout.adapter.system.viewResolution, i2 = Math.min(r2.x * r2.y, n2.x * n2.y), s2 = ((t3 = e2.referenceState) == null ? void 0 : t3.visualSize) || n2, a2 = s2.x * s2.y;
    return this.attenuateVisualScore(i2) - a2 * this.minAreaPercent;
  }
}
class Zt extends jt {
  constructor(t3) {
    super(t3), this.type = "meter", this.absoluteTolerance = 1e10;
  }
  evaluate() {
    return -this.layout.adapter.metrics.target.visualCenter.length();
  }
}
const Xt = new l();
class Jt extends Pt {
  constructor(t3) {
    super(), this.adapter = t3, this.absoluteTolerance = { meter: "10mm", pixel: "4px", degree: "0.002deg", ratio: 2e-3 }, this.successRate = 0, this.restartRate = 0, this.objectives = new Array(), this.referenceNode = null, this.solutions = new Array(), this.iteration = 0, this.compareSolutions = (t4, e2) => {
      const r2 = this.objectives;
      if (t4.scores.length < r2.length)
        return 1;
      if (e2.scores.length < r2.length)
        return -1;
      if (t4.boundsCenterDistance > 1e20)
        return 1;
      if (e2.boundsCenterDistance > 1e10)
        return -1;
      if (t4.boundsManhattanLength > 1e20)
        return 1;
      if (e2.boundsManhattanLength > 1e10)
        return -1;
      const n2 = t4.isFeasible, i2 = e2.isFeasible;
      if (n2 && !i2)
        return -1;
      if (i2 && !n2)
        return 1;
      let s2 = 0;
      const a2 = this.solutions[0].scores;
      for (let o2 = 0; o2 < r2.length; o2++) {
        const n3 = t4.scores[o2], i3 = e2.scores[o2];
        if (isNaN(n3))
          return 1;
        if (isNaN(i3))
          return -1;
        const u2 = r2[o2], h = u2.computedRelativeTolerance, c2 = u2.computedAbsoluteTolerance, l2 = Math.max(a2[o2], n3, i3), p2 = Math.min(l2 - Math.abs(l2) * h, -c2);
        if (n3 < p2 || i3 < p2)
          return u2.sortBlame++, i3 - n3;
        i3 - n3 != 0 && (s2 = i3 - n3);
      }
      return s2;
    };
  }
  getComputedAbsoluteTolerance(t3) {
    return this.adapter.system.measureNumber(this.absoluteTolerance[t3], t3);
  }
  poseRelativeTo(t3) {
    return this.referenceNode = t3, this;
  }
  maximize(t3) {
    var e2;
    const r2 = this.maximizeObjective = (e2 = this.maximizeObjective) != null ? e2 : new Yt(this);
    return r2.priority = -1e3, r2.relativeTolerance = 0.1, this.addObjective(r2, t3);
  }
  orientation(t3, e2) {
    var r2;
    const n2 = this.orientationConstraint = (r2 = this.orientationConstraint) != null ? r2 : new qt(this);
    return n2.spec = t3, n2.priority = -999, this.addObjective(n2, e2);
  }
  keepAspect(t3 = "xyz", e2) {
    var r2;
    const n2 = this.keepAspectConstraint = (r2 = this.keepAspectConstraint) != null ? r2 : new Vt(this);
    return n2.mode = t3, n2.priority = -998, this.addObjective(n2, e2);
  }
  scale(t3, e2) {
    var r2;
    const n2 = this.scaleConstraint = (r2 = this.scaleConstraint) != null ? r2 : new Ht(this);
    return n2.spec = t3, n2.priority = -2, this.addObjective(n2, e2);
  }
  bounds(t3, e2) {
    var r2;
    const n2 = this.boundsConstraint = (r2 = this.boundsConstraint) != null ? r2 : new Gt(this);
    return n2.spec = t3, this.addObjective(n2, e2);
  }
  visualOrientation(t3, e2) {
    var r2;
    const n2 = this.orientationConstraint = (r2 = this.orientationConstraint) != null ? r2 : new qt(this);
    return n2.spec = t3, n2.priority = -999, this.addObjective(n2, e2);
  }
  visualBounds(t3, e2) {
    var r2, n2;
    const i2 = this.visualBoundsMeterConstraint = (r2 = this.visualBoundsMeterConstraint) != null ? r2 : new Wt(this), s2 = this.visualBoundsPixelConstraint = (n2 = this.visualBoundsPixelConstraint) != null ? n2 : new Wt(this);
    return i2.spec = t3, i2.type = "meter", s2.spec = t3, s2.type = "pixel", this.addObjective(i2, e2).addObjective(s2, e2);
  }
  magnetize(t3) {
    var e2;
    const r2 = this.magnetizeObjective = (e2 = this.magnetizeObjective) != null ? e2 : new Zt(this);
    return r2.priority = -900, r2.relativeTolerance = 0.95, this.addObjective(r2, t3);
  }
  avoidOcclusion(t3) {
    var e2;
    const r2 = this.minimizeOcclusionObjective = (e2 = this.minimizeOcclusionObjective) != null ? e2 : new Zt(this);
    return r2.priority = 11, this.addObjective(r2, t3);
  }
  addObjective(t3, e2) {
    return Object.assign(t3, e2), this.objectives.indexOf(t3) === -1 && this.objectives.push(t3), this.processObjectives(), this;
  }
  get hasValidSolution() {
    var t3;
    return ((t3 = this.solutions[0]) == null ? void 0 : t3.isFeasible) === true;
  }
  processObjectives() {
    var t3, e2;
    const r2 = this.adapter.system, n2 = this.objectives;
    let i2 = 0;
    for (const s2 of n2)
      s2.index = i2++, s2.computedAbsoluteTolerance = s2.absoluteTolerance !== void 0 ? r2.measureNumber(s2.absoluteTolerance, r2.mathScope[s2.type]) : this.getComputedAbsoluteTolerance(s2.type), s2.computedRelativeTolerance = (e2 = (t3 = s2.relativeTolerance) != null ? t3 : this.relativeTolerance) != null ? e2 : this.adapter.system.optimize.relativeTolerance;
  }
  sortSolutions() {
    this.solutions.sort(this.compareSolutions), this.bestSolution = this.solutions[0];
  }
}
const Qt = class {
  constructor(t3) {
    this.layout = void 0, this.orientation = new c(), this.bounds = new I(), this.scores = [], this.isFeasible = false, this.mutationStrategies = [{ type: "rotate", stepSize: 0.1 }, { type: "center", stepSize: 0.1 }, { type: "size", stepSize: 0.1 }, { type: "minmax", stepSize: 0.1 }], this._mutationWeights = [], t3 && (this.layout = t3);
  }
  get aspectPenalty() {
    return this.scores[this.layout.objectives.indexOf(this.layout.keepAspectConstraint)] || 0;
  }
  get orientationPenalty() {
    return this.scores[this.layout.objectives.indexOf(this.layout.orientationConstraint)] || 0;
  }
  get spatialBoundsPenalty() {
    return this.scores[this.layout.objectives.indexOf(this.layout.boundsConstraint)] || 0;
  }
  _selectStrategy() {
    const t3 = this.mutationStrategies, e2 = this._mutationWeights, r2 = this.layout.orientationConstraint, n2 = this.layout.keepAspectConstraint;
    for (let i2 = 0; i2 < t3.length; i2++)
      e2[i2] = t3[i2].stepSize, r2 && t3[i2].type == "rotate" && this.orientationPenalty > -r2.computedAbsoluteTolerance && (e2[i2] *= 0.01), n2 && t3[i2].type == "size" && this.aspectPenalty < -n2.computedAbsoluteTolerance && (e2[i2] *= 100);
    return Tt(t3, e2);
  }
  copy(t3) {
    this.layout = t3.layout, this.orientation.copy(t3.orientation), this.bounds.copy(t3.bounds), this.scores.length = 0;
    for (let e2 = 0; e2 < t3.scores.length; e2++)
      this.scores[e2] = t3.scores[e2];
    return this.isFeasible = t3.isFeasible, this;
  }
  randomize(t3) {
    const e2 = Et(t3), r2 = Qt._scratchV1.set(0, 0, -e2), n2 = this.layout.adapter.system.viewMetrics.target;
    r2.applyMatrix4(n2.worldMatrix);
    const s2 = this.layout.adapter.metrics.target.parentState;
    s2 && r2.applyMatrix4(s2.worldMatrixInverse), this.orientation.copy(n2.worldOrientation), s2 && this.orientation.multiply(s2.worldOrientationInverse);
    const a2 = this.layout.adapter.metrics.innerBounds, o2 = a2.isEmpty() ? Qt._scratchV2.set(1, 1, 1) : a2.getSize(Qt._scratchV2);
    return o2.normalize(), o2.multiplyScalar(2 * e2 * Math.tan(5 * i)), this.bounds.setFromCenterAndSize(r2, o2), this;
  }
  moveTowards(t3, e2, r2) {
    const n2 = this.bounds.getCenter(Qt._center), i2 = this.bounds.getSize(Qt._size), s2 = t3.bounds, a2 = s2.getCenter(Qt._otherCenter), o2 = s2.getSize(Qt._otherSize);
    this.orientation.slerp(t3.orientation, Qt.generatePulseFrequency(e2, r2)).normalize(), Math.random() < 0.5 ? (n2.lerp(a2, Qt.generatePulseFrequency(e2, r2)), i2.lerp(o2, Qt.generatePulseFrequency(e2, r2)), this.bounds.setFromCenterAndSize(n2, i2)) : (this.bounds.min.lerp(s2.min, Qt.generatePulseFrequency(e2, r2)), this.bounds.max.lerp(s2.max, Qt.generatePulseFrequency(e2, r2)));
  }
  perturb() {
    var t3;
    const e2 = this._selectStrategy(), r2 = e2.type;
    let n2 = e2.stepSize;
    if (r2 === "rotate" || Math.random() < 1e-3) {
      const e3 = (t3 = this.layout.orientationConstraint) == null ? void 0 : t3.spec;
      if ((e3 == null ? void 0 : e3.isQuaternion) && this.orientationPenalty < e3.computedAbsoluteTolerance && Math.random() < 0.01)
        this.orientation.copy(e3);
      else {
        const t4 = Math.min(Et(1e-4 * Math.min(n2, 1)), 1);
        this.orientation.multiply(St(t4, t4)).normalize();
      }
    }
    const i2 = this.bounds, s2 = i2.getCenter(Qt._center), a2 = i2.getSize(Qt._size);
    if (r2 === "center") {
      const t4 = Qt._direction.set(0, 0, 1).applyQuaternion(St(1, 1));
      t4.setLength(Nt(n2)).multiplyScalar(a2.length()), s2.add(t4);
    }
    if (r2 === "size") {
      const t4 = 2 ** Nt(n2);
      a2.multiplyScalar(t4);
    }
    if (a2.clampScalar(this.layout.adapter.system.epsillonMeters / 10, 1e20), i2.setFromCenterAndSize(s2, a2), r2 === "minmax") {
      const t4 = Qt._direction.set(0, 0, 1).applyQuaternion(St(1, 1));
      t4.setLength(Nt(n2)).multiply(a2), i2.min.add(t4);
    }
    const o2 = i2.min, u2 = i2.max;
    return o2.x > u2.x && this._swap(o2, u2, "x"), o2.y > u2.y && this._swap(o2, u2, "y"), o2.z > u2.z && this._swap(o2, u2, "z"), e2;
  }
  _swap(t3, e2, r2) {
    const n2 = t3[r2], i2 = e2[r2];
    t3[r2] = i2, e2[r2] = n2;
  }
  static generatePulseFrequency(t3, e2) {
    return t3 + Math.random() * (e2 - t3);
  }
  apply(t3 = true) {
    const e2 = this.layout, r2 = e2.adapter;
    if (r2.orientation.target = this.orientation, r2.bounds.target = this.bounds, r2.metrics.invalidateStates(), t3) {
      this.isFeasible = true;
      for (let t4 = 0; t4 < e2.objectives.length; t4++) {
        const r3 = e2.objectives[t4], n2 = this.scores[t4] = r3.evaluate();
        (n2 < -r3.computedAbsoluteTolerance || !isFinite(n2)) && (this.isFeasible = false);
      }
    }
    this.boundsManhattanLength = this.bounds.getSize(Xt).manhattanLength(), this.boundsCenterDistance = this.bounds.getCenter(Xt).length();
  }
};
let Kt = Qt;
Kt._scratchV1 = new l(), Kt._scratchV2 = new l(), Kt._direction = new l(), Kt._center = new l(), Kt._size = new l(), Kt._otherCenter = new l(), Kt._otherSize = new l();
var te = function(t3) {
  return function(e2) {
    return 1 - t3(1 - e2);
  };
}, ee = function(t3) {
  return function(e2) {
    return e2 <= 0.5 ? t3(2 * e2) / 2 : (2 - t3(2 * (1 - e2))) / 2;
  };
}, re = te, ne = ee, ie = function(t3) {
  return function(e2) {
    return Math.pow(e2, t3);
  };
}, se = function(t3) {
  return function(e2) {
    return e2 * e2 * ((t3 + 1) * e2 - t3);
  };
}, ae = function(t3) {
  var e2 = se(t3);
  return function(t4) {
    return (t4 *= 2) < 1 ? 0.5 * e2(t4) : 0.5 * (2 - Math.pow(2, -10 * (t4 - 1)));
  };
}, oe = ie(2), ue = te(oe), he = ee(oe), ce = function(t3) {
  return 1 - Math.sin(Math.acos(t3));
}, le = te(ce), pe = ee(le), fe = se(1.525), de = te(fe), me = ee(fe), ye = ae(1.525), ge = function(t3) {
  var e2 = t3 * t3;
  return t3 < 0.36363636363636365 ? 7.5625 * e2 : t3 < 0.7272727272727273 ? 9.075 * e2 - 9.9 * t3 + 3.4 : t3 < 0.9 ? 12.066481994459833 * e2 - 19.63545706371191 * t3 + 8.898060941828255 : 10.8 * t3 * t3 - 20.52 * t3 + 10.72;
}, ve = typeof Float32Array != "undefined", xe = function(t3, e2) {
  return 1 - 3 * e2 + 3 * t3;
}, we = function(t3, e2) {
  return 3 * e2 - 6 * t3;
}, be = function(t3) {
  return 3 * t3;
}, _e = function(t3, e2, r2) {
  return 3 * xe(e2, r2) * t3 * t3 + 2 * we(e2, r2) * t3 + be(e2);
}, Me = function(t3, e2, r2) {
  return ((xe(e2, r2) * t3 + we(e2, r2)) * t3 + be(e2)) * t3;
};
const Ne = Object.freeze({ __proto__: null, [Symbol.toStringTag]: "Module", reversed: te, mirrored: ee, createReversedEasing: re, createMirroredEasing: ne, createExpoIn: ie, createBackIn: se, createAnticipateEasing: ae, linear: function(t3) {
  return t3;
}, easeIn: oe, easeOut: ue, easeInOut: he, circIn: ce, circOut: le, circInOut: pe, backIn: fe, backOut: de, backInOut: me, anticipate: ye, bounceOut: ge, bounceIn: function(t3) {
  return 1 - ge(1 - t3);
}, bounceInOut: function(t3) {
  return t3 < 0.5 ? 0.5 * (1 - ge(1 - 2 * t3)) : 0.5 * ge(2 * t3 - 1) + 0.5;
}, cubicBezier: function(t3, e2, r2, n2) {
  var i2 = ve ? new Float32Array(11) : new Array(11), s2 = function(e3) {
    for (var n3, s3, a2, o2 = 0, u2 = 1; u2 !== 10 && i2[u2] <= e3; ++u2)
      o2 += 0.1;
    return --u2, n3 = (e3 - i2[u2]) / (i2[u2 + 1] - i2[u2]), (a2 = _e(s3 = o2 + 0.1 * n3, t3, r2)) >= 1e-3 ? function(e4, n4) {
      for (var i3 = 0, s4 = 0; i3 < 8; ++i3) {
        if ((s4 = _e(n4, t3, r2)) === 0)
          return n4;
        n4 -= (Me(n4, t3, r2) - e4) / s4;
      }
      return n4;
    }(e3, s3) : a2 === 0 ? s3 : function(e4, n4, i3) {
      var s4, a3, o3 = 0;
      do {
        (s4 = Me(a3 = n4 + (i3 - n4) / 2, t3, r2) - e4) > 0 ? i3 = a3 : n4 = a3;
      } while (Math.abs(s4) > 1e-7 && ++o3 < 10);
      return a3;
    }(e3, o2, o2 + 0.1);
  };
  return function() {
    for (var e3 = 0; e3 < 11; ++e3)
      i2[e3] = Me(0.1 * e3, t3, r2);
  }(), function(i3) {
    return t3 === e2 && r2 === n2 ? i3 : i3 === 0 ? 0 : i3 === 1 ? 1 : Me(s2(i3), e2, n2);
  };
} });
class Ee {
  constructor(t3) {
    t3 && Object.assign(this, t3);
  }
}
class Se {
  constructor(t3) {
    t3 && Object.assign(this, t3);
  }
}
const Te = new e(), Oe = new l(), ze = new c(), Ce = new I(), Ae = new R(), Re = new R(0, 0, 0);
class De extends Se {
  constructor(t3, e2, r2, n2 = t3.transition) {
    super(r2), this.system = t3, this.parentConfig = n2, this.needsUpdate = false, this._size = new l(), this.queue = [], this.enabled = false, this.forceWait = false, this._forceCommit = false, this._resolvedConfig = new Se(), this.delayTime = 0, this.debounceTime = 0, this._previousStatus = "unchanged", this._status = "unchanged", this.reset(e2), this._previousTarget = this._copy(this._previousTarget, this.target);
  }
  _copy(t3, e2) {
    if (e2 === void 0)
      return;
    if (typeof e2 == "number")
      return e2;
    const r2 = t3 ? t3.copy(e2) : e2.clone();
    if (r2 && "isBox3" in r2) {
      const t4 = r2, e3 = t4.getSize(this._size);
      !t4.isEmpty() && isFinite(e3.x) && isFinite(e3.y) && isFinite(e3.z) || t4.setFromCenterAndSize(dt, dt);
    }
    return r2;
  }
  _isEqual(t3, e2) {
    return t3 !== void 0 && e2 !== void 0 && (t3 === e2 || (typeof t3 == "number" ? t3 === e2 : (t3 == null ? void 0 : t3.equals(e2)) || false));
  }
  reset(t3) {
    this._start = this._copy(this._start, t3), this._current = this._copy(this._current, t3), this._target = this._copy(this._target, t3), this.queue.length = 0;
  }
  set start(t3) {
    this._start = this._copy(this._start, t3);
  }
  get start() {
    return this._start;
  }
  set current(t3) {
    this._current = this._copy(this._current, t3);
  }
  get current() {
    return this._current;
  }
  set reference(t3) {
    this._reference = this._copy(this._reference, t3);
  }
  get reference() {
    return this._reference;
  }
  set target(t3) {
    this.enabled = true, this._target = this._copy(this._target, t3);
  }
  get target() {
    return this._target;
  }
  get progress() {
    if (!this.enabled)
      return 1;
    if (this.queue.length > 0) {
      const t3 = this.queue[this.queue.length - 1];
      return t3.duration === 0 ? 0 : t3.elapsed / t3.duration;
    }
    return 1;
  }
  get forceCommit() {
    return this._forceCommit;
  }
  set forceCommit(t3) {
    this._forceCommit !== t3 && (this._forceCommit = t3);
  }
  get relativeDifference() {
    var t3, e2;
    const r2 = (e2 = (t3 = this.queue[this.queue.length - 1]) == null ? void 0 : t3.target) != null ? e2 : this.start;
    return this.target !== void 0 ? bt(r2, this.target) : 0;
  }
  get referenceRelativeDifference() {
    return this.reference !== void 0 && this.target !== void 0 ? bt(this.reference, this.target) : 1 / 0;
  }
  get resolvedConfig() {
    var t3, e2, r2, n2, i2, s2, a2, o2, u2, h, c2, l2, p2, f2, d, m2;
    const y2 = this._resolvedConfig, g2 = this.parentConfig, v2 = this.system.transition;
    return y2.multiplier = (e2 = (t3 = this.multiplier) != null ? t3 : g2 == null ? void 0 : g2.multiplier) != null ? e2 : v2.multiplier, y2.duration = (n2 = (r2 = this.duration) != null ? r2 : g2 == null ? void 0 : g2.duration) != null ? n2 : v2.duration, y2.easing = (s2 = (i2 = this.easing) != null ? i2 : g2 == null ? void 0 : g2.easing) != null ? s2 : v2.easing, y2.threshold = (o2 = (a2 = this.threshold) != null ? a2 : g2 == null ? void 0 : g2.threshold) != null ? o2 : v2.threshold, y2.delay = (h = (u2 = this.delay) != null ? u2 : g2 == null ? void 0 : g2.delay) != null ? h : v2.delay, y2.debounce = (l2 = (c2 = this.debounce) != null ? c2 : g2 == null ? void 0 : g2.debounce) != null ? l2 : v2.debounce, y2.maxWait = (f2 = (p2 = this.maxWait) != null ? p2 : g2 == null ? void 0 : g2.maxWait) != null ? f2 : v2.maxWait, y2.blend = (m2 = (d = this.blend) != null ? d : g2 == null ? void 0 : g2.blend) != null ? m2 : v2.blend, y2;
  }
  get previousStatus() {
    return this._previousStatus;
  }
  get status() {
    return this.needsUpdate && (this._previousStatus = this._status, this._status = this._computeStatus()), this._status;
  }
  _computeStatus() {
    if (this.forceCommit)
      return "committing";
    const t3 = this.resolvedConfig, e2 = t3.threshold, r2 = this.system.deltaTime * t3.multiplier, n2 = this.delayTime + r2, i2 = this.debounceTime + r2;
    if (!(this.relativeDifference > e2))
      return "unchanged";
    if (!this.forceWait && (n2 >= t3.delay && i2 >= t3.debounce || n2 >= t3.maxWait))
      return "committing";
    return this.referenceRelativeDifference < e2 ? "settling" : "changed";
  }
  _updateTransitionable() {
    var t3, e2, r2, n2, i2;
    const s2 = this.system.deltaTime, a2 = this.resolvedConfig, o2 = this.queue, u2 = this.status, h = s2 * a2.multiplier;
    for (; o2.length && o2[0].elapsed >= o2[0].duration; )
      this.start = o2.shift().target;
    this.current = this.start;
    let c2 = this.start;
    for (let l2 = 0; l2 < o2.length; l2++) {
      const t4 = o2[l2];
      if (this._addTransitionToCurrent(c2, t4, h), c2 = t4.target, !t4.blend)
        break;
    }
    switch (this.debounceTime += h, u2) {
      case "settling":
        break;
      case "changed":
        this.delayTime += h, this.reference = this.target;
        break;
      case "unchanged":
        this.reference = void 0, this.delayTime = 0;
        break;
      case "committing":
        this.delayTime = 0, this.debounceTime = 0;
        const s3 = typeof this.forceCommit == "object" ? this.forceCommit : new Ee();
        s3.target = (t3 = s3.target) != null ? t3 : this._copy(void 0, this.target), s3.duration = (e2 = s3.duration) != null ? e2 : a2.duration, s3.easing = (r2 = s3.easing) != null ? r2 : a2.easing, s3.blend = (n2 = s3.blend) != null ? n2 : a2.blend, s3.elapsed = (i2 = s3.elapsed) != null ? i2 : 0, o2.push(s3), this.forceCommit = false;
    }
    this.forceWait = false;
  }
  _addTransitionToCurrent(t3, e2, r2) {
    const n2 = this._current, i2 = e2.duration > 0 ? e2.easing(Math.min(e2.elapsed / e2.duration, 1)) : 1, s2 = e2.target;
    if (e2.elapsed += r2, typeof s2 != "number") {
      if ("isVector3" in s2) {
        const e3 = n2, r3 = t3, a2 = s2, o2 = Oe.copy(a2).sub(r3).lerp(dt, 1 - i2);
        this._current = e3.add(o2);
      } else if ("isVector2" in s2) {
        const e3 = n2, r3 = t3, a2 = s2, o2 = Te.copy(a2).sub(r3).lerp(pt, 1 - i2);
        this._current = e3.add(o2);
      } else if ("isQuaternion" in s2) {
        const e3 = n2, r3 = t3, a2 = s2, o2 = ze.copy(r3).invert().multiply(a2).slerp(xt, 1 - i2);
        this._current = e3.multiply(o2).normalize();
      } else if ("isColor" in s2) {
        const e3 = n2, r3 = t3, a2 = s2, o2 = Ae.copy(a2).sub(r3).lerp(Re, 1 - i2);
        this._current = e3.add(o2);
      } else if ("isBox3" in s2) {
        const e3 = n2, r3 = t3, a2 = s2, o2 = Ce.min.copy(a2.min).sub(r3.min).lerp(dt, 1 - i2), u2 = Ce.max.copy(a2.max).sub(r3.max).lerp(dt, 1 - i2);
        return e3.min.add(o2), e3.max.add(u2), void (this._current = e3);
      }
    } else
      this._current = n2 + u(s2 - t3, 0, 1 - i2);
  }
  _swap(t3, e2, r2) {
    const n2 = t3[r2], i2 = e2[r2];
    t3[r2] = i2, e2[r2] = n2;
  }
  update(t3 = false) {
    if (!this.needsUpdate && !t3)
      return;
    if (this._isEqual(this._previousTarget, this.target) || (this._target = this._target, this.enabled = true), this._previousTarget = this._copy(this._previousTarget, this.target), !this.enabled)
      return;
    const e2 = this.syncGroup;
    if (!this.forceCommit && e2) {
      for (const r2 of e2)
        if (r2.enabled && r2.status === "committing") {
          for (const t4 of e2)
            t4.needsUpdate && t4.forceCommit === false && t4.relativeDifference > t4.resolvedConfig.threshold && (t4.forceCommit = true);
          break;
        }
    }
    this._updateTransitionable(), this.needsUpdate = false;
  }
  set syncGroup(t3) {
    this._syncGroup && this._syncGroup.delete(this), this._syncGroup = t3, t3 == null || t3.add(this);
  }
  get syncGroup() {
    return this._syncGroup;
  }
}
class ke {
  constructor(t3, e2) {
    this.system = t3, this.node = e2, this.measureBoundsCache = new Map(), this.transition = new Se(), this.referenceNode = void 0, this._parentAdapter = null, this.layouts = new Array(), this.layoutFeasibleTime = 0, this.layoutInfeasibleTime = 0, this._prevLayout = null, this._activeLayout = null, this._progress = 1, this._hasValidContext = false, this._prevNodeOrientation = new c(), this._prevNodeBounds = new I(), this.metrics = this.system.getMetrics(this.node);
    const r2 = this.metrics.target;
    this._orientation = new De(this.system, r2.relativeOrientation, void 0, this.transition), this._bounds = new De(this.system, r2.spatialBounds, void 0, this.transition), this._opacity = new De(this.system, r2.opacity, void 0, this.transition), this._outerOrigin = new De(this.system, r2.outerCenter, void 0, this.transition), this._outerOrientation = new De(this.system, r2.outerOrientation, void 0, this.transition), this._outerBounds = new De(this.system, r2.outerBounds, void 0, this.transition), this._outerVisualBounds = new De(this.system, r2.outerVisualBounds, void 0, this.transition), this._outerOrigin.debounce = 0, this._outerOrigin.delay = 0, this._outerOrientation.debounce = 0, this._outerOrientation.delay = 0, this._outerBounds.debounce = 0, this._outerBounds.delay = 0, this._outerVisualBounds.debounce = 0, this._outerVisualBounds.delay = 0, this._orientation.syncGroup = this._bounds.syncGroup = this._opacity.syncGroup = new Set();
  }
  measureBounds(t3, e2, r2) {
    var n2, i2, s2;
    const a2 = this.system, o2 = a2.mathScope, u2 = a2.math, h = e2 === "spatial" || r2 === "front" || r2 === "back" || r2 === "centerz" || r2 === "sizez" ? o2.meter : o2.pixel, c2 = h === o2.meter ? "m" : "px";
    typeof t3 == "number" && (t3 = "" + t3 + c2);
    const l2 = e2 + "-" + r2 + " = " + t3;
    if ((n2 = this.measureBoundsCache) == null ? void 0 : n2.has(l2))
      return this.measureBoundsCache.get(l2);
    if (!a2.mathCompiledExpressions.has(t3)) {
      const e3 = u2.parse(t3.replace("%", "percent")).compile();
      a2.mathCompiledExpressions.set(t3, e3);
    }
    const p2 = a2.mathCompiledExpressions.get(t3), f2 = a2.viewMetrics.target, d = this.metrics.target;
    let m2, y2, g2;
    switch (e2) {
      case "spatial":
        m2 = d.outerBounds, y2 = d.outerCenter;
        break;
      case "visual":
        m2 = d.outerVisualBounds, y2 = d.outerVisualCenter;
        break;
      case "view":
        m2 = f2.visualBounds, y2 = f2.visualCenter;
        break;
      default:
        throw new Error(`Unknown measure type "${e2}.${r2}"`);
    }
    if (t3.includes("%")) {
      const t4 = e2 === "spatial" ? d.outerSize : (i2 = d.outerVisualSize) != null ? i2 : f2.visualSize;
      let n3 = 0;
      switch (r2) {
        case "left":
        case "centerx":
        case "right":
        case "sizex":
          n3 = u2.unit(t4.x / 100, c2);
          break;
        case "bottom":
        case "centery":
        case "top":
        case "sizey":
          n3 = u2.unit(t4.y / 100, c2);
          break;
        case "back":
        case "centerz":
        case "front":
        case "sizez":
          n3 = u2.unit(t4.z / 100, "m");
          break;
        case "sizediagonal":
          n3 = e2 === "spatial" ? u2.unit(t4.length() / 100, "m") : u2.unit(Math.sqrt(t4.x ** 2 + t4.y ** 2) / 100, "px");
          break;
        default:
          throw new Error(`Invalid measure subtype "${e2}.${r2}" for percentage units`);
      }
      o2.percent = n3;
    }
    switch (r2) {
      case "left":
        g2 = m2.min.x;
        break;
      case "centerx":
        g2 = y2.x;
        break;
      case "right":
        g2 = m2.max.x;
        break;
      case "bottom":
        g2 = m2.min.y;
        break;
      case "centery":
        g2 = y2.y;
        break;
      case "top":
        g2 = m2.max.y;
        break;
      case "front":
        g2 = m2.max.z;
        break;
      case "centerz":
        g2 = y2.z;
        break;
      case "back":
        g2 = m2.min.z;
        break;
      case "centerdistance":
      default:
        g2 = 0;
    }
    let v2 = p2.evaluate(o2);
    return typeof v2 == "object" && (v2 = u2.number(v2, h)), g2 += v2, o2.percent = void 0, (s2 = this.measureBoundsCache) == null || s2.set(l2, g2), g2;
  }
  get outerOrigin() {
    return this._outerOrigin;
  }
  get outerOrientation() {
    return this._outerOrientation;
  }
  get outerBounds() {
    return this._outerBounds;
  }
  get outerVisualBounds() {
    return this._outerVisualBounds;
  }
  get parentAdapter() {
    return this._parentAdapter;
  }
  _computeParentAdapter() {
    let t3 = this.metrics;
    for (; t3 = t3.parentMetrics; ) {
      const e2 = this.system.nodeAdapters.get(t3.node);
      if (e2)
        return e2;
    }
    return null;
  }
  get orientation() {
    return this._orientation;
  }
  get bounds() {
    return this._bounds;
  }
  get opacity() {
    return this._opacity;
  }
  get previousLayout() {
    return this._prevLayout;
  }
  set activeLayout(t3) {
    this._prevLayout = this._activeLayout, this._activeLayout = t3;
  }
  get activeLayout() {
    return this._activeLayout;
  }
  get progress() {
    return this._progress;
  }
  _computeProgress() {
    return Math.min(this.orientation.progress, this.bounds.progress, this.opacity.progress);
  }
  createLayout() {
    const t3 = new Jt(this);
    return this.layouts.push(t3), t3;
  }
  get hasValidContext() {
    return this._hasValidContext;
  }
  _computeHasValidContext() {
    var t3;
    const e2 = this.parentAdapter;
    return !e2 || !!e2.hasValidContext && (e2.layouts.length === 0 || !!((t3 = e2.activeLayout) == null ? void 0 : t3.hasValidSolution));
  }
  _update() {
    var t3;
    this._parentAdapter = this._computeParentAdapter(), this._hasValidContext = this._computeHasValidContext();
    const e2 = this.metrics;
    if (e2.referenceMetrics && (this.outerOrigin.target = e2.referenceMetrics.target.worldCenter, this.outerOrientation.target = e2.referenceMetrics.target.worldOrientation, this.outerBounds.target = e2.referenceMetrics.innerBounds, this.outerBounds.target.applyMatrix4(e2.target.spatialFromReference), this.outerVisualBounds.target = e2.referenceMetrics.target.visualBounds), this.outerOrigin.update(), this.outerOrientation.update(), this.outerBounds.update(), this.outerVisualBounds.update(), this.onUpdate) {
      this.onUpdate(), e2.invalidateIntrinsicBounds(), e2.invalidateInnerBounds(), e2.invalidateStates(), e2.updateRawState();
      const t4 = e2.raw;
      if (!this.system.optimizer.update(this)) {
        const e3 = this.orientation.current, r2 = this.orientation.target, n2 = t4.relativeOrientation;
        r2.angleTo(n2) > this.system.epsillonRadians && e3.angleTo(n2) > this.system.epsillonRadians && (this.orientation.target = n2);
        const i2 = this.bounds.current, s2 = this.bounds.target, a2 = t4.spatialBounds;
        (s2.min.distanceTo(a2.min) > this.system.epsillonMeters || s2.max.distanceTo(a2.max) > this.system.epsillonMeters) && (i2.min.distanceTo(a2.min) > this.system.epsillonMeters || i2.max.distanceTo(a2.max) > this.system.epsillonMeters) && (this.bounds.target = a2);
      }
    } else
      e2.invalidateIntrinsicBounds(), e2.invalidateInnerBounds(), e2.invalidateStates(), this.system.optimizer.update(this);
    this.opacity.update(), this.orientation.update(), this.bounds.update(), this._progress = this._computeProgress(), e2.invalidateStates(), this.system.bindings.apply(e2, e2.current), e2.invalidateStates(), (t3 = this.onPostUpdate) == null || t3.call(this);
  }
}
class Ie {
  constructor() {
    this._cache = new zt(), this.isLayoutFrustum = true, this._leftDegrees = -20, this._rightDegrees = 20, this._bottomDegrees = -20, this._topDegrees = 20, this._nearMeters = 0.5, this._farMeters = 1e3, this._size = new e(), this._center = new e(), this._v1 = new l(), this._inverseProjection = new m(), this._forwardDirection = new l(0, 0, -1), this._fullNDC = new I(new l(-1, -1, -1), new l(1, 1, 1)), this._cachedPerspectiveProjectionMatrix = this._cache.memoize(() => {
      const t3 = this.nearMeters, e2 = this.farMeters, r2 = t3 * Math.tan(this.leftDegrees * i), n2 = t3 * Math.tan(this.rightDegrees * i), s2 = t3 * Math.tan(this.topDegrees * i), a2 = t3 * Math.tan(this.bottomDegrees * i);
      return this._perspective.makePerspective(r2, n2, s2, a2, t3, e2);
    }), this._perspective = new m(), this._boxA = new k(), this._boxB = new k(), this._overlapSize = new e();
  }
  get leftDegrees() {
    return this._leftDegrees;
  }
  set leftDegrees(t3) {
    t3 !== this._leftDegrees && (this._leftDegrees = t3, this._cache.invalidateAll());
  }
  get rightDegrees() {
    return this._rightDegrees;
  }
  set rightDegrees(t3) {
    t3 !== this._rightDegrees && (this._rightDegrees = t3, this._cache.invalidateAll());
  }
  get bottomDegrees() {
    return this._bottomDegrees;
  }
  set bottomDegrees(t3) {
    t3 !== this._bottomDegrees && (this._bottomDegrees = t3, this._cache.invalidateAll());
  }
  get topDegrees() {
    return this._topDegrees;
  }
  set topDegrees(t3) {
    t3 !== this._topDegrees && (this._topDegrees = t3, this._cache.invalidateAll());
  }
  get nearMeters() {
    return this._nearMeters;
  }
  set nearMeters(t3) {
    t3 !== this._nearMeters && (this._nearMeters = t3, this._cache.invalidateAll());
  }
  get farMeters() {
    return this._farMeters;
  }
  set farMeters(t3) {
    t3 !== this._farMeters && (this._farMeters = t3, this._cache.invalidateAll());
  }
  get sizeDegrees() {
    return this._size.set(this.rightDegrees - this.leftDegrees, this.topDegrees - this.bottomDegrees), this._size;
  }
  get diagonalDegrees() {
    const t3 = this.sizeDegrees;
    return Math.acos(Math.cos(t3.x * i) * Math.cos(t3.y * i)) * s;
  }
  get centerDegrees() {
    const t3 = this.sizeDegrees;
    return this._center.set(this.leftDegrees + t3.x / 2, this.bottomDegrees + t3.y / 2);
  }
  get angleToCenter() {
    const t3 = this.centerDegrees;
    return Math.acos(Math.cos(t3.x * i) * Math.cos(t3.y * i)) * s;
  }
  get angleToTopLeft() {
    return Math.acos(Math.cos(this.leftDegrees * i) * Math.cos(this.topDegrees * i)) * s;
  }
  get angleToTopRight() {
    return Math.acos(Math.cos(this.rightDegrees * i) * Math.cos(this.topDegrees * i)) * s;
  }
  get angleToBottomLeft() {
    return Math.acos(Math.cos(this.leftDegrees * i) * Math.cos(this.bottomDegrees * i)) * s;
  }
  get angleToBottomRight() {
    return Math.acos(Math.cos(this.rightDegrees * i) * Math.cos(this.bottomDegrees * i)) * s;
  }
  get angleToClosestPoint() {
    const t3 = Math.min(Math.max(0, this.leftDegrees), this.rightDegrees), e2 = Math.min(Math.max(0, this.bottomDegrees), this.topDegrees);
    return Math.acos(Math.cos(t3 * i) * Math.cos(e2 * i)) * s;
  }
  get angleToFarthestPoint() {
    return Math.max(this.angleToTopLeft, this.angleToTopRight, this.angleToBottomLeft, this.angleToBottomRight);
  }
  get depth() {
    return this.farMeters - this.nearMeters;
  }
  get distance() {
    return this.nearMeters + this.depth / 2;
  }
  get aspectRatio() {
    const t3 = this.nearMeters, e2 = t3 * Math.tan(this.leftDegrees * i), r2 = t3 * Math.tan(this.rightDegrees * i);
    return (t3 * Math.tan(this.topDegrees * i) - t3 * Math.tan(this.bottomDegrees * i)) / (r2 - e2);
  }
  setFromPerspectiveProjectionMatrix(t3, e2 = this._fullNDC) {
    const r2 = this._inverseProjection.copy(t3).invert(), n2 = this._v1, i2 = this._forwardDirection, a2 = Math.sign(e2.min.x) * n2.set(e2.min.x, 0, -1).applyMatrix4(r2).angleTo(i2) * s, o2 = Math.sign(e2.max.x) * n2.set(e2.max.x, 0, -1).applyMatrix4(r2).angleTo(i2) * s, u2 = Math.sign(e2.max.y) * n2.set(0, e2.max.y, -1).applyMatrix4(r2).angleTo(i2) * s, h = Math.sign(e2.min.y) * n2.set(0, e2.min.y, -1).applyMatrix4(r2).angleTo(i2) * s, c2 = -n2.set(0, 0, e2.min.z).applyMatrix4(r2).z, l2 = -n2.set(0, 0, e2.max.z).applyMatrix4(r2).z;
    return this.leftDegrees = a2, this.rightDegrees = o2, this.topDegrees = u2, this.bottomDegrees = h, this.nearMeters = c2, this.farMeters = l2, this;
  }
  get perspectiveProjectionMatrix() {
    return this._cachedPerspectiveProjectionMatrix();
  }
  overlapPercent(t3) {
    this._boxA.min.x = this.leftDegrees, this._boxA.max.x = this.rightDegrees, this._boxA.min.y = this.bottomDegrees, this._boxA.max.y = this.topDegrees, this._boxB.min.x = t3.leftDegrees, this._boxB.max.x = t3.rightDegrees, this._boxB.min.y = t3.bottomDegrees, this._boxB.max.y = t3.topDegrees;
    return this._boxA.intersect(this._boxB).getSize(this._overlapSize).length() / this.sizeDegrees.length();
  }
}
var Le = { epsilon: 1e-12, matrix: "Matrix", number: "number", precision: 64, predictable: false, randomSeed: null };
function Be(t3) {
  return typeof t3 == "number";
}
function Fe(t3) {
  return t3 && t3.constructor.prototype.isBigNumber === true || false;
}
function Pe(t3) {
  return t3 && typeof t3 == "object" && Object.getPrototypeOf(t3).isComplex === true || false;
}
function Ue(t3) {
  return t3 && typeof t3 == "object" && Object.getPrototypeOf(t3).isFraction === true || false;
}
function je(t3) {
  return t3 && t3.constructor.prototype.isUnit === true || false;
}
function qe(t3) {
  return typeof t3 == "string";
}
var He = Array.isArray;
function Ve(t3) {
  return t3 && t3.constructor.prototype.isMatrix === true || false;
}
function $e(t3) {
  return Array.isArray(t3) || Ve(t3);
}
function Ge(t3) {
  return t3 && t3.isDenseMatrix && t3.constructor.prototype.isMatrix === true || false;
}
function We(t3) {
  return t3 && t3.isSparseMatrix && t3.constructor.prototype.isMatrix === true || false;
}
function Ye(t3) {
  return t3 && t3.constructor.prototype.isRange === true || false;
}
function Ze(t3) {
  return t3 && t3.constructor.prototype.isIndex === true || false;
}
function Xe(t3) {
  return typeof t3 == "boolean";
}
function Je(t3) {
  return t3 && t3.constructor.prototype.isResultSet === true || false;
}
function Qe(t3) {
  return t3 && t3.constructor.prototype.isHelp === true || false;
}
function Ke(t3) {
  return typeof t3 == "function";
}
function tr(t3) {
  return t3 instanceof Date;
}
function er(t3) {
  return t3 instanceof RegExp;
}
function rr(t3) {
  return !(!t3 || typeof t3 != "object" || t3.constructor !== Object || Pe(t3) || Ue(t3));
}
function nr(t3) {
  return t3 === null;
}
function ir(t3) {
  return t3 === void 0;
}
function sr(t3) {
  return t3 && t3.isAccessorNode === true && t3.constructor.prototype.isNode === true || false;
}
function ar(t3) {
  return t3 && t3.isArrayNode === true && t3.constructor.prototype.isNode === true || false;
}
function or(t3) {
  return t3 && t3.isAssignmentNode === true && t3.constructor.prototype.isNode === true || false;
}
function ur(t3) {
  return t3 && t3.isBlockNode === true && t3.constructor.prototype.isNode === true || false;
}
function hr(t3) {
  return t3 && t3.isConditionalNode === true && t3.constructor.prototype.isNode === true || false;
}
function cr(t3) {
  return t3 && t3.isConstantNode === true && t3.constructor.prototype.isNode === true || false;
}
function lr(t3) {
  return t3 && t3.isFunctionAssignmentNode === true && t3.constructor.prototype.isNode === true || false;
}
function pr(t3) {
  return t3 && t3.isFunctionNode === true && t3.constructor.prototype.isNode === true || false;
}
function fr(t3) {
  return t3 && t3.isIndexNode === true && t3.constructor.prototype.isNode === true || false;
}
function dr(t3) {
  return t3 && t3.isNode === true && t3.constructor.prototype.isNode === true || false;
}
function mr(t3) {
  return t3 && t3.isObjectNode === true && t3.constructor.prototype.isNode === true || false;
}
function yr(t3) {
  return t3 && t3.isOperatorNode === true && t3.constructor.prototype.isNode === true || false;
}
function gr(t3) {
  return t3 && t3.isParenthesisNode === true && t3.constructor.prototype.isNode === true || false;
}
function vr(t3) {
  return t3 && t3.isRangeNode === true && t3.constructor.prototype.isNode === true || false;
}
function xr(t3) {
  return t3 && t3.isSymbolNode === true && t3.constructor.prototype.isNode === true || false;
}
function wr(t3) {
  return t3 && t3.constructor.prototype.isChain === true || false;
}
function br(t3) {
  var e2 = typeof t3;
  return e2 === "object" ? t3 === null ? "null" : Array.isArray(t3) ? "Array" : t3 instanceof Date ? "Date" : t3 instanceof RegExp ? "RegExp" : Fe(t3) ? "BigNumber" : Pe(t3) ? "Complex" : Ue(t3) ? "Fraction" : Ve(t3) ? "Matrix" : je(t3) ? "Unit" : Ze(t3) ? "Index" : Ye(t3) ? "Range" : Je(t3) ? "ResultSet" : dr(t3) ? t3.type : wr(t3) ? "Chain" : Qe(t3) ? "Help" : "Object" : e2 === "function" ? "Function" : e2;
}
function _r(t3) {
  var e2 = typeof t3;
  if (e2 === "number" || e2 === "string" || e2 === "boolean" || t3 == null)
    return t3;
  if (typeof t3.clone == "function")
    return t3.clone();
  if (Array.isArray(t3))
    return t3.map(function(t4) {
      return _r(t4);
    });
  if (t3 instanceof Date)
    return new Date(t3.valueOf());
  if (Fe(t3))
    return t3;
  if (t3 instanceof RegExp)
    throw new TypeError("Cannot clone " + t3);
  return Mr(t3, _r);
}
function Mr(t3, e2) {
  var r2 = {};
  for (var n2 in t3)
    Cr(t3, n2) && (r2[n2] = e2(t3[n2]));
  return r2;
}
function Nr(t3, e2) {
  for (var r2 in e2)
    Cr(e2, r2) && (t3[r2] = e2[r2]);
  return t3;
}
function Er(t3, e2) {
  if (Array.isArray(e2))
    throw new TypeError("Arrays are not supported by deepExtend");
  for (var r2 in e2)
    if (Cr(e2, r2) && !(r2 in Object.prototype) && !(r2 in Function.prototype))
      if (e2[r2] && e2[r2].constructor === Object)
        t3[r2] === void 0 && (t3[r2] = {}), t3[r2] && t3[r2].constructor === Object ? Er(t3[r2], e2[r2]) : t3[r2] = e2[r2];
      else {
        if (Array.isArray(e2[r2]))
          throw new TypeError("Arrays are not supported by deepExtend");
        t3[r2] = e2[r2];
      }
  return t3;
}
function Sr(t3, e2) {
  var r2, n2, i2;
  if (Array.isArray(t3)) {
    if (!Array.isArray(e2))
      return false;
    if (t3.length !== e2.length)
      return false;
    for (n2 = 0, i2 = t3.length; n2 < i2; n2++)
      if (!Sr(t3[n2], e2[n2]))
        return false;
    return true;
  }
  if (typeof t3 == "function")
    return t3 === e2;
  if (t3 instanceof Object) {
    if (Array.isArray(e2) || !(e2 instanceof Object))
      return false;
    for (r2 in t3)
      if (!(r2 in e2) || !Sr(t3[r2], e2[r2]))
        return false;
    for (r2 in e2)
      if (!(r2 in t3) || !Sr(t3[r2], e2[r2]))
        return false;
    return true;
  }
  return t3 === e2;
}
function Tr(t3) {
  var e2 = {};
  return Or(t3, e2), e2;
}
function Or(t3, e2) {
  for (var r2 in t3)
    if (Cr(t3, r2)) {
      var n2 = t3[r2];
      typeof n2 == "object" && n2 !== null ? Or(n2, e2) : e2[r2] = n2;
    }
}
function zr(t3, e2, r2) {
  var n2, i2 = true;
  Object.defineProperty(t3, e2, { get: function() {
    return i2 && (n2 = r2(), i2 = false), n2;
  }, set: function(t4) {
    n2 = t4, i2 = false;
  }, configurable: true, enumerable: true });
}
function Cr(t3, e2) {
  return t3 && Object.hasOwnProperty.call(t3, e2);
}
function Ar(t3) {
  return Object.keys(t3).map((e2) => t3[e2]);
}
var Rr = ["Matrix", "Array"], Dr = ["number", "BigNumber", "Fraction"];
function kr(t3, e2) {
  function r2(r3) {
    if (r3) {
      var n2 = Mr(t3, _r);
      Ir(r3, "matrix", Rr), Ir(r3, "number", Dr), Er(t3, r3);
      var i2 = Mr(t3, _r), s2 = Mr(r3, _r);
      return e2("config", i2, n2, s2), i2;
    }
    return Mr(t3, _r);
  }
  return r2.MATRIX_OPTIONS = Rr, r2.NUMBER_OPTIONS = Dr, Object.keys(Le).forEach((e3) => {
    Object.defineProperty(r2, e3, { get: () => t3[e3], enumerable: true, configurable: true });
  }), r2;
}
function Ir(t3, e2, r2) {
  var n2, i2;
  t3[e2] !== void 0 && (n2 = r2, i2 = t3[e2], n2.indexOf(i2) === -1) && console.warn('Warning: Unknown value "' + t3[e2] + '" for configuration option "' + e2 + '". Available options: ' + r2.map((t4) => JSON.stringify(t4)).join(", ") + ".");
}
var Lr = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : {};
function Br(t3) {
  return t3 && t3.__esModule && Object.prototype.hasOwnProperty.call(t3, "default") ? t3.default : t3;
}
var Pr = function() {
  function t3() {
    return true;
  }
  function e2() {
    return false;
  }
  function r2() {
  }
  function n2() {
    var i2 = [{ name: "number", test: function(t4) {
      return typeof t4 == "number";
    } }, { name: "string", test: function(t4) {
      return typeof t4 == "string";
    } }, { name: "boolean", test: function(t4) {
      return typeof t4 == "boolean";
    } }, { name: "Function", test: function(t4) {
      return typeof t4 == "function";
    } }, { name: "Array", test: Array.isArray }, { name: "Date", test: function(t4) {
      return t4 instanceof Date;
    } }, { name: "RegExp", test: function(t4) {
      return t4 instanceof RegExp;
    } }, { name: "Object", test: function(t4) {
      return typeof t4 == "object" && t4 !== null && t4.constructor === Object;
    } }, { name: "null", test: function(t4) {
      return t4 === null;
    } }, { name: "undefined", test: function(t4) {
      return t4 === void 0;
    } }], s2 = { name: "any", test: t3 }, a2 = [], o2 = [], u2 = { types: i2, conversions: o2, ignore: a2 };
    function h(t4) {
      var e3 = Y2(u2.types, function(e4) {
        return e4.name === t4;
      });
      if (e3)
        return e3;
      if (t4 === "any")
        return s2;
      var r3 = Y2(u2.types, function(e4) {
        return e4.name.toLowerCase() === t4.toLowerCase();
      });
      throw new TypeError('Unknown type "' + t4 + '"' + (r3 ? '. Did you mean "' + r3.name + '"?' : ""));
    }
    function c2(t4) {
      return t4 === s2 ? 999 : u2.types.indexOf(t4);
    }
    function l2(t4) {
      var e3 = Y2(u2.types, function(e4) {
        return e4.test(t4);
      });
      if (e3)
        return e3.name;
      throw new TypeError("Value has unknown type. Value: " + t4);
    }
    function p2(t4, e3) {
      if (!t4.signatures)
        throw new TypeError("Function is no typed-function");
      var r3;
      if (typeof e3 == "string") {
        r3 = e3.split(",");
        for (var n3 = 0; n3 < r3.length; n3++)
          r3[n3] = r3[n3].trim();
      } else {
        if (!Array.isArray(e3))
          throw new TypeError("String array or a comma separated string expected");
        r3 = e3;
      }
      var i3 = r3.join(","), s3 = t4.signatures[i3];
      if (s3)
        return s3;
      throw new TypeError("Signature not found (signature: " + (t4.name || "unnamed") + "(" + r3.join(", ") + "))");
    }
    function f2(t4, e3) {
      var r3 = l2(t4);
      if (e3 === r3)
        return t4;
      for (var n3 = 0; n3 < u2.conversions.length; n3++) {
        var i3 = u2.conversions[n3];
        if (i3.from === r3 && i3.to === e3)
          return i3.convert(t4);
      }
      throw new Error("Cannot convert from " + r3 + " to " + e3);
    }
    function d(t4) {
      return t4.map(function(t5) {
        var e3 = t5.types.map(M2);
        return (t5.restParam ? "..." : "") + e3.join("|");
      }).join(",");
    }
    function m2(t4, e3) {
      var r3 = t4.indexOf("...") === 0, n3 = (r3 ? t4.length > 3 ? t4.slice(3) : "any" : t4).split("|").map(P2).filter(U2).filter(F2), i3 = A2(e3, n3), s3 = n3.map(function(t5) {
        var e4 = h(t5);
        return { name: t5, typeIndex: c2(e4), test: e4.test, conversion: null, conversionIndex: -1 };
      }), a3 = i3.map(function(t5) {
        var r4 = h(t5.from);
        return { name: t5.from, typeIndex: c2(r4), test: r4.test, conversion: t5, conversionIndex: e3.indexOf(t5) };
      });
      return { types: s3.concat(a3), restParam: r3 };
    }
    function y2(t4, e3, r3) {
      var n3 = [];
      return t4.trim() !== "" && (n3 = t4.split(",").map(P2).map(function(t5, e4, n4) {
        var i3 = m2(t5, r3);
        if (i3.restParam && e4 !== n4.length - 1)
          throw new SyntaxError('Unexpected rest parameter "' + t5 + '": only allowed for the last parameter');
        return i3;
      })), n3.some(q2) ? null : { params: n3, fn: e3 };
    }
    function g2(t4) {
      var e3 = V2(t4);
      return !!e3 && e3.restParam;
    }
    function v2(t4) {
      return t4.types.some(function(t5) {
        return t5.conversion != null;
      });
    }
    function x2(e3) {
      if (e3 && e3.types.length !== 0) {
        if (e3.types.length === 1)
          return h(e3.types[0].name).test;
        if (e3.types.length === 2) {
          var r3 = h(e3.types[0].name).test, n3 = h(e3.types[1].name).test;
          return function(t4) {
            return r3(t4) || n3(t4);
          };
        }
        var i3 = e3.types.map(function(t4) {
          return h(t4.name).test;
        });
        return function(t4) {
          for (var e4 = 0; e4 < i3.length; e4++)
            if (i3[e4](t4))
              return true;
          return false;
        };
      }
      return t3;
    }
    function w2(t4) {
      var e3, r3, n3;
      if (g2(t4)) {
        var i3 = (e3 = H2(t4).map(x2)).length, s3 = x2(V2(t4)), a3 = function(t5) {
          for (var e4 = i3; e4 < t5.length; e4++)
            if (!s3(t5[e4]))
              return false;
          return true;
        };
        return function(t5) {
          for (var r4 = 0; r4 < e3.length; r4++)
            if (!e3[r4](t5[r4]))
              return false;
          return a3(t5) && t5.length >= i3 + 1;
        };
      }
      return t4.length === 0 ? function(t5) {
        return t5.length === 0;
      } : t4.length === 1 ? (r3 = x2(t4[0]), function(t5) {
        return r3(t5[0]) && t5.length === 1;
      }) : t4.length === 2 ? (r3 = x2(t4[0]), n3 = x2(t4[1]), function(t5) {
        return r3(t5[0]) && n3(t5[1]) && t5.length === 2;
      }) : (e3 = t4.map(x2), function(t5) {
        for (var r4 = 0; r4 < e3.length; r4++)
          if (!e3[r4](t5[r4]))
            return false;
        return t5.length === e3.length;
      });
    }
    function b2(t4, e3) {
      return e3 < t4.params.length ? t4.params[e3] : g2(t4.params) ? V2(t4.params) : null;
    }
    function _2(t4, e3, r3) {
      var n3 = b2(t4, e3);
      return (n3 ? r3 ? n3.types.filter(N2) : n3.types : []).map(M2);
    }
    function M2(t4) {
      return t4.name;
    }
    function N2(t4) {
      return t4.conversion === null || t4.conversion === void 0;
    }
    function E2(t4, e3) {
      var r3 = Z2(X(t4, function(t5) {
        return _2(t5, e3, false);
      }));
      return r3.indexOf("any") !== -1 ? ["any"] : r3;
    }
    function S2(t4, e3, r3) {
      var n3, i3, s3, a3 = t4 || "unnamed", o3 = r3;
      for (s3 = 0; s3 < e3.length; s3++) {
        var u3 = o3.filter(function(t5) {
          var r4 = x2(b2(t5, s3));
          return (s3 < t5.params.length || g2(t5.params)) && r4(e3[s3]);
        });
        if (u3.length === 0) {
          if ((i3 = E2(o3, s3)).length > 0) {
            var h2 = l2(e3[s3]);
            return (n3 = new TypeError("Unexpected type of argument in function " + a3 + " (expected: " + i3.join(" or ") + ", actual: " + h2 + ", index: " + s3 + ")")).data = { category: "wrongType", fn: a3, index: s3, actual: h2, expected: i3 }, n3;
          }
        } else
          o3 = u3;
      }
      var c3 = o3.map(function(t5) {
        return g2(t5.params) ? 1 / 0 : t5.params.length;
      });
      if (e3.length < Math.min.apply(null, c3))
        return i3 = E2(o3, s3), (n3 = new TypeError("Too few arguments in function " + a3 + " (expected: " + i3.join(" or ") + ", index: " + e3.length + ")")).data = { category: "tooFewArgs", fn: a3, index: e3.length, expected: i3 }, n3;
      var p3 = Math.max.apply(null, c3);
      return e3.length > p3 ? ((n3 = new TypeError("Too many arguments in function " + a3 + " (expected: " + p3 + ", actual: " + e3.length + ")")).data = { category: "tooManyArgs", fn: a3, index: e3.length, expectedLength: p3 }, n3) : ((n3 = new TypeError('Arguments of type "' + e3.join(", ") + '" do not match any of the defined signatures of function ' + a3 + ".")).data = { category: "mismatch", actual: e3.map(l2) }, n3);
    }
    function T2(t4) {
      for (var e3 = 999, r3 = 0; r3 < t4.types.length; r3++)
        N2(t4.types[r3]) && (e3 = Math.min(e3, t4.types[r3].typeIndex));
      return e3;
    }
    function O2(t4) {
      for (var e3 = 999, r3 = 0; r3 < t4.types.length; r3++)
        N2(t4.types[r3]) || (e3 = Math.min(e3, t4.types[r3].conversionIndex));
      return e3;
    }
    function z2(t4, e3) {
      var r3;
      return (r3 = t4.restParam - e3.restParam) != 0 || (r3 = v2(t4) - v2(e3)) != 0 || (r3 = T2(t4) - T2(e3)) != 0 ? r3 : O2(t4) - O2(e3);
    }
    function C2(t4, e3) {
      var r3, n3, i3 = Math.min(t4.params.length, e3.params.length);
      if ((n3 = t4.params.some(v2) - e3.params.some(v2)) != 0)
        return n3;
      for (r3 = 0; r3 < i3; r3++)
        if ((n3 = v2(t4.params[r3]) - v2(e3.params[r3])) != 0)
          return n3;
      for (r3 = 0; r3 < i3; r3++)
        if ((n3 = z2(t4.params[r3], e3.params[r3])) !== 0)
          return n3;
      return t4.params.length - e3.params.length;
    }
    function A2(t4, e3) {
      var r3 = {};
      return t4.forEach(function(t5) {
        e3.indexOf(t5.from) !== -1 || e3.indexOf(t5.to) === -1 || r3[t5.from] || (r3[t5.from] = t5);
      }), Object.keys(r3).map(function(t5) {
        return r3[t5];
      });
    }
    function R2(t4, e3) {
      var r3 = e3;
      if (t4.some(v2)) {
        var n3 = g2(t4), i3 = t4.map(D2);
        r3 = function() {
          for (var t5 = [], r4 = n3 ? arguments.length - 1 : arguments.length, s4 = 0; s4 < r4; s4++)
            t5[s4] = i3[s4](arguments[s4]);
          return n3 && (t5[r4] = arguments[r4].map(i3[r4])), e3.apply(this, t5);
        };
      }
      var s3 = r3;
      if (g2(t4)) {
        var a3 = t4.length - 1;
        s3 = function() {
          return r3.apply(this, $2(arguments, 0, a3).concat([$2(arguments, a3)]));
        };
      }
      return s3;
    }
    function D2(t4) {
      var e3, r3, n3, i3, s3 = [], a3 = [];
      switch (t4.types.forEach(function(t5) {
        t5.conversion && (s3.push(h(t5.conversion.from).test), a3.push(t5.conversion.convert));
      }), a3.length) {
        case 0:
          return function(t5) {
            return t5;
          };
        case 1:
          return e3 = s3[0], n3 = a3[0], function(t5) {
            return e3(t5) ? n3(t5) : t5;
          };
        case 2:
          return e3 = s3[0], r3 = s3[1], n3 = a3[0], i3 = a3[1], function(t5) {
            return e3(t5) ? n3(t5) : r3(t5) ? i3(t5) : t5;
          };
        default:
          return function(t5) {
            for (var e4 = 0; e4 < a3.length; e4++)
              if (s3[e4](t5))
                return a3[e4](t5);
            return t5;
          };
      }
    }
    function k2(t4) {
      var e3 = {};
      return t4.forEach(function(t5) {
        t5.params.some(v2) || I2(t5.params, true).forEach(function(r3) {
          e3[d(r3)] = t5.fn;
        });
      }), e3;
    }
    function I2(t4, e3) {
      function r3(t5, n3, i3) {
        if (n3 < t5.length) {
          var s3, a3 = t5[n3], o3 = e3 ? a3.types.filter(N2) : a3.types;
          if (a3.restParam) {
            var u3 = o3.filter(N2);
            s3 = u3.length < o3.length ? [u3, o3] : [o3];
          } else
            s3 = o3.map(function(t6) {
              return [t6];
            });
          return X(s3, function(e4) {
            return r3(t5, n3 + 1, i3.concat([e4]));
          });
        }
        return [i3.map(function(e4, r4) {
          return { types: e4, restParam: r4 === t5.length - 1 && g2(t5) };
        })];
      }
      return r3(t4, 0, []);
    }
    function L2(t4, e3) {
      for (var r3 = Math.max(t4.params.length, e3.params.length), n3 = 0; n3 < r3; n3++)
        if (!W2(_2(t4, n3, true), _2(e3, n3, true)))
          return false;
      var i3 = t4.params.length, s3 = e3.params.length, a3 = g2(t4.params), o3 = g2(e3.params);
      return a3 ? o3 ? i3 === s3 : s3 >= i3 : o3 ? i3 >= s3 : i3 === s3;
    }
    function B2(t4, n3) {
      if (Object.keys(n3).length === 0)
        throw new SyntaxError("No signatures provided");
      var i3 = [];
      Object.keys(n3).map(function(t5) {
        return y2(t5, n3[t5], u2.conversions);
      }).filter(j2).forEach(function(t5) {
        var e3 = Y2(i3, function(e4) {
          return L2(e4, t5);
        });
        if (e3)
          throw new TypeError('Conflicting signatures "' + d(e3.params) + '" and "' + d(t5.params) + '".');
        i3.push(t5);
      });
      var s3 = X(i3, function(t5) {
        return (t5 ? I2(t5.params, false) : []).map(function(e3) {
          return { params: e3, fn: t5.fn };
        });
      }).filter(j2);
      s3.sort(C2);
      var a3 = s3[0] && s3[0].params.length <= 2 && !g2(s3[0].params), o3 = s3[1] && s3[1].params.length <= 2 && !g2(s3[1].params), h2 = s3[2] && s3[2].params.length <= 2 && !g2(s3[2].params), c3 = s3[3] && s3[3].params.length <= 2 && !g2(s3[3].params), l3 = s3[4] && s3[4].params.length <= 2 && !g2(s3[4].params), p3 = s3[5] && s3[5].params.length <= 2 && !g2(s3[5].params), f3 = a3 && o3 && h2 && c3 && l3 && p3, m3 = s3.map(function(t5) {
        return w2(t5.params);
      }), v3 = a3 ? x2(s3[0].params[0]) : e2, b3 = o3 ? x2(s3[1].params[0]) : e2, _3 = h2 ? x2(s3[2].params[0]) : e2, M3 = c3 ? x2(s3[3].params[0]) : e2, N3 = l3 ? x2(s3[4].params[0]) : e2, E3 = p3 ? x2(s3[5].params[0]) : e2, T3 = a3 ? x2(s3[0].params[1]) : e2, O3 = o3 ? x2(s3[1].params[1]) : e2, z3 = h2 ? x2(s3[2].params[1]) : e2, A3 = c3 ? x2(s3[3].params[1]) : e2, D3 = l3 ? x2(s3[4].params[1]) : e2, B3 = p3 ? x2(s3[5].params[1]) : e2, F3 = s3.map(function(t5) {
        return R2(t5.params, t5.fn);
      }), P3 = a3 ? F3[0] : r2, U3 = o3 ? F3[1] : r2, q3 = h2 ? F3[2] : r2, H3 = c3 ? F3[3] : r2, V3 = l3 ? F3[4] : r2, $3 = p3 ? F3[5] : r2, G3 = a3 ? s3[0].params.length : -1, W3 = o3 ? s3[1].params.length : -1, Z3 = h2 ? s3[2].params.length : -1, J2 = c3 ? s3[3].params.length : -1, Q2 = l3 ? s3[4].params.length : -1, K = p3 ? s3[5].params.length : -1, tt = f3 ? 6 : 0, et = s3.length, rt = function() {
        for (var e3 = tt; e3 < et; e3++)
          if (m3[e3](arguments))
            return F3[e3].apply(this, arguments);
        throw S2(t4, arguments, s3);
      }, nt = function t5(e3, r3) {
        return arguments.length === G3 && v3(e3) && T3(r3) ? P3.apply(t5, arguments) : arguments.length === W3 && b3(e3) && O3(r3) ? U3.apply(t5, arguments) : arguments.length === Z3 && _3(e3) && z3(r3) ? q3.apply(t5, arguments) : arguments.length === J2 && M3(e3) && A3(r3) ? H3.apply(t5, arguments) : arguments.length === Q2 && N3(e3) && D3(r3) ? V3.apply(t5, arguments) : arguments.length === K && E3(e3) && B3(r3) ? $3.apply(t5, arguments) : rt.apply(t5, arguments);
      };
      try {
        Object.defineProperty(nt, "name", { value: t4 });
      } catch (it) {
      }
      return nt.signatures = k2(s3), nt;
    }
    function F2(t4) {
      return u2.ignore.indexOf(t4) === -1;
    }
    function P2(t4) {
      return t4.trim();
    }
    function U2(t4) {
      return !!t4;
    }
    function j2(t4) {
      return t4 !== null;
    }
    function q2(t4) {
      return t4.types.length === 0;
    }
    function H2(t4) {
      return t4.slice(0, t4.length - 1);
    }
    function V2(t4) {
      return t4[t4.length - 1];
    }
    function $2(t4, e3, r3) {
      return Array.prototype.slice.call(t4, e3, r3);
    }
    function G2(t4, e3) {
      return t4.indexOf(e3) !== -1;
    }
    function W2(t4, e3) {
      for (var r3 = 0; r3 < t4.length; r3++)
        if (G2(e3, t4[r3]))
          return true;
      return false;
    }
    function Y2(t4, e3) {
      for (var r3 = 0; r3 < t4.length; r3++)
        if (e3(t4[r3]))
          return t4[r3];
    }
    function Z2(t4) {
      for (var e3 = {}, r3 = 0; r3 < t4.length; r3++)
        e3[t4[r3]] = true;
      return Object.keys(e3);
    }
    function X(t4, e3) {
      return Array.prototype.concat.apply([], t4.map(e3));
    }
    function J(t4) {
      for (var e3 = "", r3 = 0; r3 < t4.length; r3++) {
        var n3 = t4[r3];
        if ((typeof n3.signatures == "object" || typeof n3.signature == "string") && n3.name !== "") {
          if (e3 === "")
            e3 = n3.name;
          else if (e3 !== n3.name) {
            var i3 = new Error("Function names do not match (expected: " + e3 + ", actual: " + n3.name + ")");
            throw i3.data = { actual: n3.name, expected: e3 }, i3;
          }
        }
      }
      return e3;
    }
    function Q(t4) {
      var e3, r3 = {};
      function n3(t5, n4) {
        if (r3.hasOwnProperty(t5) && n4 !== r3[t5])
          throw (e3 = new Error('Signature "' + t5 + '" is defined twice')).data = { signature: t5 }, e3;
      }
      for (var i3 = 0; i3 < t4.length; i3++) {
        var s3 = t4[i3];
        if (typeof s3.signatures == "object")
          for (var a3 in s3.signatures)
            s3.signatures.hasOwnProperty(a3) && (n3(a3, s3.signatures[a3]), r3[a3] = s3.signatures[a3]);
        else {
          if (typeof s3.signature != "string")
            throw (e3 = new TypeError("Function is no typed-function (index: " + i3 + ")")).data = { index: i3 }, e3;
          n3(s3.signature, s3), r3[s3.signature] = s3;
        }
      }
      return r3;
    }
    return (u2 = B2("typed", { "string, Object": B2, Object: function(t4) {
      var e3 = [];
      for (var r3 in t4)
        t4.hasOwnProperty(r3) && e3.push(t4[r3]);
      return B2(J(e3), t4);
    }, "...Function": function(t4) {
      return B2(J(t4), Q(t4));
    }, "string, ...Function": function(t4, e3) {
      return B2(t4, Q(e3));
    } })).create = n2, u2.types = i2, u2.conversions = o2, u2.ignore = a2, u2.convert = f2, u2.find = p2, u2.addType = function(t4, e3) {
      if (!t4 || typeof t4.name != "string" || typeof t4.test != "function")
        throw new TypeError("Object with properties {name: string, test: function} expected");
      if (e3 !== false) {
        for (var r3 = 0; r3 < u2.types.length; r3++)
          if (u2.types[r3].name === "Object")
            return void u2.types.splice(r3, 0, t4);
      }
      u2.types.push(t4);
    }, u2.addConversion = function(t4) {
      if (!t4 || typeof t4.from != "string" || typeof t4.to != "string" || typeof t4.convert != "function")
        throw new TypeError("Object with properties {from: string, to: string, convert: function} expected");
      u2.conversions.push(t4);
    }, u2;
  }
  return n2();
}();
function Ur(t3) {
  return typeof t3 == "boolean" || !!isFinite(t3) && t3 === Math.round(t3);
}
var jr = Math.sign || function(t3) {
  return t3 > 0 ? 1 : t3 < 0 ? -1 : 0;
};
function qr(t3, e2) {
  if (typeof e2 == "function")
    return e2(t3);
  if (t3 === 1 / 0)
    return "Infinity";
  if (t3 === -1 / 0)
    return "-Infinity";
  if (isNaN(t3))
    return "NaN";
  var r2, n2 = "auto";
  switch (e2 && (e2.notation && (n2 = e2.notation), Be(e2) ? r2 = e2 : Be(e2.precision) && (r2 = e2.precision)), n2) {
    case "fixed":
      return Vr(t3, r2);
    case "exponential":
      return $r(t3, r2);
    case "engineering":
      return function(t4, e3) {
        if (isNaN(t4) || !isFinite(t4))
          return String(t4);
        var r3 = Gr(Hr(t4), e3), n3 = r3.exponent, i2 = r3.coefficients, s2 = n3 % 3 == 0 ? n3 : n3 < 0 ? n3 - 3 - n3 % 3 : n3 - n3 % 3;
        if (Be(e3))
          for (; e3 > i2.length || n3 - s2 + 1 > i2.length; )
            i2.push(0);
        else
          for (var a2 = Math.abs(n3 - s2) - (i2.length - 1), o2 = 0; o2 < a2; o2++)
            i2.push(0);
        var u2 = Math.abs(n3 - s2), h = 1;
        for (; u2 > 0; )
          h++, u2--;
        var c2 = i2.slice(h).join(""), l2 = Be(e3) && c2.length || c2.match(/[1-9]/) ? "." + c2 : "", p2 = i2.slice(0, h).join("") + l2 + "e" + (n3 >= 0 ? "+" : "") + s2.toString();
        return r3.sign + p2;
      }(t3, r2);
    case "auto":
      return function(t4, e3, r3) {
        if (isNaN(t4) || !isFinite(t4))
          return String(t4);
        var n3 = r3 && r3.lowerExp !== void 0 ? r3.lowerExp : -3, i2 = r3 && r3.upperExp !== void 0 ? r3.upperExp : 5, s2 = Hr(t4), a2 = e3 ? Gr(s2, e3) : s2;
        if (a2.exponent < n3 || a2.exponent >= i2)
          return $r(t4, e3);
        var o2 = a2.coefficients, u2 = a2.exponent;
        o2.length < e3 && (o2 = o2.concat(Wr(e3 - o2.length))), o2 = o2.concat(Wr(u2 - o2.length + 1 + (o2.length < e3 ? e3 - o2.length : 0)));
        var h = u2 > 0 ? u2 : 0;
        return h < (o2 = Wr(-u2).concat(o2)).length - 1 && o2.splice(h + 1, 0, "."), a2.sign + o2.join("");
      }(t3, r2, e2 && e2).replace(/((\.\d*?)(0+))($|e)/, function() {
        var t4 = arguments[2], e3 = arguments[4];
        return t4 !== "." ? t4 + e3 : e3;
      });
    default:
      throw new Error('Unknown notation "' + n2 + '". Choose "auto", "exponential", or "fixed".');
  }
}
function Hr(t3) {
  var e2 = String(t3).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);
  if (!e2)
    throw new SyntaxError("Invalid number " + t3);
  var r2 = e2[1], n2 = e2[2], i2 = parseFloat(e2[4] || "0"), s2 = n2.indexOf(".");
  i2 += s2 !== -1 ? s2 - 1 : n2.length - 1;
  var a2 = n2.replace(".", "").replace(/^0*/, function(t4) {
    return i2 -= t4.length, "";
  }).replace(/0*$/, "").split("").map(function(t4) {
    return parseInt(t4);
  });
  return a2.length === 0 && (a2.push(0), i2++), { sign: r2, coefficients: a2, exponent: i2 };
}
function Vr(t3, e2) {
  if (isNaN(t3) || !isFinite(t3))
    return String(t3);
  var r2 = Hr(t3), n2 = typeof e2 == "number" ? Gr(r2, r2.exponent + 1 + e2) : r2, i2 = n2.coefficients, s2 = n2.exponent + 1, a2 = s2 + (e2 || 0);
  return i2.length < a2 && (i2 = i2.concat(Wr(a2 - i2.length))), s2 < 0 && (i2 = Wr(1 - s2).concat(i2), s2 = 1), s2 < i2.length && i2.splice(s2, 0, s2 === 0 ? "0." : "."), n2.sign + i2.join("");
}
function $r(t3, e2) {
  if (isNaN(t3) || !isFinite(t3))
    return String(t3);
  var r2 = Hr(t3), n2 = e2 ? Gr(r2, e2) : r2, i2 = n2.coefficients, s2 = n2.exponent;
  i2.length < e2 && (i2 = i2.concat(Wr(e2 - i2.length)));
  var a2 = i2.shift();
  return n2.sign + a2 + (i2.length > 0 ? "." + i2.join("") : "") + "e" + (s2 >= 0 ? "+" : "") + s2;
}
function Gr(t3, e2) {
  for (var r2 = { sign: t3.sign, coefficients: t3.coefficients, exponent: t3.exponent }, n2 = r2.coefficients; e2 <= 0; )
    n2.unshift(0), r2.exponent++, e2++;
  if (n2.length > e2 && n2.splice(e2, n2.length - e2)[0] >= 5) {
    var i2 = e2 - 1;
    for (n2[i2]++; n2[i2] === 10; )
      n2.pop(), i2 === 0 && (n2.unshift(0), r2.exponent++, i2++), n2[--i2]++;
  }
  return r2;
}
function Wr(t3) {
  for (var e2 = [], r2 = 0; r2 < t3; r2++)
    e2.push(0);
  return e2;
}
var Yr = Number.EPSILON || 2220446049250313e-31;
function Zr(t3, e2, r2) {
  if (r2 == null)
    return t3 === e2;
  if (t3 === e2)
    return true;
  if (isNaN(t3) || isNaN(e2))
    return false;
  if (isFinite(t3) && isFinite(e2)) {
    var n2 = Math.abs(t3 - e2);
    return n2 < Yr || n2 <= Math.max(Math.abs(t3), Math.abs(e2)) * r2;
  }
  return false;
}
function Xr(t3, e2) {
  if (typeof e2 == "function")
    return e2(t3);
  if (!t3.isFinite())
    return t3.isNaN() ? "NaN" : t3.gt(0) ? "Infinity" : "-Infinity";
  var r2, n2 = "auto";
  switch (e2 !== void 0 && (e2.notation && (n2 = e2.notation), typeof e2 == "number" ? r2 = e2 : e2.precision && (r2 = e2.precision)), n2) {
    case "fixed":
      return function(t4, e3) {
        return t4.toFixed(e3);
      }(t3, r2);
    case "exponential":
      return Jr(t3, r2);
    case "engineering":
      return function(t4, e3) {
        var r3 = t4.e, n3 = r3 % 3 == 0 ? r3 : r3 < 0 ? r3 - 3 - r3 % 3 : r3 - r3 % 3, i3 = t4.mul(Math.pow(10, -n3)), s3 = i3.toPrecision(e3);
        s3.indexOf("e") !== -1 && (s3 = i3.toString());
        return s3 + "e" + (r3 >= 0 ? "+" : "") + n3.toString();
      }(t3, r2);
    case "auto":
      var i2 = e2 && e2.lowerExp !== void 0 ? e2.lowerExp : -3, s2 = e2 && e2.upperExp !== void 0 ? e2.upperExp : 5;
      if (t3.isZero())
        return "0";
      var a2 = t3.toSignificantDigits(r2), o2 = a2.e;
      return (o2 >= i2 && o2 < s2 ? a2.toFixed() : Jr(t3, r2)).replace(/((\.\d*?)(0+))($|e)/, function() {
        var t4 = arguments[2], e3 = arguments[4];
        return t4 !== "." ? t4 + e3 : e3;
      });
    default:
      throw new Error('Unknown notation "' + n2 + '". Choose "auto", "exponential", or "fixed".');
  }
}
function Jr(t3, e2) {
  return e2 !== void 0 ? t3.toExponential(e2 - 1) : t3.toExponential();
}
function Qr(t3, e2) {
  var r2 = t3.length - e2.length, n2 = t3.length;
  return t3.substring(r2, n2) === e2;
}
function Kr(t3, e2) {
  return typeof t3 == "number" ? qr(t3, e2) : Fe(t3) ? Xr(t3, e2) : function(t4) {
    return t4 && typeof t4 == "object" && typeof t4.s == "number" && typeof t4.n == "number" && typeof t4.d == "number" || false;
  }(t3) ? e2 && e2.fraction === "decimal" ? t3.toString() : t3.s * t3.n + "/" + t3.d : Array.isArray(t3) ? rn(t3, e2) : qe(t3) ? '"' + t3 + '"' : typeof t3 == "function" ? t3.syntax ? String(t3.syntax) : "function" : t3 && typeof t3 == "object" ? typeof t3.format == "function" ? t3.format(e2) : t3 && t3.toString(e2) !== {}.toString() ? t3.toString(e2) : "{" + Object.keys(t3).map((r2) => '"' + r2 + '": ' + Kr(t3[r2], e2)).join(", ") + "}" : String(t3);
}
function tn(t3) {
  for (var e2 = String(t3), r2 = "", n2 = 0; n2 < e2.length; ) {
    var i2 = e2.charAt(n2);
    i2 === "\\" ? (r2 += i2, n2++, (i2 = e2.charAt(n2)) !== "" && '"\\/bfnrtu'.indexOf(i2) !== -1 || (r2 += "\\"), r2 += i2) : r2 += i2 === '"' ? '\\"' : i2, n2++;
  }
  return '"' + r2 + '"';
}
function en(t3) {
  var e2 = String(t3);
  return e2 = e2.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
function rn(t3, e2) {
  if (Array.isArray(t3)) {
    for (var r2 = "[", n2 = t3.length, i2 = 0; i2 < n2; i2++)
      i2 !== 0 && (r2 += ", "), r2 += rn(t3[i2], e2);
    return r2 += "]";
  }
  return Kr(t3, e2);
}
function nn(t3, e2, r2) {
  if (!(this instanceof nn))
    throw new SyntaxError("Constructor must be called with the new operator");
  this.actual = t3, this.expected = e2, this.relation = r2, this.message = "Dimension mismatch (" + (Array.isArray(t3) ? "[" + t3.join(", ") + "]" : t3) + " " + (this.relation || "!=") + " " + (Array.isArray(e2) ? "[" + e2.join(", ") + "]" : e2) + ")", this.stack = new Error().stack;
}
function sn(t3, e2, r2) {
  if (!(this instanceof sn))
    throw new SyntaxError("Constructor must be called with the new operator");
  this.index = t3, arguments.length < 3 ? (this.min = 0, this.max = e2) : (this.min = e2, this.max = r2), this.min !== void 0 && this.index < this.min ? this.message = "Index out of range (" + this.index + " < " + this.min + ")" : this.max !== void 0 && this.index >= this.max ? this.message = "Index out of range (" + this.index + " > " + (this.max - 1) + ")" : this.message = "Index out of range (" + this.index + ")", this.stack = new Error().stack;
}
function an(t3) {
  for (var e2 = []; Array.isArray(t3); )
    e2.push(t3.length), t3 = t3[0];
  return e2;
}
function on(t3, e2, r2) {
  var n2, i2 = t3.length;
  if (i2 !== e2[r2])
    throw new nn(i2, e2[r2]);
  if (r2 < e2.length - 1) {
    var s2 = r2 + 1;
    for (n2 = 0; n2 < i2; n2++) {
      var a2 = t3[n2];
      if (!Array.isArray(a2))
        throw new nn(e2.length - 1, e2.length, "<");
      on(t3[n2], e2, s2);
    }
  } else
    for (n2 = 0; n2 < i2; n2++)
      if (Array.isArray(t3[n2]))
        throw new nn(e2.length + 1, e2.length, ">");
}
function un(t3, e2) {
  if (e2.length === 0) {
    if (Array.isArray(t3))
      throw new nn(t3.length, 0);
  } else
    on(t3, e2, 0);
}
function hn(t3, e2) {
  if (!Be(t3) || !Ur(t3))
    throw new TypeError("Index must be an integer (value: " + t3 + ")");
  if (t3 < 0 || typeof e2 == "number" && t3 >= e2)
    throw new sn(t3, e2);
}
function cn(t3, e2, r2) {
  if (!Array.isArray(t3) || !Array.isArray(e2))
    throw new TypeError("Array expected");
  if (e2.length === 0)
    throw new Error("Resizing to scalar is not supported");
  return e2.forEach(function(t4) {
    if (!Be(t4) || !Ur(t4) || t4 < 0)
      throw new TypeError("Invalid size, must contain positive integers (size: " + Kr(e2) + ")");
  }), ln(t3, e2, 0, r2 !== void 0 ? r2 : 0), t3;
}
function ln(t3, e2, r2, n2) {
  var i2, s2, a2 = t3.length, o2 = e2[r2], u2 = Math.min(a2, o2);
  if (t3.length = o2, r2 < e2.length - 1) {
    var h = r2 + 1;
    for (i2 = 0; i2 < u2; i2++)
      s2 = t3[i2], Array.isArray(s2) || (s2 = [s2], t3[i2] = s2), ln(s2, e2, h, n2);
    for (i2 = u2; i2 < o2; i2++)
      s2 = [], t3[i2] = s2, ln(s2, e2, h, n2);
  } else {
    for (i2 = 0; i2 < u2; i2++)
      for (; Array.isArray(t3[i2]); )
        t3[i2] = t3[i2][0];
    for (i2 = u2; i2 < o2; i2++)
      t3[i2] = n2;
  }
}
function pn(t3, e2) {
  var r2, n2 = function(t4) {
    if (!Array.isArray(t4))
      return t4;
    var e3 = [];
    return t4.forEach(function t5(r3) {
      Array.isArray(r3) ? r3.forEach(t5) : e3.push(r3);
    }), e3;
  }(t3);
  function i2(t4) {
    return t4.reduce((t5, e3) => t5 * e3);
  }
  if (!Array.isArray(t3) || !Array.isArray(e2))
    throw new TypeError("Array expected");
  if (e2.length === 0)
    throw new nn(0, i2(an(t3)), "!=");
  for (var s2 = 1, a2 = 0; a2 < e2.length; a2++)
    s2 *= e2[a2];
  if (n2.length !== s2)
    throw new nn(i2(e2), i2(an(t3)), "!=");
  try {
    r2 = function(t4, e3) {
      for (var r3, n3 = t4, i3 = e3.length - 1; i3 > 0; i3--) {
        var s3 = e3[i3];
        r3 = [];
        for (var a3 = n3.length / s3, o2 = 0; o2 < a3; o2++)
          r3.push(n3.slice(o2 * s3, (o2 + 1) * s3));
        n3 = r3;
      }
      return n3;
    }(n2, e2);
  } catch (o2) {
    if (o2 instanceof nn)
      throw new nn(i2(e2), i2(an(t3)), "!=");
    throw o2;
  }
  return r2;
}
function fn(t3, e2, r2, n2) {
  var i2 = n2 || an(t3);
  if (r2)
    for (var s2 = 0; s2 < r2; s2++)
      t3 = [t3], i2.unshift(1);
  for (t3 = dn(t3, e2, 0); i2.length < e2; )
    i2.push(1);
  return t3;
}
function dn(t3, e2, r2) {
  var n2, i2;
  if (Array.isArray(t3)) {
    var s2 = r2 + 1;
    for (n2 = 0, i2 = t3.length; n2 < i2; n2++)
      t3[n2] = dn(t3[n2], e2, s2);
  } else
    for (var a2 = r2; a2 < e2; a2++)
      t3 = [t3];
  return t3;
}
function mn(t3, e2) {
  return Array.prototype.map.call(t3, e2);
}
function yn(t3, e2) {
  Array.prototype.forEach.call(t3, e2);
}
function gn(t3, e2) {
  return Array.prototype.join.call(t3, e2);
}
function vn(t3, e2) {
  for (var r2, n2 = 0, i2 = 0; i2 < t3.length; i2++) {
    var s2 = t3[i2], a2 = Array.isArray(s2);
    if (i2 === 0 && a2 && (n2 = s2.length), a2 && s2.length !== n2)
      return;
    var o2 = a2 ? vn(s2, e2) : e2(s2);
    if (r2 === void 0)
      r2 = o2;
    else if (r2 !== o2)
      return "mixed";
  }
  return r2;
}
function xn(t3, e2) {
  return t3.indexOf(e2) !== -1;
}
function wn(t3, e2, r2, n2) {
  function i2(n3) {
    var i3 = function(t4, e3) {
      for (var r3 = {}, n4 = 0; n4 < e3.length; n4++) {
        var i4 = e3[n4], s2 = t4[i4];
        s2 !== void 0 && (r3[i4] = s2);
      }
      return r3;
    }(n3, e2.map(_n));
    return function(t4, e3, r3) {
      if (!e3.filter((t5) => !function(t6) {
        return t6 && t6[0] === "?";
      }(t5)).every((t5) => r3[t5] !== void 0)) {
        var n4 = e3.filter((t5) => r3[t5] === void 0);
        throw new Error('Cannot create function "'.concat(t4, '", ') + "some dependencies are missing: ".concat(n4.map((t5) => '"'.concat(t5, '"')).join(", "), "."));
      }
    }(t3, e2, n3), r2(i3);
  }
  return i2.isFactory = true, i2.fn = t3, i2.dependencies = e2.slice().sort(), n2 && (i2.meta = n2), i2;
}
function bn(t3) {
  return typeof t3 == "function" && typeof t3.fn == "string" && Array.isArray(t3.dependencies);
}
function _n(t3) {
  return t3 && t3[0] === "?" ? t3.slice(1) : t3;
}
nn.prototype = new RangeError(), nn.prototype.constructor = RangeError, nn.prototype.name = "DimensionError", nn.prototype.isDimensionError = true, sn.prototype = new RangeError(), sn.prototype.constructor = RangeError, sn.prototype.name = "IndexError", sn.prototype.isIndexError = true;
var Mn = function() {
  return Mn = Pr.create, Pr;
}, Nn = wn("typed", ["?BigNumber", "?Complex", "?DenseMatrix", "?Fraction"], function(t3) {
  var { BigNumber: e2, Complex: r2, DenseMatrix: n2, Fraction: i2 } = t3, s2 = Mn();
  return s2.types = [{ name: "number", test: Be }, { name: "Complex", test: Pe }, { name: "BigNumber", test: Fe }, { name: "Fraction", test: Ue }, { name: "Unit", test: je }, { name: "string", test: qe }, { name: "Chain", test: wr }, { name: "Array", test: He }, { name: "Matrix", test: Ve }, { name: "DenseMatrix", test: Ge }, { name: "SparseMatrix", test: We }, { name: "Range", test: Ye }, { name: "Index", test: Ze }, { name: "boolean", test: Xe }, { name: "ResultSet", test: Je }, { name: "Help", test: Qe }, { name: "function", test: Ke }, { name: "Date", test: tr }, { name: "RegExp", test: er }, { name: "null", test: nr }, { name: "undefined", test: ir }, { name: "AccessorNode", test: sr }, { name: "ArrayNode", test: ar }, { name: "AssignmentNode", test: or }, { name: "BlockNode", test: ur }, { name: "ConditionalNode", test: hr }, { name: "ConstantNode", test: cr }, { name: "FunctionNode", test: pr }, { name: "FunctionAssignmentNode", test: lr }, { name: "IndexNode", test: fr }, { name: "Node", test: dr }, { name: "ObjectNode", test: mr }, { name: "OperatorNode", test: yr }, { name: "ParenthesisNode", test: gr }, { name: "RangeNode", test: vr }, { name: "SymbolNode", test: xr }, { name: "Object", test: rr }], s2.conversions = [{ from: "number", to: "BigNumber", convert: function(t4) {
    if (e2 || En(t4), t4.toExponential().replace(/e.*$/, "").replace(/^0\.?0*|\./, "").length > 15)
      throw new TypeError("Cannot implicitly convert a number with >15 significant digits to BigNumber (value: " + t4 + "). Use function bignumber(x) to convert to BigNumber.");
    return new e2(t4);
  } }, { from: "number", to: "Complex", convert: function(t4) {
    return r2 || Sn(t4), new r2(t4, 0);
  } }, { from: "number", to: "string", convert: function(t4) {
    return t4 + "";
  } }, { from: "BigNumber", to: "Complex", convert: function(t4) {
    return r2 || Sn(t4), new r2(t4.toNumber(), 0);
  } }, { from: "Fraction", to: "BigNumber", convert: function(t4) {
    throw new TypeError("Cannot implicitly convert a Fraction to BigNumber or vice versa. Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.");
  } }, { from: "Fraction", to: "Complex", convert: function(t4) {
    return r2 || Sn(t4), new r2(t4.valueOf(), 0);
  } }, { from: "number", to: "Fraction", convert: function(t4) {
    i2 || Tn(t4);
    var e3 = new i2(t4);
    if (e3.valueOf() !== t4)
      throw new TypeError("Cannot implicitly convert a number to a Fraction when there will be a loss of precision (value: " + t4 + "). Use function fraction(x) to convert to Fraction.");
    return e3;
  } }, { from: "string", to: "number", convert: function(t4) {
    var e3 = Number(t4);
    if (isNaN(e3))
      throw new Error('Cannot convert "' + t4 + '" to a number');
    return e3;
  } }, { from: "string", to: "BigNumber", convert: function(t4) {
    e2 || En(t4);
    try {
      return new e2(t4);
    } catch (r3) {
      throw new Error('Cannot convert "' + t4 + '" to BigNumber');
    }
  } }, { from: "string", to: "Fraction", convert: function(t4) {
    i2 || Tn(t4);
    try {
      return new i2(t4);
    } catch (e3) {
      throw new Error('Cannot convert "' + t4 + '" to Fraction');
    }
  } }, { from: "string", to: "Complex", convert: function(t4) {
    r2 || Sn(t4);
    try {
      return new r2(t4);
    } catch (e3) {
      throw new Error('Cannot convert "' + t4 + '" to Complex');
    }
  } }, { from: "boolean", to: "number", convert: function(t4) {
    return +t4;
  } }, { from: "boolean", to: "BigNumber", convert: function(t4) {
    return e2 || En(t4), new e2(+t4);
  } }, { from: "boolean", to: "Fraction", convert: function(t4) {
    return i2 || Tn(t4), new i2(+t4);
  } }, { from: "boolean", to: "string", convert: function(t4) {
    return String(t4);
  } }, { from: "Array", to: "Matrix", convert: function(t4) {
    return n2 || function() {
      throw new Error("Cannot convert array into a Matrix: no class 'DenseMatrix' provided");
    }(), new n2(t4);
  } }, { from: "Matrix", to: "Array", convert: function(t4) {
    return t4.valueOf();
  } }], s2;
});
function En(t3) {
  throw new Error("Cannot convert value ".concat(t3, " into a BigNumber: no class 'BigNumber' provided"));
}
function Sn(t3) {
  throw new Error("Cannot convert value ".concat(t3, " into a Complex number: no class 'Complex' provided"));
}
function Tn(t3) {
  throw new Error("Cannot convert value ".concat(t3, " into a Fraction, no class 'Fraction' provided."));
}
var On, zn, Cn = wn("ResultSet", [], () => {
  function t3(e2) {
    if (!(this instanceof t3))
      throw new SyntaxError("Constructor must be called with the new operator");
    this.entries = e2 || [];
  }
  return t3.prototype.type = "ResultSet", t3.prototype.isResultSet = true, t3.prototype.valueOf = function() {
    return this.entries;
  }, t3.prototype.toString = function() {
    return "[" + this.entries.join(", ") + "]";
  }, t3.prototype.toJSON = function() {
    return { mathjs: "ResultSet", entries: this.entries };
  }, t3.fromJSON = function(e2) {
    return new t3(e2.entries);
  }, t3;
}, { isClass: true }), An = 9e15, Rn = "0123456789abcdef", Dn = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058", kn = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789", In = { precision: 20, rounding: 4, modulo: 1, toExpNeg: -7, toExpPos: 21, minE: -An, maxE: An, crypto: false }, Ln = true, Bn = "[DecimalError] Invalid argument: ", Fn = Math.floor, Pn = Math.pow, Un = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i, jn = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i, qn = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i, Hn = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, Vn = 1e7, $n = Dn.length - 1, Gn = kn.length - 1, Wn = { name: "[object Decimal]" };
function Yn(t3) {
  var e2, r2, n2, i2 = t3.length - 1, s2 = "", a2 = t3[0];
  if (i2 > 0) {
    for (s2 += a2, e2 = 1; e2 < i2; e2++)
      (r2 = 7 - (n2 = t3[e2] + "").length) && (s2 += si(r2)), s2 += n2;
    (r2 = 7 - (n2 = (a2 = t3[e2]) + "").length) && (s2 += si(r2));
  } else if (a2 === 0)
    return "0";
  for (; a2 % 10 == 0; )
    a2 /= 10;
  return s2 + a2;
}
function Zn(t3, e2, r2) {
  if (t3 !== ~~t3 || t3 < e2 || t3 > r2)
    throw Error(Bn + t3);
}
function Xn(t3, e2, r2, n2) {
  var i2, s2, a2, o2;
  for (s2 = t3[0]; s2 >= 10; s2 /= 10)
    --e2;
  return --e2 < 0 ? (e2 += 7, i2 = 0) : (i2 = Math.ceil((e2 + 1) / 7), e2 %= 7), s2 = Pn(10, 7 - e2), o2 = t3[i2] % s2 | 0, n2 == null ? e2 < 3 ? (e2 == 0 ? o2 = o2 / 100 | 0 : e2 == 1 && (o2 = o2 / 10 | 0), a2 = r2 < 4 && o2 == 99999 || r2 > 3 && o2 == 49999 || o2 == 5e4 || o2 == 0) : a2 = (r2 < 4 && o2 + 1 == s2 || r2 > 3 && o2 + 1 == s2 / 2) && (t3[i2 + 1] / s2 / 100 | 0) == Pn(10, e2 - 2) - 1 || (o2 == s2 / 2 || o2 == 0) && (t3[i2 + 1] / s2 / 100 | 0) == 0 : e2 < 4 ? (e2 == 0 ? o2 = o2 / 1e3 | 0 : e2 == 1 ? o2 = o2 / 100 | 0 : e2 == 2 && (o2 = o2 / 10 | 0), a2 = (n2 || r2 < 4) && o2 == 9999 || !n2 && r2 > 3 && o2 == 4999) : a2 = ((n2 || r2 < 4) && o2 + 1 == s2 || !n2 && r2 > 3 && o2 + 1 == s2 / 2) && (t3[i2 + 1] / s2 / 1e3 | 0) == Pn(10, e2 - 3) - 1, a2;
}
function Jn(t3, e2, r2) {
  for (var n2, i2, s2 = [0], a2 = 0, o2 = t3.length; a2 < o2; ) {
    for (i2 = s2.length; i2--; )
      s2[i2] *= e2;
    for (s2[0] += Rn.indexOf(t3.charAt(a2++)), n2 = 0; n2 < s2.length; n2++)
      s2[n2] > r2 - 1 && (s2[n2 + 1] === void 0 && (s2[n2 + 1] = 0), s2[n2 + 1] += s2[n2] / r2 | 0, s2[n2] %= r2);
  }
  return s2.reverse();
}
Wn.absoluteValue = Wn.abs = function() {
  var t3 = new this.constructor(this);
  return t3.s < 0 && (t3.s = 1), Kn(t3);
}, Wn.ceil = function() {
  return Kn(new this.constructor(this), this.e + 1, 2);
}, Wn.comparedTo = Wn.cmp = function(t3) {
  var e2, r2, n2, i2, s2 = this, a2 = s2.d, o2 = (t3 = new s2.constructor(t3)).d, u2 = s2.s, h = t3.s;
  if (!a2 || !o2)
    return u2 && h ? u2 !== h ? u2 : a2 === o2 ? 0 : !a2 ^ u2 < 0 ? 1 : -1 : NaN;
  if (!a2[0] || !o2[0])
    return a2[0] ? u2 : o2[0] ? -h : 0;
  if (u2 !== h)
    return u2;
  if (s2.e !== t3.e)
    return s2.e > t3.e ^ u2 < 0 ? 1 : -1;
  for (e2 = 0, r2 = (n2 = a2.length) < (i2 = o2.length) ? n2 : i2; e2 < r2; ++e2)
    if (a2[e2] !== o2[e2])
      return a2[e2] > o2[e2] ^ u2 < 0 ? 1 : -1;
  return n2 === i2 ? 0 : n2 > i2 ^ u2 < 0 ? 1 : -1;
}, Wn.cosine = Wn.cos = function() {
  var t3, e2, r2 = this, n2 = r2.constructor;
  return r2.d ? r2.d[0] ? (t3 = n2.precision, e2 = n2.rounding, n2.precision = t3 + Math.max(r2.e, r2.sd()) + 7, n2.rounding = 1, r2 = function(t4, e3) {
    var r3, n3, i2 = e3.d.length;
    i2 < 32 ? n3 = (1 / di(4, r3 = Math.ceil(i2 / 3))).toString() : (r3 = 16, n3 = "2.3283064365386962890625e-10");
    t4.precision += r3, e3 = fi(t4, 1, e3.times(n3), new t4(1));
    for (var s2 = r3; s2--; ) {
      var a2 = e3.times(e3);
      e3 = a2.times(a2).minus(a2).times(8).plus(1);
    }
    return t4.precision -= r3, e3;
  }(n2, mi(n2, r2)), n2.precision = t3, n2.rounding = e2, Kn(zn == 2 || zn == 3 ? r2.neg() : r2, t3, e2, true)) : new n2(1) : new n2(NaN);
}, Wn.cubeRoot = Wn.cbrt = function() {
  var t3, e2, r2, n2, i2, s2, a2, o2, u2, h, c2 = this, l2 = c2.constructor;
  if (!c2.isFinite() || c2.isZero())
    return new l2(c2);
  for (Ln = false, (s2 = c2.s * Pn(c2.s * c2, 1 / 3)) && Math.abs(s2) != 1 / 0 ? n2 = new l2(s2.toString()) : (r2 = Yn(c2.d), (s2 = ((t3 = c2.e) - r2.length + 1) % 3) && (r2 += s2 == 1 || s2 == -2 ? "0" : "00"), s2 = Pn(r2, 1 / 3), t3 = Fn((t3 + 1) / 3) - (t3 % 3 == (t3 < 0 ? -1 : 2)), (n2 = new l2(r2 = s2 == 1 / 0 ? "5e" + t3 : (r2 = s2.toExponential()).slice(0, r2.indexOf("e") + 1) + t3)).s = c2.s), a2 = (t3 = l2.precision) + 3; ; )
    if (h = (u2 = (o2 = n2).times(o2).times(o2)).plus(c2), n2 = Qn(h.plus(c2).times(o2), h.plus(u2), a2 + 2, 1), Yn(o2.d).slice(0, a2) === (r2 = Yn(n2.d)).slice(0, a2)) {
      if ((r2 = r2.slice(a2 - 3, a2 + 1)) != "9999" && (i2 || r2 != "4999")) {
        +r2 && (+r2.slice(1) || r2.charAt(0) != "5") || (Kn(n2, t3 + 1, 1), e2 = !n2.times(n2).times(n2).eq(c2));
        break;
      }
      if (!i2 && (Kn(o2, t3 + 1, 0), o2.times(o2).times(o2).eq(c2))) {
        n2 = o2;
        break;
      }
      a2 += 4, i2 = 1;
    }
  return Ln = true, Kn(n2, t3, l2.rounding, e2);
}, Wn.decimalPlaces = Wn.dp = function() {
  var t3, e2 = this.d, r2 = NaN;
  if (e2) {
    if (r2 = 7 * ((t3 = e2.length - 1) - Fn(this.e / 7)), t3 = e2[t3])
      for (; t3 % 10 == 0; t3 /= 10)
        r2--;
    r2 < 0 && (r2 = 0);
  }
  return r2;
}, Wn.dividedBy = Wn.div = function(t3) {
  return Qn(this, new this.constructor(t3));
}, Wn.dividedToIntegerBy = Wn.divToInt = function(t3) {
  var e2 = this.constructor;
  return Kn(Qn(this, new e2(t3), 0, 1, 1), e2.precision, e2.rounding);
}, Wn.equals = Wn.eq = function(t3) {
  return this.cmp(t3) === 0;
}, Wn.floor = function() {
  return Kn(new this.constructor(this), this.e + 1, 3);
}, Wn.greaterThan = Wn.gt = function(t3) {
  return this.cmp(t3) > 0;
}, Wn.greaterThanOrEqualTo = Wn.gte = function(t3) {
  var e2 = this.cmp(t3);
  return e2 == 1 || e2 === 0;
}, Wn.hyperbolicCosine = Wn.cosh = function() {
  var t3, e2, r2, n2, i2, s2 = this, a2 = s2.constructor, o2 = new a2(1);
  if (!s2.isFinite())
    return new a2(s2.s ? 1 / 0 : NaN);
  if (s2.isZero())
    return o2;
  r2 = a2.precision, n2 = a2.rounding, a2.precision = r2 + Math.max(s2.e, s2.sd()) + 4, a2.rounding = 1, (i2 = s2.d.length) < 32 ? e2 = (1 / di(4, t3 = Math.ceil(i2 / 3))).toString() : (t3 = 16, e2 = "2.3283064365386962890625e-10"), s2 = fi(a2, 1, s2.times(e2), new a2(1), true);
  for (var u2, h = t3, c2 = new a2(8); h--; )
    u2 = s2.times(s2), s2 = o2.minus(u2.times(c2.minus(u2.times(c2))));
  return Kn(s2, a2.precision = r2, a2.rounding = n2, true);
}, Wn.hyperbolicSine = Wn.sinh = function() {
  var t3, e2, r2, n2, i2 = this, s2 = i2.constructor;
  if (!i2.isFinite() || i2.isZero())
    return new s2(i2);
  if (e2 = s2.precision, r2 = s2.rounding, s2.precision = e2 + Math.max(i2.e, i2.sd()) + 4, s2.rounding = 1, (n2 = i2.d.length) < 3)
    i2 = fi(s2, 2, i2, i2, true);
  else {
    t3 = (t3 = 1.4 * Math.sqrt(n2)) > 16 ? 16 : 0 | t3, i2 = fi(s2, 2, i2 = i2.times(1 / di(5, t3)), i2, true);
    for (var a2, o2 = new s2(5), u2 = new s2(16), h = new s2(20); t3--; )
      a2 = i2.times(i2), i2 = i2.times(o2.plus(a2.times(u2.times(a2).plus(h))));
  }
  return s2.precision = e2, s2.rounding = r2, Kn(i2, e2, r2, true);
}, Wn.hyperbolicTangent = Wn.tanh = function() {
  var t3, e2, r2 = this, n2 = r2.constructor;
  return r2.isFinite() ? r2.isZero() ? new n2(r2) : (t3 = n2.precision, e2 = n2.rounding, n2.precision = t3 + 7, n2.rounding = 1, Qn(r2.sinh(), r2.cosh(), n2.precision = t3, n2.rounding = e2)) : new n2(r2.s);
}, Wn.inverseCosine = Wn.acos = function() {
  var t3, e2 = this, r2 = e2.constructor, n2 = e2.abs().cmp(1), i2 = r2.precision, s2 = r2.rounding;
  return n2 !== -1 ? n2 === 0 ? e2.isNeg() ? ni(r2, i2, s2) : new r2(0) : new r2(NaN) : e2.isZero() ? ni(r2, i2 + 4, s2).times(0.5) : (r2.precision = i2 + 6, r2.rounding = 1, e2 = e2.asin(), t3 = ni(r2, i2 + 4, s2).times(0.5), r2.precision = i2, r2.rounding = s2, t3.minus(e2));
}, Wn.inverseHyperbolicCosine = Wn.acosh = function() {
  var t3, e2, r2 = this, n2 = r2.constructor;
  return r2.lte(1) ? new n2(r2.eq(1) ? 0 : NaN) : r2.isFinite() ? (t3 = n2.precision, e2 = n2.rounding, n2.precision = t3 + Math.max(Math.abs(r2.e), r2.sd()) + 4, n2.rounding = 1, Ln = false, r2 = r2.times(r2).minus(1).sqrt().plus(r2), Ln = true, n2.precision = t3, n2.rounding = e2, r2.ln()) : new n2(r2);
}, Wn.inverseHyperbolicSine = Wn.asinh = function() {
  var t3, e2, r2 = this, n2 = r2.constructor;
  return !r2.isFinite() || r2.isZero() ? new n2(r2) : (t3 = n2.precision, e2 = n2.rounding, n2.precision = t3 + 2 * Math.max(Math.abs(r2.e), r2.sd()) + 6, n2.rounding = 1, Ln = false, r2 = r2.times(r2).plus(1).sqrt().plus(r2), Ln = true, n2.precision = t3, n2.rounding = e2, r2.ln());
}, Wn.inverseHyperbolicTangent = Wn.atanh = function() {
  var t3, e2, r2, n2, i2 = this, s2 = i2.constructor;
  return i2.isFinite() ? i2.e >= 0 ? new s2(i2.abs().eq(1) ? i2.s / 0 : i2.isZero() ? i2 : NaN) : (t3 = s2.precision, e2 = s2.rounding, n2 = i2.sd(), Math.max(n2, t3) < 2 * -i2.e - 1 ? Kn(new s2(i2), t3, e2, true) : (s2.precision = r2 = n2 - i2.e, i2 = Qn(i2.plus(1), new s2(1).minus(i2), r2 + t3, 1), s2.precision = t3 + 4, s2.rounding = 1, i2 = i2.ln(), s2.precision = t3, s2.rounding = e2, i2.times(0.5))) : new s2(NaN);
}, Wn.inverseSine = Wn.asin = function() {
  var t3, e2, r2, n2, i2 = this, s2 = i2.constructor;
  return i2.isZero() ? new s2(i2) : (e2 = i2.abs().cmp(1), r2 = s2.precision, n2 = s2.rounding, e2 !== -1 ? e2 === 0 ? ((t3 = ni(s2, r2 + 4, n2).times(0.5)).s = i2.s, t3) : new s2(NaN) : (s2.precision = r2 + 6, s2.rounding = 1, i2 = i2.div(new s2(1).minus(i2.times(i2)).sqrt().plus(1)).atan(), s2.precision = r2, s2.rounding = n2, i2.times(2)));
}, Wn.inverseTangent = Wn.atan = function() {
  var t3, e2, r2, n2, i2, s2, a2, o2, u2, h = this, c2 = h.constructor, l2 = c2.precision, p2 = c2.rounding;
  if (h.isFinite()) {
    if (h.isZero())
      return new c2(h);
    if (h.abs().eq(1) && l2 + 4 <= Gn)
      return (a2 = ni(c2, l2 + 4, p2).times(0.25)).s = h.s, a2;
  } else {
    if (!h.s)
      return new c2(NaN);
    if (l2 + 4 <= Gn)
      return (a2 = ni(c2, l2 + 4, p2).times(0.5)).s = h.s, a2;
  }
  for (c2.precision = o2 = l2 + 10, c2.rounding = 1, t3 = r2 = Math.min(28, o2 / 7 + 2 | 0); t3; --t3)
    h = h.div(h.times(h).plus(1).sqrt().plus(1));
  for (Ln = false, e2 = Math.ceil(o2 / 7), n2 = 1, u2 = h.times(h), a2 = new c2(h), i2 = h; t3 !== -1; )
    if (i2 = i2.times(u2), s2 = a2.minus(i2.div(n2 += 2)), i2 = i2.times(u2), (a2 = s2.plus(i2.div(n2 += 2))).d[e2] !== void 0)
      for (t3 = e2; a2.d[t3] === s2.d[t3] && t3--; )
        ;
  return r2 && (a2 = a2.times(2 << r2 - 1)), Ln = true, Kn(a2, c2.precision = l2, c2.rounding = p2, true);
}, Wn.isFinite = function() {
  return !!this.d;
}, Wn.isInteger = Wn.isInt = function() {
  return !!this.d && Fn(this.e / 7) > this.d.length - 2;
}, Wn.isNaN = function() {
  return !this.s;
}, Wn.isNegative = Wn.isNeg = function() {
  return this.s < 0;
}, Wn.isPositive = Wn.isPos = function() {
  return this.s > 0;
}, Wn.isZero = function() {
  return !!this.d && this.d[0] === 0;
}, Wn.lessThan = Wn.lt = function(t3) {
  return this.cmp(t3) < 0;
}, Wn.lessThanOrEqualTo = Wn.lte = function(t3) {
  return this.cmp(t3) < 1;
}, Wn.logarithm = Wn.log = function(t3) {
  var e2, r2, n2, i2, s2, a2, o2, u2, h = this, c2 = h.constructor, l2 = c2.precision, p2 = c2.rounding;
  if (t3 == null)
    t3 = new c2(10), e2 = true;
  else {
    if (r2 = (t3 = new c2(t3)).d, t3.s < 0 || !r2 || !r2[0] || t3.eq(1))
      return new c2(NaN);
    e2 = t3.eq(10);
  }
  if (r2 = h.d, h.s < 0 || !r2 || !r2[0] || h.eq(1))
    return new c2(r2 && !r2[0] ? -1 / 0 : h.s != 1 ? NaN : r2 ? 0 : 1 / 0);
  if (e2)
    if (r2.length > 1)
      s2 = true;
    else {
      for (i2 = r2[0]; i2 % 10 == 0; )
        i2 /= 10;
      s2 = i2 !== 1;
    }
  if (Ln = false, a2 = ci(h, o2 = l2 + 5), n2 = e2 ? ri(c2, o2 + 10) : ci(t3, o2), Xn((u2 = Qn(a2, n2, o2, 1)).d, i2 = l2, p2))
    do {
      if (a2 = ci(h, o2 += 10), n2 = e2 ? ri(c2, o2 + 10) : ci(t3, o2), u2 = Qn(a2, n2, o2, 1), !s2) {
        +Yn(u2.d).slice(i2 + 1, i2 + 15) + 1 == 1e14 && (u2 = Kn(u2, l2 + 1, 0));
        break;
      }
    } while (Xn(u2.d, i2 += 10, p2));
  return Ln = true, Kn(u2, l2, p2);
}, Wn.minus = Wn.sub = function(t3) {
  var e2, r2, n2, i2, s2, a2, o2, u2, h, c2, l2, p2, f2 = this, d = f2.constructor;
  if (t3 = new d(t3), !f2.d || !t3.d)
    return f2.s && t3.s ? f2.d ? t3.s = -t3.s : t3 = new d(t3.d || f2.s !== t3.s ? f2 : NaN) : t3 = new d(NaN), t3;
  if (f2.s != t3.s)
    return t3.s = -t3.s, f2.plus(t3);
  if (h = f2.d, p2 = t3.d, o2 = d.precision, u2 = d.rounding, !h[0] || !p2[0]) {
    if (p2[0])
      t3.s = -t3.s;
    else {
      if (!h[0])
        return new d(u2 === 3 ? -0 : 0);
      t3 = new d(f2);
    }
    return Ln ? Kn(t3, o2, u2) : t3;
  }
  if (r2 = Fn(t3.e / 7), c2 = Fn(f2.e / 7), h = h.slice(), s2 = c2 - r2) {
    for ((l2 = s2 < 0) ? (e2 = h, s2 = -s2, a2 = p2.length) : (e2 = p2, r2 = c2, a2 = h.length), s2 > (n2 = Math.max(Math.ceil(o2 / 7), a2) + 2) && (s2 = n2, e2.length = 1), e2.reverse(), n2 = s2; n2--; )
      e2.push(0);
    e2.reverse();
  } else {
    for ((l2 = (n2 = h.length) < (a2 = p2.length)) && (a2 = n2), n2 = 0; n2 < a2; n2++)
      if (h[n2] != p2[n2]) {
        l2 = h[n2] < p2[n2];
        break;
      }
    s2 = 0;
  }
  for (l2 && (e2 = h, h = p2, p2 = e2, t3.s = -t3.s), a2 = h.length, n2 = p2.length - a2; n2 > 0; --n2)
    h[a2++] = 0;
  for (n2 = p2.length; n2 > s2; ) {
    if (h[--n2] < p2[n2]) {
      for (i2 = n2; i2 && h[--i2] === 0; )
        h[i2] = Vn - 1;
      --h[i2], h[n2] += Vn;
    }
    h[n2] -= p2[n2];
  }
  for (; h[--a2] === 0; )
    h.pop();
  for (; h[0] === 0; h.shift())
    --r2;
  return h[0] ? (t3.d = h, t3.e = ei(h, r2), Ln ? Kn(t3, o2, u2) : t3) : new d(u2 === 3 ? -0 : 0);
}, Wn.modulo = Wn.mod = function(t3) {
  var e2, r2 = this, n2 = r2.constructor;
  return t3 = new n2(t3), !r2.d || !t3.s || t3.d && !t3.d[0] ? new n2(NaN) : !t3.d || r2.d && !r2.d[0] ? Kn(new n2(r2), n2.precision, n2.rounding) : (Ln = false, n2.modulo == 9 ? (e2 = Qn(r2, t3.abs(), 0, 3, 1)).s *= t3.s : e2 = Qn(r2, t3, 0, n2.modulo, 1), e2 = e2.times(t3), Ln = true, r2.minus(e2));
}, Wn.naturalExponential = Wn.exp = function() {
  return hi(this);
}, Wn.naturalLogarithm = Wn.ln = function() {
  return ci(this);
}, Wn.negated = Wn.neg = function() {
  var t3 = new this.constructor(this);
  return t3.s = -t3.s, Kn(t3);
}, Wn.plus = Wn.add = function(t3) {
  var e2, r2, n2, i2, s2, a2, o2, u2, h, c2, l2 = this, p2 = l2.constructor;
  if (t3 = new p2(t3), !l2.d || !t3.d)
    return l2.s && t3.s ? l2.d || (t3 = new p2(t3.d || l2.s === t3.s ? l2 : NaN)) : t3 = new p2(NaN), t3;
  if (l2.s != t3.s)
    return t3.s = -t3.s, l2.minus(t3);
  if (h = l2.d, c2 = t3.d, o2 = p2.precision, u2 = p2.rounding, !h[0] || !c2[0])
    return c2[0] || (t3 = new p2(l2)), Ln ? Kn(t3, o2, u2) : t3;
  if (s2 = Fn(l2.e / 7), n2 = Fn(t3.e / 7), h = h.slice(), i2 = s2 - n2) {
    for (i2 < 0 ? (r2 = h, i2 = -i2, a2 = c2.length) : (r2 = c2, n2 = s2, a2 = h.length), i2 > (a2 = (s2 = Math.ceil(o2 / 7)) > a2 ? s2 + 1 : a2 + 1) && (i2 = a2, r2.length = 1), r2.reverse(); i2--; )
      r2.push(0);
    r2.reverse();
  }
  for ((a2 = h.length) - (i2 = c2.length) < 0 && (i2 = a2, r2 = c2, c2 = h, h = r2), e2 = 0; i2; )
    e2 = (h[--i2] = h[i2] + c2[i2] + e2) / Vn | 0, h[i2] %= Vn;
  for (e2 && (h.unshift(e2), ++n2), a2 = h.length; h[--a2] == 0; )
    h.pop();
  return t3.d = h, t3.e = ei(h, n2), Ln ? Kn(t3, o2, u2) : t3;
}, Wn.precision = Wn.sd = function(t3) {
  var e2, r2 = this;
  if (t3 !== void 0 && t3 !== !!t3 && t3 !== 1 && t3 !== 0)
    throw Error(Bn + t3);
  return r2.d ? (e2 = ii(r2.d), t3 && r2.e + 1 > e2 && (e2 = r2.e + 1)) : e2 = NaN, e2;
}, Wn.round = function() {
  var t3 = this, e2 = t3.constructor;
  return Kn(new e2(t3), t3.e + 1, e2.rounding);
}, Wn.sine = Wn.sin = function() {
  var t3, e2, r2 = this, n2 = r2.constructor;
  return r2.isFinite() ? r2.isZero() ? new n2(r2) : (t3 = n2.precision, e2 = n2.rounding, n2.precision = t3 + Math.max(r2.e, r2.sd()) + 7, n2.rounding = 1, r2 = function(t4, e3) {
    var r3, n3 = e3.d.length;
    if (n3 < 3)
      return fi(t4, 2, e3, e3);
    r3 = (r3 = 1.4 * Math.sqrt(n3)) > 16 ? 16 : 0 | r3, e3 = e3.times(1 / di(5, r3)), e3 = fi(t4, 2, e3, e3);
    for (var i2, s2 = new t4(5), a2 = new t4(16), o2 = new t4(20); r3--; )
      i2 = e3.times(e3), e3 = e3.times(s2.plus(i2.times(a2.times(i2).minus(o2))));
    return e3;
  }(n2, mi(n2, r2)), n2.precision = t3, n2.rounding = e2, Kn(zn > 2 ? r2.neg() : r2, t3, e2, true)) : new n2(NaN);
}, Wn.squareRoot = Wn.sqrt = function() {
  var t3, e2, r2, n2, i2, s2, a2 = this, o2 = a2.d, u2 = a2.e, h = a2.s, c2 = a2.constructor;
  if (h !== 1 || !o2 || !o2[0])
    return new c2(!h || h < 0 && (!o2 || o2[0]) ? NaN : o2 ? a2 : 1 / 0);
  for (Ln = false, (h = Math.sqrt(+a2)) == 0 || h == 1 / 0 ? (((e2 = Yn(o2)).length + u2) % 2 == 0 && (e2 += "0"), h = Math.sqrt(e2), u2 = Fn((u2 + 1) / 2) - (u2 < 0 || u2 % 2), n2 = new c2(e2 = h == 1 / 0 ? "5e" + u2 : (e2 = h.toExponential()).slice(0, e2.indexOf("e") + 1) + u2)) : n2 = new c2(h.toString()), r2 = (u2 = c2.precision) + 3; ; )
    if (n2 = (s2 = n2).plus(Qn(a2, s2, r2 + 2, 1)).times(0.5), Yn(s2.d).slice(0, r2) === (e2 = Yn(n2.d)).slice(0, r2)) {
      if ((e2 = e2.slice(r2 - 3, r2 + 1)) != "9999" && (i2 || e2 != "4999")) {
        +e2 && (+e2.slice(1) || e2.charAt(0) != "5") || (Kn(n2, u2 + 1, 1), t3 = !n2.times(n2).eq(a2));
        break;
      }
      if (!i2 && (Kn(s2, u2 + 1, 0), s2.times(s2).eq(a2))) {
        n2 = s2;
        break;
      }
      r2 += 4, i2 = 1;
    }
  return Ln = true, Kn(n2, u2, c2.rounding, t3);
}, Wn.tangent = Wn.tan = function() {
  var t3, e2, r2 = this, n2 = r2.constructor;
  return r2.isFinite() ? r2.isZero() ? new n2(r2) : (t3 = n2.precision, e2 = n2.rounding, n2.precision = t3 + 10, n2.rounding = 1, (r2 = r2.sin()).s = 1, r2 = Qn(r2, new n2(1).minus(r2.times(r2)).sqrt(), t3 + 10, 0), n2.precision = t3, n2.rounding = e2, Kn(zn == 2 || zn == 4 ? r2.neg() : r2, t3, e2, true)) : new n2(NaN);
}, Wn.times = Wn.mul = function(t3) {
  var e2, r2, n2, i2, s2, a2, o2, u2, h, c2 = this, l2 = c2.constructor, p2 = c2.d, f2 = (t3 = new l2(t3)).d;
  if (t3.s *= c2.s, !(p2 && p2[0] && f2 && f2[0]))
    return new l2(!t3.s || p2 && !p2[0] && !f2 || f2 && !f2[0] && !p2 ? NaN : p2 && f2 ? 0 * t3.s : t3.s / 0);
  for (r2 = Fn(c2.e / 7) + Fn(t3.e / 7), (u2 = p2.length) < (h = f2.length) && (s2 = p2, p2 = f2, f2 = s2, a2 = u2, u2 = h, h = a2), s2 = [], n2 = a2 = u2 + h; n2--; )
    s2.push(0);
  for (n2 = h; --n2 >= 0; ) {
    for (e2 = 0, i2 = u2 + n2; i2 > n2; )
      o2 = s2[i2] + f2[n2] * p2[i2 - n2 - 1] + e2, s2[i2--] = o2 % Vn | 0, e2 = o2 / Vn | 0;
    s2[i2] = (s2[i2] + e2) % Vn | 0;
  }
  for (; !s2[--a2]; )
    s2.pop();
  return e2 ? ++r2 : s2.shift(), t3.d = s2, t3.e = ei(s2, r2), Ln ? Kn(t3, l2.precision, l2.rounding) : t3;
}, Wn.toBinary = function(t3, e2) {
  return yi(this, 2, t3, e2);
}, Wn.toDecimalPlaces = Wn.toDP = function(t3, e2) {
  var r2 = this, n2 = r2.constructor;
  return r2 = new n2(r2), t3 === void 0 ? r2 : (Zn(t3, 0, 1e9), e2 === void 0 ? e2 = n2.rounding : Zn(e2, 0, 8), Kn(r2, t3 + r2.e + 1, e2));
}, Wn.toExponential = function(t3, e2) {
  var r2, n2 = this, i2 = n2.constructor;
  return t3 === void 0 ? r2 = ti(n2, true) : (Zn(t3, 0, 1e9), e2 === void 0 ? e2 = i2.rounding : Zn(e2, 0, 8), r2 = ti(n2 = Kn(new i2(n2), t3 + 1, e2), true, t3 + 1)), n2.isNeg() && !n2.isZero() ? "-" + r2 : r2;
}, Wn.toFixed = function(t3, e2) {
  var r2, n2, i2 = this, s2 = i2.constructor;
  return t3 === void 0 ? r2 = ti(i2) : (Zn(t3, 0, 1e9), e2 === void 0 ? e2 = s2.rounding : Zn(e2, 0, 8), r2 = ti(n2 = Kn(new s2(i2), t3 + i2.e + 1, e2), false, t3 + n2.e + 1)), i2.isNeg() && !i2.isZero() ? "-" + r2 : r2;
}, Wn.toFraction = function(t3) {
  var e2, r2, n2, i2, s2, a2, o2, u2, h, c2, l2, p2, f2 = this, d = f2.d, m2 = f2.constructor;
  if (!d)
    return new m2(f2);
  if (h = r2 = new m2(1), n2 = u2 = new m2(0), a2 = (s2 = (e2 = new m2(n2)).e = ii(d) - f2.e - 1) % 7, e2.d[0] = Pn(10, a2 < 0 ? 7 + a2 : a2), t3 == null)
    t3 = s2 > 0 ? e2 : h;
  else {
    if (!(o2 = new m2(t3)).isInt() || o2.lt(h))
      throw Error(Bn + o2);
    t3 = o2.gt(e2) ? s2 > 0 ? e2 : h : o2;
  }
  for (Ln = false, o2 = new m2(Yn(d)), c2 = m2.precision, m2.precision = s2 = 7 * d.length * 2; l2 = Qn(o2, e2, 0, 1, 1), (i2 = r2.plus(l2.times(n2))).cmp(t3) != 1; )
    r2 = n2, n2 = i2, i2 = h, h = u2.plus(l2.times(i2)), u2 = i2, i2 = e2, e2 = o2.minus(l2.times(i2)), o2 = i2;
  return i2 = Qn(t3.minus(r2), n2, 0, 1, 1), u2 = u2.plus(i2.times(h)), r2 = r2.plus(i2.times(n2)), u2.s = h.s = f2.s, p2 = Qn(h, n2, s2, 1).minus(f2).abs().cmp(Qn(u2, r2, s2, 1).minus(f2).abs()) < 1 ? [h, n2] : [u2, r2], m2.precision = c2, Ln = true, p2;
}, Wn.toHexadecimal = Wn.toHex = function(t3, e2) {
  return yi(this, 16, t3, e2);
}, Wn.toNearest = function(t3, e2) {
  var r2 = this, n2 = r2.constructor;
  if (r2 = new n2(r2), t3 == null) {
    if (!r2.d)
      return r2;
    t3 = new n2(1), e2 = n2.rounding;
  } else {
    if (t3 = new n2(t3), e2 === void 0 ? e2 = n2.rounding : Zn(e2, 0, 8), !r2.d)
      return t3.s ? r2 : t3;
    if (!t3.d)
      return t3.s && (t3.s = r2.s), t3;
  }
  return t3.d[0] ? (Ln = false, r2 = Qn(r2, t3, 0, e2, 1).times(t3), Ln = true, Kn(r2)) : (t3.s = r2.s, r2 = t3), r2;
}, Wn.toNumber = function() {
  return +this;
}, Wn.toOctal = function(t3, e2) {
  return yi(this, 8, t3, e2);
}, Wn.toPower = Wn.pow = function(t3) {
  var e2, r2, n2, i2, s2, a2, o2 = this, u2 = o2.constructor, h = +(t3 = new u2(t3));
  if (!(o2.d && t3.d && o2.d[0] && t3.d[0]))
    return new u2(Pn(+o2, h));
  if ((o2 = new u2(o2)).eq(1))
    return o2;
  if (n2 = u2.precision, s2 = u2.rounding, t3.eq(1))
    return Kn(o2, n2, s2);
  if ((e2 = Fn(t3.e / 7)) >= t3.d.length - 1 && (r2 = h < 0 ? -h : h) <= 9007199254740991)
    return i2 = ai(u2, o2, r2, n2), t3.s < 0 ? new u2(1).div(i2) : Kn(i2, n2, s2);
  if ((a2 = o2.s) < 0) {
    if (e2 < t3.d.length - 1)
      return new u2(NaN);
    if ((1 & t3.d[e2]) == 0 && (a2 = 1), o2.e == 0 && o2.d[0] == 1 && o2.d.length == 1)
      return o2.s = a2, o2;
  }
  return (e2 = (r2 = Pn(+o2, h)) != 0 && isFinite(r2) ? new u2(r2 + "").e : Fn(h * (Math.log("0." + Yn(o2.d)) / Math.LN10 + o2.e + 1))) > u2.maxE + 1 || e2 < u2.minE - 1 ? new u2(e2 > 0 ? a2 / 0 : 0) : (Ln = false, u2.rounding = o2.s = 1, r2 = Math.min(12, (e2 + "").length), (i2 = hi(t3.times(ci(o2, n2 + r2)), n2)).d && Xn((i2 = Kn(i2, n2 + 5, 1)).d, n2, s2) && (e2 = n2 + 10, +Yn((i2 = Kn(hi(t3.times(ci(o2, e2 + r2)), e2), e2 + 5, 1)).d).slice(n2 + 1, n2 + 15) + 1 == 1e14 && (i2 = Kn(i2, n2 + 1, 0))), i2.s = a2, Ln = true, u2.rounding = s2, Kn(i2, n2, s2));
}, Wn.toPrecision = function(t3, e2) {
  var r2, n2 = this, i2 = n2.constructor;
  return t3 === void 0 ? r2 = ti(n2, n2.e <= i2.toExpNeg || n2.e >= i2.toExpPos) : (Zn(t3, 1, 1e9), e2 === void 0 ? e2 = i2.rounding : Zn(e2, 0, 8), r2 = ti(n2 = Kn(new i2(n2), t3, e2), t3 <= n2.e || n2.e <= i2.toExpNeg, t3)), n2.isNeg() && !n2.isZero() ? "-" + r2 : r2;
}, Wn.toSignificantDigits = Wn.toSD = function(t3, e2) {
  var r2 = this.constructor;
  return t3 === void 0 ? (t3 = r2.precision, e2 = r2.rounding) : (Zn(t3, 1, 1e9), e2 === void 0 ? e2 = r2.rounding : Zn(e2, 0, 8)), Kn(new r2(this), t3, e2);
}, Wn.toString = function() {
  var t3 = this, e2 = t3.constructor, r2 = ti(t3, t3.e <= e2.toExpNeg || t3.e >= e2.toExpPos);
  return t3.isNeg() && !t3.isZero() ? "-" + r2 : r2;
}, Wn.truncated = Wn.trunc = function() {
  return Kn(new this.constructor(this), this.e + 1, 1);
}, Wn.valueOf = Wn.toJSON = function() {
  var t3 = this, e2 = t3.constructor, r2 = ti(t3, t3.e <= e2.toExpNeg || t3.e >= e2.toExpPos);
  return t3.isNeg() ? "-" + r2 : r2;
};
var Qn = function() {
  function t3(t4, e3, r3) {
    var n2, i2 = 0, s2 = t4.length;
    for (t4 = t4.slice(); s2--; )
      n2 = t4[s2] * e3 + i2, t4[s2] = n2 % r3 | 0, i2 = n2 / r3 | 0;
    return i2 && t4.unshift(i2), t4;
  }
  function e2(t4, e3, r3, n2) {
    var i2, s2;
    if (r3 != n2)
      s2 = r3 > n2 ? 1 : -1;
    else
      for (i2 = s2 = 0; i2 < r3; i2++)
        if (t4[i2] != e3[i2]) {
          s2 = t4[i2] > e3[i2] ? 1 : -1;
          break;
        }
    return s2;
  }
  function r2(t4, e3, r3, n2) {
    for (var i2 = 0; r3--; )
      t4[r3] -= i2, i2 = t4[r3] < e3[r3] ? 1 : 0, t4[r3] = i2 * n2 + t4[r3] - e3[r3];
    for (; !t4[0] && t4.length > 1; )
      t4.shift();
  }
  return function(n2, i2, s2, a2, o2, u2) {
    var h, c2, l2, p2, f2, d, m2, y2, g2, v2, x2, w2, b2, _2, M2, N2, E2, S2, T2, O2, z2 = n2.constructor, C2 = n2.s == i2.s ? 1 : -1, A2 = n2.d, R2 = i2.d;
    if (!(A2 && A2[0] && R2 && R2[0]))
      return new z2(n2.s && i2.s && (A2 ? !R2 || A2[0] != R2[0] : R2) ? A2 && A2[0] == 0 || !R2 ? 0 * C2 : C2 / 0 : NaN);
    for (u2 ? (f2 = 1, c2 = n2.e - i2.e) : (u2 = Vn, f2 = 7, c2 = Fn(n2.e / f2) - Fn(i2.e / f2)), T2 = R2.length, E2 = A2.length, v2 = (g2 = new z2(C2)).d = [], l2 = 0; R2[l2] == (A2[l2] || 0); l2++)
      ;
    if (R2[l2] > (A2[l2] || 0) && c2--, s2 == null ? (_2 = s2 = z2.precision, a2 = z2.rounding) : _2 = o2 ? s2 + (n2.e - i2.e) + 1 : s2, _2 < 0)
      v2.push(1), d = true;
    else {
      if (_2 = _2 / f2 + 2 | 0, l2 = 0, T2 == 1) {
        for (p2 = 0, R2 = R2[0], _2++; (l2 < E2 || p2) && _2--; l2++)
          M2 = p2 * u2 + (A2[l2] || 0), v2[l2] = M2 / R2 | 0, p2 = M2 % R2 | 0;
        d = p2 || l2 < E2;
      } else {
        for ((p2 = u2 / (R2[0] + 1) | 0) > 1 && (R2 = t3(R2, p2, u2), A2 = t3(A2, p2, u2), T2 = R2.length, E2 = A2.length), N2 = T2, w2 = (x2 = A2.slice(0, T2)).length; w2 < T2; )
          x2[w2++] = 0;
        (O2 = R2.slice()).unshift(0), S2 = R2[0], R2[1] >= u2 / 2 && ++S2;
        do {
          p2 = 0, (h = e2(R2, x2, T2, w2)) < 0 ? (b2 = x2[0], T2 != w2 && (b2 = b2 * u2 + (x2[1] || 0)), (p2 = b2 / S2 | 0) > 1 ? (p2 >= u2 && (p2 = u2 - 1), (h = e2(m2 = t3(R2, p2, u2), x2, y2 = m2.length, w2 = x2.length)) == 1 && (p2--, r2(m2, T2 < y2 ? O2 : R2, y2, u2))) : (p2 == 0 && (h = p2 = 1), m2 = R2.slice()), (y2 = m2.length) < w2 && m2.unshift(0), r2(x2, m2, w2, u2), h == -1 && (h = e2(R2, x2, T2, w2 = x2.length)) < 1 && (p2++, r2(x2, T2 < w2 ? O2 : R2, w2, u2)), w2 = x2.length) : h === 0 && (p2++, x2 = [0]), v2[l2++] = p2, h && x2[0] ? x2[w2++] = A2[N2] || 0 : (x2 = [A2[N2]], w2 = 1);
        } while ((N2++ < E2 || x2[0] !== void 0) && _2--);
        d = x2[0] !== void 0;
      }
      v2[0] || v2.shift();
    }
    if (f2 == 1)
      g2.e = c2, On = d;
    else {
      for (l2 = 1, p2 = v2[0]; p2 >= 10; p2 /= 10)
        l2++;
      g2.e = l2 + c2 * f2 - 1, Kn(g2, o2 ? s2 + g2.e + 1 : s2, a2, d);
    }
    return g2;
  };
}();
function Kn(t3, e2, r2, n2) {
  var i2, s2, a2, o2, u2, h, c2, l2, p2, f2 = t3.constructor;
  t:
    if (e2 != null) {
      if (!(l2 = t3.d))
        return t3;
      for (i2 = 1, o2 = l2[0]; o2 >= 10; o2 /= 10)
        i2++;
      if ((s2 = e2 - i2) < 0)
        s2 += 7, a2 = e2, u2 = (c2 = l2[p2 = 0]) / Pn(10, i2 - a2 - 1) % 10 | 0;
      else if ((p2 = Math.ceil((s2 + 1) / 7)) >= (o2 = l2.length)) {
        if (!n2)
          break t;
        for (; o2++ <= p2; )
          l2.push(0);
        c2 = u2 = 0, i2 = 1, a2 = (s2 %= 7) - 7 + 1;
      } else {
        for (c2 = o2 = l2[p2], i2 = 1; o2 >= 10; o2 /= 10)
          i2++;
        u2 = (a2 = (s2 %= 7) - 7 + i2) < 0 ? 0 : c2 / Pn(10, i2 - a2 - 1) % 10 | 0;
      }
      if (n2 = n2 || e2 < 0 || l2[p2 + 1] !== void 0 || (a2 < 0 ? c2 : c2 % Pn(10, i2 - a2 - 1)), h = r2 < 4 ? (u2 || n2) && (r2 == 0 || r2 == (t3.s < 0 ? 3 : 2)) : u2 > 5 || u2 == 5 && (r2 == 4 || n2 || r2 == 6 && (s2 > 0 ? a2 > 0 ? c2 / Pn(10, i2 - a2) : 0 : l2[p2 - 1]) % 10 & 1 || r2 == (t3.s < 0 ? 8 : 7)), e2 < 1 || !l2[0])
        return l2.length = 0, h ? (e2 -= t3.e + 1, l2[0] = Pn(10, (7 - e2 % 7) % 7), t3.e = -e2 || 0) : l2[0] = t3.e = 0, t3;
      if (s2 == 0 ? (l2.length = p2, o2 = 1, p2--) : (l2.length = p2 + 1, o2 = Pn(10, 7 - s2), l2[p2] = a2 > 0 ? (c2 / Pn(10, i2 - a2) % Pn(10, a2) | 0) * o2 : 0), h)
        for (; ; ) {
          if (p2 == 0) {
            for (s2 = 1, a2 = l2[0]; a2 >= 10; a2 /= 10)
              s2++;
            for (a2 = l2[0] += o2, o2 = 1; a2 >= 10; a2 /= 10)
              o2++;
            s2 != o2 && (t3.e++, l2[0] == Vn && (l2[0] = 1));
            break;
          }
          if (l2[p2] += o2, l2[p2] != Vn)
            break;
          l2[p2--] = 0, o2 = 1;
        }
      for (s2 = l2.length; l2[--s2] === 0; )
        l2.pop();
    }
  return Ln && (t3.e > f2.maxE ? (t3.d = null, t3.e = NaN) : t3.e < f2.minE && (t3.e = 0, t3.d = [0])), t3;
}
function ti(t3, e2, r2) {
  if (!t3.isFinite())
    return li(t3);
  var n2, i2 = t3.e, s2 = Yn(t3.d), a2 = s2.length;
  return e2 ? (r2 && (n2 = r2 - a2) > 0 ? s2 = s2.charAt(0) + "." + s2.slice(1) + si(n2) : a2 > 1 && (s2 = s2.charAt(0) + "." + s2.slice(1)), s2 = s2 + (t3.e < 0 ? "e" : "e+") + t3.e) : i2 < 0 ? (s2 = "0." + si(-i2 - 1) + s2, r2 && (n2 = r2 - a2) > 0 && (s2 += si(n2))) : i2 >= a2 ? (s2 += si(i2 + 1 - a2), r2 && (n2 = r2 - i2 - 1) > 0 && (s2 = s2 + "." + si(n2))) : ((n2 = i2 + 1) < a2 && (s2 = s2.slice(0, n2) + "." + s2.slice(n2)), r2 && (n2 = r2 - a2) > 0 && (i2 + 1 === a2 && (s2 += "."), s2 += si(n2))), s2;
}
function ei(t3, e2) {
  var r2 = t3[0];
  for (e2 *= 7; r2 >= 10; r2 /= 10)
    e2++;
  return e2;
}
function ri(t3, e2, r2) {
  if (e2 > $n)
    throw Ln = true, r2 && (t3.precision = r2), Error("[DecimalError] Precision limit exceeded");
  return Kn(new t3(Dn), e2, 1, true);
}
function ni(t3, e2, r2) {
  if (e2 > Gn)
    throw Error("[DecimalError] Precision limit exceeded");
  return Kn(new t3(kn), e2, r2, true);
}
function ii(t3) {
  var e2 = t3.length - 1, r2 = 7 * e2 + 1;
  if (e2 = t3[e2]) {
    for (; e2 % 10 == 0; e2 /= 10)
      r2--;
    for (e2 = t3[0]; e2 >= 10; e2 /= 10)
      r2++;
  }
  return r2;
}
function si(t3) {
  for (var e2 = ""; t3--; )
    e2 += "0";
  return e2;
}
function ai(t3, e2, r2, n2) {
  var i2, s2 = new t3(1), a2 = Math.ceil(n2 / 7 + 4);
  for (Ln = false; ; ) {
    if (r2 % 2 && gi((s2 = s2.times(e2)).d, a2) && (i2 = true), (r2 = Fn(r2 / 2)) === 0) {
      r2 = s2.d.length - 1, i2 && s2.d[r2] === 0 && ++s2.d[r2];
      break;
    }
    gi((e2 = e2.times(e2)).d, a2);
  }
  return Ln = true, s2;
}
function oi(t3) {
  return 1 & t3.d[t3.d.length - 1];
}
function ui(t3, e2, r2) {
  for (var n2, i2 = new t3(e2[0]), s2 = 0; ++s2 < e2.length; ) {
    if (!(n2 = new t3(e2[s2])).s) {
      i2 = n2;
      break;
    }
    i2[r2](n2) && (i2 = n2);
  }
  return i2;
}
function hi(t3, e2) {
  var r2, n2, i2, s2, a2, o2, u2, h = 0, c2 = 0, l2 = 0, p2 = t3.constructor, f2 = p2.rounding, d = p2.precision;
  if (!t3.d || !t3.d[0] || t3.e > 17)
    return new p2(t3.d ? t3.d[0] ? t3.s < 0 ? 0 : 1 / 0 : 1 : t3.s ? t3.s < 0 ? 0 : t3 : NaN);
  for (e2 == null ? (Ln = false, u2 = d) : u2 = e2, o2 = new p2(0.03125); t3.e > -2; )
    t3 = t3.times(o2), l2 += 5;
  for (u2 += n2 = Math.log(Pn(2, l2)) / Math.LN10 * 2 + 5 | 0, r2 = s2 = a2 = new p2(1), p2.precision = u2; ; ) {
    if (s2 = Kn(s2.times(t3), u2, 1), r2 = r2.times(++c2), Yn((o2 = a2.plus(Qn(s2, r2, u2, 1))).d).slice(0, u2) === Yn(a2.d).slice(0, u2)) {
      for (i2 = l2; i2--; )
        a2 = Kn(a2.times(a2), u2, 1);
      if (e2 != null)
        return p2.precision = d, a2;
      if (!(h < 3 && Xn(a2.d, u2 - n2, f2, h)))
        return Kn(a2, p2.precision = d, f2, Ln = true);
      p2.precision = u2 += 10, r2 = s2 = o2 = new p2(1), c2 = 0, h++;
    }
    a2 = o2;
  }
}
function ci(t3, e2) {
  var r2, n2, i2, s2, a2, o2, u2, h, c2, l2, p2, f2 = 1, d = t3, m2 = d.d, y2 = d.constructor, g2 = y2.rounding, v2 = y2.precision;
  if (d.s < 0 || !m2 || !m2[0] || !d.e && m2[0] == 1 && m2.length == 1)
    return new y2(m2 && !m2[0] ? -1 / 0 : d.s != 1 ? NaN : m2 ? 0 : d);
  if (e2 == null ? (Ln = false, c2 = v2) : c2 = e2, y2.precision = c2 += 10, n2 = (r2 = Yn(m2)).charAt(0), !(Math.abs(s2 = d.e) < 15e14))
    return h = ri(y2, c2 + 2, v2).times(s2 + ""), d = ci(new y2(n2 + "." + r2.slice(1)), c2 - 10).plus(h), y2.precision = v2, e2 == null ? Kn(d, v2, g2, Ln = true) : d;
  for (; n2 < 7 && n2 != 1 || n2 == 1 && r2.charAt(1) > 3; )
    n2 = (r2 = Yn((d = d.times(t3)).d)).charAt(0), f2++;
  for (s2 = d.e, n2 > 1 ? (d = new y2("0." + r2), s2++) : d = new y2(n2 + "." + r2.slice(1)), l2 = d, u2 = a2 = d = Qn(d.minus(1), d.plus(1), c2, 1), p2 = Kn(d.times(d), c2, 1), i2 = 3; ; ) {
    if (a2 = Kn(a2.times(p2), c2, 1), Yn((h = u2.plus(Qn(a2, new y2(i2), c2, 1))).d).slice(0, c2) === Yn(u2.d).slice(0, c2)) {
      if (u2 = u2.times(2), s2 !== 0 && (u2 = u2.plus(ri(y2, c2 + 2, v2).times(s2 + ""))), u2 = Qn(u2, new y2(f2), c2, 1), e2 != null)
        return y2.precision = v2, u2;
      if (!Xn(u2.d, c2 - 10, g2, o2))
        return Kn(u2, y2.precision = v2, g2, Ln = true);
      y2.precision = c2 += 10, h = a2 = d = Qn(l2.minus(1), l2.plus(1), c2, 1), p2 = Kn(d.times(d), c2, 1), i2 = o2 = 1;
    }
    u2 = h, i2 += 2;
  }
}
function li(t3) {
  return String(t3.s * t3.s / 0);
}
function pi(t3, e2) {
  var r2, n2, i2;
  for ((r2 = e2.indexOf(".")) > -1 && (e2 = e2.replace(".", "")), (n2 = e2.search(/e/i)) > 0 ? (r2 < 0 && (r2 = n2), r2 += +e2.slice(n2 + 1), e2 = e2.substring(0, n2)) : r2 < 0 && (r2 = e2.length), n2 = 0; e2.charCodeAt(n2) === 48; n2++)
    ;
  for (i2 = e2.length; e2.charCodeAt(i2 - 1) === 48; --i2)
    ;
  if (e2 = e2.slice(n2, i2)) {
    if (i2 -= n2, t3.e = r2 = r2 - n2 - 1, t3.d = [], n2 = (r2 + 1) % 7, r2 < 0 && (n2 += 7), n2 < i2) {
      for (n2 && t3.d.push(+e2.slice(0, n2)), i2 -= 7; n2 < i2; )
        t3.d.push(+e2.slice(n2, n2 += 7));
      n2 = 7 - (e2 = e2.slice(n2)).length;
    } else
      n2 -= i2;
    for (; n2--; )
      e2 += "0";
    t3.d.push(+e2), Ln && (t3.e > t3.constructor.maxE ? (t3.d = null, t3.e = NaN) : t3.e < t3.constructor.minE && (t3.e = 0, t3.d = [0]));
  } else
    t3.e = 0, t3.d = [0];
  return t3;
}
function fi(t3, e2, r2, n2, i2) {
  var s2, a2, o2, u2, h = t3.precision, c2 = Math.ceil(h / 7);
  for (Ln = false, u2 = r2.times(r2), o2 = new t3(n2); ; ) {
    if (a2 = Qn(o2.times(u2), new t3(e2++ * e2++), h, 1), o2 = i2 ? n2.plus(a2) : n2.minus(a2), n2 = Qn(a2.times(u2), new t3(e2++ * e2++), h, 1), (a2 = o2.plus(n2)).d[c2] !== void 0) {
      for (s2 = c2; a2.d[s2] === o2.d[s2] && s2--; )
        ;
      if (s2 == -1)
        break;
    }
    s2 = o2, o2 = n2, n2 = a2, a2 = s2;
  }
  return Ln = true, a2.d.length = c2 + 1, a2;
}
function di(t3, e2) {
  for (var r2 = t3; --e2; )
    r2 *= t3;
  return r2;
}
function mi(t3, e2) {
  var r2, n2 = e2.s < 0, i2 = ni(t3, t3.precision, 1), s2 = i2.times(0.5);
  if ((e2 = e2.abs()).lte(s2))
    return zn = n2 ? 4 : 1, e2;
  if ((r2 = e2.divToInt(i2)).isZero())
    zn = n2 ? 3 : 2;
  else {
    if ((e2 = e2.minus(r2.times(i2))).lte(s2))
      return zn = oi(r2) ? n2 ? 2 : 3 : n2 ? 4 : 1, e2;
    zn = oi(r2) ? n2 ? 1 : 4 : n2 ? 3 : 2;
  }
  return e2.minus(i2).abs();
}
function yi(t3, e2, r2, n2) {
  var i2, s2, a2, o2, u2, h, c2, l2, p2, f2 = t3.constructor, d = r2 !== void 0;
  if (d ? (Zn(r2, 1, 1e9), n2 === void 0 ? n2 = f2.rounding : Zn(n2, 0, 8)) : (r2 = f2.precision, n2 = f2.rounding), t3.isFinite()) {
    for (d ? (i2 = 2, e2 == 16 ? r2 = 4 * r2 - 3 : e2 == 8 && (r2 = 3 * r2 - 2)) : i2 = e2, (a2 = (c2 = ti(t3)).indexOf(".")) >= 0 && (c2 = c2.replace(".", ""), (p2 = new f2(1)).e = c2.length - a2, p2.d = Jn(ti(p2), 10, i2), p2.e = p2.d.length), s2 = u2 = (l2 = Jn(c2, 10, i2)).length; l2[--u2] == 0; )
      l2.pop();
    if (l2[0]) {
      if (a2 < 0 ? s2-- : ((t3 = new f2(t3)).d = l2, t3.e = s2, l2 = (t3 = Qn(t3, p2, r2, n2, 0, i2)).d, s2 = t3.e, h = On), a2 = l2[r2], o2 = i2 / 2, h = h || l2[r2 + 1] !== void 0, h = n2 < 4 ? (a2 !== void 0 || h) && (n2 === 0 || n2 === (t3.s < 0 ? 3 : 2)) : a2 > o2 || a2 === o2 && (n2 === 4 || h || n2 === 6 && 1 & l2[r2 - 1] || n2 === (t3.s < 0 ? 8 : 7)), l2.length = r2, h)
        for (; ++l2[--r2] > i2 - 1; )
          l2[r2] = 0, r2 || (++s2, l2.unshift(1));
      for (u2 = l2.length; !l2[u2 - 1]; --u2)
        ;
      for (a2 = 0, c2 = ""; a2 < u2; a2++)
        c2 += Rn.charAt(l2[a2]);
      if (d) {
        if (u2 > 1)
          if (e2 == 16 || e2 == 8) {
            for (a2 = e2 == 16 ? 4 : 3, --u2; u2 % a2; u2++)
              c2 += "0";
            for (u2 = (l2 = Jn(c2, i2, e2)).length; !l2[u2 - 1]; --u2)
              ;
            for (a2 = 1, c2 = "1."; a2 < u2; a2++)
              c2 += Rn.charAt(l2[a2]);
          } else
            c2 = c2.charAt(0) + "." + c2.slice(1);
        c2 = c2 + (s2 < 0 ? "p" : "p+") + s2;
      } else if (s2 < 0) {
        for (; ++s2; )
          c2 = "0" + c2;
        c2 = "0." + c2;
      } else if (++s2 > u2)
        for (s2 -= u2; s2--; )
          c2 += "0";
      else
        s2 < u2 && (c2 = c2.slice(0, s2) + "." + c2.slice(s2));
    } else
      c2 = d ? "0p+0" : "0";
    c2 = (e2 == 16 ? "0x" : e2 == 2 ? "0b" : e2 == 8 ? "0o" : "") + c2;
  } else
    c2 = li(t3);
  return t3.s < 0 ? "-" + c2 : c2;
}
function gi(t3, e2) {
  if (t3.length > e2)
    return t3.length = e2, true;
}
function vi(t3) {
  return new this(t3).abs();
}
function xi(t3) {
  return new this(t3).acos();
}
function wi(t3) {
  return new this(t3).acosh();
}
function bi(t3, e2) {
  return new this(t3).plus(e2);
}
function _i(t3) {
  return new this(t3).asin();
}
function Mi(t3) {
  return new this(t3).asinh();
}
function Ni(t3) {
  return new this(t3).atan();
}
function Ei(t3) {
  return new this(t3).atanh();
}
function Si(t3, e2) {
  t3 = new this(t3), e2 = new this(e2);
  var r2, n2 = this.precision, i2 = this.rounding, s2 = n2 + 4;
  return t3.s && e2.s ? t3.d || e2.d ? !e2.d || t3.isZero() ? (r2 = e2.s < 0 ? ni(this, n2, i2) : new this(0)).s = t3.s : !t3.d || e2.isZero() ? (r2 = ni(this, s2, 1).times(0.5)).s = t3.s : e2.s < 0 ? (this.precision = s2, this.rounding = 1, r2 = this.atan(Qn(t3, e2, s2, 1)), e2 = ni(this, s2, 1), this.precision = n2, this.rounding = i2, r2 = t3.s < 0 ? r2.minus(e2) : r2.plus(e2)) : r2 = this.atan(Qn(t3, e2, s2, 1)) : (r2 = ni(this, s2, 1).times(e2.s > 0 ? 0.25 : 0.75)).s = t3.s : r2 = new this(NaN), r2;
}
function Ti(t3) {
  return new this(t3).cbrt();
}
function Oi(t3) {
  return Kn(t3 = new this(t3), t3.e + 1, 2);
}
function zi(t3) {
  if (!t3 || typeof t3 != "object")
    throw Error("[DecimalError] Object expected");
  var e2, r2, n2, i2 = t3.defaults === true, s2 = ["precision", 1, 1e9, "rounding", 0, 8, "toExpNeg", -An, 0, "toExpPos", 0, An, "maxE", 0, An, "minE", -An, 0, "modulo", 0, 9];
  for (e2 = 0; e2 < s2.length; e2 += 3)
    if (r2 = s2[e2], i2 && (this[r2] = In[r2]), (n2 = t3[r2]) !== void 0) {
      if (!(Fn(n2) === n2 && n2 >= s2[e2 + 1] && n2 <= s2[e2 + 2]))
        throw Error(Bn + r2 + ": " + n2);
      this[r2] = n2;
    }
  if (r2 = "crypto", i2 && (this[r2] = In[r2]), (n2 = t3[r2]) !== void 0) {
    if (n2 !== true && n2 !== false && n2 !== 0 && n2 !== 1)
      throw Error(Bn + r2 + ": " + n2);
    if (n2) {
      if (typeof crypto == "undefined" || !crypto || !crypto.getRandomValues && !crypto.randomBytes)
        throw Error("[DecimalError] crypto unavailable");
      this[r2] = true;
    } else
      this[r2] = false;
  }
  return this;
}
function Ci(t3) {
  return new this(t3).cos();
}
function Ai(t3) {
  return new this(t3).cosh();
}
function Ri(t3, e2) {
  return new this(t3).div(e2);
}
function Di(t3) {
  return new this(t3).exp();
}
function ki(t3) {
  return Kn(t3 = new this(t3), t3.e + 1, 3);
}
function Ii() {
  var t3, e2, r2 = new this(0);
  for (Ln = false, t3 = 0; t3 < arguments.length; )
    if ((e2 = new this(arguments[t3++])).d)
      r2.d && (r2 = r2.plus(e2.times(e2)));
    else {
      if (e2.s)
        return Ln = true, new this(1 / 0);
      r2 = e2;
    }
  return Ln = true, r2.sqrt();
}
function Li(t3) {
  return t3 instanceof rs || t3 && t3.name === "[object Decimal]" || false;
}
function Bi(t3) {
  return new this(t3).ln();
}
function Fi(t3, e2) {
  return new this(t3).log(e2);
}
function Pi(t3) {
  return new this(t3).log(2);
}
function Ui(t3) {
  return new this(t3).log(10);
}
function ji() {
  return ui(this, arguments, "lt");
}
function qi() {
  return ui(this, arguments, "gt");
}
function Hi(t3, e2) {
  return new this(t3).mod(e2);
}
function Vi(t3, e2) {
  return new this(t3).mul(e2);
}
function $i(t3, e2) {
  return new this(t3).pow(e2);
}
function Gi(t3) {
  var e2, r2, n2, i2, s2 = 0, a2 = new this(1), o2 = [];
  if (t3 === void 0 ? t3 = this.precision : Zn(t3, 1, 1e9), n2 = Math.ceil(t3 / 7), this.crypto)
    if (crypto.getRandomValues)
      for (e2 = crypto.getRandomValues(new Uint32Array(n2)); s2 < n2; )
        (i2 = e2[s2]) >= 429e7 ? e2[s2] = crypto.getRandomValues(new Uint32Array(1))[0] : o2[s2++] = i2 % 1e7;
    else {
      if (!crypto.randomBytes)
        throw Error("[DecimalError] crypto unavailable");
      for (e2 = crypto.randomBytes(n2 *= 4); s2 < n2; )
        (i2 = e2[s2] + (e2[s2 + 1] << 8) + (e2[s2 + 2] << 16) + ((127 & e2[s2 + 3]) << 24)) >= 214e7 ? crypto.randomBytes(4).copy(e2, s2) : (o2.push(i2 % 1e7), s2 += 4);
      s2 = n2 / 4;
    }
  else
    for (; s2 < n2; )
      o2[s2++] = 1e7 * Math.random() | 0;
  for (t3 %= 7, (n2 = o2[--s2]) && t3 && (i2 = Pn(10, 7 - t3), o2[s2] = (n2 / i2 | 0) * i2); o2[s2] === 0; s2--)
    o2.pop();
  if (s2 < 0)
    r2 = 0, o2 = [0];
  else {
    for (r2 = -1; o2[0] === 0; r2 -= 7)
      o2.shift();
    for (n2 = 1, i2 = o2[0]; i2 >= 10; i2 /= 10)
      n2++;
    n2 < 7 && (r2 -= 7 - n2);
  }
  return a2.e = r2, a2.d = o2, a2;
}
function Wi(t3) {
  return Kn(t3 = new this(t3), t3.e + 1, this.rounding);
}
function Yi(t3) {
  return (t3 = new this(t3)).d ? t3.d[0] ? t3.s : 0 * t3.s : t3.s || NaN;
}
function Zi(t3) {
  return new this(t3).sin();
}
function Xi(t3) {
  return new this(t3).sinh();
}
function Ji(t3) {
  return new this(t3).sqrt();
}
function Qi(t3, e2) {
  return new this(t3).sub(e2);
}
function Ki(t3) {
  return new this(t3).tan();
}
function ts(t3) {
  return new this(t3).tanh();
}
function es(t3) {
  return Kn(t3 = new this(t3), t3.e + 1, 1);
}
Wn[Symbol.for("nodejs.util.inspect.custom")] = Wn.toString, Wn[Symbol.toStringTag] = "Decimal";
var rs = function t2(e2) {
  var r2, n2, i2;
  function s2(t3) {
    var e3, r3, n3, i3 = this;
    if (!(i3 instanceof s2))
      return new s2(t3);
    if (i3.constructor = s2, t3 instanceof s2)
      return i3.s = t3.s, void (Ln ? !t3.d || t3.e > s2.maxE ? (i3.e = NaN, i3.d = null) : t3.e < s2.minE ? (i3.e = 0, i3.d = [0]) : (i3.e = t3.e, i3.d = t3.d.slice()) : (i3.e = t3.e, i3.d = t3.d ? t3.d.slice() : t3.d));
    if ((n3 = typeof t3) === "number") {
      if (t3 === 0)
        return i3.s = 1 / t3 < 0 ? -1 : 1, i3.e = 0, void (i3.d = [0]);
      if (t3 < 0 ? (t3 = -t3, i3.s = -1) : i3.s = 1, t3 === ~~t3 && t3 < 1e7) {
        for (e3 = 0, r3 = t3; r3 >= 10; r3 /= 10)
          e3++;
        return void (Ln ? e3 > s2.maxE ? (i3.e = NaN, i3.d = null) : e3 < s2.minE ? (i3.e = 0, i3.d = [0]) : (i3.e = e3, i3.d = [t3]) : (i3.e = e3, i3.d = [t3]));
      }
      return 0 * t3 != 0 ? (t3 || (i3.s = NaN), i3.e = NaN, void (i3.d = null)) : pi(i3, t3.toString());
    }
    if (n3 !== "string")
      throw Error(Bn + t3);
    return (r3 = t3.charCodeAt(0)) === 45 ? (t3 = t3.slice(1), i3.s = -1) : (r3 === 43 && (t3 = t3.slice(1)), i3.s = 1), Hn.test(t3) ? pi(i3, t3) : function(t4, e4) {
      var r4, n4, i4, s3, a2, o2, u2, h, c2;
      if (e4 === "Infinity" || e4 === "NaN")
        return +e4 || (t4.s = NaN), t4.e = NaN, t4.d = null, t4;
      if (jn.test(e4))
        r4 = 16, e4 = e4.toLowerCase();
      else if (Un.test(e4))
        r4 = 2;
      else {
        if (!qn.test(e4))
          throw Error(Bn + e4);
        r4 = 8;
      }
      for ((s3 = e4.search(/p/i)) > 0 ? (u2 = +e4.slice(s3 + 1), e4 = e4.substring(2, s3)) : e4 = e4.slice(2), a2 = (s3 = e4.indexOf(".")) >= 0, n4 = t4.constructor, a2 && (s3 = (o2 = (e4 = e4.replace(".", "")).length) - s3, i4 = ai(n4, new n4(r4), s3, 2 * s3)), s3 = c2 = (h = Jn(e4, r4, Vn)).length - 1; h[s3] === 0; --s3)
        h.pop();
      return s3 < 0 ? new n4(0 * t4.s) : (t4.e = ei(h, c2), t4.d = h, Ln = false, a2 && (t4 = Qn(t4, i4, 4 * o2)), u2 && (t4 = t4.times(Math.abs(u2) < 54 ? Pn(2, u2) : rs.pow(2, u2))), Ln = true, t4);
    }(i3, t3);
  }
  if (s2.prototype = Wn, s2.ROUND_UP = 0, s2.ROUND_DOWN = 1, s2.ROUND_CEIL = 2, s2.ROUND_FLOOR = 3, s2.ROUND_HALF_UP = 4, s2.ROUND_HALF_DOWN = 5, s2.ROUND_HALF_EVEN = 6, s2.ROUND_HALF_CEIL = 7, s2.ROUND_HALF_FLOOR = 8, s2.EUCLID = 9, s2.config = s2.set = zi, s2.clone = t2, s2.isDecimal = Li, s2.abs = vi, s2.acos = xi, s2.acosh = wi, s2.add = bi, s2.asin = _i, s2.asinh = Mi, s2.atan = Ni, s2.atanh = Ei, s2.atan2 = Si, s2.cbrt = Ti, s2.ceil = Oi, s2.cos = Ci, s2.cosh = Ai, s2.div = Ri, s2.exp = Di, s2.floor = ki, s2.hypot = Ii, s2.ln = Bi, s2.log = Fi, s2.log10 = Ui, s2.log2 = Pi, s2.max = ji, s2.min = qi, s2.mod = Hi, s2.mul = Vi, s2.pow = $i, s2.random = Gi, s2.round = Wi, s2.sign = Yi, s2.sin = Zi, s2.sinh = Xi, s2.sqrt = Ji, s2.sub = Qi, s2.tan = Ki, s2.tanh = ts, s2.trunc = es, e2 === void 0 && (e2 = {}), e2 && e2.defaults !== true)
    for (i2 = ["precision", "rounding", "toExpNeg", "toExpPos", "maxE", "minE", "modulo", "crypto"], r2 = 0; r2 < i2.length; )
      e2.hasOwnProperty(n2 = i2[r2++]) || (e2[n2] = this[n2]);
  return s2.config(e2), s2;
}(In);
Dn = new rs(Dn), kn = new rs(kn);
var ns, is = wn("BigNumber", ["?on", "config"], (t3) => {
  var { on: e2, config: r2 } = t3, n2 = rs.clone({ precision: r2.precision, modulo: 9 });
  return n2.prototype.type = "BigNumber", n2.prototype.isBigNumber = true, n2.prototype.toJSON = function() {
    return { mathjs: "BigNumber", value: this.toString() };
  }, n2.fromJSON = function(t4) {
    return new n2(t4.value);
  }, e2 && e2("config", function(t4, e3) {
    t4.precision !== e3.precision && n2.config({ precision: t4.precision });
  }), n2;
}, { isClass: true }), ss = { exports: {} };
/**
 * @license Complex.js v2.0.13 12/05/2020
 *
 * Copyright (c) 2020, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/
ns = ss, function(t3) {
  var e2 = function(t4) {
    return 0.5 * (Math.exp(t4) + Math.exp(-t4));
  }, r2 = function(t4) {
    return 0.5 * (Math.exp(t4) - Math.exp(-t4));
  }, n2 = function() {
    throw SyntaxError("Invalid Param");
  };
  function i2(t4, e3) {
    var r3 = Math.abs(t4), n3 = Math.abs(e3);
    return t4 === 0 ? Math.log(n3) : e3 === 0 ? Math.log(r3) : r3 < 3e3 && n3 < 3e3 ? 0.5 * Math.log(t4 * t4 + e3 * e3) : Math.log(t4 / Math.cos(Math.atan2(e3, t4)));
  }
  function s2(t4, e3) {
    if (!(this instanceof s2))
      return new s2(t4, e3);
    var r3 = function(t5, e4) {
      var r4 = { re: 0, im: 0 };
      if (t5 == null)
        r4.re = r4.im = 0;
      else if (e4 !== void 0)
        r4.re = t5, r4.im = e4;
      else
        switch (typeof t5) {
          case "object":
            if ("im" in t5 && "re" in t5)
              r4.re = t5.re, r4.im = t5.im;
            else if ("abs" in t5 && "arg" in t5) {
              if (!Number.isFinite(t5.abs) && Number.isFinite(t5.arg))
                return s2.INFINITY;
              r4.re = t5.abs * Math.cos(t5.arg), r4.im = t5.abs * Math.sin(t5.arg);
            } else if ("r" in t5 && "phi" in t5) {
              if (!Number.isFinite(t5.r) && Number.isFinite(t5.phi))
                return s2.INFINITY;
              r4.re = t5.r * Math.cos(t5.phi), r4.im = t5.r * Math.sin(t5.phi);
            } else
              t5.length === 2 ? (r4.re = t5[0], r4.im = t5[1]) : n2();
            break;
          case "string":
            r4.im = r4.re = 0;
            var i3 = t5.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g), a2 = 1, o2 = 0;
            i3 === null && n2();
            for (var u2 = 0; u2 < i3.length; u2++) {
              var h = i3[u2];
              h === " " || h === "	" || h === "\n" || (h === "+" ? a2++ : h === "-" ? o2++ : h === "i" || h === "I" ? (a2 + o2 === 0 && n2(), i3[u2 + 1] === " " || isNaN(i3[u2 + 1]) ? r4.im += parseFloat((o2 % 2 ? "-" : "") + "1") : (r4.im += parseFloat((o2 % 2 ? "-" : "") + i3[u2 + 1]), u2++), a2 = o2 = 0) : ((a2 + o2 === 0 || isNaN(h)) && n2(), i3[u2 + 1] === "i" || i3[u2 + 1] === "I" ? (r4.im += parseFloat((o2 % 2 ? "-" : "") + h), u2++) : r4.re += parseFloat((o2 % 2 ? "-" : "") + h), a2 = o2 = 0));
            }
            a2 + o2 > 0 && n2();
            break;
          case "number":
            r4.im = 0, r4.re = t5;
            break;
          default:
            n2();
        }
      return isNaN(r4.re) || isNaN(r4.im), r4;
    }(t4, e3);
    this.re = r3.re, this.im = r3.im;
  }
  s2.prototype = { re: 0, im: 0, sign: function() {
    var t4 = this.abs();
    return new s2(this.re / t4, this.im / t4);
  }, add: function(t4, e3) {
    var r3 = new s2(t4, e3);
    return this.isInfinite() && r3.isInfinite() ? s2.NAN : this.isInfinite() || r3.isInfinite() ? s2.INFINITY : new s2(this.re + r3.re, this.im + r3.im);
  }, sub: function(t4, e3) {
    var r3 = new s2(t4, e3);
    return this.isInfinite() && r3.isInfinite() ? s2.NAN : this.isInfinite() || r3.isInfinite() ? s2.INFINITY : new s2(this.re - r3.re, this.im - r3.im);
  }, mul: function(t4, e3) {
    var r3 = new s2(t4, e3);
    return this.isInfinite() && r3.isZero() || this.isZero() && r3.isInfinite() ? s2.NAN : this.isInfinite() || r3.isInfinite() ? s2.INFINITY : r3.im === 0 && this.im === 0 ? new s2(this.re * r3.re, 0) : new s2(this.re * r3.re - this.im * r3.im, this.re * r3.im + this.im * r3.re);
  }, div: function(t4, e3) {
    var r3 = new s2(t4, e3);
    if (this.isZero() && r3.isZero() || this.isInfinite() && r3.isInfinite())
      return s2.NAN;
    if (this.isInfinite() || r3.isZero())
      return s2.INFINITY;
    if (this.isZero() || r3.isInfinite())
      return s2.ZERO;
    t4 = this.re, e3 = this.im;
    var n3, i3, a2 = r3.re, o2 = r3.im;
    return o2 === 0 ? new s2(t4 / a2, e3 / a2) : Math.abs(a2) < Math.abs(o2) ? new s2((t4 * (i3 = a2 / o2) + e3) / (n3 = a2 * i3 + o2), (e3 * i3 - t4) / n3) : new s2((t4 + e3 * (i3 = o2 / a2)) / (n3 = o2 * i3 + a2), (e3 - t4 * i3) / n3);
  }, pow: function(t4, e3) {
    var r3 = new s2(t4, e3);
    if (t4 = this.re, e3 = this.im, r3.isZero())
      return s2.ONE;
    if (r3.im === 0) {
      if (e3 === 0 && t4 > 0)
        return new s2(Math.pow(t4, r3.re), 0);
      if (t4 === 0)
        switch ((r3.re % 4 + 4) % 4) {
          case 0:
            return new s2(Math.pow(e3, r3.re), 0);
          case 1:
            return new s2(0, Math.pow(e3, r3.re));
          case 2:
            return new s2(-Math.pow(e3, r3.re), 0);
          case 3:
            return new s2(0, -Math.pow(e3, r3.re));
        }
    }
    if (t4 === 0 && e3 === 0 && r3.re > 0 && r3.im >= 0)
      return s2.ZERO;
    var n3 = Math.atan2(e3, t4), a2 = i2(t4, e3);
    return t4 = Math.exp(r3.re * a2 - r3.im * n3), e3 = r3.im * a2 + r3.re * n3, new s2(t4 * Math.cos(e3), t4 * Math.sin(e3));
  }, sqrt: function() {
    var t4, e3, r3 = this.re, n3 = this.im, i3 = this.abs();
    if (r3 >= 0) {
      if (n3 === 0)
        return new s2(Math.sqrt(r3), 0);
      t4 = 0.5 * Math.sqrt(2 * (i3 + r3));
    } else
      t4 = Math.abs(n3) / Math.sqrt(2 * (i3 - r3));
    return e3 = r3 <= 0 ? 0.5 * Math.sqrt(2 * (i3 - r3)) : Math.abs(n3) / Math.sqrt(2 * (i3 + r3)), new s2(t4, n3 < 0 ? -e3 : e3);
  }, exp: function() {
    var t4 = Math.exp(this.re);
    return this.im, new s2(t4 * Math.cos(this.im), t4 * Math.sin(this.im));
  }, expm1: function() {
    var t4 = this.re, e3 = this.im;
    return new s2(Math.expm1(t4) * Math.cos(e3) + function(t5) {
      var e4 = Math.PI / 4;
      if (t5 < -e4 || t5 > e4)
        return Math.cos(t5) - 1;
      var r3 = t5 * t5;
      return r3 * (r3 * (1 / 24 + r3 * (-1 / 720 + r3 * (1 / 40320 + r3 * (-1 / 3628800 + r3 * (1 / 4790014600 + r3 * (-1 / 87178291200 + r3 * (1 / 20922789888e3))))))) - 0.5);
    }(e3), Math.exp(t4) * Math.sin(e3));
  }, log: function() {
    var t4 = this.re, e3 = this.im;
    return new s2(i2(t4, e3), Math.atan2(e3, t4));
  }, abs: function() {
    return t4 = this.re, e3 = this.im, r3 = Math.abs(t4), n3 = Math.abs(e3), r3 < 3e3 && n3 < 3e3 ? Math.sqrt(r3 * r3 + n3 * n3) : (r3 < n3 ? (r3 = n3, n3 = t4 / e3) : n3 = e3 / t4, r3 * Math.sqrt(1 + n3 * n3));
    var t4, e3, r3, n3;
  }, arg: function() {
    return Math.atan2(this.im, this.re);
  }, sin: function() {
    var t4 = this.re, n3 = this.im;
    return new s2(Math.sin(t4) * e2(n3), Math.cos(t4) * r2(n3));
  }, cos: function() {
    var t4 = this.re, n3 = this.im;
    return new s2(Math.cos(t4) * e2(n3), -Math.sin(t4) * r2(n3));
  }, tan: function() {
    var t4 = 2 * this.re, n3 = 2 * this.im, i3 = Math.cos(t4) + e2(n3);
    return new s2(Math.sin(t4) / i3, r2(n3) / i3);
  }, cot: function() {
    var t4 = 2 * this.re, n3 = 2 * this.im, i3 = Math.cos(t4) - e2(n3);
    return new s2(-Math.sin(t4) / i3, r2(n3) / i3);
  }, sec: function() {
    var t4 = this.re, n3 = this.im, i3 = 0.5 * e2(2 * n3) + 0.5 * Math.cos(2 * t4);
    return new s2(Math.cos(t4) * e2(n3) / i3, Math.sin(t4) * r2(n3) / i3);
  }, csc: function() {
    var t4 = this.re, n3 = this.im, i3 = 0.5 * e2(2 * n3) - 0.5 * Math.cos(2 * t4);
    return new s2(Math.sin(t4) * e2(n3) / i3, -Math.cos(t4) * r2(n3) / i3);
  }, asin: function() {
    var t4 = this.re, e3 = this.im, r3 = new s2(e3 * e3 - t4 * t4 + 1, -2 * t4 * e3).sqrt(), n3 = new s2(r3.re - e3, r3.im + t4).log();
    return new s2(n3.im, -n3.re);
  }, acos: function() {
    var t4 = this.re, e3 = this.im, r3 = new s2(e3 * e3 - t4 * t4 + 1, -2 * t4 * e3).sqrt(), n3 = new s2(r3.re - e3, r3.im + t4).log();
    return new s2(Math.PI / 2 - n3.im, n3.re);
  }, atan: function() {
    var t4 = this.re, e3 = this.im;
    if (t4 === 0) {
      if (e3 === 1)
        return new s2(0, 1 / 0);
      if (e3 === -1)
        return new s2(0, -1 / 0);
    }
    var r3 = t4 * t4 + (1 - e3) * (1 - e3), n3 = new s2((1 - e3 * e3 - t4 * t4) / r3, -2 * t4 / r3).log();
    return new s2(-0.5 * n3.im, 0.5 * n3.re);
  }, acot: function() {
    var t4 = this.re, e3 = this.im;
    if (e3 === 0)
      return new s2(Math.atan2(1, t4), 0);
    var r3 = t4 * t4 + e3 * e3;
    return r3 !== 0 ? new s2(t4 / r3, -e3 / r3).atan() : new s2(t4 !== 0 ? t4 / 0 : 0, e3 !== 0 ? -e3 / 0 : 0).atan();
  }, asec: function() {
    var t4 = this.re, e3 = this.im;
    if (t4 === 0 && e3 === 0)
      return new s2(0, 1 / 0);
    var r3 = t4 * t4 + e3 * e3;
    return r3 !== 0 ? new s2(t4 / r3, -e3 / r3).acos() : new s2(t4 !== 0 ? t4 / 0 : 0, e3 !== 0 ? -e3 / 0 : 0).acos();
  }, acsc: function() {
    var t4 = this.re, e3 = this.im;
    if (t4 === 0 && e3 === 0)
      return new s2(Math.PI / 2, 1 / 0);
    var r3 = t4 * t4 + e3 * e3;
    return r3 !== 0 ? new s2(t4 / r3, -e3 / r3).asin() : new s2(t4 !== 0 ? t4 / 0 : 0, e3 !== 0 ? -e3 / 0 : 0).asin();
  }, sinh: function() {
    var t4 = this.re, n3 = this.im;
    return new s2(r2(t4) * Math.cos(n3), e2(t4) * Math.sin(n3));
  }, cosh: function() {
    var t4 = this.re, n3 = this.im;
    return new s2(e2(t4) * Math.cos(n3), r2(t4) * Math.sin(n3));
  }, tanh: function() {
    var t4 = 2 * this.re, n3 = 2 * this.im, i3 = e2(t4) + Math.cos(n3);
    return new s2(r2(t4) / i3, Math.sin(n3) / i3);
  }, coth: function() {
    var t4 = 2 * this.re, n3 = 2 * this.im, i3 = e2(t4) - Math.cos(n3);
    return new s2(r2(t4) / i3, -Math.sin(n3) / i3);
  }, csch: function() {
    var t4 = this.re, n3 = this.im, i3 = Math.cos(2 * n3) - e2(2 * t4);
    return new s2(-2 * r2(t4) * Math.cos(n3) / i3, 2 * e2(t4) * Math.sin(n3) / i3);
  }, sech: function() {
    var t4 = this.re, n3 = this.im, i3 = Math.cos(2 * n3) + e2(2 * t4);
    return new s2(2 * e2(t4) * Math.cos(n3) / i3, -2 * r2(t4) * Math.sin(n3) / i3);
  }, asinh: function() {
    var t4 = this.im;
    this.im = -this.re, this.re = t4;
    var e3 = this.asin();
    return this.re = -this.im, this.im = t4, t4 = e3.re, e3.re = -e3.im, e3.im = t4, e3;
  }, acosh: function() {
    var t4 = this.acos();
    if (t4.im <= 0) {
      var e3 = t4.re;
      t4.re = -t4.im, t4.im = e3;
    } else
      e3 = t4.im, t4.im = -t4.re, t4.re = e3;
    return t4;
  }, atanh: function() {
    var t4 = this.re, e3 = this.im, r3 = t4 > 1 && e3 === 0, n3 = 1 - t4, a2 = 1 + t4, o2 = n3 * n3 + e3 * e3, u2 = o2 !== 0 ? new s2((a2 * n3 - e3 * e3) / o2, (e3 * n3 + a2 * e3) / o2) : new s2(t4 !== -1 ? t4 / 0 : 0, e3 !== 0 ? e3 / 0 : 0), h = u2.re;
    return u2.re = i2(u2.re, u2.im) / 2, u2.im = Math.atan2(u2.im, h) / 2, r3 && (u2.im = -u2.im), u2;
  }, acoth: function() {
    var t4 = this.re, e3 = this.im;
    if (t4 === 0 && e3 === 0)
      return new s2(0, Math.PI / 2);
    var r3 = t4 * t4 + e3 * e3;
    return r3 !== 0 ? new s2(t4 / r3, -e3 / r3).atanh() : new s2(t4 !== 0 ? t4 / 0 : 0, e3 !== 0 ? -e3 / 0 : 0).atanh();
  }, acsch: function() {
    var t4 = this.re, e3 = this.im;
    if (e3 === 0)
      return new s2(t4 !== 0 ? Math.log(t4 + Math.sqrt(t4 * t4 + 1)) : 1 / 0, 0);
    var r3 = t4 * t4 + e3 * e3;
    return r3 !== 0 ? new s2(t4 / r3, -e3 / r3).asinh() : new s2(t4 !== 0 ? t4 / 0 : 0, e3 !== 0 ? -e3 / 0 : 0).asinh();
  }, asech: function() {
    var t4 = this.re, e3 = this.im;
    if (this.isZero())
      return s2.INFINITY;
    var r3 = t4 * t4 + e3 * e3;
    return r3 !== 0 ? new s2(t4 / r3, -e3 / r3).acosh() : new s2(t4 !== 0 ? t4 / 0 : 0, e3 !== 0 ? -e3 / 0 : 0).acosh();
  }, inverse: function() {
    if (this.isZero())
      return s2.INFINITY;
    if (this.isInfinite())
      return s2.ZERO;
    var t4 = this.re, e3 = this.im, r3 = t4 * t4 + e3 * e3;
    return new s2(t4 / r3, -e3 / r3);
  }, conjugate: function() {
    return new s2(this.re, -this.im);
  }, neg: function() {
    return new s2(-this.re, -this.im);
  }, ceil: function(t4) {
    return t4 = Math.pow(10, t4 || 0), new s2(Math.ceil(this.re * t4) / t4, Math.ceil(this.im * t4) / t4);
  }, floor: function(t4) {
    return t4 = Math.pow(10, t4 || 0), new s2(Math.floor(this.re * t4) / t4, Math.floor(this.im * t4) / t4);
  }, round: function(t4) {
    return t4 = Math.pow(10, t4 || 0), new s2(Math.round(this.re * t4) / t4, Math.round(this.im * t4) / t4);
  }, equals: function(t4, e3) {
    var r3 = new s2(t4, e3);
    return Math.abs(r3.re - this.re) <= s2.EPSILON && Math.abs(r3.im - this.im) <= s2.EPSILON;
  }, clone: function() {
    return new s2(this.re, this.im);
  }, toString: function() {
    var t4 = this.re, e3 = this.im, r3 = "";
    return this.isNaN() ? "NaN" : this.isInfinite() ? "Infinity" : (Math.abs(t4) < s2.EPSILON && (t4 = 0), Math.abs(e3) < s2.EPSILON && (e3 = 0), e3 === 0 ? r3 + t4 : (t4 !== 0 ? (r3 += t4, r3 += " ", e3 < 0 ? (e3 = -e3, r3 += "-") : r3 += "+", r3 += " ") : e3 < 0 && (e3 = -e3, r3 += "-"), e3 !== 1 && (r3 += e3), r3 + "i"));
  }, toVector: function() {
    return [this.re, this.im];
  }, valueOf: function() {
    return this.im === 0 ? this.re : null;
  }, isNaN: function() {
    return isNaN(this.re) || isNaN(this.im);
  }, isZero: function() {
    return this.im === 0 && this.re === 0;
  }, isFinite: function() {
    return isFinite(this.re) && isFinite(this.im);
  }, isInfinite: function() {
    return !(this.isNaN() || this.isFinite());
  } }, s2.ZERO = new s2(0, 0), s2.ONE = new s2(1, 0), s2.I = new s2(0, 1), s2.PI = new s2(Math.PI, 0), s2.E = new s2(Math.E, 0), s2.INFINITY = new s2(1 / 0, 1 / 0), s2.NAN = new s2(NaN, NaN), s2.EPSILON = 1e-15, Object.defineProperty(s2, "__esModule", { value: true }), s2.default = s2, s2.Complex = s2, ns.exports = s2;
}();
var as = Br(ss.exports), os = wn("Complex", [], () => (as.prototype.type = "Complex", as.prototype.isComplex = true, as.prototype.toJSON = function() {
  return { mathjs: "Complex", re: this.re, im: this.im };
}, as.prototype.toPolar = function() {
  return { r: this.abs(), phi: this.arg() };
}, as.prototype.format = function(t3) {
  var e2 = this.im, r2 = this.re, n2 = qr(this.re, t3), i2 = qr(this.im, t3), s2 = Be(t3) ? t3 : t3 ? t3.precision : null;
  if (s2 !== null) {
    var a2 = Math.pow(10, -s2);
    Math.abs(r2 / e2) < a2 && (r2 = 0), Math.abs(e2 / r2) < a2 && (e2 = 0);
  }
  return e2 === 0 ? n2 : r2 === 0 ? e2 === 1 ? "i" : e2 === -1 ? "-i" : i2 + "i" : e2 < 0 ? e2 === -1 ? n2 + " - i" : n2 + " - " + i2.substring(1) + "i" : e2 === 1 ? n2 + " + i" : n2 + " + " + i2 + "i";
}, as.fromPolar = function(t3) {
  switch (arguments.length) {
    case 1:
      var e2 = arguments[0];
      if (typeof e2 == "object")
        return as(e2);
      throw new TypeError("Input has to be an object with r and phi keys.");
    case 2:
      var r2 = arguments[0], n2 = arguments[1];
      if (Be(r2)) {
        if (je(n2) && n2.hasBase("ANGLE") && (n2 = n2.toNumber("rad")), Be(n2))
          return new as({ r: r2, phi: n2 });
        throw new TypeError("Phi is not a number nor an angle unit.");
      }
      throw new TypeError("Radius r is not a number.");
    default:
      throw new SyntaxError("Wrong number of arguments in function fromPolar");
  }
}, as.prototype.valueOf = as.prototype.toString, as.fromJSON = function(t3) {
  return new as(t3);
}, as.compare = function(t3, e2) {
  return t3.re > e2.re ? 1 : t3.re < e2.re ? -1 : t3.im > e2.im ? 1 : t3.im < e2.im ? -1 : 0;
}, as), { isClass: true }), us = { exports: {} };
/**
 * @license Fraction.js v4.1.1 23/05/2021
 * https://www.xarg.org/2014/03/rational-numbers-in-javascript/
 *
 * Copyright (c) 2021, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/
!function(t3, e2) {
  !function(e3) {
    var r2 = { s: 1, n: 0, d: 1 };
    function n2(t4) {
      function e4() {
        var e5 = Error.apply(this, arguments);
        e5.name = this.name = t4, this.stack = e5.stack, this.message = e5.message;
      }
      function r3() {
      }
      return r3.prototype = Error.prototype, e4.prototype = new r3(), e4;
    }
    var i2 = l2.DivisionByZero = n2("DivisionByZero"), s2 = l2.InvalidParameter = n2("InvalidParameter");
    function a2(t4, e4) {
      return isNaN(t4 = parseInt(t4, 10)) && o2(), t4 * e4;
    }
    function o2() {
      throw new s2();
    }
    function u2(t4) {
      for (var e4 = {}, r3 = t4, n3 = 2, i3 = 4; i3 <= r3; ) {
        for (; r3 % n3 == 0; )
          r3 /= n3, e4[n3] = (e4[n3] || 0) + 1;
        i3 += 1 + 2 * n3++;
      }
      return r3 !== t4 ? r3 > 1 && (e4[r3] = (e4[r3] || 0) + 1) : e4[t4] = (e4[t4] || 0) + 1, e4;
    }
    var h = function(t4, e4) {
      var n3, s3 = 0, u3 = 1, h2 = 1, c3 = 0, l3 = 0, p2 = 0, f2 = 1, d = 1, m2 = 0, y2 = 1, g2 = 1, v2 = 1, x2 = 1e7;
      if (t4 == null)
        ;
      else if (e4 !== void 0)
        h2 = (s3 = t4) * (u3 = e4);
      else
        switch (typeof t4) {
          case "object":
            "d" in t4 && "n" in t4 ? (s3 = t4.n, u3 = t4.d, "s" in t4 && (s3 *= t4.s)) : 0 in t4 ? (s3 = t4[0], 1 in t4 && (u3 = t4[1])) : o2(), h2 = s3 * u3;
            break;
          case "number":
            if (t4 < 0 && (h2 = t4, t4 = -t4), t4 % 1 == 0)
              s3 = t4;
            else if (t4 > 0) {
              for (t4 >= 1 && (t4 /= d = Math.pow(10, Math.floor(1 + Math.log(t4) / Math.LN10))); y2 <= x2 && v2 <= x2; ) {
                if (t4 === (n3 = (m2 + g2) / (y2 + v2))) {
                  y2 + v2 <= x2 ? (s3 = m2 + g2, u3 = y2 + v2) : v2 > y2 ? (s3 = g2, u3 = v2) : (s3 = m2, u3 = y2);
                  break;
                }
                t4 > n3 ? (m2 += g2, y2 += v2) : (g2 += m2, v2 += y2), y2 > x2 ? (s3 = g2, u3 = v2) : (s3 = m2, u3 = y2);
              }
              s3 *= d;
            } else
              (isNaN(t4) || isNaN(e4)) && (u3 = s3 = NaN);
            break;
          case "string":
            if ((y2 = t4.match(/\d+|./g)) === null && o2(), y2[m2] === "-" ? (h2 = -1, m2++) : y2[m2] === "+" && m2++, y2.length === m2 + 1 ? l3 = a2(y2[m2++], h2) : y2[m2 + 1] === "." || y2[m2] === "." ? (y2[m2] !== "." && (c3 = a2(y2[m2++], h2)), (++m2 + 1 === y2.length || y2[m2 + 1] === "(" && y2[m2 + 3] === ")" || y2[m2 + 1] === "'" && y2[m2 + 3] === "'") && (l3 = a2(y2[m2], h2), f2 = Math.pow(10, y2[m2].length), m2++), (y2[m2] === "(" && y2[m2 + 2] === ")" || y2[m2] === "'" && y2[m2 + 2] === "'") && (p2 = a2(y2[m2 + 1], h2), d = Math.pow(10, y2[m2 + 1].length) - 1, m2 += 3)) : y2[m2 + 1] === "/" || y2[m2 + 1] === ":" ? (l3 = a2(y2[m2], h2), f2 = a2(y2[m2 + 2], 1), m2 += 3) : y2[m2 + 3] === "/" && y2[m2 + 1] === " " && (c3 = a2(y2[m2], h2), l3 = a2(y2[m2 + 2], h2), f2 = a2(y2[m2 + 4], 1), m2 += 5), y2.length <= m2) {
              h2 = s3 = p2 + (u3 = f2 * d) * c3 + d * l3;
              break;
            }
          default:
            o2();
        }
      if (u3 === 0)
        throw new i2();
      r2.s = h2 < 0 ? -1 : 1, r2.n = Math.abs(s3), r2.d = Math.abs(u3);
    };
    function c2(t4, e4) {
      if (!t4)
        return e4;
      if (!e4)
        return t4;
      for (; ; ) {
        if (!(t4 %= e4))
          return e4;
        if (!(e4 %= t4))
          return t4;
      }
    }
    function l2(t4, e4) {
      if (!(this instanceof l2))
        return new l2(t4, e4);
      h(t4, e4), t4 = l2.REDUCE ? c2(r2.d, r2.n) : 1, this.s = r2.s, this.n = r2.n / t4, this.d = r2.d / t4;
    }
    l2.REDUCE = 1, l2.prototype = { s: 1, n: 0, d: 1, abs: function() {
      return new l2(this.n, this.d);
    }, neg: function() {
      return new l2(-this.s * this.n, this.d);
    }, add: function(t4, e4) {
      return h(t4, e4), new l2(this.s * this.n * r2.d + r2.s * this.d * r2.n, this.d * r2.d);
    }, sub: function(t4, e4) {
      return h(t4, e4), new l2(this.s * this.n * r2.d - r2.s * this.d * r2.n, this.d * r2.d);
    }, mul: function(t4, e4) {
      return h(t4, e4), new l2(this.s * r2.s * this.n * r2.n, this.d * r2.d);
    }, div: function(t4, e4) {
      return h(t4, e4), new l2(this.s * r2.s * this.n * r2.d, this.d * r2.n);
    }, clone: function() {
      return new l2(this);
    }, mod: function(t4, e4) {
      return isNaN(this.n) || isNaN(this.d) ? new l2(NaN) : t4 === void 0 ? new l2(this.s * this.n % this.d, 1) : (h(t4, e4), r2.n === 0 && this.d === 0 && l2(0, 0), new l2(this.s * (r2.d * this.n) % (r2.n * this.d), r2.d * this.d));
    }, gcd: function(t4, e4) {
      return h(t4, e4), new l2(c2(r2.n, this.n) * c2(r2.d, this.d), r2.d * this.d);
    }, lcm: function(t4, e4) {
      return h(t4, e4), r2.n === 0 && this.n === 0 ? new l2() : new l2(r2.n * this.n, c2(r2.n, this.n) * c2(r2.d, this.d));
    }, ceil: function(t4) {
      return t4 = Math.pow(10, t4 || 0), isNaN(this.n) || isNaN(this.d) ? new l2(NaN) : new l2(Math.ceil(t4 * this.s * this.n / this.d), t4);
    }, floor: function(t4) {
      return t4 = Math.pow(10, t4 || 0), isNaN(this.n) || isNaN(this.d) ? new l2(NaN) : new l2(Math.floor(t4 * this.s * this.n / this.d), t4);
    }, round: function(t4) {
      return t4 = Math.pow(10, t4 || 0), isNaN(this.n) || isNaN(this.d) ? new l2(NaN) : new l2(Math.round(t4 * this.s * this.n / this.d), t4);
    }, inverse: function() {
      return new l2(this.s * this.d, this.n);
    }, pow: function(t4, e4) {
      if (h(t4, e4), r2.d === 1)
        return r2.s < 0 ? new l2(Math.pow(this.s * this.d, r2.n), Math.pow(this.n, r2.n)) : new l2(Math.pow(this.s * this.n, r2.n), Math.pow(this.d, r2.n));
      if (this.s < 0)
        return null;
      var n3 = u2(this.n), i3 = u2(this.d), s3 = 1, a3 = 1;
      for (var o3 in n3)
        if (o3 !== "1") {
          if (o3 === "0") {
            s3 = 0;
            break;
          }
          if (n3[o3] *= r2.n, n3[o3] % r2.d != 0)
            return null;
          n3[o3] /= r2.d, s3 *= Math.pow(o3, n3[o3]);
        }
      for (var o3 in i3)
        if (o3 !== "1") {
          if (i3[o3] *= r2.n, i3[o3] % r2.d != 0)
            return null;
          i3[o3] /= r2.d, a3 *= Math.pow(o3, i3[o3]);
        }
      return r2.s < 0 ? new l2(a3, s3) : new l2(s3, a3);
    }, equals: function(t4, e4) {
      return h(t4, e4), this.s * this.n * r2.d == r2.s * r2.n * this.d;
    }, compare: function(t4, e4) {
      h(t4, e4);
      var n3 = this.s * this.n * r2.d - r2.s * r2.n * this.d;
      return (0 < n3) - (n3 < 0);
    }, simplify: function(t4) {
      if (isNaN(this.n) || isNaN(this.d))
        return this;
      var e4 = this.abs().toContinued();
      function r3(t5) {
        return t5.length === 1 ? new l2(t5[0]) : r3(t5.slice(1)).inverse().add(t5[0]);
      }
      t4 = t4 || 1e-3;
      for (var n3 = 0; n3 < e4.length; n3++) {
        var i3 = r3(e4.slice(0, n3 + 1));
        if (i3.sub(this.abs()).abs().valueOf() < t4)
          return i3.mul(this.s);
      }
      return this;
    }, divisible: function(t4, e4) {
      return h(t4, e4), !(!(r2.n * this.d) || this.n * r2.d % (r2.n * this.d));
    }, valueOf: function() {
      return this.s * this.n / this.d;
    }, toFraction: function(t4) {
      var e4, r3 = "", n3 = this.n, i3 = this.d;
      return this.s < 0 && (r3 += "-"), i3 === 1 ? r3 += n3 : (t4 && (e4 = Math.floor(n3 / i3)) > 0 && (r3 += e4, r3 += " ", n3 %= i3), r3 += n3, r3 += "/", r3 += i3), r3;
    }, toLatex: function(t4) {
      var e4, r3 = "", n3 = this.n, i3 = this.d;
      return this.s < 0 && (r3 += "-"), i3 === 1 ? r3 += n3 : (t4 && (e4 = Math.floor(n3 / i3)) > 0 && (r3 += e4, n3 %= i3), r3 += "\\frac{", r3 += n3, r3 += "}{", r3 += i3, r3 += "}"), r3;
    }, toContinued: function() {
      var t4, e4 = this.n, r3 = this.d, n3 = [];
      if (isNaN(e4) || isNaN(r3))
        return n3;
      do {
        n3.push(Math.floor(e4 / r3)), t4 = e4 % r3, e4 = r3, r3 = t4;
      } while (e4 !== 1);
      return n3;
    }, toString: function(t4) {
      var e4, r3 = this.n, n3 = this.d;
      if (isNaN(r3) || isNaN(n3))
        return "NaN";
      l2.REDUCE || (r3 /= e4 = c2(r3, n3), n3 /= e4), t4 = t4 || 15;
      var i3 = function(t5, e5) {
        for (; e5 % 2 == 0; e5 /= 2)
          ;
        for (; e5 % 5 == 0; e5 /= 5)
          ;
        if (e5 === 1)
          return 0;
        for (var r4 = 10 % e5, n4 = 1; r4 !== 1; n4++)
          if (r4 = 10 * r4 % e5, n4 > 2e3)
            return 0;
        return n4;
      }(0, n3), s3 = function(t5, e5, r4) {
        for (var n4 = 1, i4 = function(t6, e6, r5) {
          for (var n5 = 1; e6 > 0; t6 = t6 * t6 % r5, e6 >>= 1)
            1 & e6 && (n5 = n5 * t6 % r5);
          return n5;
        }(10, r4, e5), s4 = 0; s4 < 300; s4++) {
          if (n4 === i4)
            return s4;
          n4 = 10 * n4 % e5, i4 = 10 * i4 % e5;
        }
        return 0;
      }(0, n3, i3), a3 = this.s === -1 ? "-" : "";
      if (a3 += r3 / n3 | 0, r3 %= n3, (r3 *= 10) && (a3 += "."), i3) {
        for (var o3 = s3; o3--; )
          a3 += r3 / n3 | 0, r3 %= n3, r3 *= 10;
        a3 += "(";
        for (o3 = i3; o3--; )
          a3 += r3 / n3 | 0, r3 %= n3, r3 *= 10;
        a3 += ")";
      } else
        for (o3 = t4; r3 && o3--; )
          a3 += r3 / n3 | 0, r3 %= n3, r3 *= 10;
      return a3;
    } }, Object.defineProperty(l2, "__esModule", { value: true }), l2.default = l2, l2.Fraction = l2, t3.exports = l2;
  }();
}(us);
var hs = Br(us.exports), cs = wn("Fraction", [], () => (hs.prototype.type = "Fraction", hs.prototype.isFraction = true, hs.prototype.toJSON = function() {
  return { mathjs: "Fraction", n: this.s * this.n, d: this.d };
}, hs.fromJSON = function(t3) {
  return new hs(t3);
}, hs), { isClass: true }), ls = wn("Range", [], () => {
  function t3(e2, r2, n2) {
    if (!(this instanceof t3))
      throw new SyntaxError("Constructor must be called with the new operator");
    var i2 = e2 != null, s2 = r2 != null, a2 = n2 != null;
    if (i2) {
      if (Fe(e2))
        e2 = e2.toNumber();
      else if (typeof e2 != "number")
        throw new TypeError("Parameter start must be a number");
    }
    if (s2) {
      if (Fe(r2))
        r2 = r2.toNumber();
      else if (typeof r2 != "number")
        throw new TypeError("Parameter end must be a number");
    }
    if (a2) {
      if (Fe(n2))
        n2 = n2.toNumber();
      else if (typeof n2 != "number")
        throw new TypeError("Parameter step must be a number");
    }
    this.start = i2 ? parseFloat(e2) : 0, this.end = s2 ? parseFloat(r2) : 0, this.step = a2 ? parseFloat(n2) : 1;
  }
  return t3.prototype.type = "Range", t3.prototype.isRange = true, t3.parse = function(e2) {
    if (typeof e2 != "string")
      return null;
    var r2 = e2.split(":").map(function(t4) {
      return parseFloat(t4);
    });
    if (r2.some(function(t4) {
      return isNaN(t4);
    }))
      return null;
    switch (r2.length) {
      case 2:
        return new t3(r2[0], r2[1]);
      case 3:
        return new t3(r2[0], r2[2], r2[1]);
      default:
        return null;
    }
  }, t3.prototype.clone = function() {
    return new t3(this.start, this.end, this.step);
  }, t3.prototype.size = function() {
    var t4 = 0, e2 = this.start, r2 = this.step, n2 = this.end - e2;
    return jr(r2) === jr(n2) ? t4 = Math.ceil(n2 / r2) : n2 === 0 && (t4 = 0), isNaN(t4) && (t4 = 0), [t4];
  }, t3.prototype.min = function() {
    var t4 = this.size()[0];
    return t4 > 0 ? this.step > 0 ? this.start : this.start + (t4 - 1) * this.step : void 0;
  }, t3.prototype.max = function() {
    var t4 = this.size()[0];
    return t4 > 0 ? this.step > 0 ? this.start + (t4 - 1) * this.step : this.start : void 0;
  }, t3.prototype.forEach = function(t4) {
    var e2 = this.start, r2 = this.step, n2 = this.end, i2 = 0;
    if (r2 > 0)
      for (; e2 < n2; )
        t4(e2, [i2], this), e2 += r2, i2++;
    else if (r2 < 0)
      for (; e2 > n2; )
        t4(e2, [i2], this), e2 += r2, i2++;
  }, t3.prototype.map = function(t4) {
    var e2 = [];
    return this.forEach(function(r2, n2, i2) {
      e2[n2[0]] = t4(r2, n2, i2);
    }), e2;
  }, t3.prototype.toArray = function() {
    var t4 = [];
    return this.forEach(function(e2, r2) {
      t4[r2[0]] = e2;
    }), t4;
  }, t3.prototype.valueOf = function() {
    return this.toArray();
  }, t3.prototype.format = function(t4) {
    var e2 = qr(this.start, t4);
    return this.step !== 1 && (e2 += ":" + qr(this.step, t4)), e2 += ":" + qr(this.end, t4);
  }, t3.prototype.toString = function() {
    return this.format();
  }, t3.prototype.toJSON = function() {
    return { mathjs: "Range", start: this.start, end: this.end, step: this.step };
  }, t3.fromJSON = function(e2) {
    return new t3(e2.start, e2.end, e2.step);
  }, t3;
}, { isClass: true }), ps = wn("Matrix", [], () => {
  function t3() {
    if (!(this instanceof t3))
      throw new SyntaxError("Constructor must be called with the new operator");
  }
  return t3.prototype.type = "Matrix", t3.prototype.isMatrix = true, t3.prototype.storage = function() {
    throw new Error("Cannot invoke storage on a Matrix interface");
  }, t3.prototype.datatype = function() {
    throw new Error("Cannot invoke datatype on a Matrix interface");
  }, t3.prototype.create = function(t4, e2) {
    throw new Error("Cannot invoke create on a Matrix interface");
  }, t3.prototype.subset = function(t4, e2, r2) {
    throw new Error("Cannot invoke subset on a Matrix interface");
  }, t3.prototype.get = function(t4) {
    throw new Error("Cannot invoke get on a Matrix interface");
  }, t3.prototype.set = function(t4, e2, r2) {
    throw new Error("Cannot invoke set on a Matrix interface");
  }, t3.prototype.resize = function(t4, e2) {
    throw new Error("Cannot invoke resize on a Matrix interface");
  }, t3.prototype.reshape = function(t4, e2) {
    throw new Error("Cannot invoke reshape on a Matrix interface");
  }, t3.prototype.clone = function() {
    throw new Error("Cannot invoke clone on a Matrix interface");
  }, t3.prototype.size = function() {
    throw new Error("Cannot invoke size on a Matrix interface");
  }, t3.prototype.map = function(t4, e2) {
    throw new Error("Cannot invoke map on a Matrix interface");
  }, t3.prototype.forEach = function(t4) {
    throw new Error("Cannot invoke forEach on a Matrix interface");
  }, t3.prototype.toArray = function() {
    throw new Error("Cannot invoke toArray on a Matrix interface");
  }, t3.prototype.valueOf = function() {
    throw new Error("Cannot invoke valueOf on a Matrix interface");
  }, t3.prototype.format = function(t4) {
    throw new Error("Cannot invoke format on a Matrix interface");
  }, t3.prototype.toString = function() {
    throw new Error("Cannot invoke toString on a Matrix interface");
  }, t3;
}, { isClass: true }), fs = wn("DenseMatrix", ["Matrix"], (t3) => {
  var { Matrix: e2 } = t3;
  function r2(t4, e3) {
    if (!(this instanceof r2))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (e3 && !qe(e3))
      throw new Error("Invalid datatype: " + e3);
    if (Ve(t4))
      t4.type === "DenseMatrix" ? (this._data = _r(t4._data), this._size = _r(t4._size), this._datatype = e3 || t4._datatype) : (this._data = t4.toArray(), this._size = t4.size(), this._datatype = e3 || t4._datatype);
    else if (t4 && He(t4.data) && He(t4.size))
      this._data = t4.data, this._size = t4.size, un(this._data, this._size), this._datatype = e3 || t4.datatype;
    else if (He(t4))
      this._data = h(t4), this._size = an(this._data), un(this._data, this._size), this._datatype = e3;
    else {
      if (t4)
        throw new TypeError("Unsupported type of data (" + br(t4) + ")");
      this._data = [], this._size = [0], this._datatype = e3;
    }
  }
  function n2(t4, e3) {
    if (!Ze(e3))
      throw new TypeError("Invalid index");
    if (e3.isScalar())
      return t4.get(e3.min());
    var n3 = e3.size();
    if (n3.length !== t4._size.length)
      throw new nn(n3.length, t4._size.length);
    for (var s3 = e3.min(), a3 = e3.max(), o3 = 0, u3 = t4._size.length; o3 < u3; o3++)
      hn(s3[o3], t4._size[o3]), hn(a3[o3], t4._size[o3]);
    return new r2(i2(t4._data, e3, n3.length, 0), t4._datatype);
  }
  function i2(t4, e3, r3, n3) {
    var s3 = n3 === r3 - 1, a3 = e3.dimension(n3);
    return s3 ? a3.map(function(e4) {
      return hn(e4, t4.length), t4[e4];
    }).valueOf() : a3.map(function(s4) {
      return hn(s4, t4.length), i2(t4[s4], e3, r3, n3 + 1);
    }).valueOf();
  }
  function s2(t4, e3, r3, n3) {
    if (!e3 || e3.isIndex !== true)
      throw new TypeError("Invalid index");
    var i3, s3 = e3.size(), o3 = e3.isScalar();
    if (Ve(r3) ? (i3 = r3.size(), r3 = r3.valueOf()) : i3 = an(r3), o3) {
      if (i3.length !== 0)
        throw new TypeError("Scalar expected");
      t4.set(e3.min(), r3, n3);
    } else {
      if (s3.length < t4._size.length)
        throw new nn(s3.length, t4._size.length, "<");
      if (i3.length < s3.length) {
        for (var h2 = 0, c2 = 0; s3[h2] === 1 && i3[h2] === 1; )
          h2++;
        for (; s3[h2] === 1; )
          c2++, h2++;
        r3 = fn(r3, s3.length, c2, i3);
      }
      if (!Sr(s3, i3))
        throw new nn(s3, i3, ">");
      u2(t4, e3.max().map(function(t5) {
        return t5 + 1;
      }), n3);
      var l2 = s3.length;
      a2(t4._data, e3, r3, l2, 0);
    }
    return t4;
  }
  function a2(t4, e3, r3, n3, i3) {
    var s3 = i3 === n3 - 1, o3 = e3.dimension(i3);
    s3 ? o3.forEach(function(e4, n4) {
      hn(e4), t4[e4] = r3[n4[0]];
    }) : o3.forEach(function(s4, o4) {
      hn(s4), a2(t4[s4], e3, r3[o4[0]], n3, i3 + 1);
    });
  }
  function o2(t4, e3, r3) {
    if (e3.length === 0) {
      for (var n3 = t4._data; He(n3); )
        n3 = n3[0];
      return n3;
    }
    return t4._size = e3.slice(0), t4._data = cn(t4._data, t4._size, r3), t4;
  }
  function u2(t4, e3, r3) {
    for (var n3 = t4._size.slice(0), i3 = false; n3.length < e3.length; )
      n3.push(0), i3 = true;
    for (var s3 = 0, a3 = e3.length; s3 < a3; s3++)
      e3[s3] > n3[s3] && (n3[s3] = e3[s3], i3 = true);
    i3 && o2(t4, n3, r3);
  }
  function h(t4) {
    for (var e3 = 0, r3 = t4.length; e3 < r3; e3++) {
      var n3 = t4[e3];
      He(n3) ? t4[e3] = h(n3) : n3 && n3.isMatrix === true && (t4[e3] = h(n3.valueOf()));
    }
    return t4;
  }
  return r2.prototype = new e2(), r2.prototype.createDenseMatrix = function(t4, e3) {
    return new r2(t4, e3);
  }, r2.prototype.type = "DenseMatrix", r2.prototype.isDenseMatrix = true, r2.prototype.getDataType = function() {
    return vn(this._data, br);
  }, r2.prototype.storage = function() {
    return "dense";
  }, r2.prototype.datatype = function() {
    return this._datatype;
  }, r2.prototype.create = function(t4, e3) {
    return new r2(t4, e3);
  }, r2.prototype.subset = function(t4, e3, r3) {
    switch (arguments.length) {
      case 1:
        return n2(this, t4);
      case 2:
      case 3:
        return s2(this, t4, e3, r3);
      default:
        throw new SyntaxError("Wrong number of arguments");
    }
  }, r2.prototype.get = function(t4) {
    if (!He(t4))
      throw new TypeError("Array expected");
    if (t4.length !== this._size.length)
      throw new nn(t4.length, this._size.length);
    for (var e3 = 0; e3 < t4.length; e3++)
      hn(t4[e3], this._size[e3]);
    for (var r3 = this._data, n3 = 0, i3 = t4.length; n3 < i3; n3++) {
      var s3 = t4[n3];
      hn(s3, r3.length), r3 = r3[s3];
    }
    return r3;
  }, r2.prototype.set = function(t4, e3, r3) {
    if (!He(t4))
      throw new TypeError("Array expected");
    if (t4.length < this._size.length)
      throw new nn(t4.length, this._size.length, "<");
    var n3, i3, s3;
    u2(this, t4.map(function(t5) {
      return t5 + 1;
    }), r3);
    var a3 = this._data;
    for (n3 = 0, i3 = t4.length - 1; n3 < i3; n3++)
      hn(s3 = t4[n3], a3.length), a3 = a3[s3];
    return hn(s3 = t4[t4.length - 1], a3.length), a3[s3] = e3, this;
  }, r2.prototype.resize = function(t4, e3, r3) {
    if (!$e(t4))
      throw new TypeError("Array or Matrix expected");
    var n3 = t4.valueOf().map((t5) => Array.isArray(t5) && t5.length === 1 ? t5[0] : t5);
    return o2(r3 ? this.clone() : this, n3, e3);
  }, r2.prototype.reshape = function(t4, e3) {
    var r3 = e3 ? this.clone() : this;
    return r3._data = pn(r3._data, t4), r3._size = t4.slice(0), r3;
  }, r2.prototype.clone = function() {
    return new r2({ data: _r(this._data), size: _r(this._size), datatype: this._datatype });
  }, r2.prototype.size = function() {
    return this._size.slice(0);
  }, r2.prototype.map = function(t4) {
    var e3 = this, n3 = function r3(n4, i3) {
      return He(n4) ? n4.map(function(t5, e4) {
        return r3(t5, i3.concat(e4));
      }) : t4(n4, i3, e3);
    }(this._data, []);
    return new r2(n3, this._datatype !== void 0 ? vn(n3, br) : void 0);
  }, r2.prototype.forEach = function(t4) {
    var e3 = this;
    !function r3(n3, i3) {
      He(n3) ? n3.forEach(function(t5, e4) {
        r3(t5, i3.concat(e4));
      }) : t4(n3, i3, e3);
    }(this._data, []);
  }, r2.prototype.toArray = function() {
    return _r(this._data);
  }, r2.prototype.valueOf = function() {
    return this._data;
  }, r2.prototype.format = function(t4) {
    return Kr(this._data, t4);
  }, r2.prototype.toString = function() {
    return Kr(this._data);
  }, r2.prototype.toJSON = function() {
    return { mathjs: "DenseMatrix", data: this._data, size: this._size, datatype: this._datatype };
  }, r2.prototype.diagonal = function(t4) {
    if (t4) {
      if (Fe(t4) && (t4 = t4.toNumber()), !Be(t4) || !Ur(t4))
        throw new TypeError("The parameter k must be an integer number");
    } else
      t4 = 0;
    for (var e3 = t4 > 0 ? t4 : 0, n3 = t4 < 0 ? -t4 : 0, i3 = this._size[0], s3 = this._size[1], a3 = Math.min(i3 - n3, s3 - e3), o3 = [], u3 = 0; u3 < a3; u3++)
      o3[u3] = this._data[u3 + n3][u3 + e3];
    return new r2({ data: o3, size: [a3], datatype: this._datatype });
  }, r2.diagonal = function(t4, e3, n3, i3) {
    if (!He(t4))
      throw new TypeError("Array expected, size parameter");
    if (t4.length !== 2)
      throw new Error("Only two dimensions matrix are supported");
    if (t4 = t4.map(function(t5) {
      if (Fe(t5) && (t5 = t5.toNumber()), !Be(t5) || !Ur(t5) || t5 < 1)
        throw new Error("Size values must be positive integers");
      return t5;
    }), n3) {
      if (Fe(n3) && (n3 = n3.toNumber()), !Be(n3) || !Ur(n3))
        throw new TypeError("The parameter k must be an integer number");
    } else
      n3 = 0;
    var s3, a3 = n3 > 0 ? n3 : 0, o3 = n3 < 0 ? -n3 : 0, u3 = t4[0], h2 = t4[1], c2 = Math.min(u3 - o3, h2 - a3);
    if (He(e3)) {
      if (e3.length !== c2)
        throw new Error("Invalid value array length");
      s3 = function(t5) {
        return e3[t5];
      };
    } else if (Ve(e3)) {
      var l2 = e3.size();
      if (l2.length !== 1 || l2[0] !== c2)
        throw new Error("Invalid matrix length");
      s3 = function(t5) {
        return e3.get([t5]);
      };
    } else
      s3 = function() {
        return e3;
      };
    i3 || (i3 = Fe(s3(0)) ? s3(0).mul(0) : 0);
    var p2 = [];
    if (t4.length > 0) {
      p2 = cn(p2, t4, i3);
      for (var f2 = 0; f2 < c2; f2++)
        p2[f2 + o3][f2 + a3] = s3(f2);
    }
    return new r2({ data: p2, size: [u3, h2] });
  }, r2.fromJSON = function(t4) {
    return new r2(t4);
  }, r2.prototype.swapRows = function(t4, e3) {
    if (!(Be(t4) && Ur(t4) && Be(e3) && Ur(e3)))
      throw new Error("Row index must be positive integers");
    if (this._size.length !== 2)
      throw new Error("Only two dimensional matrix is supported");
    return hn(t4, this._size[0]), hn(e3, this._size[0]), r2._swapRows(t4, e3, this._data), this;
  }, r2._swapRows = function(t4, e3, r3) {
    var n3 = r3[t4];
    r3[t4] = r3[e3], r3[e3] = n3;
  }, r2;
}, { isClass: true });
function ds(t3, e2, r2) {
  return t3 && typeof t3.map == "function" ? t3.map(function(t4) {
    return ds(t4, e2);
  }) : e2(t3);
}
var ms = "number", ys = "number, number";
function gs(t3) {
  return Math.abs(t3);
}
function vs(t3, e2) {
  return t3 + e2;
}
function xs(t3, e2) {
  return t3 * e2;
}
function ws(t3) {
  return -t3;
}
function bs(t3) {
  return Math.ceil(t3);
}
function _s(t3, e2) {
  if (e2 > 0)
    return t3 - e2 * Math.floor(t3 / e2);
  if (e2 === 0)
    return t3;
  throw new Error("Cannot calculate mod for a negative divisor");
}
function Ms(t3, e2) {
  return t3 * t3 < 1 && e2 === 1 / 0 || t3 * t3 > 1 && e2 === -1 / 0 ? 0 : Math.pow(t3, e2);
}
function Ns(t3) {
  var e2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  return parseFloat(Vr(t3, e2));
}
gs.signature = ms, vs.signature = ys, xs.signature = ys, ws.signature = ms, bs.signature = ms, _s.signature = ys, Ms.signature = ys, Ns.signature = ys;
var Es = wn("isNumeric", ["typed"], (t3) => {
  var { typed: e2 } = t3;
  return e2("isNumeric", { "number | BigNumber | Fraction | boolean": function() {
    return true;
  }, "Complex | Unit | string | null | undefined | Node": function() {
    return false;
  }, "Array | Matrix": function(t4) {
    return ds(t4, this);
  } });
});
function Ss(t3, e2, r2) {
  if (r2 == null)
    return t3.eq(e2);
  if (t3.eq(e2))
    return true;
  if (t3.isNaN() || e2.isNaN())
    return false;
  if (t3.isFinite() && e2.isFinite()) {
    var n2 = t3.minus(e2).abs();
    if (n2.isZero())
      return true;
    var i2 = t3.constructor.max(t3.abs(), e2.abs());
    return n2.lte(i2.times(r2));
  }
  return false;
}
var Ts = "equalScalar", Os = wn(Ts, ["typed", "config"], (t3) => {
  var { typed: e2, config: r2 } = t3;
  return e2(Ts, { "boolean, boolean": function(t4, e3) {
    return t4 === e3;
  }, "number, number": function(t4, e3) {
    return Zr(t4, e3, r2.epsilon);
  }, "BigNumber, BigNumber": function(t4, e3) {
    return t4.eq(e3) || Ss(t4, e3, r2.epsilon);
  }, "Fraction, Fraction": function(t4, e3) {
    return t4.equals(e3);
  }, "Complex, Complex": function(t4, e3) {
    return function(t5, e4, r3) {
      return Zr(t5.re, e4.re, r3) && Zr(t5.im, e4.im, r3);
    }(t4, e3, r2.epsilon);
  }, "Unit, Unit": function(t4, e3) {
    if (!t4.equalBase(e3))
      throw new Error("Cannot compare units with different base");
    return this(t4.value, e3.value);
  } });
});
wn(Ts, ["typed", "config"], (t3) => {
  var { typed: e2, config: r2 } = t3;
  return e2(Ts, { "number, number": function(t4, e3) {
    return Zr(t4, e3, r2.epsilon);
  } });
});
var zs = wn("SparseMatrix", ["typed", "equalScalar", "Matrix"], (t3) => {
  var { typed: e2, equalScalar: r2, Matrix: n2 } = t3;
  function i2(t4, e3) {
    if (!(this instanceof i2))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (e3 && !qe(e3))
      throw new Error("Invalid datatype: " + e3);
    if (Ve(t4))
      !function(t5, e4, r3) {
        e4.type === "SparseMatrix" ? (t5._values = e4._values ? _r(e4._values) : void 0, t5._index = _r(e4._index), t5._ptr = _r(e4._ptr), t5._size = _r(e4._size), t5._datatype = r3 || e4._datatype) : s2(t5, e4.valueOf(), r3 || e4._datatype);
      }(this, t4, e3);
    else if (t4 && He(t4.index) && He(t4.ptr) && He(t4.size))
      this._values = t4.values, this._index = t4.index, this._ptr = t4.ptr, this._size = t4.size, this._datatype = e3 || t4.datatype;
    else if (He(t4))
      s2(this, t4, e3);
    else {
      if (t4)
        throw new TypeError("Unsupported type of data (" + br(t4) + ")");
      this._values = [], this._index = [], this._ptr = [0], this._size = [0, 0], this._datatype = e3;
    }
  }
  function s2(t4, n3, i3) {
    t4._values = [], t4._index = [], t4._ptr = [], t4._datatype = i3;
    var s3 = n3.length, a3 = 0, o3 = r2, u3 = 0;
    if (qe(i3) && (o3 = e2.find(r2, [i3, i3]) || r2, u3 = e2.convert(0, i3)), s3 > 0) {
      var h2 = 0;
      do {
        t4._ptr.push(t4._index.length);
        for (var c3 = 0; c3 < s3; c3++) {
          var l3 = n3[c3];
          if (He(l3)) {
            if (h2 === 0 && a3 < l3.length && (a3 = l3.length), h2 < l3.length) {
              var p2 = l3[h2];
              o3(p2, u3) || (t4._values.push(p2), t4._index.push(c3));
            }
          } else
            h2 === 0 && a3 < 1 && (a3 = 1), o3(l3, u3) || (t4._values.push(l3), t4._index.push(c3));
        }
        h2++;
      } while (h2 < a3);
    }
    t4._ptr.push(t4._index.length), t4._size = [s3, a3];
  }
  function a2(t4, e3) {
    if (!Ze(e3))
      throw new TypeError("Invalid index");
    if (e3.isScalar())
      return t4.get(e3.min());
    var r3, n3, s3, a3, o3 = e3.size();
    if (o3.length !== t4._size.length)
      throw new nn(o3.length, t4._size.length);
    var u3 = e3.min(), h2 = e3.max();
    for (r3 = 0, n3 = t4._size.length; r3 < n3; r3++)
      hn(u3[r3], t4._size[r3]), hn(h2[r3], t4._size[r3]);
    var c3 = t4._values, l3 = t4._index, p2 = t4._ptr, f2 = e3.dimension(0), d = e3.dimension(1), m2 = [], y2 = [];
    f2.forEach(function(t5, e4) {
      y2[t5] = e4[0], m2[t5] = true;
    });
    var g2 = c3 ? [] : void 0, v2 = [], x2 = [];
    return d.forEach(function(t5) {
      for (x2.push(v2.length), s3 = p2[t5], a3 = p2[t5 + 1]; s3 < a3; s3++)
        r3 = l3[s3], m2[r3] === true && (v2.push(y2[r3]), g2 && g2.push(c3[s3]));
    }), x2.push(v2.length), new i2({ values: g2, index: v2, ptr: x2, size: o3, datatype: t4._datatype });
  }
  function o2(t4, e3, r3, n3) {
    if (!e3 || e3.isIndex !== true)
      throw new TypeError("Invalid index");
    var i3, s3 = e3.size(), a3 = e3.isScalar();
    if (Ve(r3) ? (i3 = r3.size(), r3 = r3.toArray()) : i3 = an(r3), a3) {
      if (i3.length !== 0)
        throw new TypeError("Scalar expected");
      t4.set(e3.min(), r3, n3);
    } else {
      if (s3.length !== 1 && s3.length !== 2)
        throw new nn(s3.length, t4._size.length, "<");
      if (i3.length < s3.length) {
        for (var o3 = 0, u3 = 0; s3[o3] === 1 && i3[o3] === 1; )
          o3++;
        for (; s3[o3] === 1; )
          u3++, o3++;
        r3 = fn(r3, s3.length, u3, i3);
      }
      if (!Sr(s3, i3))
        throw new nn(s3, i3, ">");
      for (var h2 = e3.min()[0], c3 = e3.min()[1], l3 = i3[0], p2 = i3[1], f2 = 0; f2 < l3; f2++)
        for (var d = 0; d < p2; d++) {
          var m2 = r3[f2][d];
          t4.set([f2 + h2, d + c3], m2, n3);
        }
    }
    return t4;
  }
  function u2(t4, e3, r3, n3) {
    if (r3 - e3 == 0)
      return r3;
    for (var i3 = e3; i3 < r3; i3++)
      if (n3[i3] === t4)
        return i3;
    return e3;
  }
  function h(t4, e3, r3, n3, i3, s3, a3) {
    i3.splice(t4, 0, n3), s3.splice(t4, 0, e3);
    for (var o3 = r3 + 1; o3 < a3.length; o3++)
      a3[o3]++;
  }
  function c2(t4, n3, i3, s3) {
    var a3 = s3 || 0, o3 = r2, u3 = 0;
    qe(t4._datatype) && (o3 = e2.find(r2, [t4._datatype, t4._datatype]) || r2, u3 = e2.convert(0, t4._datatype), a3 = e2.convert(a3, t4._datatype));
    var h2, c3, l3, p2 = !o3(a3, u3), f2 = t4._size[0], d = t4._size[1];
    if (i3 > d) {
      for (c3 = d; c3 < i3; c3++)
        if (t4._ptr[c3] = t4._values.length, p2)
          for (h2 = 0; h2 < f2; h2++)
            t4._values.push(a3), t4._index.push(h2);
      t4._ptr[i3] = t4._values.length;
    } else
      i3 < d && (t4._ptr.splice(i3 + 1, d - i3), t4._values.splice(t4._ptr[i3], t4._values.length), t4._index.splice(t4._ptr[i3], t4._index.length));
    if (d = i3, n3 > f2) {
      if (p2) {
        var m2 = 0;
        for (c3 = 0; c3 < d; c3++) {
          t4._ptr[c3] = t4._ptr[c3] + m2, l3 = t4._ptr[c3 + 1] + m2;
          var y2 = 0;
          for (h2 = f2; h2 < n3; h2++, y2++)
            t4._values.splice(l3 + y2, 0, a3), t4._index.splice(l3 + y2, 0, h2), m2++;
        }
        t4._ptr[d] = t4._values.length;
      }
    } else if (n3 < f2) {
      var g2 = 0;
      for (c3 = 0; c3 < d; c3++) {
        t4._ptr[c3] = t4._ptr[c3] - g2;
        var v2 = t4._ptr[c3], x2 = t4._ptr[c3 + 1] - g2;
        for (l3 = v2; l3 < x2; l3++)
          (h2 = t4._index[l3]) > n3 - 1 && (t4._values.splice(l3, 1), t4._index.splice(l3, 1), g2++);
      }
      t4._ptr[c3] = t4._values.length;
    }
    return t4._size[0] = n3, t4._size[1] = i3, t4;
  }
  function l2(t4, e3, r3, n3, i3) {
    var s3, a3, o3 = n3[0], u3 = n3[1], h2 = [];
    for (s3 = 0; s3 < o3; s3++)
      for (h2[s3] = [], a3 = 0; a3 < u3; a3++)
        h2[s3][a3] = 0;
    for (a3 = 0; a3 < u3; a3++)
      for (var c3 = r3[a3], l3 = r3[a3 + 1], p2 = c3; p2 < l3; p2++)
        h2[s3 = e3[p2]][a3] = t4 ? i3 ? _r(t4[p2]) : t4[p2] : 1;
    return h2;
  }
  return i2.prototype = new n2(), i2.prototype.createSparseMatrix = function(t4, e3) {
    return new i2(t4, e3);
  }, i2.prototype.type = "SparseMatrix", i2.prototype.isSparseMatrix = true, i2.prototype.getDataType = function() {
    return vn(this._values, br);
  }, i2.prototype.storage = function() {
    return "sparse";
  }, i2.prototype.datatype = function() {
    return this._datatype;
  }, i2.prototype.create = function(t4, e3) {
    return new i2(t4, e3);
  }, i2.prototype.density = function() {
    var t4 = this._size[0], e3 = this._size[1];
    return t4 !== 0 && e3 !== 0 ? this._index.length / (t4 * e3) : 0;
  }, i2.prototype.subset = function(t4, e3, r3) {
    if (!this._values)
      throw new Error("Cannot invoke subset on a Pattern only matrix");
    switch (arguments.length) {
      case 1:
        return a2(this, t4);
      case 2:
      case 3:
        return o2(this, t4, e3, r3);
      default:
        throw new SyntaxError("Wrong number of arguments");
    }
  }, i2.prototype.get = function(t4) {
    if (!He(t4))
      throw new TypeError("Array expected");
    if (t4.length !== this._size.length)
      throw new nn(t4.length, this._size.length);
    if (!this._values)
      throw new Error("Cannot invoke get on a Pattern only matrix");
    var e3 = t4[0], r3 = t4[1];
    hn(e3, this._size[0]), hn(r3, this._size[1]);
    var n3 = u2(e3, this._ptr[r3], this._ptr[r3 + 1], this._index);
    return n3 < this._ptr[r3 + 1] && this._index[n3] === e3 ? this._values[n3] : 0;
  }, i2.prototype.set = function(t4, n3, i3) {
    if (!He(t4))
      throw new TypeError("Array expected");
    if (t4.length !== this._size.length)
      throw new nn(t4.length, this._size.length);
    if (!this._values)
      throw new Error("Cannot invoke set on a Pattern only matrix");
    var s3 = t4[0], a3 = t4[1], o3 = this._size[0], l3 = this._size[1], p2 = r2, f2 = 0;
    qe(this._datatype) && (p2 = e2.find(r2, [this._datatype, this._datatype]) || r2, f2 = e2.convert(0, this._datatype)), (s3 > o3 - 1 || a3 > l3 - 1) && (c2(this, Math.max(s3 + 1, o3), Math.max(a3 + 1, l3), i3), o3 = this._size[0], l3 = this._size[1]), hn(s3, o3), hn(a3, l3);
    var d = u2(s3, this._ptr[a3], this._ptr[a3 + 1], this._index);
    return d < this._ptr[a3 + 1] && this._index[d] === s3 ? p2(n3, f2) ? function(t5, e3, r3, n4, i4) {
      r3.splice(t5, 1), n4.splice(t5, 1);
      for (var s4 = e3 + 1; s4 < i4.length; s4++)
        i4[s4]--;
    }(d, a3, this._values, this._index, this._ptr) : this._values[d] = n3 : h(d, s3, a3, n3, this._values, this._index, this._ptr), this;
  }, i2.prototype.resize = function(t4, e3, r3) {
    if (!$e(t4))
      throw new TypeError("Array or Matrix expected");
    var n3 = t4.valueOf().map((t5) => Array.isArray(t5) && t5.length === 1 ? t5[0] : t5);
    if (n3.length !== 2)
      throw new Error("Only two dimensions matrix are supported");
    return n3.forEach(function(t5) {
      if (!Be(t5) || !Ur(t5) || t5 < 0)
        throw new TypeError("Invalid size, must contain positive integers (size: " + Kr(n3) + ")");
    }), c2(r3 ? this.clone() : this, n3[0], n3[1], e3);
  }, i2.prototype.reshape = function(t4, e3) {
    if (!He(t4))
      throw new TypeError("Array expected");
    if (t4.length !== 2)
      throw new Error("Sparse matrices can only be reshaped in two dimensions");
    if (t4.forEach(function(e4) {
      if (!Be(e4) || !Ur(e4) || e4 < 0)
        throw new TypeError("Invalid size, must contain positive integers (size: " + Kr(t4) + ")");
    }), this._size[0] * this._size[1] != t4[0] * t4[1])
      throw new Error("Reshaping sparse matrix will result in the wrong number of elements");
    var r3 = e3 ? this.clone() : this;
    if (this._size[0] === t4[0] && this._size[1] === t4[1])
      return r3;
    for (var n3 = [], i3 = 0; i3 < r3._ptr.length; i3++)
      for (var s3 = 0; s3 < r3._ptr[i3 + 1] - r3._ptr[i3]; s3++)
        n3.push(i3);
    for (var a3 = r3._values.slice(), o3 = r3._index.slice(), c3 = 0; c3 < r3._index.length; c3++) {
      var l3 = o3[c3], p2 = n3[c3], f2 = l3 * r3._size[1] + p2;
      n3[c3] = f2 % t4[1], o3[c3] = Math.floor(f2 / t4[1]);
    }
    r3._values.length = 0, r3._index.length = 0, r3._ptr.length = t4[1] + 1, r3._size = t4.slice();
    for (var d = 0; d < r3._ptr.length; d++)
      r3._ptr[d] = 0;
    for (var m2 = 0; m2 < a3.length; m2++) {
      var y2 = o3[m2], g2 = n3[m2], v2 = a3[m2];
      h(u2(y2, r3._ptr[g2], r3._ptr[g2 + 1], r3._index), y2, g2, v2, r3._values, r3._index, r3._ptr);
    }
    return r3;
  }, i2.prototype.clone = function() {
    return new i2({ values: this._values ? _r(this._values) : void 0, index: _r(this._index), ptr: _r(this._ptr), size: _r(this._size), datatype: this._datatype });
  }, i2.prototype.size = function() {
    return this._size.slice(0);
  }, i2.prototype.map = function(t4, n3) {
    if (!this._values)
      throw new Error("Cannot invoke map on a Pattern only matrix");
    var s3 = this;
    return function(t5, n4, s4, a3, o3, u3, h2) {
      var c3 = [], l3 = [], p2 = [], f2 = r2, d = 0;
      qe(t5._datatype) && (f2 = e2.find(r2, [t5._datatype, t5._datatype]) || r2, d = e2.convert(0, t5._datatype));
      for (var m2 = function(t6, e3, r3) {
        t6 = u3(t6, e3, r3), f2(t6, d) || (c3.push(t6), l3.push(e3));
      }, y2 = a3; y2 <= o3; y2++) {
        p2.push(c3.length);
        var g2 = t5._ptr[y2], v2 = t5._ptr[y2 + 1];
        if (h2)
          for (var x2 = g2; x2 < v2; x2++) {
            var w2 = t5._index[x2];
            w2 >= n4 && w2 <= s4 && m2(t5._values[x2], w2 - n4, y2 - a3);
          }
        else {
          for (var b2 = {}, _2 = g2; _2 < v2; _2++) {
            b2[t5._index[_2]] = t5._values[_2];
          }
          for (var M2 = n4; M2 <= s4; M2++) {
            m2(M2 in b2 ? b2[M2] : 0, M2 - n4, y2 - a3);
          }
        }
      }
      return p2.push(c3.length), new i2({ values: c3, index: l3, ptr: p2, size: [s4 - n4 + 1, o3 - a3 + 1] });
    }(this, 0, this._size[0] - 1, 0, this._size[1] - 1, function(e3, r3, n4) {
      return t4(e3, [r3, n4], s3);
    }, n3);
  }, i2.prototype.forEach = function(t4, e3) {
    if (!this._values)
      throw new Error("Cannot invoke forEach on a Pattern only matrix");
    for (var r3 = this._size[0], n3 = this._size[1], i3 = 0; i3 < n3; i3++) {
      var s3 = this._ptr[i3], a3 = this._ptr[i3 + 1];
      if (e3)
        for (var o3 = s3; o3 < a3; o3++) {
          var u3 = this._index[o3];
          t4(this._values[o3], [u3, i3], this);
        }
      else {
        for (var h2 = {}, c3 = s3; c3 < a3; c3++) {
          h2[this._index[c3]] = this._values[c3];
        }
        for (var l3 = 0; l3 < r3; l3++) {
          t4(l3 in h2 ? h2[l3] : 0, [l3, i3], this);
        }
      }
    }
  }, i2.prototype.toArray = function() {
    return l2(this._values, this._index, this._ptr, this._size, true);
  }, i2.prototype.valueOf = function() {
    return l2(this._values, this._index, this._ptr, this._size, false);
  }, i2.prototype.format = function(t4) {
    for (var e3 = this._size[0], r3 = this._size[1], n3 = this.density(), i3 = "Sparse Matrix [" + Kr(e3, t4) + " x " + Kr(r3, t4) + "] density: " + Kr(n3, t4) + "\n", s3 = 0; s3 < r3; s3++)
      for (var a3 = this._ptr[s3], o3 = this._ptr[s3 + 1], u3 = a3; u3 < o3; u3++) {
        i3 += "\n    (" + Kr(this._index[u3], t4) + ", " + Kr(s3, t4) + ") ==> " + (this._values ? Kr(this._values[u3], t4) : "X");
      }
    return i3;
  }, i2.prototype.toString = function() {
    return Kr(this.toArray());
  }, i2.prototype.toJSON = function() {
    return { mathjs: "SparseMatrix", values: this._values, index: this._index, ptr: this._ptr, size: this._size, datatype: this._datatype };
  }, i2.prototype.diagonal = function(t4) {
    if (t4) {
      if (Fe(t4) && (t4 = t4.toNumber()), !Be(t4) || !Ur(t4))
        throw new TypeError("The parameter k must be an integer number");
    } else
      t4 = 0;
    var e3 = t4 > 0 ? t4 : 0, r3 = t4 < 0 ? -t4 : 0, n3 = this._size[0], s3 = this._size[1], a3 = Math.min(n3 - r3, s3 - e3), o3 = [], u3 = [], h2 = [];
    h2[0] = 0;
    for (var c3 = e3; c3 < s3 && o3.length < a3; c3++)
      for (var l3 = this._ptr[c3], p2 = this._ptr[c3 + 1], f2 = l3; f2 < p2; f2++) {
        var d = this._index[f2];
        if (d === c3 - e3 + r3) {
          o3.push(this._values[f2]), u3[o3.length - 1] = d - r3;
          break;
        }
      }
    return h2.push(o3.length), new i2({ values: o3, index: u3, ptr: h2, size: [a3, 1] });
  }, i2.fromJSON = function(t4) {
    return new i2(t4);
  }, i2.diagonal = function(t4, n3, s3, a3, o3) {
    if (!He(t4))
      throw new TypeError("Array expected, size parameter");
    if (t4.length !== 2)
      throw new Error("Only two dimensions matrix are supported");
    if (t4 = t4.map(function(t5) {
      if (Fe(t5) && (t5 = t5.toNumber()), !Be(t5) || !Ur(t5) || t5 < 1)
        throw new Error("Size values must be positive integers");
      return t5;
    }), s3) {
      if (Fe(s3) && (s3 = s3.toNumber()), !Be(s3) || !Ur(s3))
        throw new TypeError("The parameter k must be an integer number");
    } else
      s3 = 0;
    var u3 = r2, h2 = 0;
    qe(o3) && (u3 = e2.find(r2, [o3, o3]) || r2, h2 = e2.convert(0, o3));
    var c3, l3 = s3 > 0 ? s3 : 0, p2 = s3 < 0 ? -s3 : 0, f2 = t4[0], d = t4[1], m2 = Math.min(f2 - p2, d - l3);
    if (He(n3)) {
      if (n3.length !== m2)
        throw new Error("Invalid value array length");
      c3 = function(t5) {
        return n3[t5];
      };
    } else if (Ve(n3)) {
      var y2 = n3.size();
      if (y2.length !== 1 || y2[0] !== m2)
        throw new Error("Invalid matrix length");
      c3 = function(t5) {
        return n3.get([t5]);
      };
    } else
      c3 = function() {
        return n3;
      };
    for (var g2 = [], v2 = [], x2 = [], w2 = 0; w2 < d; w2++) {
      x2.push(g2.length);
      var b2 = w2 - l3;
      if (b2 >= 0 && b2 < m2) {
        var _2 = c3(b2);
        u3(_2, h2) || (v2.push(b2 + p2), g2.push(_2));
      }
    }
    return x2.push(g2.length), new i2({ values: g2, index: v2, ptr: x2, size: [f2, d] });
  }, i2.prototype.swapRows = function(t4, e3) {
    if (!(Be(t4) && Ur(t4) && Be(e3) && Ur(e3)))
      throw new Error("Row index must be positive integers");
    if (this._size.length !== 2)
      throw new Error("Only two dimensional matrix is supported");
    return hn(t4, this._size[0]), hn(e3, this._size[0]), i2._swapRows(t4, e3, this._size[1], this._values, this._index, this._ptr), this;
  }, i2._forEachRow = function(t4, e3, r3, n3, i3) {
    for (var s3 = n3[t4], a3 = n3[t4 + 1], o3 = s3; o3 < a3; o3++)
      i3(r3[o3], e3[o3]);
  }, i2._swapRows = function(t4, e3, r3, n3, i3, s3) {
    for (var a3 = 0; a3 < r3; a3++) {
      var o3 = s3[a3], h2 = s3[a3 + 1], c3 = u2(t4, o3, h2, i3), l3 = u2(e3, o3, h2, i3);
      if (c3 < h2 && l3 < h2 && i3[c3] === t4 && i3[l3] === e3) {
        if (n3) {
          var p2 = n3[c3];
          n3[c3] = n3[l3], n3[l3] = p2;
        }
      } else if (c3 < h2 && i3[c3] === t4 && (l3 >= h2 || i3[l3] !== e3)) {
        var f2 = n3 ? n3[c3] : void 0;
        i3.splice(l3, 0, e3), n3 && n3.splice(l3, 0, f2), i3.splice(l3 <= c3 ? c3 + 1 : c3, 1), n3 && n3.splice(l3 <= c3 ? c3 + 1 : c3, 1);
      } else if (l3 < h2 && i3[l3] === e3 && (c3 >= h2 || i3[c3] !== t4)) {
        var d = n3 ? n3[l3] : void 0;
        i3.splice(c3, 0, t4), n3 && n3.splice(c3, 0, d), i3.splice(c3 <= l3 ? l3 + 1 : l3, 1), n3 && n3.splice(c3 <= l3 ? l3 + 1 : l3, 1);
      }
    }
  }, i2;
}, { isClass: true }), Cs = wn("number", ["typed"], (t3) => {
  var { typed: e2 } = t3, r2 = e2("number", { "": function() {
    return 0;
  }, number: function(t4) {
    return t4;
  }, string: function(t4) {
    if (t4 === "NaN")
      return NaN;
    var e3 = Number(t4);
    if (isNaN(e3))
      throw new SyntaxError('String "' + t4 + '" is no valid number');
    if (["0b", "0o", "0x"].includes(t4.substring(0, 2))) {
      if (e3 > 2 ** 32 - 1)
        throw new SyntaxError('String "'.concat(t4, '" is out of range'));
      2147483648 & e3 && (e3 = -1 * ~(e3 - 1));
    }
    return e3;
  }, BigNumber: function(t4) {
    return t4.toNumber();
  }, Fraction: function(t4) {
    return t4.valueOf();
  }, Unit: function(t4) {
    throw new Error("Second argument with valueless unit expected");
  }, null: function(t4) {
    return 0;
  }, "Unit, string | Unit": function(t4, e3) {
    return t4.toNumber(e3);
  }, "Array | Matrix": function(t4) {
    return ds(t4, this);
  } });
  return r2.fromJSON = function(t4) {
    return parseFloat(t4.value);
  }, r2;
}), As = wn("bignumber", ["typed", "BigNumber"], (t3) => {
  var { typed: e2, BigNumber: r2 } = t3;
  return e2("bignumber", { "": function() {
    return new r2(0);
  }, number: function(t4) {
    return new r2(t4 + "");
  }, string: function(t4) {
    return new r2(t4);
  }, BigNumber: function(t4) {
    return t4;
  }, Fraction: function(t4) {
    return new r2(t4.n).div(t4.d).times(t4.s);
  }, null: function(t4) {
    return new r2(0);
  }, "Array | Matrix": function(t4) {
    return ds(t4, this);
  } });
}), Rs = wn("fraction", ["typed", "Fraction"], (t3) => {
  var { typed: e2, Fraction: r2 } = t3;
  return e2("fraction", { number: function(t4) {
    if (!isFinite(t4) || isNaN(t4))
      throw new Error(t4 + " cannot be represented as a fraction");
    return new r2(t4);
  }, string: function(t4) {
    return new r2(t4);
  }, "number, number": function(t4, e3) {
    return new r2(t4, e3);
  }, null: function(t4) {
    return new r2(0);
  }, BigNumber: function(t4) {
    return new r2(t4.toString());
  }, Fraction: function(t4) {
    return t4;
  }, Object: function(t4) {
    return new r2(t4);
  }, "Array | Matrix": function(t4) {
    return ds(t4, this);
  } });
}), Ds = wn("matrix", ["typed", "Matrix", "DenseMatrix", "SparseMatrix"], (t3) => {
  var { typed: e2, Matrix: r2, DenseMatrix: n2, SparseMatrix: i2 } = t3;
  return e2("matrix", { "": function() {
    return s2([]);
  }, string: function(t4) {
    return s2([], t4);
  }, "string, string": function(t4, e3) {
    return s2([], t4, e3);
  }, Array: function(t4) {
    return s2(t4);
  }, Matrix: function(t4) {
    return s2(t4, t4.storage());
  }, "Array | Matrix, string": s2, "Array | Matrix, string, string": s2 });
  function s2(t4, e3, r3) {
    if (e3 === "dense" || e3 === "default" || e3 === void 0)
      return new n2(t4, r3);
    if (e3 === "sparse")
      return new i2(t4, r3);
    throw new TypeError("Unknown matrix type " + JSON.stringify(e3) + ".");
  }
}), ks = wn("unaryMinus", ["typed"], (t3) => {
  var { typed: e2 } = t3;
  return e2("unaryMinus", { number: ws, Complex: function(t4) {
    return t4.neg();
  }, BigNumber: function(t4) {
    return t4.neg();
  }, Fraction: function(t4) {
    return t4.neg();
  }, Unit: function(t4) {
    var e3 = t4.clone();
    return e3.value = this(t4.value), e3;
  }, "Array | Matrix": function(t4) {
    return ds(t4, this);
  } });
}), Is = wn("abs", ["typed"], (t3) => {
  var { typed: e2 } = t3;
  return e2("abs", { number: gs, Complex: function(t4) {
    return t4.abs();
  }, BigNumber: function(t4) {
    return t4.abs();
  }, Fraction: function(t4) {
    return t4.abs();
  }, "Array | Matrix": function(t4) {
    return ds(t4, this);
  }, Unit: function(t4) {
    return t4.abs();
  } });
}), Ls = wn("addScalar", ["typed"], (t3) => {
  var { typed: e2 } = t3;
  return e2("addScalar", { "number, number": vs, "Complex, Complex": function(t4, e3) {
    return t4.add(e3);
  }, "BigNumber, BigNumber": function(t4, e3) {
    return t4.plus(e3);
  }, "Fraction, Fraction": function(t4, e3) {
    return t4.add(e3);
  }, "Unit, Unit": function(t4, e3) {
    if (t4.value === null || t4.value === void 0)
      throw new Error("Parameter x contains a unit with undefined value");
    if (e3.value === null || e3.value === void 0)
      throw new Error("Parameter y contains a unit with undefined value");
    if (!t4.equalBase(e3))
      throw new Error("Units do not match");
    var r2 = t4.clone();
    return r2.value = this(r2.value, e3.value), r2.fixPrefix = false, r2;
  } });
}), Bs = wn("algorithm11", ["typed", "equalScalar"], (t3) => {
  var { typed: e2, equalScalar: r2 } = t3;
  return function(t4, n2, i2, s2) {
    var a2 = t4._values, o2 = t4._index, u2 = t4._ptr, h = t4._size, c2 = t4._datatype;
    if (!a2)
      throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");
    var l2, p2 = h[0], f2 = h[1], d = r2, m2 = 0, y2 = i2;
    typeof c2 == "string" && (l2 = c2, d = e2.find(r2, [l2, l2]), m2 = e2.convert(0, l2), n2 = e2.convert(n2, l2), y2 = e2.find(i2, [l2, l2]));
    for (var g2 = [], v2 = [], x2 = [], w2 = 0; w2 < f2; w2++) {
      x2[w2] = v2.length;
      for (var b2 = u2[w2], _2 = u2[w2 + 1], M2 = b2; M2 < _2; M2++) {
        var N2 = o2[M2], E2 = s2 ? y2(n2, a2[M2]) : y2(a2[M2], n2);
        d(E2, m2) || (v2.push(N2), g2.push(E2));
      }
    }
    return x2[f2] = v2.length, t4.createSparseMatrix({ values: g2, index: v2, ptr: x2, size: [p2, f2], datatype: l2 });
  };
}), Fs = wn("algorithm14", ["typed"], (t3) => {
  var { typed: e2 } = t3;
  return function(t4, n2, i2, s2) {
    var a2, o2 = t4._data, u2 = t4._size, h = t4._datatype, c2 = i2;
    typeof h == "string" && (a2 = h, n2 = e2.convert(n2, a2), c2 = e2.find(i2, [a2, a2]));
    var l2 = u2.length > 0 ? r2(c2, 0, u2, u2[0], o2, n2, s2) : [];
    return t4.createDenseMatrix({ data: l2, size: _r(u2), datatype: a2 });
  };
  function r2(t4, e3, n2, i2, s2, a2, o2) {
    var u2 = [];
    if (e3 === n2.length - 1)
      for (var h = 0; h < i2; h++)
        u2[h] = o2 ? t4(a2, s2[h]) : t4(s2[h], a2);
    else
      for (var c2 = 0; c2 < i2; c2++)
        u2[c2] = r2(t4, e3 + 1, n2, n2[e3 + 1], s2[c2], a2, o2);
    return u2;
  }
}), Ps = wn("ceil", ["typed", "config", "round", "matrix", "equalScalar"], (t3) => {
  var { typed: e2, config: r2, round: n2, matrix: i2, equalScalar: s2 } = t3, a2 = Bs({ typed: e2, equalScalar: s2 }), o2 = Fs({ typed: e2 });
  return e2("ceil", { number: function(t4) {
    return Zr(t4, n2(t4), r2.epsilon) ? n2(t4) : bs(t4);
  }, "number, number": function(t4, e3) {
    if (Zr(t4, n2(t4, e3), r2.epsilon))
      return n2(t4, e3);
    var [i3, s3] = "".concat(t4, "e").split("e"), a3 = Math.ceil(Number("".concat(i3, "e").concat(Number(s3) + e3)));
    return [i3, s3] = "".concat(a3, "e").split("e"), Number("".concat(i3, "e").concat(Number(s3) - e3));
  }, Complex: function(t4) {
    return t4.ceil();
  }, "Complex, number": function(t4, e3) {
    return t4.ceil(e3);
  }, BigNumber: function(t4) {
    return Ss(t4, n2(t4), r2.epsilon) ? n2(t4) : t4.ceil();
  }, "BigNumber, BigNumber": function(t4, e3) {
    return Ss(t4, n2(t4, e3), r2.epsilon) ? n2(t4, e3) : t4.toDecimalPlaces(e3.toNumber(), rs.ROUND_CEIL);
  }, Fraction: function(t4) {
    return t4.ceil();
  }, "Fraction, number": function(t4, e3) {
    return t4.ceil(e3);
  }, "Array | Matrix": function(t4) {
    return ds(t4, this);
  }, "Array | Matrix, number": function(t4, e3) {
    return ds(t4, (t5) => this(t5, e3));
  }, "SparseMatrix, number | BigNumber": function(t4, e3) {
    return a2(t4, e3, this, false);
  }, "DenseMatrix, number | BigNumber": function(t4, e3) {
    return o2(t4, e3, this, false);
  }, "number | Complex | BigNumber, Array": function(t4, e3) {
    return o2(i2(e3), t4, this, true).valueOf();
  } });
}), Us = wn("fix", ["typed", "Complex", "matrix", "ceil", "floor"], (t3) => {
  var { typed: e2, Complex: r2, matrix: n2, ceil: i2, floor: s2 } = t3, a2 = Fs({ typed: e2 });
  return e2("fix", { number: function(t4) {
    return t4 > 0 ? s2(t4) : i2(t4);
  }, "number, number | BigNumber": function(t4, e3) {
    return t4 > 0 ? s2(t4, e3) : i2(t4, e3);
  }, Complex: function(t4) {
    return new r2(t4.re > 0 ? Math.floor(t4.re) : Math.ceil(t4.re), t4.im > 0 ? Math.floor(t4.im) : Math.ceil(t4.im));
  }, "Complex, number | BigNumber": function(t4, e3) {
    return new r2(t4.re > 0 ? s2(t4.re, e3) : i2(t4.re, e3), t4.im > 0 ? s2(t4.im, e3) : i2(t4.im, e3));
  }, BigNumber: function(t4) {
    return t4.isNegative() ? i2(t4) : s2(t4);
  }, "BigNumber, number | BigNumber": function(t4, e3) {
    return t4.isNegative() ? i2(t4, e3) : s2(t4, e3);
  }, Fraction: function(t4) {
    return t4.s < 0 ? t4.ceil() : t4.floor();
  }, "Fraction, number | BigNumber": function(t4, e3) {
    return t4.s < 0 ? t4.ceil(e3) : t4.floor(e3);
  }, "Array | Matrix": function(t4) {
    return ds(t4, this);
  }, "Array | Matrix, number | BigNumber": function(t4, e3) {
    return ds(t4, (t5) => this(t5, e3));
  }, "number | Complex | BigNumber, Array": function(t4, e3) {
    return a2(n2(e3), t4, this, true).valueOf();
  } });
}), js = wn("floor", ["typed", "config", "round", "matrix", "equalScalar"], (t3) => {
  var { typed: e2, config: r2, round: n2, matrix: i2, equalScalar: s2 } = t3, a2 = Bs({ typed: e2, equalScalar: s2 }), o2 = Fs({ typed: e2 });
  return e2("floor", { number: function(t4) {
    return Zr(t4, n2(t4), r2.epsilon) ? n2(t4) : Math.floor(t4);
  }, "number, number": function(t4, e3) {
    if (Zr(t4, n2(t4, e3), r2.epsilon))
      return n2(t4, e3);
    var [i3, s3] = "".concat(t4, "e").split("e"), a3 = Math.floor(Number("".concat(i3, "e").concat(Number(s3) + e3)));
    return [i3, s3] = "".concat(a3, "e").split("e"), Number("".concat(i3, "e").concat(Number(s3) - e3));
  }, Complex: function(t4) {
    return t4.floor();
  }, "Complex, number": function(t4, e3) {
    return t4.floor(e3);
  }, BigNumber: function(t4) {
    return Ss(t4, n2(t4), r2.epsilon) ? n2(t4) : t4.floor();
  }, "BigNumber, BigNumber": function(t4, e3) {
    return Ss(t4, n2(t4, e3), r2.epsilon) ? n2(t4, e3) : t4.toDecimalPlaces(e3.toNumber(), rs.ROUND_FLOOR);
  }, Fraction: function(t4) {
    return t4.floor();
  }, "Fraction, number": function(t4, e3) {
    return t4.floor(e3);
  }, "Array | Matrix": function(t4) {
    return ds(t4, this);
  }, "Array | Matrix, number": function(t4, e3) {
    return ds(t4, (t5) => this(t5, e3));
  }, "SparseMatrix, number | BigNumber": function(t4, e3) {
    return a2(t4, e3, this, false);
  }, "DenseMatrix, number | BigNumber": function(t4, e3) {
    return o2(t4, e3, this, false);
  }, "number | Complex | BigNumber, Array": function(t4, e3) {
    return o2(i2(e3), t4, this, true).valueOf();
  } });
}), qs = wn("algorithm01", ["typed"], (t3) => {
  var { typed: e2 } = t3;
  return function(t4, r2, n2, i2) {
    var s2 = t4._data, a2 = t4._size, o2 = t4._datatype, u2 = r2._values, h = r2._index, c2 = r2._ptr, l2 = r2._size, p2 = r2._datatype;
    if (a2.length !== l2.length)
      throw new nn(a2.length, l2.length);
    if (a2[0] !== l2[0] || a2[1] !== l2[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + a2 + ") must match Matrix B (" + l2 + ")");
    if (!u2)
      throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");
    var f2, d, m2 = a2[0], y2 = a2[1], g2 = typeof o2 == "string" && o2 === p2 ? o2 : void 0, v2 = g2 ? e2.find(n2, [g2, g2]) : n2, x2 = [];
    for (f2 = 0; f2 < m2; f2++)
      x2[f2] = [];
    var w2 = [], b2 = [];
    for (d = 0; d < y2; d++) {
      for (var _2 = d + 1, M2 = c2[d], N2 = c2[d + 1], E2 = M2; E2 < N2; E2++)
        w2[f2 = h[E2]] = i2 ? v2(u2[E2], s2[f2][d]) : v2(s2[f2][d], u2[E2]), b2[f2] = _2;
      for (f2 = 0; f2 < m2; f2++)
        b2[f2] === _2 ? x2[f2][d] = w2[f2] : x2[f2][d] = s2[f2][d];
    }
    return t4.createDenseMatrix({ data: x2, size: [m2, y2], datatype: g2 });
  };
}), Hs = wn("algorithm04", ["typed", "equalScalar"], (t3) => {
  var { typed: e2, equalScalar: r2 } = t3;
  return function(t4, n2, i2) {
    var s2 = t4._values, a2 = t4._index, o2 = t4._ptr, u2 = t4._size, h = t4._datatype, c2 = n2._values, l2 = n2._index, p2 = n2._ptr, f2 = n2._size, d = n2._datatype;
    if (u2.length !== f2.length)
      throw new nn(u2.length, f2.length);
    if (u2[0] !== f2[0] || u2[1] !== f2[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + u2 + ") must match Matrix B (" + f2 + ")");
    var m2, y2 = u2[0], g2 = u2[1], v2 = r2, x2 = 0, w2 = i2;
    typeof h == "string" && h === d && (m2 = h, v2 = e2.find(r2, [m2, m2]), x2 = e2.convert(0, m2), w2 = e2.find(i2, [m2, m2]));
    var b2, _2, M2, N2, E2, S2 = s2 && c2 ? [] : void 0, T2 = [], O2 = [], z2 = s2 && c2 ? [] : void 0, C2 = s2 && c2 ? [] : void 0, A2 = [], R2 = [];
    for (_2 = 0; _2 < g2; _2++) {
      O2[_2] = T2.length;
      var D2 = _2 + 1;
      for (N2 = o2[_2], E2 = o2[_2 + 1], M2 = N2; M2 < E2; M2++)
        b2 = a2[M2], T2.push(b2), A2[b2] = D2, z2 && (z2[b2] = s2[M2]);
      for (N2 = p2[_2], E2 = p2[_2 + 1], M2 = N2; M2 < E2; M2++)
        if (A2[b2 = l2[M2]] === D2) {
          if (z2) {
            var k2 = w2(z2[b2], c2[M2]);
            v2(k2, x2) ? A2[b2] = null : z2[b2] = k2;
          }
        } else
          T2.push(b2), R2[b2] = D2, C2 && (C2[b2] = c2[M2]);
      if (z2 && C2)
        for (M2 = O2[_2]; M2 < T2.length; )
          A2[b2 = T2[M2]] === D2 ? (S2[M2] = z2[b2], M2++) : R2[b2] === D2 ? (S2[M2] = C2[b2], M2++) : T2.splice(M2, 1);
    }
    return O2[g2] = T2.length, t4.createSparseMatrix({ values: S2, index: T2, ptr: O2, size: [y2, g2], datatype: m2 });
  };
}), Vs = wn("algorithm10", ["typed", "DenseMatrix"], (t3) => {
  var { typed: e2, DenseMatrix: r2 } = t3;
  return function(t4, n2, i2, s2) {
    var a2 = t4._values, o2 = t4._index, u2 = t4._ptr, h = t4._size, c2 = t4._datatype;
    if (!a2)
      throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");
    var l2, p2 = h[0], f2 = h[1], d = i2;
    typeof c2 == "string" && (l2 = c2, n2 = e2.convert(n2, l2), d = e2.find(i2, [l2, l2]));
    for (var m2 = [], y2 = [], g2 = [], v2 = 0; v2 < f2; v2++) {
      for (var x2 = v2 + 1, w2 = u2[v2], b2 = u2[v2 + 1], _2 = w2; _2 < b2; _2++) {
        var M2 = o2[_2];
        y2[M2] = a2[_2], g2[M2] = x2;
      }
      for (var N2 = 0; N2 < p2; N2++)
        v2 === 0 && (m2[N2] = []), g2[N2] === x2 ? m2[N2][v2] = s2 ? d(n2, y2[N2]) : d(y2[N2], n2) : m2[N2][v2] = n2;
    }
    return new r2({ data: m2, size: [p2, f2], datatype: l2 });
  };
}), $s = wn("algorithm13", ["typed"], (t3) => {
  var { typed: e2 } = t3;
  return function(t4, n2, i2) {
    var s2, a2 = t4._data, o2 = t4._size, u2 = t4._datatype, h = n2._data, c2 = n2._size, l2 = n2._datatype, p2 = [];
    if (o2.length !== c2.length)
      throw new nn(o2.length, c2.length);
    for (var f2 = 0; f2 < o2.length; f2++) {
      if (o2[f2] !== c2[f2])
        throw new RangeError("Dimension mismatch. Matrix A (" + o2 + ") must match Matrix B (" + c2 + ")");
      p2[f2] = o2[f2];
    }
    var d = i2;
    typeof u2 == "string" && u2 === l2 && (s2 = u2, d = e2.find(i2, [s2, s2]));
    var m2 = p2.length > 0 ? r2(d, 0, p2, p2[0], a2, h) : [];
    return t4.createDenseMatrix({ data: m2, size: p2, datatype: s2 });
  };
  function r2(t4, e3, n2, i2, s2, a2) {
    var o2 = [];
    if (e3 === n2.length - 1)
      for (var u2 = 0; u2 < i2; u2++)
        o2[u2] = t4(s2[u2], a2[u2]);
    else
      for (var h = 0; h < i2; h++)
        o2[h] = r2(t4, e3 + 1, n2, n2[e3 + 1], s2[h], a2[h]);
    return o2;
  }
}), Gs = wn("algorithm02", ["typed", "equalScalar"], (t3) => {
  var { typed: e2, equalScalar: r2 } = t3;
  return function(t4, n2, i2, s2) {
    var a2 = t4._data, o2 = t4._size, u2 = t4._datatype, h = n2._values, c2 = n2._index, l2 = n2._ptr, p2 = n2._size, f2 = n2._datatype;
    if (o2.length !== p2.length)
      throw new nn(o2.length, p2.length);
    if (o2[0] !== p2[0] || o2[1] !== p2[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + o2 + ") must match Matrix B (" + p2 + ")");
    if (!h)
      throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");
    var d, m2 = o2[0], y2 = o2[1], g2 = r2, v2 = 0, x2 = i2;
    typeof u2 == "string" && u2 === f2 && (d = u2, g2 = e2.find(r2, [d, d]), v2 = e2.convert(0, d), x2 = e2.find(i2, [d, d]));
    for (var w2 = [], b2 = [], _2 = [], M2 = 0; M2 < y2; M2++) {
      _2[M2] = b2.length;
      for (var N2 = l2[M2], E2 = l2[M2 + 1], S2 = N2; S2 < E2; S2++) {
        var T2 = c2[S2], O2 = s2 ? x2(h[S2], a2[T2][M2]) : x2(a2[T2][M2], h[S2]);
        g2(O2, v2) || (b2.push(T2), w2.push(O2));
      }
    }
    return _2[y2] = b2.length, n2.createSparseMatrix({ values: w2, index: b2, ptr: _2, size: [m2, y2], datatype: d });
  };
}), Ws = wn("algorithm03", ["typed"], (t3) => {
  var { typed: e2 } = t3;
  return function(t4, r2, n2, i2) {
    var s2 = t4._data, a2 = t4._size, o2 = t4._datatype, u2 = r2._values, h = r2._index, c2 = r2._ptr, l2 = r2._size, p2 = r2._datatype;
    if (a2.length !== l2.length)
      throw new nn(a2.length, l2.length);
    if (a2[0] !== l2[0] || a2[1] !== l2[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + a2 + ") must match Matrix B (" + l2 + ")");
    if (!u2)
      throw new Error("Cannot perform operation on Dense Matrix and Pattern Sparse Matrix");
    var f2, d = a2[0], m2 = a2[1], y2 = 0, g2 = n2;
    typeof o2 == "string" && o2 === p2 && (f2 = o2, y2 = e2.convert(0, f2), g2 = e2.find(n2, [f2, f2]));
    for (var v2 = [], x2 = 0; x2 < d; x2++)
      v2[x2] = [];
    for (var w2 = [], b2 = [], _2 = 0; _2 < m2; _2++) {
      for (var M2 = _2 + 1, N2 = c2[_2], E2 = c2[_2 + 1], S2 = N2; S2 < E2; S2++) {
        var T2 = h[S2];
        w2[T2] = i2 ? g2(u2[S2], s2[T2][_2]) : g2(s2[T2][_2], u2[S2]), b2[T2] = M2;
      }
      for (var O2 = 0; O2 < d; O2++)
        b2[O2] === M2 ? v2[O2][_2] = w2[O2] : v2[O2][_2] = i2 ? g2(y2, s2[O2][_2]) : g2(s2[O2][_2], y2);
    }
    return t4.createDenseMatrix({ data: v2, size: [d, m2], datatype: f2 });
  };
}), Ys = wn("algorithm05", ["typed", "equalScalar"], (t3) => {
  var { typed: e2, equalScalar: r2 } = t3;
  return function(t4, n2, i2) {
    var s2 = t4._values, a2 = t4._index, o2 = t4._ptr, u2 = t4._size, h = t4._datatype, c2 = n2._values, l2 = n2._index, p2 = n2._ptr, f2 = n2._size, d = n2._datatype;
    if (u2.length !== f2.length)
      throw new nn(u2.length, f2.length);
    if (u2[0] !== f2[0] || u2[1] !== f2[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + u2 + ") must match Matrix B (" + f2 + ")");
    var m2, y2 = u2[0], g2 = u2[1], v2 = r2, x2 = 0, w2 = i2;
    typeof h == "string" && h === d && (m2 = h, v2 = e2.find(r2, [m2, m2]), x2 = e2.convert(0, m2), w2 = e2.find(i2, [m2, m2]));
    var b2, _2, M2, N2, E2 = s2 && c2 ? [] : void 0, S2 = [], T2 = [], O2 = E2 ? [] : void 0, z2 = E2 ? [] : void 0, C2 = [], A2 = [];
    for (_2 = 0; _2 < g2; _2++) {
      T2[_2] = S2.length;
      var R2 = _2 + 1;
      for (M2 = o2[_2], N2 = o2[_2 + 1]; M2 < N2; M2++)
        b2 = a2[M2], S2.push(b2), C2[b2] = R2, O2 && (O2[b2] = s2[M2]);
      for (M2 = p2[_2], N2 = p2[_2 + 1]; M2 < N2; M2++)
        C2[b2 = l2[M2]] !== R2 && S2.push(b2), A2[b2] = R2, z2 && (z2[b2] = c2[M2]);
      if (E2)
        for (M2 = T2[_2]; M2 < S2.length; ) {
          var D2 = C2[b2 = S2[M2]], k2 = A2[b2];
          if (D2 === R2 || k2 === R2) {
            var I2 = w2(D2 === R2 ? O2[b2] : x2, k2 === R2 ? z2[b2] : x2);
            v2(I2, x2) ? S2.splice(M2, 1) : (E2.push(I2), M2++);
          }
        }
    }
    return T2[g2] = S2.length, t4.createSparseMatrix({ values: E2, index: S2, ptr: T2, size: [y2, g2], datatype: m2 });
  };
}), Zs = wn("algorithm12", ["typed", "DenseMatrix"], (t3) => {
  var { typed: e2, DenseMatrix: r2 } = t3;
  return function(t4, n2, i2, s2) {
    var a2 = t4._values, o2 = t4._index, u2 = t4._ptr, h = t4._size, c2 = t4._datatype;
    if (!a2)
      throw new Error("Cannot perform operation on Pattern Sparse Matrix and Scalar value");
    var l2, p2 = h[0], f2 = h[1], d = i2;
    typeof c2 == "string" && (l2 = c2, n2 = e2.convert(n2, l2), d = e2.find(i2, [l2, l2]));
    for (var m2 = [], y2 = [], g2 = [], v2 = 0; v2 < f2; v2++) {
      for (var x2 = v2 + 1, w2 = u2[v2], b2 = u2[v2 + 1], _2 = w2; _2 < b2; _2++) {
        var M2 = o2[_2];
        y2[M2] = a2[_2], g2[M2] = x2;
      }
      for (var N2 = 0; N2 < p2; N2++)
        v2 === 0 && (m2[N2] = []), g2[N2] === x2 ? m2[N2][v2] = s2 ? d(n2, y2[N2]) : d(y2[N2], n2) : m2[N2][v2] = s2 ? d(n2, 0) : d(0, n2);
    }
    return new r2({ data: m2, size: [p2, f2], datatype: l2 });
  };
}), Xs = wn("mod", ["typed", "matrix", "equalScalar", "DenseMatrix"], (t3) => {
  var { typed: e2, matrix: r2, equalScalar: n2, DenseMatrix: i2 } = t3, s2 = Gs({ typed: e2, equalScalar: n2 }), a2 = Ws({ typed: e2 }), o2 = Ys({ typed: e2, equalScalar: n2 }), u2 = Bs({ typed: e2, equalScalar: n2 }), h = Zs({ typed: e2, DenseMatrix: i2 }), c2 = $s({ typed: e2 }), l2 = Fs({ typed: e2 });
  return e2("mod", { "number, number": _s, "BigNumber, BigNumber": function(t4, e3) {
    if (e3.isNeg())
      throw new Error("Cannot calculate mod for a negative divisor");
    return e3.isZero() ? t4 : t4.mod(e3);
  }, "Fraction, Fraction": function(t4, e3) {
    if (e3.compare(0) < 0)
      throw new Error("Cannot calculate mod for a negative divisor");
    return t4.compare(0) >= 0 ? t4.mod(e3) : t4.mod(e3).add(e3).mod(e3);
  }, "SparseMatrix, SparseMatrix": function(t4, e3) {
    return o2(t4, e3, this, false);
  }, "SparseMatrix, DenseMatrix": function(t4, e3) {
    return s2(e3, t4, this, true);
  }, "DenseMatrix, SparseMatrix": function(t4, e3) {
    return a2(t4, e3, this, false);
  }, "DenseMatrix, DenseMatrix": function(t4, e3) {
    return c2(t4, e3, this);
  }, "Array, Array": function(t4, e3) {
    return this(r2(t4), r2(e3)).valueOf();
  }, "Array, Matrix": function(t4, e3) {
    return this(r2(t4), e3);
  }, "Matrix, Array": function(t4, e3) {
    return this(t4, r2(e3));
  }, "SparseMatrix, any": function(t4, e3) {
    return u2(t4, e3, this, false);
  }, "DenseMatrix, any": function(t4, e3) {
    return l2(t4, e3, this, false);
  }, "any, SparseMatrix": function(t4, e3) {
    return h(e3, t4, this, true);
  }, "any, DenseMatrix": function(t4, e3) {
    return l2(e3, t4, this, true);
  }, "Array, any": function(t4, e3) {
    return l2(r2(t4), e3, this, false).valueOf();
  }, "any, Array": function(t4, e3) {
    return l2(r2(e3), t4, this, true).valueOf();
  } });
}), Js = wn("multiplyScalar", ["typed"], (t3) => {
  var { typed: e2 } = t3;
  return e2("multiplyScalar", { "number, number": xs, "Complex, Complex": function(t4, e3) {
    return t4.mul(e3);
  }, "BigNumber, BigNumber": function(t4, e3) {
    return t4.times(e3);
  }, "Fraction, Fraction": function(t4, e3) {
    return t4.mul(e3);
  }, "number | Fraction | BigNumber | Complex, Unit": function(t4, e3) {
    var r2 = e3.clone();
    return r2.value = r2.value === null ? r2._normalize(t4) : this(r2.value, t4), r2;
  }, "Unit, number | Fraction | BigNumber | Complex": function(t4, e3) {
    var r2 = t4.clone();
    return r2.value = r2.value === null ? r2._normalize(e3) : this(r2.value, e3), r2;
  }, "Unit, Unit": function(t4, e3) {
    return t4.multiply(e3);
  } });
}), Qs = wn("multiply", ["typed", "matrix", "addScalar", "multiplyScalar", "equalScalar", "dot"], (t3) => {
  var { typed: e2, matrix: r2, addScalar: n2, multiplyScalar: i2, equalScalar: s2, dot: a2 } = t3, o2 = Bs({ typed: e2, equalScalar: s2 }), u2 = Fs({ typed: e2 });
  function h(t4, e3) {
    switch (t4.length) {
      case 1:
        switch (e3.length) {
          case 1:
            if (t4[0] !== e3[0])
              throw new RangeError("Dimension mismatch in multiplication. Vectors must have the same length");
            break;
          case 2:
            if (t4[0] !== e3[0])
              throw new RangeError("Dimension mismatch in multiplication. Vector length (" + t4[0] + ") must match Matrix rows (" + e3[0] + ")");
            break;
          default:
            throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix B has " + e3.length + " dimensions)");
        }
        break;
      case 2:
        switch (e3.length) {
          case 1:
            if (t4[1] !== e3[0])
              throw new RangeError("Dimension mismatch in multiplication. Matrix columns (" + t4[1] + ") must match Vector length (" + e3[0] + ")");
            break;
          case 2:
            if (t4[1] !== e3[0])
              throw new RangeError("Dimension mismatch in multiplication. Matrix A columns (" + t4[1] + ") must match Matrix B rows (" + e3[0] + ")");
            break;
          default:
            throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix B has " + e3.length + " dimensions)");
        }
        break;
      default:
        throw new Error("Can only multiply a 1 or 2 dimensional matrix (Matrix A has " + t4.length + " dimensions)");
    }
  }
  function c2(t4, r3) {
    if (r3.storage() !== "dense")
      throw new Error("Support for SparseMatrix not implemented");
    return function(t5, r4) {
      var s3, a3 = t5._data, o3 = t5._size, u3 = t5._datatype, h2 = r4._data, c3 = r4._size, l3 = r4._datatype, p3 = o3[0], f2 = c3[1], d = n2, m2 = i2;
      u3 && l3 && u3 === l3 && typeof u3 == "string" && (s3 = u3, d = e2.find(n2, [s3, s3]), m2 = e2.find(i2, [s3, s3]));
      for (var y2 = [], g2 = 0; g2 < f2; g2++) {
        for (var v2 = m2(a3[0], h2[0][g2]), x2 = 1; x2 < p3; x2++)
          v2 = d(v2, m2(a3[x2], h2[x2][g2]));
        y2[g2] = v2;
      }
      return t5.createDenseMatrix({ data: y2, size: [f2], datatype: s3 });
    }(t4, r3);
  }
  var l2 = e2("_multiplyMatrixVector", { "DenseMatrix, any": function(t4, r3) {
    var s3, a3 = t4._data, o3 = t4._size, u3 = t4._datatype, h2 = r3._data, c3 = r3._datatype, l3 = o3[0], p3 = o3[1], f2 = n2, d = i2;
    u3 && c3 && u3 === c3 && typeof u3 == "string" && (s3 = u3, f2 = e2.find(n2, [s3, s3]), d = e2.find(i2, [s3, s3]));
    for (var m2 = [], y2 = 0; y2 < l3; y2++) {
      for (var g2 = a3[y2], v2 = d(g2[0], h2[0]), x2 = 1; x2 < p3; x2++)
        v2 = f2(v2, d(g2[x2], h2[x2]));
      m2[y2] = v2;
    }
    return t4.createDenseMatrix({ data: m2, size: [l3], datatype: s3 });
  }, "SparseMatrix, any": function(t4, r3) {
    var a3 = t4._values, o3 = t4._index, u3 = t4._ptr, h2 = t4._datatype;
    if (!a3)
      throw new Error("Cannot multiply Pattern only Matrix times Dense Matrix");
    var c3, l3 = r3._data, p3 = r3._datatype, f2 = t4._size[0], d = r3._size[0], m2 = [], y2 = [], g2 = [], v2 = n2, x2 = i2, w2 = s2, b2 = 0;
    h2 && p3 && h2 === p3 && typeof h2 == "string" && (c3 = h2, v2 = e2.find(n2, [c3, c3]), x2 = e2.find(i2, [c3, c3]), w2 = e2.find(s2, [c3, c3]), b2 = e2.convert(0, c3));
    var _2 = [], M2 = [];
    g2[0] = 0;
    for (var N2 = 0; N2 < d; N2++) {
      var E2 = l3[N2];
      if (!w2(E2, b2))
        for (var S2 = u3[N2], T2 = u3[N2 + 1], O2 = S2; O2 < T2; O2++) {
          var z2 = o3[O2];
          M2[z2] ? _2[z2] = v2(_2[z2], x2(E2, a3[O2])) : (M2[z2] = true, y2.push(z2), _2[z2] = x2(E2, a3[O2]));
        }
    }
    for (var C2 = y2.length, A2 = 0; A2 < C2; A2++) {
      var R2 = y2[A2];
      m2[A2] = _2[R2];
    }
    return g2[1] = y2.length, t4.createSparseMatrix({ values: m2, index: y2, ptr: g2, size: [f2, 1], datatype: c3 });
  } }), p2 = e2("_multiplyMatrixMatrix", { "DenseMatrix, DenseMatrix": function(t4, r3) {
    var s3, a3 = t4._data, o3 = t4._size, u3 = t4._datatype, h2 = r3._data, c3 = r3._size, l3 = r3._datatype, p3 = o3[0], f2 = o3[1], d = c3[1], m2 = n2, y2 = i2;
    u3 && l3 && u3 === l3 && typeof u3 == "string" && (s3 = u3, m2 = e2.find(n2, [s3, s3]), y2 = e2.find(i2, [s3, s3]));
    for (var g2 = [], v2 = 0; v2 < p3; v2++) {
      var x2 = a3[v2];
      g2[v2] = [];
      for (var w2 = 0; w2 < d; w2++) {
        for (var b2 = y2(x2[0], h2[0][w2]), _2 = 1; _2 < f2; _2++)
          b2 = m2(b2, y2(x2[_2], h2[_2][w2]));
        g2[v2][w2] = b2;
      }
    }
    return t4.createDenseMatrix({ data: g2, size: [p3, d], datatype: s3 });
  }, "DenseMatrix, SparseMatrix": function(t4, r3) {
    var a3 = t4._data, o3 = t4._size, u3 = t4._datatype, h2 = r3._values, c3 = r3._index, l3 = r3._ptr, p3 = r3._size, f2 = r3._datatype;
    if (!h2)
      throw new Error("Cannot multiply Dense Matrix times Pattern only Matrix");
    var d, m2 = o3[0], y2 = p3[1], g2 = n2, v2 = i2, x2 = s2, w2 = 0;
    u3 && f2 && u3 === f2 && typeof u3 == "string" && (d = u3, g2 = e2.find(n2, [d, d]), v2 = e2.find(i2, [d, d]), x2 = e2.find(s2, [d, d]), w2 = e2.convert(0, d));
    for (var b2 = [], _2 = [], M2 = [], N2 = r3.createSparseMatrix({ values: b2, index: _2, ptr: M2, size: [m2, y2], datatype: d }), E2 = 0; E2 < y2; E2++) {
      M2[E2] = _2.length;
      var S2 = l3[E2], T2 = l3[E2 + 1];
      if (T2 > S2)
        for (var O2 = 0, z2 = 0; z2 < m2; z2++) {
          for (var C2 = z2 + 1, A2 = void 0, R2 = S2; R2 < T2; R2++) {
            var D2 = c3[R2];
            O2 !== C2 ? (A2 = v2(a3[z2][D2], h2[R2]), O2 = C2) : A2 = g2(A2, v2(a3[z2][D2], h2[R2]));
          }
          O2 !== C2 || x2(A2, w2) || (_2.push(z2), b2.push(A2));
        }
    }
    return M2[y2] = _2.length, N2;
  }, "SparseMatrix, DenseMatrix": function(t4, r3) {
    var a3 = t4._values, o3 = t4._index, u3 = t4._ptr, h2 = t4._datatype;
    if (!a3)
      throw new Error("Cannot multiply Pattern only Matrix times Dense Matrix");
    var c3, l3 = r3._data, p3 = r3._datatype, f2 = t4._size[0], d = r3._size[0], m2 = r3._size[1], y2 = n2, g2 = i2, v2 = s2, x2 = 0;
    h2 && p3 && h2 === p3 && typeof h2 == "string" && (c3 = h2, y2 = e2.find(n2, [c3, c3]), g2 = e2.find(i2, [c3, c3]), v2 = e2.find(s2, [c3, c3]), x2 = e2.convert(0, c3));
    for (var w2 = [], b2 = [], _2 = [], M2 = t4.createSparseMatrix({ values: w2, index: b2, ptr: _2, size: [f2, m2], datatype: c3 }), N2 = [], E2 = [], S2 = 0; S2 < m2; S2++) {
      _2[S2] = b2.length;
      for (var T2 = S2 + 1, O2 = 0; O2 < d; O2++) {
        var z2 = l3[O2][S2];
        if (!v2(z2, x2))
          for (var C2 = u3[O2], A2 = u3[O2 + 1], R2 = C2; R2 < A2; R2++) {
            var D2 = o3[R2];
            E2[D2] !== T2 ? (E2[D2] = T2, b2.push(D2), N2[D2] = g2(z2, a3[R2])) : N2[D2] = y2(N2[D2], g2(z2, a3[R2]));
          }
      }
      for (var k2 = _2[S2], I2 = b2.length, L2 = k2; L2 < I2; L2++) {
        var B2 = b2[L2];
        w2[L2] = N2[B2];
      }
    }
    return _2[m2] = b2.length, M2;
  }, "SparseMatrix, SparseMatrix": function(t4, r3) {
    var s3, a3 = t4._values, o3 = t4._index, u3 = t4._ptr, h2 = t4._datatype, c3 = r3._values, l3 = r3._index, p3 = r3._ptr, f2 = r3._datatype, d = t4._size[0], m2 = r3._size[1], y2 = a3 && c3, g2 = n2, v2 = i2;
    h2 && f2 && h2 === f2 && typeof h2 == "string" && (s3 = h2, g2 = e2.find(n2, [s3, s3]), v2 = e2.find(i2, [s3, s3]));
    for (var x2, w2, b2, _2, M2, N2, E2, S2, T2 = y2 ? [] : void 0, O2 = [], z2 = [], C2 = t4.createSparseMatrix({ values: T2, index: O2, ptr: z2, size: [d, m2], datatype: s3 }), A2 = y2 ? [] : void 0, R2 = [], D2 = 0; D2 < m2; D2++) {
      z2[D2] = O2.length;
      var k2 = D2 + 1;
      for (M2 = p3[D2], N2 = p3[D2 + 1], _2 = M2; _2 < N2; _2++)
        if (S2 = l3[_2], y2)
          for (w2 = u3[S2], b2 = u3[S2 + 1], x2 = w2; x2 < b2; x2++)
            E2 = o3[x2], R2[E2] !== k2 ? (R2[E2] = k2, O2.push(E2), A2[E2] = v2(c3[_2], a3[x2])) : A2[E2] = g2(A2[E2], v2(c3[_2], a3[x2]));
        else
          for (w2 = u3[S2], b2 = u3[S2 + 1], x2 = w2; x2 < b2; x2++)
            E2 = o3[x2], R2[E2] !== k2 && (R2[E2] = k2, O2.push(E2));
      if (y2)
        for (var I2 = z2[D2], L2 = O2.length, B2 = I2; B2 < L2; B2++) {
          var F2 = O2[B2];
          T2[B2] = A2[F2];
        }
    }
    return z2[m2] = O2.length, C2;
  } });
  return e2("multiply", Nr({ "Array, Array": function(t4, e3) {
    h(an(t4), an(e3));
    var n3 = this(r2(t4), r2(e3));
    return Ve(n3) ? n3.valueOf() : n3;
  }, "Matrix, Matrix": function(t4, e3) {
    var r3 = t4.size(), n3 = e3.size();
    return h(r3, n3), r3.length === 1 ? n3.length === 1 ? function(t5, e4, r4) {
      if (r4 === 0)
        throw new Error("Cannot multiply two empty vectors");
      return a2(t5, e4);
    }(t4, e3, r3[0]) : c2(t4, e3) : n3.length === 1 ? l2(t4, e3) : p2(t4, e3);
  }, "Matrix, Array": function(t4, e3) {
    return this(t4, r2(e3));
  }, "Array, Matrix": function(t4, e3) {
    return this(r2(t4, e3.storage()), e3);
  }, "SparseMatrix, any": function(t4, e3) {
    return o2(t4, e3, i2, false);
  }, "DenseMatrix, any": function(t4, e3) {
    return u2(t4, e3, i2, false);
  }, "any, SparseMatrix": function(t4, e3) {
    return o2(e3, t4, i2, true);
  }, "any, DenseMatrix": function(t4, e3) {
    return u2(e3, t4, i2, true);
  }, "Array, any": function(t4, e3) {
    return u2(r2(t4), e3, i2, false).valueOf();
  }, "any, Array": function(t4, e3) {
    return u2(r2(e3), t4, i2, true).valueOf();
  }, "any, any": i2, "any, any, ...any": function(t4, e3, r3) {
    for (var n3 = this(t4, e3), i3 = 0; i3 < r3.length; i3++)
      n3 = this(n3, r3[i3]);
    return n3;
  } }, i2.signatures));
}), Ks = wn("subtract", ["typed", "matrix", "equalScalar", "addScalar", "unaryMinus", "DenseMatrix"], (t3) => {
  var { typed: e2, matrix: r2, equalScalar: n2, addScalar: i2, unaryMinus: s2, DenseMatrix: a2 } = t3, o2 = qs({ typed: e2 }), u2 = Ws({ typed: e2 }), h = Ys({ typed: e2, equalScalar: n2 }), c2 = Vs({ typed: e2, DenseMatrix: a2 }), l2 = $s({ typed: e2 }), p2 = Fs({ typed: e2 });
  return e2("subtract", { "number, number": function(t4, e3) {
    return t4 - e3;
  }, "Complex, Complex": function(t4, e3) {
    return t4.sub(e3);
  }, "BigNumber, BigNumber": function(t4, e3) {
    return t4.minus(e3);
  }, "Fraction, Fraction": function(t4, e3) {
    return t4.sub(e3);
  }, "Unit, Unit": function(t4, e3) {
    if (t4.value === null)
      throw new Error("Parameter x contains a unit with undefined value");
    if (e3.value === null)
      throw new Error("Parameter y contains a unit with undefined value");
    if (!t4.equalBase(e3))
      throw new Error("Units do not match");
    var r3 = t4.clone();
    return r3.value = this(r3.value, e3.value), r3.fixPrefix = false, r3;
  }, "SparseMatrix, SparseMatrix": function(t4, e3) {
    return ta(t4, e3), h(t4, e3, this);
  }, "SparseMatrix, DenseMatrix": function(t4, e3) {
    return ta(t4, e3), u2(e3, t4, this, true);
  }, "DenseMatrix, SparseMatrix": function(t4, e3) {
    return ta(t4, e3), o2(t4, e3, this, false);
  }, "DenseMatrix, DenseMatrix": function(t4, e3) {
    return ta(t4, e3), l2(t4, e3, this);
  }, "Array, Array": function(t4, e3) {
    return this(r2(t4), r2(e3)).valueOf();
  }, "Array, Matrix": function(t4, e3) {
    return this(r2(t4), e3);
  }, "Matrix, Array": function(t4, e3) {
    return this(t4, r2(e3));
  }, "SparseMatrix, any": function(t4, e3) {
    return c2(t4, s2(e3), i2);
  }, "DenseMatrix, any": function(t4, e3) {
    return p2(t4, e3, this);
  }, "any, SparseMatrix": function(t4, e3) {
    return c2(e3, t4, this, true);
  }, "any, DenseMatrix": function(t4, e3) {
    return p2(e3, t4, this, true);
  }, "Array, any": function(t4, e3) {
    return p2(r2(t4), e3, this, false).valueOf();
  }, "any, Array": function(t4, e3) {
    return p2(r2(e3), t4, this, true).valueOf();
  } });
});
function ta(t3, e2) {
  var r2 = t3.size(), n2 = e2.size();
  if (r2.length !== n2.length)
    throw new nn(r2.length, n2.length);
}
var ea = wn("algorithm07", ["typed", "DenseMatrix"], (t3) => {
  var { typed: e2, DenseMatrix: r2 } = t3;
  return function(t4, i2, s2) {
    var a2 = t4._size, o2 = t4._datatype, u2 = i2._size, h = i2._datatype;
    if (a2.length !== u2.length)
      throw new nn(a2.length, u2.length);
    if (a2[0] !== u2[0] || a2[1] !== u2[1])
      throw new RangeError("Dimension mismatch. Matrix A (" + a2 + ") must match Matrix B (" + u2 + ")");
    var c2, l2, p2, f2 = a2[0], d = a2[1], m2 = 0, y2 = s2;
    typeof o2 == "string" && o2 === h && (c2 = o2, m2 = e2.convert(0, c2), y2 = e2.find(s2, [c2, c2]));
    var g2 = [];
    for (l2 = 0; l2 < f2; l2++)
      g2[l2] = [];
    var v2 = [], x2 = [], w2 = [], b2 = [];
    for (p2 = 0; p2 < d; p2++) {
      var _2 = p2 + 1;
      for (n2(t4, p2, w2, v2, _2), n2(i2, p2, b2, x2, _2), l2 = 0; l2 < f2; l2++) {
        var M2 = w2[l2] === _2 ? v2[l2] : m2, N2 = b2[l2] === _2 ? x2[l2] : m2;
        g2[l2][p2] = y2(M2, N2);
      }
    }
    return new r2({ data: g2, size: [f2, d], datatype: c2 });
  };
  function n2(t4, e3, r3, n3, i2) {
    for (var s2 = t4._values, a2 = t4._index, o2 = t4._ptr, u2 = o2[e3], h = o2[e3 + 1]; u2 < h; u2++) {
      var c2 = a2[u2];
      r3[c2] = i2, n3[c2] = s2[u2];
    }
  }
}), ra = wn("conj", ["typed"], (t3) => {
  var { typed: e2 } = t3;
  return e2("conj", { number: function(t4) {
    return t4;
  }, BigNumber: function(t4) {
    return t4;
  }, Complex: function(t4) {
    return t4.conjugate();
  }, "Array | Matrix": function(t4) {
    return ds(t4, this);
  } });
});
function na(t3) {
  var e2 = 0, r2 = 1, n2 = Object.create(null), i2 = Object.create(null), s2 = 0, a2 = function(t4) {
    var a3 = i2[t4];
    if (a3 && (delete n2[a3], delete i2[t4], --e2, r2 === a3)) {
      if (!e2)
        return s2 = 0, void (r2 = 1);
      for (; !hasOwnProperty.call(n2, ++r2); )
        ;
    }
  };
  return t3 = Math.abs(t3), { hit: function(o2) {
    var u2 = i2[o2], h = ++s2;
    if (n2[h] = o2, i2[o2] = h, !u2) {
      if (++e2 <= t3)
        return;
      return o2 = n2[r2], a2(o2), o2;
    }
    if (delete n2[u2], r2 === u2)
      for (; !hasOwnProperty.call(n2, ++r2); )
        ;
  }, delete: a2, clear: function() {
    e2 = s2 = 0, r2 = 1, n2 = Object.create(null), i2 = Object.create(null);
  } };
}
function ia(t3) {
  var { hasher: e2, limit: r2 } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return r2 = r2 == null ? Number.POSITIVE_INFINITY : r2, e2 = e2 == null ? JSON.stringify : e2, function n2() {
    typeof n2.cache != "object" && (n2.cache = { values: new Map(), lru: na(r2 || Number.POSITIVE_INFINITY) });
    for (var i2 = [], s2 = 0; s2 < arguments.length; s2++)
      i2[s2] = arguments[s2];
    var a2 = e2(i2);
    if (n2.cache.values.has(a2))
      return n2.cache.lru.hit(a2), n2.cache.values.get(a2);
    var o2 = t3.apply(t3, i2);
    return n2.cache.values.set(a2, o2), n2.cache.values.delete(n2.cache.lru.hit(a2)), o2;
  };
}
var sa = wn("identity", ["typed", "config", "matrix", "BigNumber", "DenseMatrix", "SparseMatrix"], (t3) => {
  var { typed: e2, config: r2, matrix: n2, BigNumber: i2, DenseMatrix: s2, SparseMatrix: a2 } = t3;
  return e2("identity", { "": function() {
    return r2.matrix === "Matrix" ? n2([]) : [];
  }, string: function(t4) {
    return n2(t4);
  }, "number | BigNumber": function(t4) {
    return u2(t4, t4, r2.matrix === "Matrix" ? "dense" : void 0);
  }, "number | BigNumber, string": function(t4, e3) {
    return u2(t4, t4, e3);
  }, "number | BigNumber, number | BigNumber": function(t4, e3) {
    return u2(t4, e3, r2.matrix === "Matrix" ? "dense" : void 0);
  }, "number | BigNumber, number | BigNumber, string": function(t4, e3, r3) {
    return u2(t4, e3, r3);
  }, Array: function(t4) {
    return o2(t4);
  }, "Array, string": function(t4, e3) {
    return o2(t4, e3);
  }, Matrix: function(t4) {
    return o2(t4.valueOf(), t4.storage());
  }, "Matrix, string": function(t4, e3) {
    return o2(t4.valueOf(), e3);
  } });
  function o2(t4, e3) {
    switch (t4.length) {
      case 0:
        return e3 ? n2(e3) : [];
      case 1:
        return u2(t4[0], t4[0], e3);
      case 2:
        return u2(t4[0], t4[1], e3);
      default:
        throw new Error("Vector containing two values expected");
    }
  }
  function u2(t4, e3, r3) {
    var n3 = Fe(t4) || Fe(e3) ? i2 : null;
    if (Fe(t4) && (t4 = t4.toNumber()), Fe(e3) && (e3 = e3.toNumber()), !Ur(t4) || t4 < 1)
      throw new Error("Parameters in function identity must be positive integers");
    if (!Ur(e3) || e3 < 1)
      throw new Error("Parameters in function identity must be positive integers");
    var o3 = n3 ? new i2(1) : 1, u3 = n3 ? new n3(0) : 0, h = [t4, e3];
    if (r3) {
      if (r3 === "sparse")
        return a2.diagonal(h, o3, 0, u3);
      if (r3 === "dense")
        return s2.diagonal(h, o3, 0, u3);
      throw new TypeError('Unknown matrix type "'.concat(r3, '"'));
    }
    for (var c2 = cn([], h, u3), l2 = t4 < e3 ? t4 : e3, p2 = 0; p2 < l2; p2++)
      c2[p2][p2] = o3;
    return c2;
  }
});
function aa() {
  throw new Error('No "bignumber" implementation available');
}
function oa() {
  throw new Error('No "fraction" implementation available');
}
function ua(t3, e2, r2, n2) {
  if (!(this instanceof ua))
    throw new SyntaxError("Constructor must be called with the new operator");
  this.fn = t3, this.count = e2, this.min = r2, this.max = n2, this.message = "Wrong number of arguments in function " + t3 + " (" + e2 + " provided, " + r2 + (n2 != null ? "-" + n2 : "") + " expected)", this.stack = new Error().stack;
}
ua.prototype = new Error(), ua.prototype.constructor = Error, ua.prototype.name = "ArgumentsError", ua.prototype.isArgumentsError = true;
var ha = wn("size", ["typed", "config", "?matrix"], (t3) => {
  var { typed: e2, config: r2, matrix: n2 } = t3;
  return e2("size", { Matrix: function(t4) {
    return t4.create(t4.size());
  }, Array: an, string: function(t4) {
    return r2.matrix === "Array" ? [t4.length] : n2([t4.length]);
  }, "number | Complex | BigNumber | Unit | boolean | null": function(t4) {
    return r2.matrix === "Array" ? [] : n2 ? n2([]) : function() {
      throw new Error('No "matrix" implementation available');
    }();
  } });
});
function ca(t3, e2) {
  if (da(t3) && pa(t3, e2))
    return t3[e2];
  if (typeof t3[e2] == "function" && fa(t3, e2))
    throw new Error('Cannot access method "' + e2 + '" as a property');
  throw new Error('No access to property "' + e2 + '"');
}
function la(t3, e2, r2) {
  if (da(t3) && pa(t3, e2))
    return t3[e2] = r2, r2;
  throw new Error('No access to property "' + e2 + '"');
}
function pa(t3, e2) {
  return !(!t3 || typeof t3 != "object") && (!!Cr(ma, e2) || !(e2 in Object.prototype) && !(e2 in Function.prototype));
}
function fa(t3, e2) {
  return t3 != null && typeof t3[e2] == "function" && (!(Cr(t3, e2) && Object.getPrototypeOf && e2 in Object.getPrototypeOf(t3)) && (!!Cr(ya, e2) || !(e2 in Object.prototype) && !(e2 in Function.prototype)));
}
function da(t3) {
  return typeof t3 == "object" && t3 && t3.constructor === Object;
}
var ma = { length: true, name: true }, ya = { toString: true, valueOf: true, toLocaleString: true }, ga = wn("subset", ["typed", "matrix"], (t3) => {
  var { typed: e2, matrix: r2 } = t3;
  return e2("subset", { "Array, Index": function(t4, e3) {
    var n2 = r2(t4).subset(e3);
    return e3.isScalar() ? n2 : n2.valueOf();
  }, "Matrix, Index": function(t4, e3) {
    return t4.subset(e3);
  }, "Object, Index": wa, "string, Index": va, "Array, Index, any": function(t4, e3, n2) {
    return r2(_r(t4)).subset(e3, n2, void 0).valueOf();
  }, "Array, Index, any, any": function(t4, e3, n2, i2) {
    return r2(_r(t4)).subset(e3, n2, i2).valueOf();
  }, "Matrix, Index, any": function(t4, e3, r3) {
    return t4.clone().subset(e3, r3);
  }, "Matrix, Index, any, any": function(t4, e3, r3, n2) {
    return t4.clone().subset(e3, r3, n2);
  }, "string, Index, string": xa, "string, Index, string, string": xa, "Object, Index, any": ba });
});
function va(t3, e2) {
  if (!Ze(e2))
    throw new TypeError("Index expected");
  if (e2.size().length !== 1)
    throw new nn(e2.size().length, 1);
  var r2 = t3.length;
  hn(e2.min()[0], r2), hn(e2.max()[0], r2);
  var n2 = e2.dimension(0), i2 = "";
  return n2.forEach(function(e3) {
    i2 += t3.charAt(e3);
  }), i2;
}
function xa(t3, e2, r2, n2) {
  if (!e2 || e2.isIndex !== true)
    throw new TypeError("Index expected");
  if (e2.size().length !== 1)
    throw new nn(e2.size().length, 1);
  if (n2 !== void 0) {
    if (typeof n2 != "string" || n2.length !== 1)
      throw new TypeError("Single character expected as defaultValue");
  } else
    n2 = " ";
  var i2 = e2.dimension(0);
  if (i2.size()[0] !== r2.length)
    throw new nn(i2.size()[0], r2.length);
  var s2 = t3.length;
  hn(e2.min()[0]), hn(e2.max()[0]);
  for (var a2 = [], o2 = 0; o2 < s2; o2++)
    a2[o2] = t3.charAt(o2);
  if (i2.forEach(function(t4, e3) {
    a2[t4] = r2.charAt(e3[0]);
  }), a2.length > s2)
    for (var u2 = s2 - 1, h = a2.length; u2 < h; u2++)
      a2[u2] || (a2[u2] = n2);
  return a2.join("");
}
function wa(t3, e2) {
  if (e2.size().length !== 1)
    throw new nn(e2.size(), 1);
  var r2 = e2.dimension(0);
  if (typeof r2 != "string")
    throw new TypeError("String expected as index to retrieve an object property");
  return ca(t3, r2);
}
function ba(t3, e2, r2) {
  if (e2.size().length !== 1)
    throw new nn(e2.size(), 1);
  var n2 = e2.dimension(0);
  if (typeof n2 != "string")
    throw new TypeError("String expected as index to retrieve an object property");
  var i2 = _r(t3);
  return la(i2, n2, r2), i2;
}
var _a = wn("zeros", ["typed", "config", "matrix", "BigNumber"], (t3) => {
  var { typed: e2, config: r2, matrix: n2, BigNumber: i2 } = t3;
  return e2("zeros", { "": function() {
    return r2.matrix === "Array" ? s2([]) : s2([], "default");
  }, "...number | BigNumber | string": function(t4) {
    if (typeof t4[t4.length - 1] == "string") {
      var e3 = t4.pop();
      return s2(t4, e3);
    }
    return r2.matrix === "Array" ? s2(t4) : s2(t4, "default");
  }, Array: s2, Matrix: function(t4) {
    var e3 = t4.storage();
    return s2(t4.valueOf(), e3);
  }, "Array | Matrix, string": function(t4, e3) {
    return s2(t4.valueOf(), e3);
  } });
  function s2(t4, e3) {
    var r3 = function(t5) {
      var e4 = false;
      return t5.forEach(function(t6, r4, n3) {
        Fe(t6) && (e4 = true, n3[r4] = t6.toNumber());
      }), e4;
    }(t4) ? new i2(0) : 0;
    if (function(t5) {
      t5.forEach(function(t6) {
        if (typeof t6 != "number" || !Ur(t6) || t6 < 0)
          throw new Error("Parameters in function zeros must be positive integers");
      });
    }(t4), e3) {
      var s3 = n2(e3);
      return t4.length > 0 ? s3.resize(t4, r3) : s3;
    }
    var a2 = [];
    return t4.length > 0 ? cn(a2, t4, r3) : a2;
  }
}), Ma = wn("format", ["typed"], (t3) => {
  var { typed: e2 } = t3;
  return e2("format", { any: Kr, "any, Object | function | number": Kr });
}), Na = wn("numeric", ["number", "?bignumber", "?fraction"], (t3) => {
  var { number: e2, bignumber: r2, fraction: n2 } = t3, i2 = { string: true, number: true, BigNumber: true, Fraction: true }, s2 = { number: (t4) => e2(t4), BigNumber: r2 ? (t4) => r2(t4) : aa, Fraction: n2 ? (t4) => n2(t4) : oa };
  return function(t4, e3) {
    var r3 = br(t4);
    if (!(r3 in i2))
      throw new TypeError("Cannot convert " + t4 + ' of type "' + r3 + '"; valid input types are ' + Object.keys(i2).join(", "));
    if (!(e3 in s2))
      throw new TypeError("Cannot convert " + t4 + ' to type "' + e3 + '"; valid output types are ' + Object.keys(s2).join(", "));
    return e3 === r3 ? t4 : s2[e3](t4);
  };
}), Ea = wn("divideScalar", ["typed", "numeric"], (t3) => {
  var { typed: e2, numeric: r2 } = t3;
  return e2("divideScalar", { "number, number": function(t4, e3) {
    return t4 / e3;
  }, "Complex, Complex": function(t4, e3) {
    return t4.div(e3);
  }, "BigNumber, BigNumber": function(t4, e3) {
    return t4.div(e3);
  }, "Fraction, Fraction": function(t4, e3) {
    return t4.div(e3);
  }, "Unit, number | Fraction | BigNumber": function(t4, e3) {
    var n2 = t4.clone(), i2 = r2(1, br(e3));
    return n2.value = this(n2.value === null ? n2._normalize(i2) : n2.value, e3), n2;
  }, "number | Fraction | BigNumber, Unit": function(t4, e3) {
    var n2 = e3.clone();
    n2 = n2.pow(-1);
    var i2 = r2(1, br(t4));
    return n2.value = this(t4, e3.value === null ? e3._normalize(i2) : e3.value), n2;
  }, "Unit, Unit": function(t4, e3) {
    return t4.divide(e3);
  } });
}), Sa = wn("pow", ["typed", "config", "identity", "multiply", "matrix", "fraction", "number", "Complex"], (t3) => {
  var { typed: e2, config: r2, identity: n2, multiply: i2, matrix: s2, number: a2, fraction: o2, Complex: u2 } = t3;
  return e2("pow", { "number, number": h, "Complex, Complex": function(t4, e3) {
    return t4.pow(e3);
  }, "BigNumber, BigNumber": function(t4, e3) {
    return e3.isInteger() || t4 >= 0 || r2.predictable ? t4.pow(e3) : new u2(t4.toNumber(), 0).pow(e3.toNumber(), 0);
  }, "Fraction, Fraction": function(t4, e3) {
    if (e3.d !== 1) {
      if (r2.predictable)
        throw new Error("Function pow does not support non-integer exponents for fractions.");
      return h(t4.valueOf(), e3.valueOf());
    }
    return t4.pow(e3);
  }, "Array, number": c2, "Array, BigNumber": function(t4, e3) {
    return c2(t4, e3.toNumber());
  }, "Matrix, number": l2, "Matrix, BigNumber": function(t4, e3) {
    return l2(t4, e3.toNumber());
  }, "Unit, number | BigNumber": function(t4, e3) {
    return t4.pow(e3);
  } });
  function h(t4, e3) {
    if (r2.predictable && !Ur(e3) && t4 < 0)
      try {
        var n3 = o2(e3), i3 = a2(n3);
        if ((e3 === i3 || Math.abs((e3 - i3) / e3) < 1e-14) && n3.d % 2 == 1)
          return (n3.n % 2 == 0 ? 1 : -1) * Math.pow(-t4, e3);
      } catch (s3) {
      }
    return r2.predictable && (t4 < -1 && e3 === 1 / 0 || t4 > -1 && t4 < 0 && e3 === -1 / 0) ? NaN : Ur(e3) || t4 >= 0 || r2.predictable ? Ms(t4, e3) : t4 * t4 < 1 && e3 === 1 / 0 || t4 * t4 > 1 && e3 === -1 / 0 ? 0 : new u2(t4, 0).pow(e3, 0);
  }
  function c2(t4, e3) {
    if (!Ur(e3) || e3 < 0)
      throw new TypeError("For A^b, b must be a positive integer (value is " + e3 + ")");
    var r3 = an(t4);
    if (r3.length !== 2)
      throw new Error("For A^b, A must be 2 dimensional (A has " + r3.length + " dimensions)");
    if (r3[0] !== r3[1])
      throw new Error("For A^b, A must be square (size is " + r3[0] + "x" + r3[1] + ")");
    for (var s3 = n2(r3[0]).valueOf(), a3 = t4; e3 >= 1; )
      (1 & e3) == 1 && (s3 = i2(a3, s3)), e3 >>= 1, a3 = i2(a3, a3);
    return s3;
  }
  function l2(t4, e3) {
    return s2(c2(t4.valueOf(), e3));
  }
});
function Ta(t3, e2) {
  var r2 = Object.keys(t3);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(t3);
    e2 && (n2 = n2.filter(function(e3) {
      return Object.getOwnPropertyDescriptor(t3, e3).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function Oa(t3) {
  for (var e2 = 1; e2 < arguments.length; e2++) {
    var r2 = arguments[e2] != null ? arguments[e2] : {};
    e2 % 2 ? Ta(Object(r2), true).forEach(function(e3) {
      za(t3, e3, r2[e3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r2)) : Ta(Object(r2)).forEach(function(e3) {
      Object.defineProperty(t3, e3, Object.getOwnPropertyDescriptor(r2, e3));
    });
  }
  return t3;
}
function za(t3, e2, r2) {
  return e2 in t3 ? Object.defineProperty(t3, e2, { value: r2, enumerable: true, configurable: true, writable: true }) : t3[e2] = r2, t3;
}
var Ca = "Number of decimals in function round must be an integer", Aa = wn("round", ["typed", "matrix", "equalScalar", "zeros", "BigNumber", "DenseMatrix"], (t3) => {
  var { typed: e2, matrix: r2, equalScalar: n2, zeros: i2, BigNumber: s2, DenseMatrix: a2 } = t3, o2 = Bs({ typed: e2, equalScalar: n2 }), u2 = Zs({ typed: e2, DenseMatrix: a2 }), h = Fs({ typed: e2 });
  return e2("round", Oa(Oa({}, Ra), {}, { Complex: function(t4) {
    return t4.round();
  }, "Complex, number": function(t4, e3) {
    if (e3 % 1)
      throw new TypeError(Ca);
    return t4.round(e3);
  }, "Complex, BigNumber": function(t4, e3) {
    if (!e3.isInteger())
      throw new TypeError(Ca);
    var r3 = e3.toNumber();
    return t4.round(r3);
  }, "number, BigNumber": function(t4, e3) {
    if (!e3.isInteger())
      throw new TypeError(Ca);
    return new s2(t4).toDecimalPlaces(e3.toNumber());
  }, BigNumber: function(t4) {
    return t4.toDecimalPlaces(0);
  }, "BigNumber, BigNumber": function(t4, e3) {
    if (!e3.isInteger())
      throw new TypeError(Ca);
    return t4.toDecimalPlaces(e3.toNumber());
  }, Fraction: function(t4) {
    return t4.round();
  }, "Fraction, number": function(t4, e3) {
    if (e3 % 1)
      throw new TypeError(Ca);
    return t4.round(e3);
  }, "Array | Matrix": function(t4) {
    return ds(t4, this);
  }, "SparseMatrix, number | BigNumber": function(t4, e3) {
    return o2(t4, e3, this, false);
  }, "DenseMatrix, number | BigNumber": function(t4, e3) {
    return h(t4, e3, this, false);
  }, "number | Complex | BigNumber, SparseMatrix": function(t4, e3) {
    return n2(t4, 0) ? i2(e3.size(), e3.storage()) : u2(e3, t4, this, true);
  }, "number | Complex | BigNumber, DenseMatrix": function(t4, e3) {
    return n2(t4, 0) ? i2(e3.size(), e3.storage()) : h(e3, t4, this, true);
  }, "Array, number | BigNumber": function(t4, e3) {
    return h(r2(t4), e3, this, false).valueOf();
  }, "number | Complex | BigNumber, Array": function(t4, e3) {
    return h(r2(e3), t4, this, true).valueOf();
  } }));
}), Ra = { number: Ns, "number, number": function(t3, e2) {
  if (!Ur(e2))
    throw new TypeError(Ca);
  if (e2 < 0 || e2 > 15)
    throw new Error("Number of decimals in function round must be in te range of 0-15");
  return Ns(t3, e2);
} }, Da = wn("equal", ["typed", "matrix", "equalScalar", "DenseMatrix"], (t3) => {
  var { typed: e2, matrix: r2, equalScalar: n2, DenseMatrix: i2 } = t3, s2 = Ws({ typed: e2 }), a2 = ea({ typed: e2, DenseMatrix: i2 }), o2 = Zs({ typed: e2, DenseMatrix: i2 }), u2 = $s({ typed: e2 }), h = Fs({ typed: e2 });
  return e2("equal", { "any, any": function(t4, e3) {
    return t4 === null ? e3 === null : e3 === null ? t4 === null : t4 === void 0 ? e3 === void 0 : e3 === void 0 ? t4 === void 0 : n2(t4, e3);
  }, "SparseMatrix, SparseMatrix": function(t4, e3) {
    return a2(t4, e3, n2);
  }, "SparseMatrix, DenseMatrix": function(t4, e3) {
    return s2(e3, t4, n2, true);
  }, "DenseMatrix, SparseMatrix": function(t4, e3) {
    return s2(t4, e3, n2, false);
  }, "DenseMatrix, DenseMatrix": function(t4, e3) {
    return u2(t4, e3, n2);
  }, "Array, Array": function(t4, e3) {
    return this(r2(t4), r2(e3)).valueOf();
  }, "Array, Matrix": function(t4, e3) {
    return this(r2(t4), e3);
  }, "Matrix, Array": function(t4, e3) {
    return this(t4, r2(e3));
  }, "SparseMatrix, any": function(t4, e3) {
    return o2(t4, e3, n2, false);
  }, "DenseMatrix, any": function(t4, e3) {
    return h(t4, e3, n2, false);
  }, "any, SparseMatrix": function(t4, e3) {
    return o2(e3, t4, n2, true);
  }, "any, DenseMatrix": function(t4, e3) {
    return h(e3, t4, n2, true);
  }, "Array, any": function(t4, e3) {
    return h(r2(t4), e3, n2, false).valueOf();
  }, "any, Array": function(t4, e3) {
    return h(r2(e3), t4, n2, true).valueOf();
  } });
});
wn("equal", ["typed", "equalScalar"], (t3) => {
  var { typed: e2, equalScalar: r2 } = t3;
  return e2("equal", { "any, any": function(t4, e3) {
    return t4 === null ? e3 === null : e3 === null ? t4 === null : t4 === void 0 ? e3 === void 0 : e3 === void 0 ? t4 === void 0 : r2(t4, e3);
  } });
});
var ka = wn("smaller", ["typed", "config", "matrix", "DenseMatrix"], (t3) => {
  var { typed: e2, config: r2, matrix: n2, DenseMatrix: i2 } = t3, s2 = Ws({ typed: e2 }), a2 = ea({ typed: e2, DenseMatrix: i2 }), o2 = Zs({ typed: e2, DenseMatrix: i2 }), u2 = $s({ typed: e2 }), h = Fs({ typed: e2 });
  return e2("smaller", { "boolean, boolean": function(t4, e3) {
    return t4 < e3;
  }, "number, number": function(t4, e3) {
    return t4 < e3 && !Zr(t4, e3, r2.epsilon);
  }, "BigNumber, BigNumber": function(t4, e3) {
    return t4.lt(e3) && !Ss(t4, e3, r2.epsilon);
  }, "Fraction, Fraction": function(t4, e3) {
    return t4.compare(e3) === -1;
  }, "Complex, Complex": function(t4, e3) {
    throw new TypeError("No ordering relation is defined for complex numbers");
  }, "Unit, Unit": function(t4, e3) {
    if (!t4.equalBase(e3))
      throw new Error("Cannot compare units with different base");
    return this(t4.value, e3.value);
  }, "SparseMatrix, SparseMatrix": function(t4, e3) {
    return a2(t4, e3, this);
  }, "SparseMatrix, DenseMatrix": function(t4, e3) {
    return s2(e3, t4, this, true);
  }, "DenseMatrix, SparseMatrix": function(t4, e3) {
    return s2(t4, e3, this, false);
  }, "DenseMatrix, DenseMatrix": function(t4, e3) {
    return u2(t4, e3, this);
  }, "Array, Array": function(t4, e3) {
    return this(n2(t4), n2(e3)).valueOf();
  }, "Array, Matrix": function(t4, e3) {
    return this(n2(t4), e3);
  }, "Matrix, Array": function(t4, e3) {
    return this(t4, n2(e3));
  }, "SparseMatrix, any": function(t4, e3) {
    return o2(t4, e3, this, false);
  }, "DenseMatrix, any": function(t4, e3) {
    return h(t4, e3, this, false);
  }, "any, SparseMatrix": function(t4, e3) {
    return o2(e3, t4, this, true);
  }, "any, DenseMatrix": function(t4, e3) {
    return h(e3, t4, this, true);
  }, "Array, any": function(t4, e3) {
    return h(n2(t4), e3, this, false).valueOf();
  }, "any, Array": function(t4, e3) {
    return h(n2(e3), t4, this, true).valueOf();
  } });
}), Ia = wn("larger", ["typed", "config", "matrix", "DenseMatrix"], (t3) => {
  var { typed: e2, config: r2, matrix: n2, DenseMatrix: i2 } = t3, s2 = Ws({ typed: e2 }), a2 = ea({ typed: e2, DenseMatrix: i2 }), o2 = Zs({ typed: e2, DenseMatrix: i2 }), u2 = $s({ typed: e2 }), h = Fs({ typed: e2 });
  return e2("larger", { "boolean, boolean": function(t4, e3) {
    return t4 > e3;
  }, "number, number": function(t4, e3) {
    return t4 > e3 && !Zr(t4, e3, r2.epsilon);
  }, "BigNumber, BigNumber": function(t4, e3) {
    return t4.gt(e3) && !Ss(t4, e3, r2.epsilon);
  }, "Fraction, Fraction": function(t4, e3) {
    return t4.compare(e3) === 1;
  }, "Complex, Complex": function() {
    throw new TypeError("No ordering relation is defined for complex numbers");
  }, "Unit, Unit": function(t4, e3) {
    if (!t4.equalBase(e3))
      throw new Error("Cannot compare units with different base");
    return this(t4.value, e3.value);
  }, "SparseMatrix, SparseMatrix": function(t4, e3) {
    return a2(t4, e3, this);
  }, "SparseMatrix, DenseMatrix": function(t4, e3) {
    return s2(e3, t4, this, true);
  }, "DenseMatrix, SparseMatrix": function(t4, e3) {
    return s2(t4, e3, this, false);
  }, "DenseMatrix, DenseMatrix": function(t4, e3) {
    return u2(t4, e3, this);
  }, "Array, Array": function(t4, e3) {
    return this(n2(t4), n2(e3)).valueOf();
  }, "Array, Matrix": function(t4, e3) {
    return this(n2(t4), e3);
  }, "Matrix, Array": function(t4, e3) {
    return this(t4, n2(e3));
  }, "SparseMatrix, any": function(t4, e3) {
    return o2(t4, e3, this, false);
  }, "DenseMatrix, any": function(t4, e3) {
    return h(t4, e3, this, false);
  }, "any, SparseMatrix": function(t4, e3) {
    return o2(e3, t4, this, true);
  }, "any, DenseMatrix": function(t4, e3) {
    return h(e3, t4, this, true);
  }, "Array, any": function(t4, e3) {
    return h(n2(t4), e3, this, false).valueOf();
  }, "any, Array": function(t4, e3) {
    return h(n2(e3), t4, this, true).valueOf();
  } });
}), La = wn("FibonacciHeap", ["smaller", "larger"], (t3) => {
  var { smaller: e2, larger: r2 } = t3, n2 = 1 / Math.log((1 + Math.sqrt(5)) / 2);
  function i2() {
    if (!(this instanceof i2))
      throw new SyntaxError("Constructor must be called with the new operator");
    this._minimum = null, this._size = 0;
  }
  function s2(t4, e3, r3) {
    e3.left.right = e3.right, e3.right.left = e3.left, r3.degree--, r3.child === e3 && (r3.child = e3.right), r3.degree === 0 && (r3.child = null), e3.left = t4, e3.right = t4.right, t4.right = e3, e3.right.left = e3, e3.parent = null, e3.mark = false;
  }
  function a2(t4, e3) {
    var r3 = e3.parent;
    r3 && (e3.mark ? (s2(t4, e3, r3), a2(r3)) : e3.mark = true);
  }
  i2.prototype.type = "FibonacciHeap", i2.prototype.isFibonacciHeap = true, i2.prototype.insert = function(t4, r3) {
    var n3 = { key: t4, value: r3, degree: 0 };
    if (this._minimum) {
      var i3 = this._minimum;
      n3.left = i3, n3.right = i3.right, i3.right = n3, n3.right.left = n3, e2(t4, i3.key) && (this._minimum = n3);
    } else
      n3.left = n3, n3.right = n3, this._minimum = n3;
    return this._size++, n3;
  }, i2.prototype.size = function() {
    return this._size;
  }, i2.prototype.clear = function() {
    this._minimum = null, this._size = 0;
  }, i2.prototype.isEmpty = function() {
    return this._size === 0;
  }, i2.prototype.extractMinimum = function() {
    var t4 = this._minimum;
    if (t4 === null)
      return t4;
    for (var i3 = this._minimum, s3 = t4.degree, a3 = t4.child; s3 > 0; ) {
      var u2 = a3.right;
      a3.left.right = a3.right, a3.right.left = a3.left, a3.left = i3, a3.right = i3.right, i3.right = a3, a3.right.left = a3, a3.parent = null, a3 = u2, s3--;
    }
    return t4.left.right = t4.right, t4.right.left = t4.left, i3 = t4 === t4.right ? null : function(t5, i4) {
      var s4, a4 = Math.floor(Math.log(i4) * n2) + 1, u3 = new Array(a4), h = 0, c2 = t5;
      if (c2)
        for (h++, c2 = c2.right; c2 !== t5; )
          h++, c2 = c2.right;
      for (; h > 0; ) {
        for (var l2 = c2.degree, p2 = c2.right; s4 = u3[l2]; ) {
          if (r2(c2.key, s4.key)) {
            var f2 = s4;
            s4 = c2, c2 = f2;
          }
          o2(s4, c2), u3[l2] = null, l2++;
        }
        u3[l2] = c2, c2 = p2, h--;
      }
      t5 = null;
      for (var d = 0; d < a4; d++)
        (s4 = u3[d]) && (t5 ? (s4.left.right = s4.right, s4.right.left = s4.left, s4.left = t5, s4.right = t5.right, t5.right = s4, s4.right.left = s4, e2(s4.key, t5.key) && (t5 = s4)) : t5 = s4);
      return t5;
    }(i3 = t4.right, this._size), this._size--, this._minimum = i3, t4;
  }, i2.prototype.remove = function(t4) {
    this._minimum = function(t5, r3, n3) {
      r3.key = n3;
      var i3 = r3.parent;
      i3 && e2(r3.key, i3.key) && (s2(t5, r3, i3), a2(t5, i3));
      e2(r3.key, t5.key) && (t5 = r3);
      return t5;
    }(this._minimum, t4, -1), this.extractMinimum();
  };
  var o2 = function(t4, e3) {
    t4.left.right = t4.right, t4.right.left = t4.left, t4.parent = e3, e3.child ? (t4.left = e3.child, t4.right = e3.child.right, e3.child.right = t4, t4.right.left = t4) : (e3.child = t4, t4.right = t4, t4.left = t4), e3.degree++, t4.mark = false;
  };
  return i2;
}, { isClass: true }), Ba = wn("Spa", ["addScalar", "equalScalar", "FibonacciHeap"], (t3) => {
  var { addScalar: e2, equalScalar: r2, FibonacciHeap: n2 } = t3;
  function i2() {
    if (!(this instanceof i2))
      throw new SyntaxError("Constructor must be called with the new operator");
    this._values = [], this._heap = new n2();
  }
  return i2.prototype.type = "Spa", i2.prototype.isSpa = true, i2.prototype.set = function(t4, e3) {
    if (this._values[t4])
      this._values[t4].value = e3;
    else {
      var r3 = this._heap.insert(t4, e3);
      this._values[t4] = r3;
    }
  }, i2.prototype.get = function(t4) {
    var e3 = this._values[t4];
    return e3 ? e3.value : 0;
  }, i2.prototype.accumulate = function(t4, r3) {
    var n3 = this._values[t4];
    n3 ? n3.value = e2(n3.value, r3) : (n3 = this._heap.insert(t4, r3), this._values[t4] = n3);
  }, i2.prototype.forEach = function(t4, e3, n3) {
    var i3 = this._heap, s2 = this._values, a2 = [], o2 = i3.extractMinimum();
    for (o2 && a2.push(o2); o2 && o2.key <= e3; )
      o2.key >= t4 && (r2(o2.value, 0) || n3(o2.key, o2.value, this)), (o2 = i3.extractMinimum()) && a2.push(o2);
    for (var u2 = 0; u2 < a2.length; u2++) {
      var h = a2[u2];
      s2[(o2 = i3.insert(h.key, h.value)).key] = o2;
    }
  }, i2.prototype.swap = function(t4, e3) {
    var r3 = this._values[t4], n3 = this._values[e3];
    if (!r3 && n3)
      r3 = this._heap.insert(t4, n3.value), this._heap.remove(n3), this._values[t4] = r3, this._values[e3] = void 0;
    else if (r3 && !n3)
      n3 = this._heap.insert(e3, r3.value), this._heap.remove(r3), this._values[e3] = n3, this._values[t4] = void 0;
    else if (r3 && n3) {
      var i3 = r3.value;
      r3.value = n3.value, n3.value = i3;
    }
  }, i2;
}, { isClass: true });
ia(function(t3) {
  return new t3(1).exp();
}, { hasher: Pa }), ia(function(t3) {
  return new t3(1).plus(new t3(5).sqrt()).div(2);
}, { hasher: Pa });
var Fa = ia(function(t3) {
  return t3.acos(-1);
}, { hasher: Pa });
function Pa(t3) {
  return t3[0].precision;
}
function Ua() {
  return (Ua = Object.assign || function(t3) {
    for (var e2 = 1; e2 < arguments.length; e2++) {
      var r2 = arguments[e2];
      for (var n2 in r2)
        Object.prototype.hasOwnProperty.call(r2, n2) && (t3[n2] = r2[n2]);
    }
    return t3;
  }).apply(this, arguments);
}
function ja(t3, e2) {
  var r2 = Object.keys(t3);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(t3);
    e2 && (n2 = n2.filter(function(e3) {
      return Object.getOwnPropertyDescriptor(t3, e3).enumerable;
    })), r2.push.apply(r2, n2);
  }
  return r2;
}
function qa(t3) {
  for (var e2 = 1; e2 < arguments.length; e2++) {
    var r2 = arguments[e2] != null ? arguments[e2] : {};
    e2 % 2 ? ja(Object(r2), true).forEach(function(e3) {
      Ha(t3, e3, r2[e3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r2)) : ja(Object(r2)).forEach(function(e3) {
      Object.defineProperty(t3, e3, Object.getOwnPropertyDescriptor(r2, e3));
    });
  }
  return t3;
}
function Ha(t3, e2, r2) {
  return e2 in t3 ? Object.defineProperty(t3, e2, { value: r2, enumerable: true, configurable: true, writable: true }) : t3[e2] = r2, t3;
}
ia(function(t3) {
  return Fa(t3).times(2);
}, { hasher: Pa });
var Va = wn("Unit", ["?on", "config", "addScalar", "subtract", "multiplyScalar", "divideScalar", "pow", "abs", "fix", "round", "equal", "isNumeric", "format", "number", "Complex", "BigNumber", "Fraction"], (t3) => {
  var e2, r2, n2, { on: i2, config: s2, addScalar: a2, subtract: o2, multiplyScalar: u2, divideScalar: h, pow: c2, abs: l2, fix: p2, round: f2, equal: d, isNumeric: m2, format: y2, number: g2, Complex: v2, BigNumber: x2, Fraction: w2 } = t3, b2 = g2;
  function _2(t4, e3) {
    if (!(this instanceof _2))
      throw new Error("Constructor must be called with the new operator");
    if (t4 != null && !m2(t4) && !Pe(t4))
      throw new TypeError("First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined");
    if (e3 !== void 0 && (typeof e3 != "string" || e3 === ""))
      throw new TypeError("Second parameter in Unit constructor must be a string");
    if (e3 !== void 0) {
      var r3 = _2.parse(e3);
      this.units = r3.units, this.dimensions = r3.dimensions;
    } else {
      this.units = [{ unit: L2, prefix: R2.NONE, power: 0 }], this.dimensions = [];
      for (var n3 = 0; n3 < D2.length; n3++)
        this.dimensions[n3] = 0;
    }
    this.value = t4 != null ? this._normalize(t4) : null, this.fixPrefix = false, this.skipAutomaticSimplification = true;
  }
  function M2() {
    for (; n2 === " " || n2 === "	"; )
      E2();
  }
  function N2(t4) {
    return t4 >= "0" && t4 <= "9";
  }
  function E2() {
    r2++, n2 = e2.charAt(r2);
  }
  function S2(t4) {
    r2 = t4, n2 = e2.charAt(r2);
  }
  function T2() {
    var t4, e3 = "", i3 = r2;
    if (n2 === "+" ? E2() : n2 === "-" && (e3 += n2, E2()), !((t4 = n2) >= "0" && t4 <= "9" || t4 === "."))
      return S2(i3), null;
    if (n2 === ".") {
      if (e3 += n2, E2(), !N2(n2))
        return S2(i3), null;
    } else {
      for (; N2(n2); )
        e3 += n2, E2();
      n2 === "." && (e3 += n2, E2());
    }
    for (; N2(n2); )
      e3 += n2, E2();
    if (n2 === "E" || n2 === "e") {
      var s3 = "", a3 = r2;
      if (s3 += n2, E2(), n2 !== "+" && n2 !== "-" || (s3 += n2, E2()), !N2(n2))
        return S2(a3), e3;
      for (e3 += s3; N2(n2); )
        e3 += n2, E2();
    }
    return e3;
  }
  function O2() {
    for (var t4 = ""; N2(n2) || _2.isValidAlpha(n2); )
      t4 += n2, E2();
    var e3 = t4.charAt(0);
    return _2.isValidAlpha(e3) ? t4 : null;
  }
  function z2(t4) {
    return n2 === t4 ? (E2(), t4) : null;
  }
  _2.prototype.type = "Unit", _2.prototype.isUnit = true, _2.parse = function(t4, i3) {
    if (i3 = i3 || {}, r2 = -1, n2 = "", typeof (e2 = t4) != "string")
      throw new TypeError("Invalid argument in Unit.parse, string expected");
    var a3 = new _2();
    a3.units = [];
    var o3 = 1, u3 = false;
    E2(), M2();
    var h2 = T2(), c3 = null;
    if (h2) {
      if (s2.number === "BigNumber")
        c3 = new x2(h2);
      else if (s2.number === "Fraction")
        try {
          c3 = new w2(h2);
        } catch (N3) {
          c3 = parseFloat(h2);
        }
      else
        c3 = parseFloat(h2);
      M2(), z2("*") ? (o3 = 1, u3 = true) : z2("/") && (o3 = -1, u3 = true);
    }
    for (var l3 = [], p3 = 1; ; ) {
      for (M2(); n2 === "("; )
        l3.push(o3), p3 *= o3, o3 = 1, E2(), M2();
      var f3 = void 0;
      if (!n2)
        break;
      var d2 = n2;
      if ((f3 = O2()) === null)
        throw new SyntaxError('Unexpected "' + d2 + '" in "' + e2 + '" at index ' + r2.toString());
      var m3 = C2(f3);
      if (m3 === null)
        throw new SyntaxError('Unit "' + f3 + '" not found.');
      var y3 = o3 * p3;
      if (M2(), z2("^")) {
        M2();
        var g3 = T2();
        if (g3 === null)
          throw new SyntaxError('In "' + t4 + '", "^" must be followed by a floating-point number');
        y3 *= g3;
      }
      a3.units.push({ unit: m3.unit, prefix: m3.prefix, power: y3 });
      for (var v3 = 0; v3 < D2.length; v3++)
        a3.dimensions[v3] += (m3.unit.dimensions[v3] || 0) * y3;
      for (M2(); n2 === ")"; ) {
        if (l3.length === 0)
          throw new SyntaxError('Unmatched ")" in "' + e2 + '" at index ' + r2.toString());
        p3 /= l3.pop(), E2(), M2();
      }
      if (u3 = false, z2("*") ? (o3 = 1, u3 = true) : z2("/") ? (o3 = -1, u3 = true) : o3 = 1, m3.unit.base) {
        var b3 = m3.unit.base.key;
        U2.auto[b3] = { unit: m3.unit, prefix: m3.prefix };
      }
    }
    if (M2(), n2)
      throw new SyntaxError('Could not parse: "' + t4 + '"');
    if (u3)
      throw new SyntaxError('Trailing characters: "' + t4 + '"');
    if (l3.length !== 0)
      throw new SyntaxError('Unmatched "(" in "' + e2 + '"');
    if (a3.units.length === 0 && !i3.allowNoUnits)
      throw new SyntaxError('"' + t4 + '" contains no units');
    return a3.value = c3 !== void 0 ? a3._normalize(c3) : null, a3;
  }, _2.prototype.clone = function() {
    var t4 = new _2();
    t4.fixPrefix = this.fixPrefix, t4.skipAutomaticSimplification = this.skipAutomaticSimplification, t4.value = _r(this.value), t4.dimensions = this.dimensions.slice(0), t4.units = [];
    for (var e3 = 0; e3 < this.units.length; e3++)
      for (var r3 in t4.units[e3] = {}, this.units[e3])
        Cr(this.units[e3], r3) && (t4.units[e3][r3] = this.units[e3][r3]);
    return t4;
  }, _2.prototype._isDerived = function() {
    return this.units.length !== 0 && (this.units.length > 1 || Math.abs(this.units[0].power - 1) > 1e-15);
  }, _2.prototype._normalize = function(t4) {
    var e3, r3, n3, i3, s3;
    if (t4 == null || this.units.length === 0)
      return t4;
    if (this._isDerived()) {
      var o3 = t4;
      s3 = _2._getNumberConverter(br(t4));
      for (var h2 = 0; h2 < this.units.length; h2++)
        e3 = s3(this.units[h2].unit.value), i3 = s3(this.units[h2].prefix.value), n3 = s3(this.units[h2].power), o3 = u2(o3, c2(u2(e3, i3), n3));
      return o3;
    }
    return e3 = (s3 = _2._getNumberConverter(br(t4)))(this.units[0].unit.value), r3 = s3(this.units[0].unit.offset), i3 = s3(this.units[0].prefix.value), u2(a2(t4, r3), u2(e3, i3));
  }, _2.prototype._denormalize = function(t4, e3) {
    var r3, n3, i3, s3, a3;
    if (t4 == null || this.units.length === 0)
      return t4;
    if (this._isDerived()) {
      var l3 = t4;
      a3 = _2._getNumberConverter(br(t4));
      for (var p3 = 0; p3 < this.units.length; p3++)
        r3 = a3(this.units[p3].unit.value), s3 = a3(this.units[p3].prefix.value), i3 = a3(this.units[p3].power), l3 = h(l3, c2(u2(r3, s3), i3));
      return l3;
    }
    return r3 = (a3 = _2._getNumberConverter(br(t4)))(this.units[0].unit.value), s3 = a3(this.units[0].prefix.value), n3 = a3(this.units[0].unit.offset), o2(h(h(t4, r3), e3 == null ? s3 : e3), n3);
  };
  var C2 = ia((t4) => {
    if (Cr(B2, t4)) {
      var e3 = B2[t4];
      return { unit: e3, prefix: e3.prefixes[""] };
    }
    for (var r3 in B2)
      if (Cr(B2, r3) && Qr(t4, r3)) {
        var n3 = B2[r3], i3 = t4.length - r3.length, s3 = t4.substring(0, i3), a3 = Cr(n3.prefixes, s3) ? n3.prefixes[s3] : void 0;
        if (a3 !== void 0)
          return { unit: n3, prefix: a3 };
      }
    return null;
  }, { hasher: (t4) => t4[0], limit: 100 });
  function A2(t4) {
    return t4.equalBase(k2.NONE) && t4.value !== null && !s2.predictable ? t4.value : t4;
  }
  _2.isValuelessUnit = function(t4) {
    return C2(t4) !== null;
  }, _2.prototype.hasBase = function(t4) {
    if (typeof t4 == "string" && (t4 = k2[t4]), !t4)
      return false;
    for (var e3 = 0; e3 < D2.length; e3++)
      if (Math.abs((this.dimensions[e3] || 0) - (t4.dimensions[e3] || 0)) > 1e-12)
        return false;
    return true;
  }, _2.prototype.equalBase = function(t4) {
    for (var e3 = 0; e3 < D2.length; e3++)
      if (Math.abs((this.dimensions[e3] || 0) - (t4.dimensions[e3] || 0)) > 1e-12)
        return false;
    return true;
  }, _2.prototype.equals = function(t4) {
    return this.equalBase(t4) && d(this.value, t4.value);
  }, _2.prototype.multiply = function(t4) {
    for (var e3 = this.clone(), r3 = 0; r3 < D2.length; r3++)
      e3.dimensions[r3] = (this.dimensions[r3] || 0) + (t4.dimensions[r3] || 0);
    for (var n3 = 0; n3 < t4.units.length; n3++) {
      var i3 = qa({}, t4.units[n3]);
      e3.units.push(i3);
    }
    if (this.value !== null || t4.value !== null) {
      var s3 = this.value === null ? this._normalize(1) : this.value, a3 = t4.value === null ? t4._normalize(1) : t4.value;
      e3.value = u2(s3, a3);
    } else
      e3.value = null;
    return e3.skipAutomaticSimplification = false, A2(e3);
  }, _2.prototype.divide = function(t4) {
    for (var e3 = this.clone(), r3 = 0; r3 < D2.length; r3++)
      e3.dimensions[r3] = (this.dimensions[r3] || 0) - (t4.dimensions[r3] || 0);
    for (var n3 = 0; n3 < t4.units.length; n3++) {
      var i3 = qa(qa({}, t4.units[n3]), {}, { power: -t4.units[n3].power });
      e3.units.push(i3);
    }
    if (this.value !== null || t4.value !== null) {
      var s3 = this.value === null ? this._normalize(1) : this.value, a3 = t4.value === null ? t4._normalize(1) : t4.value;
      e3.value = h(s3, a3);
    } else
      e3.value = null;
    return e3.skipAutomaticSimplification = false, A2(e3);
  }, _2.prototype.pow = function(t4) {
    for (var e3 = this.clone(), r3 = 0; r3 < D2.length; r3++)
      e3.dimensions[r3] = (this.dimensions[r3] || 0) * t4;
    for (var n3 = 0; n3 < e3.units.length; n3++)
      e3.units[n3].power *= t4;
    return e3.value !== null ? e3.value = c2(e3.value, t4) : e3.value = null, e3.skipAutomaticSimplification = false, A2(e3);
  }, _2.prototype.abs = function() {
    var t4 = this.clone();
    for (var e3 in t4.value = t4.value !== null ? l2(t4.value) : null, t4.units)
      t4.units[e3].unit.name !== "VA" && t4.units[e3].unit.name !== "VAR" || (t4.units[e3].unit = B2.W);
    return t4;
  }, _2.prototype.to = function(t4) {
    var e3, r3 = this.value === null ? this._normalize(1) : this.value;
    if (typeof t4 == "string") {
      if (e3 = _2.parse(t4), !this.equalBase(e3))
        throw new Error("Units do not match ('".concat(e3.toString(), "' != '").concat(this.toString(), "')"));
      if (e3.value !== null)
        throw new Error("Cannot convert to a unit with a value");
      return e3.value = _r(r3), e3.fixPrefix = true, e3.skipAutomaticSimplification = true, e3;
    }
    if (je(t4)) {
      if (!this.equalBase(t4))
        throw new Error("Units do not match ('".concat(t4.toString(), "' != '").concat(this.toString(), "')"));
      if (t4.value !== null)
        throw new Error("Cannot convert to a unit with a value");
      return (e3 = t4.clone()).value = _r(r3), e3.fixPrefix = true, e3.skipAutomaticSimplification = true, e3;
    }
    throw new Error("String or Unit expected as parameter");
  }, _2.prototype.toNumber = function(t4) {
    return b2(this.toNumeric(t4));
  }, _2.prototype.toNumeric = function(t4) {
    var e3;
    return (e3 = t4 ? this.to(t4) : this.clone())._isDerived() || e3.units.length === 0 ? e3._denormalize(e3.value) : e3._denormalize(e3.value, e3.units[0].prefix.value);
  }, _2.prototype.toString = function() {
    return this.format();
  }, _2.prototype.toJSON = function() {
    return { mathjs: "Unit", value: this._denormalize(this.value), unit: this.formatUnits(), fixPrefix: this.fixPrefix };
  }, _2.fromJSON = function(t4) {
    var e3 = new _2(t4.value, t4.unit);
    return e3.fixPrefix = t4.fixPrefix || false, e3;
  }, _2.prototype.valueOf = _2.prototype.toString, _2.prototype.simplify = function() {
    var t4, e3, r3 = this.clone(), n3 = [];
    for (var i3 in j2)
      if (Cr(j2, i3) && r3.hasBase(k2[i3])) {
        t4 = i3;
        break;
      }
    if (t4 === "NONE")
      r3.units = [];
    else if (t4 && Cr(j2, t4) && (e3 = j2[t4]), e3)
      r3.units = [{ unit: e3.unit, prefix: e3.prefix, power: 1 }];
    else {
      for (var s3 = false, a3 = 0; a3 < D2.length; a3++) {
        var o3 = D2[a3];
        Math.abs(r3.dimensions[a3] || 0) > 1e-12 && (Cr(j2, o3) ? n3.push({ unit: j2[o3].unit, prefix: j2[o3].prefix, power: r3.dimensions[a3] || 0 }) : s3 = true);
      }
      n3.length < r3.units.length && !s3 && (r3.units = n3);
    }
    return r3;
  }, _2.prototype.toSI = function() {
    for (var t4 = this.clone(), e3 = [], r3 = 0; r3 < D2.length; r3++) {
      var n3 = D2[r3];
      if (Math.abs(t4.dimensions[r3] || 0) > 1e-12) {
        if (!Cr(U2.si, n3))
          throw new Error("Cannot express custom unit " + n3 + " in SI units");
        e3.push({ unit: U2.si[n3].unit, prefix: U2.si[n3].prefix, power: t4.dimensions[r3] || 0 });
      }
    }
    return t4.units = e3, t4.fixPrefix = true, t4.skipAutomaticSimplification = true, t4;
  }, _2.prototype.formatUnits = function() {
    for (var t4 = "", e3 = "", r3 = 0, n3 = 0, i3 = 0; i3 < this.units.length; i3++)
      this.units[i3].power > 0 ? (r3++, t4 += " " + this.units[i3].prefix.name + this.units[i3].unit.name, Math.abs(this.units[i3].power - 1) > 1e-15 && (t4 += "^" + this.units[i3].power)) : this.units[i3].power < 0 && n3++;
    if (n3 > 0)
      for (var s3 = 0; s3 < this.units.length; s3++)
        this.units[s3].power < 0 && (r3 > 0 ? (e3 += " " + this.units[s3].prefix.name + this.units[s3].unit.name, Math.abs(this.units[s3].power + 1) > 1e-15 && (e3 += "^" + -this.units[s3].power)) : (e3 += " " + this.units[s3].prefix.name + this.units[s3].unit.name, e3 += "^" + this.units[s3].power));
    t4 = t4.substr(1), e3 = e3.substr(1), r3 > 1 && n3 > 0 && (t4 = "(" + t4 + ")"), n3 > 1 && r3 > 0 && (e3 = "(" + e3 + ")");
    var a3 = t4;
    return r3 > 0 && n3 > 0 && (a3 += " / "), a3 += e3;
  }, _2.prototype.format = function(t4) {
    var e3 = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(), r3 = false;
    for (var n3 in e3.value !== void 0 && e3.value !== null && Pe(e3.value) && (r3 = Math.abs(e3.value.re) < 1e-14), e3.units)
      Cr(e3.units, n3) && e3.units[n3].unit && (e3.units[n3].unit.name === "VA" && r3 ? e3.units[n3].unit = B2.VAR : e3.units[n3].unit.name !== "VAR" || r3 || (e3.units[n3].unit = B2.VA));
    e3.units.length !== 1 || e3.fixPrefix || Math.abs(e3.units[0].power - Math.round(e3.units[0].power)) < 1e-14 && (e3.units[0].prefix = e3._bestPrefix());
    var i3 = e3._denormalize(e3.value), s3 = e3.value !== null ? y2(i3, t4 || {}) : "", a3 = e3.formatUnits();
    return e3.value && Pe(e3.value) && (s3 = "(" + s3 + ")"), a3.length > 0 && s3.length > 0 && (s3 += " "), s3 += a3;
  }, _2.prototype._bestPrefix = function() {
    if (this.units.length !== 1)
      throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14)
      throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
    var t4 = this.value !== null ? l2(this.value) : 0, e3 = l2(this.units[0].unit.value), r3 = this.units[0].prefix;
    if (t4 === 0)
      return r3;
    var n3 = this.units[0].power, i3 = Math.log(t4 / Math.pow(r3.value * e3, n3)) / Math.LN10 - 1.2;
    if (i3 > -2.200001 && i3 < 1.800001)
      return r3;
    i3 = Math.abs(i3);
    var s3 = this.units[0].unit.prefixes;
    for (var a3 in s3)
      if (Cr(s3, a3)) {
        var o3 = s3[a3];
        if (o3.scientific) {
          var u3 = Math.abs(Math.log(t4 / Math.pow(o3.value * e3, n3)) / Math.LN10 - 1.2);
          (u3 < i3 || u3 === i3 && o3.name.length < r3.name.length) && (r3 = o3, i3 = u3);
        }
      }
    return r3;
  }, _2.prototype.splitUnit = function(t4) {
    for (var e3 = this.clone(), r3 = [], n3 = 0; n3 < t4.length && (e3 = e3.to(t4[n3]), n3 !== t4.length - 1); n3++) {
      var i3 = e3.toNumeric(), s3 = f2(i3), u3 = new _2(d(s3, i3) ? s3 : p2(e3.toNumeric()), t4[n3].toString());
      r3.push(u3), e3 = o2(e3, u3);
    }
    for (var h2 = 0, c3 = 0; c3 < r3.length; c3++)
      h2 = a2(h2, r3[c3].value);
    return d(h2, this.value) && (e3.value = 0), r3.push(e3), r3;
  };
  var R2 = { NONE: { "": { name: "", value: 1, scientific: true } }, SHORT: { "": { name: "", value: 1, scientific: true }, da: { name: "da", value: 10, scientific: false }, h: { name: "h", value: 100, scientific: false }, k: { name: "k", value: 1e3, scientific: true }, M: { name: "M", value: 1e6, scientific: true }, G: { name: "G", value: 1e9, scientific: true }, T: { name: "T", value: 1e12, scientific: true }, P: { name: "P", value: 1e15, scientific: true }, E: { name: "E", value: 1e18, scientific: true }, Z: { name: "Z", value: 1e21, scientific: true }, Y: { name: "Y", value: 1e24, scientific: true }, d: { name: "d", value: 0.1, scientific: false }, c: { name: "c", value: 0.01, scientific: false }, m: { name: "m", value: 1e-3, scientific: true }, u: { name: "u", value: 1e-6, scientific: true }, n: { name: "n", value: 1e-9, scientific: true }, p: { name: "p", value: 1e-12, scientific: true }, f: { name: "f", value: 1e-15, scientific: true }, a: { name: "a", value: 1e-18, scientific: true }, z: { name: "z", value: 1e-21, scientific: true }, y: { name: "y", value: 1e-24, scientific: true } }, LONG: { "": { name: "", value: 1, scientific: true }, deca: { name: "deca", value: 10, scientific: false }, hecto: { name: "hecto", value: 100, scientific: false }, kilo: { name: "kilo", value: 1e3, scientific: true }, mega: { name: "mega", value: 1e6, scientific: true }, giga: { name: "giga", value: 1e9, scientific: true }, tera: { name: "tera", value: 1e12, scientific: true }, peta: { name: "peta", value: 1e15, scientific: true }, exa: { name: "exa", value: 1e18, scientific: true }, zetta: { name: "zetta", value: 1e21, scientific: true }, yotta: { name: "yotta", value: 1e24, scientific: true }, deci: { name: "deci", value: 0.1, scientific: false }, centi: { name: "centi", value: 0.01, scientific: false }, milli: { name: "milli", value: 1e-3, scientific: true }, micro: { name: "micro", value: 1e-6, scientific: true }, nano: { name: "nano", value: 1e-9, scientific: true }, pico: { name: "pico", value: 1e-12, scientific: true }, femto: { name: "femto", value: 1e-15, scientific: true }, atto: { name: "atto", value: 1e-18, scientific: true }, zepto: { name: "zepto", value: 1e-21, scientific: true }, yocto: { name: "yocto", value: 1e-24, scientific: true } }, SQUARED: { "": { name: "", value: 1, scientific: true }, da: { name: "da", value: 100, scientific: false }, h: { name: "h", value: 1e4, scientific: false }, k: { name: "k", value: 1e6, scientific: true }, M: { name: "M", value: 1e12, scientific: true }, G: { name: "G", value: 1e18, scientific: true }, T: { name: "T", value: 1e24, scientific: true }, P: { name: "P", value: 1e30, scientific: true }, E: { name: "E", value: 1e36, scientific: true }, Z: { name: "Z", value: 1e42, scientific: true }, Y: { name: "Y", value: 1e48, scientific: true }, d: { name: "d", value: 0.01, scientific: false }, c: { name: "c", value: 1e-4, scientific: false }, m: { name: "m", value: 1e-6, scientific: true }, u: { name: "u", value: 1e-12, scientific: true }, n: { name: "n", value: 1e-18, scientific: true }, p: { name: "p", value: 1e-24, scientific: true }, f: { name: "f", value: 1e-30, scientific: true }, a: { name: "a", value: 1e-36, scientific: true }, z: { name: "z", value: 1e-42, scientific: true }, y: { name: "y", value: 1e-48, scientific: true } }, CUBIC: { "": { name: "", value: 1, scientific: true }, da: { name: "da", value: 1e3, scientific: false }, h: { name: "h", value: 1e6, scientific: false }, k: { name: "k", value: 1e9, scientific: true }, M: { name: "M", value: 1e18, scientific: true }, G: { name: "G", value: 1e27, scientific: true }, T: { name: "T", value: 1e36, scientific: true }, P: { name: "P", value: 1e45, scientific: true }, E: { name: "E", value: 1e54, scientific: true }, Z: { name: "Z", value: 1e63, scientific: true }, Y: { name: "Y", value: 1e72, scientific: true }, d: { name: "d", value: 1e-3, scientific: false }, c: { name: "c", value: 1e-6, scientific: false }, m: { name: "m", value: 1e-9, scientific: true }, u: { name: "u", value: 1e-18, scientific: true }, n: { name: "n", value: 1e-27, scientific: true }, p: { name: "p", value: 1e-36, scientific: true }, f: { name: "f", value: 1e-45, scientific: true }, a: { name: "a", value: 1e-54, scientific: true }, z: { name: "z", value: 1e-63, scientific: true }, y: { name: "y", value: 1e-72, scientific: true } }, BINARY_SHORT_SI: { "": { name: "", value: 1, scientific: true }, k: { name: "k", value: 1e3, scientific: true }, M: { name: "M", value: 1e6, scientific: true }, G: { name: "G", value: 1e9, scientific: true }, T: { name: "T", value: 1e12, scientific: true }, P: { name: "P", value: 1e15, scientific: true }, E: { name: "E", value: 1e18, scientific: true }, Z: { name: "Z", value: 1e21, scientific: true }, Y: { name: "Y", value: 1e24, scientific: true } }, BINARY_SHORT_IEC: { "": { name: "", value: 1, scientific: true }, Ki: { name: "Ki", value: 1024, scientific: true }, Mi: { name: "Mi", value: Math.pow(1024, 2), scientific: true }, Gi: { name: "Gi", value: Math.pow(1024, 3), scientific: true }, Ti: { name: "Ti", value: Math.pow(1024, 4), scientific: true }, Pi: { name: "Pi", value: Math.pow(1024, 5), scientific: true }, Ei: { name: "Ei", value: Math.pow(1024, 6), scientific: true }, Zi: { name: "Zi", value: Math.pow(1024, 7), scientific: true }, Yi: { name: "Yi", value: Math.pow(1024, 8), scientific: true } }, BINARY_LONG_SI: { "": { name: "", value: 1, scientific: true }, kilo: { name: "kilo", value: 1e3, scientific: true }, mega: { name: "mega", value: 1e6, scientific: true }, giga: { name: "giga", value: 1e9, scientific: true }, tera: { name: "tera", value: 1e12, scientific: true }, peta: { name: "peta", value: 1e15, scientific: true }, exa: { name: "exa", value: 1e18, scientific: true }, zetta: { name: "zetta", value: 1e21, scientific: true }, yotta: { name: "yotta", value: 1e24, scientific: true } }, BINARY_LONG_IEC: { "": { name: "", value: 1, scientific: true }, kibi: { name: "kibi", value: 1024, scientific: true }, mebi: { name: "mebi", value: Math.pow(1024, 2), scientific: true }, gibi: { name: "gibi", value: Math.pow(1024, 3), scientific: true }, tebi: { name: "tebi", value: Math.pow(1024, 4), scientific: true }, pebi: { name: "pebi", value: Math.pow(1024, 5), scientific: true }, exi: { name: "exi", value: Math.pow(1024, 6), scientific: true }, zebi: { name: "zebi", value: Math.pow(1024, 7), scientific: true }, yobi: { name: "yobi", value: Math.pow(1024, 8), scientific: true } }, BTU: { "": { name: "", value: 1, scientific: true }, MM: { name: "MM", value: 1e6, scientific: true } } };
  R2.SHORTLONG = Ua({}, R2.SHORT, R2.LONG), R2.BINARY_SHORT = Ua({}, R2.BINARY_SHORT_SI, R2.BINARY_SHORT_IEC), R2.BINARY_LONG = Ua({}, R2.BINARY_LONG_SI, R2.BINARY_LONG_IEC);
  var D2 = ["MASS", "LENGTH", "TIME", "CURRENT", "TEMPERATURE", "LUMINOUS_INTENSITY", "AMOUNT_OF_SUBSTANCE", "ANGLE", "BIT"], k2 = { NONE: { dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0] }, MASS: { dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0] }, LENGTH: { dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0] }, TIME: { dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0] }, CURRENT: { dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0] }, TEMPERATURE: { dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0] }, LUMINOUS_INTENSITY: { dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0] }, AMOUNT_OF_SUBSTANCE: { dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0] }, FORCE: { dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0] }, SURFACE: { dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0] }, VOLUME: { dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0] }, ENERGY: { dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0] }, POWER: { dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0] }, PRESSURE: { dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0] }, ELECTRIC_CHARGE: { dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0] }, ELECTRIC_CAPACITANCE: { dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0] }, ELECTRIC_POTENTIAL: { dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0] }, ELECTRIC_RESISTANCE: { dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0] }, ELECTRIC_INDUCTANCE: { dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0] }, ELECTRIC_CONDUCTANCE: { dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0] }, MAGNETIC_FLUX: { dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0] }, MAGNETIC_FLUX_DENSITY: { dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0] }, FREQUENCY: { dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0] }, ANGLE: { dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0] }, BIT: { dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1] } };
  for (var I2 in k2)
    Cr(k2, I2) && (k2[I2].key = I2);
  var L2 = { name: "", base: {}, value: 1, offset: 0, dimensions: D2.map((t4) => 0) }, B2 = { meter: { name: "meter", base: k2.LENGTH, prefixes: R2.LONG, value: 1, offset: 0 }, inch: { name: "inch", base: k2.LENGTH, prefixes: R2.NONE, value: 0.0254, offset: 0 }, foot: { name: "foot", base: k2.LENGTH, prefixes: R2.NONE, value: 0.3048, offset: 0 }, yard: { name: "yard", base: k2.LENGTH, prefixes: R2.NONE, value: 0.9144, offset: 0 }, mile: { name: "mile", base: k2.LENGTH, prefixes: R2.NONE, value: 1609.344, offset: 0 }, link: { name: "link", base: k2.LENGTH, prefixes: R2.NONE, value: 0.201168, offset: 0 }, rod: { name: "rod", base: k2.LENGTH, prefixes: R2.NONE, value: 5.0292, offset: 0 }, chain: { name: "chain", base: k2.LENGTH, prefixes: R2.NONE, value: 20.1168, offset: 0 }, angstrom: { name: "angstrom", base: k2.LENGTH, prefixes: R2.NONE, value: 1e-10, offset: 0 }, m: { name: "m", base: k2.LENGTH, prefixes: R2.SHORT, value: 1, offset: 0 }, in: { name: "in", base: k2.LENGTH, prefixes: R2.NONE, value: 0.0254, offset: 0 }, ft: { name: "ft", base: k2.LENGTH, prefixes: R2.NONE, value: 0.3048, offset: 0 }, yd: { name: "yd", base: k2.LENGTH, prefixes: R2.NONE, value: 0.9144, offset: 0 }, mi: { name: "mi", base: k2.LENGTH, prefixes: R2.NONE, value: 1609.344, offset: 0 }, li: { name: "li", base: k2.LENGTH, prefixes: R2.NONE, value: 0.201168, offset: 0 }, rd: { name: "rd", base: k2.LENGTH, prefixes: R2.NONE, value: 5.02921, offset: 0 }, ch: { name: "ch", base: k2.LENGTH, prefixes: R2.NONE, value: 20.1168, offset: 0 }, mil: { name: "mil", base: k2.LENGTH, prefixes: R2.NONE, value: 254e-7, offset: 0 }, m2: { name: "m2", base: k2.SURFACE, prefixes: R2.SQUARED, value: 1, offset: 0 }, sqin: { name: "sqin", base: k2.SURFACE, prefixes: R2.NONE, value: 64516e-8, offset: 0 }, sqft: { name: "sqft", base: k2.SURFACE, prefixes: R2.NONE, value: 0.09290304, offset: 0 }, sqyd: { name: "sqyd", base: k2.SURFACE, prefixes: R2.NONE, value: 0.83612736, offset: 0 }, sqmi: { name: "sqmi", base: k2.SURFACE, prefixes: R2.NONE, value: 2589988110336e-6, offset: 0 }, sqrd: { name: "sqrd", base: k2.SURFACE, prefixes: R2.NONE, value: 25.29295, offset: 0 }, sqch: { name: "sqch", base: k2.SURFACE, prefixes: R2.NONE, value: 404.6873, offset: 0 }, sqmil: { name: "sqmil", base: k2.SURFACE, prefixes: R2.NONE, value: 64516e-14, offset: 0 }, acre: { name: "acre", base: k2.SURFACE, prefixes: R2.NONE, value: 4046.86, offset: 0 }, hectare: { name: "hectare", base: k2.SURFACE, prefixes: R2.NONE, value: 1e4, offset: 0 }, m3: { name: "m3", base: k2.VOLUME, prefixes: R2.CUBIC, value: 1, offset: 0 }, L: { name: "L", base: k2.VOLUME, prefixes: R2.SHORT, value: 1e-3, offset: 0 }, l: { name: "l", base: k2.VOLUME, prefixes: R2.SHORT, value: 1e-3, offset: 0 }, litre: { name: "litre", base: k2.VOLUME, prefixes: R2.LONG, value: 1e-3, offset: 0 }, cuin: { name: "cuin", base: k2.VOLUME, prefixes: R2.NONE, value: 16387064e-12, offset: 0 }, cuft: { name: "cuft", base: k2.VOLUME, prefixes: R2.NONE, value: 0.028316846592, offset: 0 }, cuyd: { name: "cuyd", base: k2.VOLUME, prefixes: R2.NONE, value: 0.764554857984, offset: 0 }, teaspoon: { name: "teaspoon", base: k2.VOLUME, prefixes: R2.NONE, value: 5e-6, offset: 0 }, tablespoon: { name: "tablespoon", base: k2.VOLUME, prefixes: R2.NONE, value: 15e-6, offset: 0 }, drop: { name: "drop", base: k2.VOLUME, prefixes: R2.NONE, value: 5e-8, offset: 0 }, gtt: { name: "gtt", base: k2.VOLUME, prefixes: R2.NONE, value: 5e-8, offset: 0 }, minim: { name: "minim", base: k2.VOLUME, prefixes: R2.NONE, value: 6161152e-14, offset: 0 }, fluiddram: { name: "fluiddram", base: k2.VOLUME, prefixes: R2.NONE, value: 36966911e-13, offset: 0 }, fluidounce: { name: "fluidounce", base: k2.VOLUME, prefixes: R2.NONE, value: 2957353e-11, offset: 0 }, gill: { name: "gill", base: k2.VOLUME, prefixes: R2.NONE, value: 1182941e-10, offset: 0 }, cc: { name: "cc", base: k2.VOLUME, prefixes: R2.NONE, value: 1e-6, offset: 0 }, cup: { name: "cup", base: k2.VOLUME, prefixes: R2.NONE, value: 2365882e-10, offset: 0 }, pint: { name: "pint", base: k2.VOLUME, prefixes: R2.NONE, value: 4731765e-10, offset: 0 }, quart: { name: "quart", base: k2.VOLUME, prefixes: R2.NONE, value: 9463529e-10, offset: 0 }, gallon: { name: "gallon", base: k2.VOLUME, prefixes: R2.NONE, value: 3785412e-9, offset: 0 }, beerbarrel: { name: "beerbarrel", base: k2.VOLUME, prefixes: R2.NONE, value: 0.1173478, offset: 0 }, oilbarrel: { name: "oilbarrel", base: k2.VOLUME, prefixes: R2.NONE, value: 0.1589873, offset: 0 }, hogshead: { name: "hogshead", base: k2.VOLUME, prefixes: R2.NONE, value: 0.238481, offset: 0 }, fldr: { name: "fldr", base: k2.VOLUME, prefixes: R2.NONE, value: 36966911e-13, offset: 0 }, floz: { name: "floz", base: k2.VOLUME, prefixes: R2.NONE, value: 2957353e-11, offset: 0 }, gi: { name: "gi", base: k2.VOLUME, prefixes: R2.NONE, value: 1182941e-10, offset: 0 }, cp: { name: "cp", base: k2.VOLUME, prefixes: R2.NONE, value: 2365882e-10, offset: 0 }, pt: { name: "pt", base: k2.VOLUME, prefixes: R2.NONE, value: 4731765e-10, offset: 0 }, qt: { name: "qt", base: k2.VOLUME, prefixes: R2.NONE, value: 9463529e-10, offset: 0 }, gal: { name: "gal", base: k2.VOLUME, prefixes: R2.NONE, value: 3785412e-9, offset: 0 }, bbl: { name: "bbl", base: k2.VOLUME, prefixes: R2.NONE, value: 0.1173478, offset: 0 }, obl: { name: "obl", base: k2.VOLUME, prefixes: R2.NONE, value: 0.1589873, offset: 0 }, g: { name: "g", base: k2.MASS, prefixes: R2.SHORT, value: 1e-3, offset: 0 }, gram: { name: "gram", base: k2.MASS, prefixes: R2.LONG, value: 1e-3, offset: 0 }, ton: { name: "ton", base: k2.MASS, prefixes: R2.SHORT, value: 907.18474, offset: 0 }, t: { name: "t", base: k2.MASS, prefixes: R2.SHORT, value: 1e3, offset: 0 }, tonne: { name: "tonne", base: k2.MASS, prefixes: R2.LONG, value: 1e3, offset: 0 }, grain: { name: "grain", base: k2.MASS, prefixes: R2.NONE, value: 6479891e-11, offset: 0 }, dram: { name: "dram", base: k2.MASS, prefixes: R2.NONE, value: 0.0017718451953125, offset: 0 }, ounce: { name: "ounce", base: k2.MASS, prefixes: R2.NONE, value: 0.028349523125, offset: 0 }, poundmass: { name: "poundmass", base: k2.MASS, prefixes: R2.NONE, value: 0.45359237, offset: 0 }, hundredweight: { name: "hundredweight", base: k2.MASS, prefixes: R2.NONE, value: 45.359237, offset: 0 }, stick: { name: "stick", base: k2.MASS, prefixes: R2.NONE, value: 0.115, offset: 0 }, stone: { name: "stone", base: k2.MASS, prefixes: R2.NONE, value: 6.35029318, offset: 0 }, gr: { name: "gr", base: k2.MASS, prefixes: R2.NONE, value: 6479891e-11, offset: 0 }, dr: { name: "dr", base: k2.MASS, prefixes: R2.NONE, value: 0.0017718451953125, offset: 0 }, oz: { name: "oz", base: k2.MASS, prefixes: R2.NONE, value: 0.028349523125, offset: 0 }, lbm: { name: "lbm", base: k2.MASS, prefixes: R2.NONE, value: 0.45359237, offset: 0 }, cwt: { name: "cwt", base: k2.MASS, prefixes: R2.NONE, value: 45.359237, offset: 0 }, s: { name: "s", base: k2.TIME, prefixes: R2.SHORT, value: 1, offset: 0 }, min: { name: "min", base: k2.TIME, prefixes: R2.NONE, value: 60, offset: 0 }, h: { name: "h", base: k2.TIME, prefixes: R2.NONE, value: 3600, offset: 0 }, second: { name: "second", base: k2.TIME, prefixes: R2.LONG, value: 1, offset: 0 }, sec: { name: "sec", base: k2.TIME, prefixes: R2.LONG, value: 1, offset: 0 }, minute: { name: "minute", base: k2.TIME, prefixes: R2.NONE, value: 60, offset: 0 }, hour: { name: "hour", base: k2.TIME, prefixes: R2.NONE, value: 3600, offset: 0 }, day: { name: "day", base: k2.TIME, prefixes: R2.NONE, value: 86400, offset: 0 }, week: { name: "week", base: k2.TIME, prefixes: R2.NONE, value: 604800, offset: 0 }, month: { name: "month", base: k2.TIME, prefixes: R2.NONE, value: 2629800, offset: 0 }, year: { name: "year", base: k2.TIME, prefixes: R2.NONE, value: 31557600, offset: 0 }, decade: { name: "decade", base: k2.TIME, prefixes: R2.NONE, value: 315576e3, offset: 0 }, century: { name: "century", base: k2.TIME, prefixes: R2.NONE, value: 315576e4, offset: 0 }, millennium: { name: "millennium", base: k2.TIME, prefixes: R2.NONE, value: 315576e5, offset: 0 }, hertz: { name: "Hertz", base: k2.FREQUENCY, prefixes: R2.LONG, value: 1, offset: 0, reciprocal: true }, Hz: { name: "Hz", base: k2.FREQUENCY, prefixes: R2.SHORT, value: 1, offset: 0, reciprocal: true }, rad: { name: "rad", base: k2.ANGLE, prefixes: R2.SHORT, value: 1, offset: 0 }, radian: { name: "radian", base: k2.ANGLE, prefixes: R2.LONG, value: 1, offset: 0 }, deg: { name: "deg", base: k2.ANGLE, prefixes: R2.SHORT, value: null, offset: 0 }, degree: { name: "degree", base: k2.ANGLE, prefixes: R2.LONG, value: null, offset: 0 }, grad: { name: "grad", base: k2.ANGLE, prefixes: R2.SHORT, value: null, offset: 0 }, gradian: { name: "gradian", base: k2.ANGLE, prefixes: R2.LONG, value: null, offset: 0 }, cycle: { name: "cycle", base: k2.ANGLE, prefixes: R2.NONE, value: null, offset: 0 }, arcsec: { name: "arcsec", base: k2.ANGLE, prefixes: R2.NONE, value: null, offset: 0 }, arcmin: { name: "arcmin", base: k2.ANGLE, prefixes: R2.NONE, value: null, offset: 0 }, A: { name: "A", base: k2.CURRENT, prefixes: R2.SHORT, value: 1, offset: 0 }, ampere: { name: "ampere", base: k2.CURRENT, prefixes: R2.LONG, value: 1, offset: 0 }, K: { name: "K", base: k2.TEMPERATURE, prefixes: R2.NONE, value: 1, offset: 0 }, degC: { name: "degC", base: k2.TEMPERATURE, prefixes: R2.NONE, value: 1, offset: 273.15 }, degF: { name: "degF", base: k2.TEMPERATURE, prefixes: R2.NONE, value: 1 / 1.8, offset: 459.67 }, degR: { name: "degR", base: k2.TEMPERATURE, prefixes: R2.NONE, value: 1 / 1.8, offset: 0 }, kelvin: { name: "kelvin", base: k2.TEMPERATURE, prefixes: R2.NONE, value: 1, offset: 0 }, celsius: { name: "celsius", base: k2.TEMPERATURE, prefixes: R2.NONE, value: 1, offset: 273.15 }, fahrenheit: { name: "fahrenheit", base: k2.TEMPERATURE, prefixes: R2.NONE, value: 1 / 1.8, offset: 459.67 }, rankine: { name: "rankine", base: k2.TEMPERATURE, prefixes: R2.NONE, value: 1 / 1.8, offset: 0 }, mol: { name: "mol", base: k2.AMOUNT_OF_SUBSTANCE, prefixes: R2.SHORT, value: 1, offset: 0 }, mole: { name: "mole", base: k2.AMOUNT_OF_SUBSTANCE, prefixes: R2.LONG, value: 1, offset: 0 }, cd: { name: "cd", base: k2.LUMINOUS_INTENSITY, prefixes: R2.SHORT, value: 1, offset: 0 }, candela: { name: "candela", base: k2.LUMINOUS_INTENSITY, prefixes: R2.LONG, value: 1, offset: 0 }, N: { name: "N", base: k2.FORCE, prefixes: R2.SHORT, value: 1, offset: 0 }, newton: { name: "newton", base: k2.FORCE, prefixes: R2.LONG, value: 1, offset: 0 }, dyn: { name: "dyn", base: k2.FORCE, prefixes: R2.SHORT, value: 1e-5, offset: 0 }, dyne: { name: "dyne", base: k2.FORCE, prefixes: R2.LONG, value: 1e-5, offset: 0 }, lbf: { name: "lbf", base: k2.FORCE, prefixes: R2.NONE, value: 4.4482216152605, offset: 0 }, poundforce: { name: "poundforce", base: k2.FORCE, prefixes: R2.NONE, value: 4.4482216152605, offset: 0 }, kip: { name: "kip", base: k2.FORCE, prefixes: R2.LONG, value: 4448.2216, offset: 0 }, kilogramforce: { name: "kilogramforce", base: k2.FORCE, prefixes: R2.NONE, value: 9.80665, offset: 0 }, J: { name: "J", base: k2.ENERGY, prefixes: R2.SHORT, value: 1, offset: 0 }, joule: { name: "joule", base: k2.ENERGY, prefixes: R2.SHORT, value: 1, offset: 0 }, erg: { name: "erg", base: k2.ENERGY, prefixes: R2.NONE, value: 1e-7, offset: 0 }, Wh: { name: "Wh", base: k2.ENERGY, prefixes: R2.SHORT, value: 3600, offset: 0 }, BTU: { name: "BTU", base: k2.ENERGY, prefixes: R2.BTU, value: 1055.05585262, offset: 0 }, eV: { name: "eV", base: k2.ENERGY, prefixes: R2.SHORT, value: 1602176565e-28, offset: 0 }, electronvolt: { name: "electronvolt", base: k2.ENERGY, prefixes: R2.LONG, value: 1602176565e-28, offset: 0 }, W: { name: "W", base: k2.POWER, prefixes: R2.SHORT, value: 1, offset: 0 }, watt: { name: "watt", base: k2.POWER, prefixes: R2.LONG, value: 1, offset: 0 }, hp: { name: "hp", base: k2.POWER, prefixes: R2.NONE, value: 745.6998715386, offset: 0 }, VAR: { name: "VAR", base: k2.POWER, prefixes: R2.SHORT, value: v2.I, offset: 0 }, VA: { name: "VA", base: k2.POWER, prefixes: R2.SHORT, value: 1, offset: 0 }, Pa: { name: "Pa", base: k2.PRESSURE, prefixes: R2.SHORT, value: 1, offset: 0 }, psi: { name: "psi", base: k2.PRESSURE, prefixes: R2.NONE, value: 6894.75729276459, offset: 0 }, atm: { name: "atm", base: k2.PRESSURE, prefixes: R2.NONE, value: 101325, offset: 0 }, bar: { name: "bar", base: k2.PRESSURE, prefixes: R2.SHORTLONG, value: 1e5, offset: 0 }, torr: { name: "torr", base: k2.PRESSURE, prefixes: R2.NONE, value: 133.322, offset: 0 }, mmHg: { name: "mmHg", base: k2.PRESSURE, prefixes: R2.NONE, value: 133.322, offset: 0 }, mmH2O: { name: "mmH2O", base: k2.PRESSURE, prefixes: R2.NONE, value: 9.80665, offset: 0 }, cmH2O: { name: "cmH2O", base: k2.PRESSURE, prefixes: R2.NONE, value: 98.0665, offset: 0 }, coulomb: { name: "coulomb", base: k2.ELECTRIC_CHARGE, prefixes: R2.LONG, value: 1, offset: 0 }, C: { name: "C", base: k2.ELECTRIC_CHARGE, prefixes: R2.SHORT, value: 1, offset: 0 }, farad: { name: "farad", base: k2.ELECTRIC_CAPACITANCE, prefixes: R2.LONG, value: 1, offset: 0 }, F: { name: "F", base: k2.ELECTRIC_CAPACITANCE, prefixes: R2.SHORT, value: 1, offset: 0 }, volt: { name: "volt", base: k2.ELECTRIC_POTENTIAL, prefixes: R2.LONG, value: 1, offset: 0 }, V: { name: "V", base: k2.ELECTRIC_POTENTIAL, prefixes: R2.SHORT, value: 1, offset: 0 }, ohm: { name: "ohm", base: k2.ELECTRIC_RESISTANCE, prefixes: R2.SHORTLONG, value: 1, offset: 0 }, henry: { name: "henry", base: k2.ELECTRIC_INDUCTANCE, prefixes: R2.LONG, value: 1, offset: 0 }, H: { name: "H", base: k2.ELECTRIC_INDUCTANCE, prefixes: R2.SHORT, value: 1, offset: 0 }, siemens: { name: "siemens", base: k2.ELECTRIC_CONDUCTANCE, prefixes: R2.LONG, value: 1, offset: 0 }, S: { name: "S", base: k2.ELECTRIC_CONDUCTANCE, prefixes: R2.SHORT, value: 1, offset: 0 }, weber: { name: "weber", base: k2.MAGNETIC_FLUX, prefixes: R2.LONG, value: 1, offset: 0 }, Wb: { name: "Wb", base: k2.MAGNETIC_FLUX, prefixes: R2.SHORT, value: 1, offset: 0 }, tesla: { name: "tesla", base: k2.MAGNETIC_FLUX_DENSITY, prefixes: R2.LONG, value: 1, offset: 0 }, T: { name: "T", base: k2.MAGNETIC_FLUX_DENSITY, prefixes: R2.SHORT, value: 1, offset: 0 }, b: { name: "b", base: k2.BIT, prefixes: R2.BINARY_SHORT, value: 1, offset: 0 }, bits: { name: "bits", base: k2.BIT, prefixes: R2.BINARY_LONG, value: 1, offset: 0 }, B: { name: "B", base: k2.BIT, prefixes: R2.BINARY_SHORT, value: 8, offset: 0 }, bytes: { name: "bytes", base: k2.BIT, prefixes: R2.BINARY_LONG, value: 8, offset: 0 } }, F2 = { meters: "meter", inches: "inch", feet: "foot", yards: "yard", miles: "mile", links: "link", rods: "rod", chains: "chain", angstroms: "angstrom", lt: "l", litres: "litre", liter: "litre", liters: "litre", teaspoons: "teaspoon", tablespoons: "tablespoon", minims: "minim", fluiddrams: "fluiddram", fluidounces: "fluidounce", gills: "gill", cups: "cup", pints: "pint", quarts: "quart", gallons: "gallon", beerbarrels: "beerbarrel", oilbarrels: "oilbarrel", hogsheads: "hogshead", gtts: "gtt", grams: "gram", tons: "ton", tonnes: "tonne", grains: "grain", drams: "dram", ounces: "ounce", poundmasses: "poundmass", hundredweights: "hundredweight", sticks: "stick", lb: "lbm", lbs: "lbm", kips: "kip", kgf: "kilogramforce", acres: "acre", hectares: "hectare", sqfeet: "sqft", sqyard: "sqyd", sqmile: "sqmi", sqmiles: "sqmi", mmhg: "mmHg", mmh2o: "mmH2O", cmh2o: "cmH2O", seconds: "second", secs: "second", minutes: "minute", mins: "minute", hours: "hour", hr: "hour", hrs: "hour", days: "day", weeks: "week", months: "month", years: "year", decades: "decade", centuries: "century", millennia: "millennium", hertz: "hertz", radians: "radian", degrees: "degree", gradians: "gradian", cycles: "cycle", arcsecond: "arcsec", arcseconds: "arcsec", arcminute: "arcmin", arcminutes: "arcmin", BTUs: "BTU", watts: "watt", joules: "joule", amperes: "ampere", coulombs: "coulomb", volts: "volt", ohms: "ohm", farads: "farad", webers: "weber", teslas: "tesla", electronvolts: "electronvolt", moles: "mole", bit: "bits", byte: "bytes" };
  function P2(t4) {
    if (t4.number === "BigNumber") {
      var e3 = Fa(x2);
      B2.rad.value = new x2(1), B2.deg.value = e3.div(180), B2.grad.value = e3.div(200), B2.cycle.value = e3.times(2), B2.arcsec.value = e3.div(648e3), B2.arcmin.value = e3.div(10800);
    } else
      B2.rad.value = 1, B2.deg.value = Math.PI / 180, B2.grad.value = Math.PI / 200, B2.cycle.value = 2 * Math.PI, B2.arcsec.value = Math.PI / 648e3, B2.arcmin.value = Math.PI / 10800;
    B2.radian.value = B2.rad.value, B2.degree.value = B2.deg.value, B2.gradian.value = B2.grad.value;
  }
  P2(s2), i2 && i2("config", function(t4, e3) {
    t4.number !== e3.number && P2(t4);
  });
  var U2 = { si: { NONE: { unit: L2, prefix: R2.NONE[""] }, LENGTH: { unit: B2.m, prefix: R2.SHORT[""] }, MASS: { unit: B2.g, prefix: R2.SHORT.k }, TIME: { unit: B2.s, prefix: R2.SHORT[""] }, CURRENT: { unit: B2.A, prefix: R2.SHORT[""] }, TEMPERATURE: { unit: B2.K, prefix: R2.SHORT[""] }, LUMINOUS_INTENSITY: { unit: B2.cd, prefix: R2.SHORT[""] }, AMOUNT_OF_SUBSTANCE: { unit: B2.mol, prefix: R2.SHORT[""] }, ANGLE: { unit: B2.rad, prefix: R2.SHORT[""] }, BIT: { unit: B2.bits, prefix: R2.SHORT[""] }, FORCE: { unit: B2.N, prefix: R2.SHORT[""] }, ENERGY: { unit: B2.J, prefix: R2.SHORT[""] }, POWER: { unit: B2.W, prefix: R2.SHORT[""] }, PRESSURE: { unit: B2.Pa, prefix: R2.SHORT[""] }, ELECTRIC_CHARGE: { unit: B2.C, prefix: R2.SHORT[""] }, ELECTRIC_CAPACITANCE: { unit: B2.F, prefix: R2.SHORT[""] }, ELECTRIC_POTENTIAL: { unit: B2.V, prefix: R2.SHORT[""] }, ELECTRIC_RESISTANCE: { unit: B2.ohm, prefix: R2.SHORT[""] }, ELECTRIC_INDUCTANCE: { unit: B2.H, prefix: R2.SHORT[""] }, ELECTRIC_CONDUCTANCE: { unit: B2.S, prefix: R2.SHORT[""] }, MAGNETIC_FLUX: { unit: B2.Wb, prefix: R2.SHORT[""] }, MAGNETIC_FLUX_DENSITY: { unit: B2.T, prefix: R2.SHORT[""] }, FREQUENCY: { unit: B2.Hz, prefix: R2.SHORT[""] } } };
  U2.cgs = JSON.parse(JSON.stringify(U2.si)), U2.cgs.LENGTH = { unit: B2.m, prefix: R2.SHORT.c }, U2.cgs.MASS = { unit: B2.g, prefix: R2.SHORT[""] }, U2.cgs.FORCE = { unit: B2.dyn, prefix: R2.SHORT[""] }, U2.cgs.ENERGY = { unit: B2.erg, prefix: R2.NONE[""] }, U2.us = JSON.parse(JSON.stringify(U2.si)), U2.us.LENGTH = { unit: B2.ft, prefix: R2.NONE[""] }, U2.us.MASS = { unit: B2.lbm, prefix: R2.NONE[""] }, U2.us.TEMPERATURE = { unit: B2.degF, prefix: R2.NONE[""] }, U2.us.FORCE = { unit: B2.lbf, prefix: R2.NONE[""] }, U2.us.ENERGY = { unit: B2.BTU, prefix: R2.BTU[""] }, U2.us.POWER = { unit: B2.hp, prefix: R2.NONE[""] }, U2.us.PRESSURE = { unit: B2.psi, prefix: R2.NONE[""] }, U2.auto = JSON.parse(JSON.stringify(U2.si));
  var j2 = U2.auto;
  for (var q2 in _2.setUnitSystem = function(t4) {
    if (!Cr(U2, t4))
      throw new Error("Unit system " + t4 + " does not exist. Choices are: " + Object.keys(U2).join(", "));
    j2 = U2[t4];
  }, _2.getUnitSystem = function() {
    for (var t4 in U2)
      if (Cr(U2, t4) && U2[t4] === j2)
        return t4;
  }, _2.typeConverters = { BigNumber: function(t4) {
    return new x2(t4 + "");
  }, Fraction: function(t4) {
    return new w2(t4);
  }, Complex: function(t4) {
    return t4;
  }, number: function(t4) {
    return t4;
  } }, _2._getNumberConverter = function(t4) {
    if (!_2.typeConverters[t4])
      throw new TypeError('Unsupported type "' + t4 + '"');
    return _2.typeConverters[t4];
  }, B2)
    if (Cr(B2, q2)) {
      var H2 = B2[q2];
      H2.dimensions = H2.base.dimensions;
    }
  for (var V2 in F2)
    if (Cr(F2, V2)) {
      var $2 = B2[F2[V2]], G2 = {};
      for (var W2 in $2)
        Cr($2, W2) && (G2[W2] = $2[W2]);
      G2.name = V2, B2[V2] = G2;
    }
  return _2.isValidAlpha = function(t4) {
    return /^[a-zA-Z]$/.test(t4);
  }, _2.createUnit = function(t4, e3) {
    if (typeof t4 != "object")
      throw new TypeError("createUnit expects first parameter to be of type 'Object'");
    if (e3 && e3.override) {
      for (var r3 in t4)
        if (Cr(t4, r3) && _2.deleteUnit(r3), t4[r3].aliases)
          for (var n3 = 0; n3 < t4[r3].aliases.length; n3++)
            _2.deleteUnit(t4[r3].aliases[n3]);
    }
    var i3;
    for (var s3 in t4)
      Cr(t4, s3) && (i3 = _2.createUnitSingle(s3, t4[s3]));
    return i3;
  }, _2.createUnitSingle = function(t4, e3, r3) {
    if (e3 == null && (e3 = {}), typeof t4 != "string")
      throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
    if (Cr(B2, t4))
      throw new Error('Cannot create unit "' + t4 + '": a unit with that name already exists');
    !function(t5) {
      for (var e4 = 0; e4 < t5.length; e4++) {
        if (n2 = t5.charAt(e4), e4 === 0 && !_2.isValidAlpha(n2))
          throw new Error('Invalid unit name (must begin with alpha character): "' + t5 + '"');
        if (e4 > 0 && !_2.isValidAlpha(n2) && !N2(n2))
          throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + t5 + '"');
      }
    }(t4);
    var i3, s3, a3, o3 = null, u3 = [], h2 = 0;
    if (e3 && e3.type === "Unit")
      o3 = e3.clone();
    else if (typeof e3 == "string")
      e3 !== "" && (i3 = e3);
    else {
      if (typeof e3 != "object")
        throw new TypeError('Cannot create unit "' + t4 + '" from "' + e3.toString() + '": expecting "string" or "Unit" or "Object"');
      i3 = e3.definition, s3 = e3.prefixes, h2 = e3.offset, a3 = e3.baseName, e3.aliases && (u3 = e3.aliases.valueOf());
    }
    if (u3) {
      for (var c3 = 0; c3 < u3.length; c3++)
        if (Cr(B2, u3[c3]))
          throw new Error('Cannot create alias "' + u3[c3] + '": a unit with that name already exists');
    }
    if (i3 && typeof i3 == "string" && !o3)
      try {
        o3 = _2.parse(i3, { allowNoUnits: true });
      } catch (S3) {
        throw S3.message = 'Could not create unit "' + t4 + '" from "' + i3 + '": ' + S3.message, S3;
      }
    else
      i3 && i3.type === "Unit" && (o3 = i3.clone());
    u3 = u3 || [], h2 = h2 || 0, s3 = s3 && s3.toUpperCase && R2[s3.toUpperCase()] || R2.NONE;
    var l3 = {};
    if (o3) {
      l3 = { name: t4, value: o3.value, dimensions: o3.dimensions.slice(0), prefixes: s3, offset: h2 };
      var p3 = false;
      for (var f3 in k2)
        if (Cr(k2, f3)) {
          for (var d2 = true, m3 = 0; m3 < D2.length; m3++)
            if (Math.abs((l3.dimensions[m3] || 0) - (k2[f3].dimensions[m3] || 0)) > 1e-12) {
              d2 = false;
              break;
            }
          if (d2) {
            p3 = true, l3.base = k2[f3];
            break;
          }
        }
      if (!p3) {
        a3 = a3 || t4 + "_STUFF";
        var y3 = { dimensions: o3.dimensions.slice(0) };
        y3.key = a3, k2[a3] = y3, j2[a3] = { unit: l3, prefix: R2.NONE[""] }, l3.base = k2[a3];
      }
    } else {
      if (a3 = a3 || t4 + "_STUFF", D2.indexOf(a3) >= 0)
        throw new Error('Cannot create new base unit "' + t4 + '": a base unit with that name already exists (and cannot be overridden)');
      for (var g3 in D2.push(a3), k2)
        Cr(k2, g3) && (k2[g3].dimensions[D2.length - 1] = 0);
      for (var v3 = { dimensions: [] }, x3 = 0; x3 < D2.length; x3++)
        v3.dimensions[x3] = 0;
      v3.dimensions[D2.length - 1] = 1, v3.key = a3, k2[a3] = v3, l3 = { name: t4, value: 1, dimensions: k2[a3].dimensions.slice(0), prefixes: s3, offset: h2, base: k2[a3] }, j2[a3] = { unit: l3, prefix: R2.NONE[""] };
    }
    _2.UNITS[t4] = l3;
    for (var w3 = 0; w3 < u3.length; w3++) {
      var b3 = u3[w3], M3 = {};
      for (var E3 in l3)
        Cr(l3, E3) && (M3[E3] = l3[E3]);
      M3.name = b3, _2.UNITS[b3] = M3;
    }
    return delete C2.cache, new _2(null, t4);
  }, _2.deleteUnit = function(t4) {
    delete _2.UNITS[t4];
  }, _2.PREFIXES = R2, _2.BASE_DIMENSIONS = D2, _2.BASE_UNITS = k2, _2.UNIT_SYSTEMS = U2, _2.UNITS = B2, _2;
}, { isClass: true }), $a = wn("unit", ["typed", "Unit"], (t3) => {
  var { typed: e2, Unit: r2 } = t3;
  return e2("unit", { Unit: function(t4) {
    return t4.clone();
  }, string: function(t4) {
    return r2.isValuelessUnit(t4) ? new r2(null, t4) : r2.parse(t4, { allowNoUnits: true });
  }, "number | BigNumber | Fraction | Complex, string": function(t4, e3) {
    return new r2(t4, e3);
  }, "Array | Matrix": function(t4) {
    return ds(t4, this);
  } });
}), Ga = wn("createUnit", ["typed", "Unit"], (t3) => {
  var { typed: e2, Unit: r2 } = t3;
  return e2("createUnit", { "Object, Object": function(t4, e3) {
    return r2.createUnit(t4, e3);
  }, Object: function(t4) {
    return r2.createUnit(t4, {});
  }, "string, Unit | string | Object, Object": function(t4, e3, n2) {
    var i2 = {};
    return i2[t4] = e3, r2.createUnit(i2, n2);
  }, "string, Unit | string | Object": function(t4, e3) {
    var n2 = {};
    return n2[t4] = e3, r2.createUnit(n2, {});
  }, string: function(t4) {
    var e3 = {};
    return e3[t4] = {}, r2.createUnit(e3, {});
  } });
}), Wa = wn("add", ["typed", "matrix", "addScalar", "equalScalar", "DenseMatrix", "SparseMatrix"], (t3) => {
  var { typed: e2, matrix: r2, addScalar: n2, equalScalar: i2, DenseMatrix: s2, SparseMatrix: a2 } = t3, o2 = qs({ typed: e2 }), u2 = Hs({ typed: e2, equalScalar: i2 }), h = Vs({ typed: e2, DenseMatrix: s2 }), c2 = $s({ typed: e2 }), l2 = Fs({ typed: e2 });
  return e2("add", Nr({ "DenseMatrix, DenseMatrix": function(t4, e3) {
    return c2(t4, e3, n2);
  }, "DenseMatrix, SparseMatrix": function(t4, e3) {
    return o2(t4, e3, n2, false);
  }, "SparseMatrix, DenseMatrix": function(t4, e3) {
    return o2(e3, t4, n2, true);
  }, "SparseMatrix, SparseMatrix": function(t4, e3) {
    return u2(t4, e3, n2);
  }, "Array, Array": function(t4, e3) {
    return this(r2(t4), r2(e3)).valueOf();
  }, "Array, Matrix": function(t4, e3) {
    return this(r2(t4), e3);
  }, "Matrix, Array": function(t4, e3) {
    return this(t4, r2(e3));
  }, "DenseMatrix, any": function(t4, e3) {
    return l2(t4, e3, n2, false);
  }, "SparseMatrix, any": function(t4, e3) {
    return h(t4, e3, n2, false);
  }, "any, DenseMatrix": function(t4, e3) {
    return l2(e3, t4, n2, true);
  }, "any, SparseMatrix": function(t4, e3) {
    return h(e3, t4, n2, true);
  }, "Array, any": function(t4, e3) {
    return l2(r2(t4), e3, n2, false).valueOf();
  }, "any, Array": function(t4, e3) {
    return l2(r2(e3), t4, n2, true).valueOf();
  }, "any, any": n2, "any, any, ...any": function(t4, e3, r3) {
    for (var n3 = this(t4, e3), i3 = 0; i3 < r3.length; i3++)
      n3 = this(n3, r3[i3]);
    return n3;
  } }, n2.signatures));
}), Ya = wn("dot", ["typed", "addScalar", "multiplyScalar", "conj", "size"], (t3) => {
  var { typed: e2, addScalar: r2, multiplyScalar: n2, conj: i2, size: s2 } = t3;
  return e2("dot", { "Array | DenseMatrix, Array | DenseMatrix": function(t4, s3) {
    var u2 = a2(t4, s3), h = Ve(t4) ? t4._data : t4, c2 = Ve(t4) ? t4._datatype : void 0, l2 = Ve(s3) ? s3._data : s3, p2 = Ve(s3) ? s3._datatype : void 0, f2 = o2(t4).length === 2, d = o2(s3).length === 2, m2 = r2, y2 = n2;
    if (c2 && p2 && c2 === p2 && typeof c2 == "string") {
      var g2 = c2;
      m2 = e2.find(r2, [g2, g2]), y2 = e2.find(n2, [g2, g2]);
    }
    if (!f2 && !d) {
      for (var v2 = y2(i2(h[0]), l2[0]), x2 = 1; x2 < u2; x2++)
        v2 = m2(v2, y2(i2(h[x2]), l2[x2]));
      return v2;
    }
    if (!f2 && d) {
      for (var w2 = y2(i2(h[0]), l2[0][0]), b2 = 1; b2 < u2; b2++)
        w2 = m2(w2, y2(i2(h[b2]), l2[b2][0]));
      return w2;
    }
    if (f2 && !d) {
      for (var _2 = y2(i2(h[0][0]), l2[0]), M2 = 1; M2 < u2; M2++)
        _2 = m2(_2, y2(i2(h[M2][0]), l2[M2]));
      return _2;
    }
    if (f2 && d) {
      for (var N2 = y2(i2(h[0][0]), l2[0][0]), E2 = 1; E2 < u2; E2++)
        N2 = m2(N2, y2(i2(h[E2][0]), l2[E2][0]));
      return N2;
    }
  }, "SparseMatrix, SparseMatrix": function(t4, e3) {
    a2(t4, e3);
    var i3 = t4._index, s3 = t4._values, o3 = e3._index, u2 = e3._values, h = 0, c2 = r2, l2 = n2, p2 = 0, f2 = 0;
    for (; p2 < i3.length && f2 < o3.length; ) {
      var d = i3[p2], m2 = o3[f2];
      d < m2 ? p2++ : d > m2 ? f2++ : d === m2 && (h = c2(h, l2(s3[p2], u2[f2])), p2++, f2++);
    }
    return h;
  } });
  function a2(t4, e3) {
    var r3, n3, i3 = o2(t4), s3 = o2(e3);
    if (i3.length === 1)
      r3 = i3[0];
    else {
      if (i3.length !== 2 || i3[1] !== 1)
        throw new RangeError("Expected a column vector, instead got a matrix of size (" + i3.join(", ") + ")");
      r3 = i3[0];
    }
    if (s3.length === 1)
      n3 = s3[0];
    else {
      if (s3.length !== 2 || s3[1] !== 1)
        throw new RangeError("Expected a column vector, instead got a matrix of size (" + s3.join(", ") + ")");
      n3 = s3[0];
    }
    if (r3 !== n3)
      throw new RangeError("Vectors must have equal length (" + r3 + " != " + n3 + ")");
    if (r3 === 0)
      throw new RangeError("Cannot calculate the dot product of empty vectors");
    return r3;
  }
  function o2(t4) {
    return Ve(t4) ? t4.size() : s2(t4);
  }
}), Za = { end: true }, Xa = wn("Node", ["mathWithTransform"], (t3) => {
  var { mathWithTransform: e2 } = t3;
  function r2() {
    if (!(this instanceof r2))
      throw new SyntaxError("Constructor must be called with the new operator");
  }
  return r2.prototype.evaluate = function(t4) {
    return this.compile().evaluate(t4);
  }, r2.prototype.type = "Node", r2.prototype.isNode = true, r2.prototype.comment = "", r2.prototype.compile = function() {
    var t4 = this._compile(e2, {}), r3 = {};
    return { evaluate: function(e3) {
      var n2 = e3 || {};
      return function(t5) {
        for (var e4 in t5)
          if (Cr(t5, e4) && e4 in Za)
            throw new Error('Scope contains an illegal symbol, "' + e4 + '" is a reserved keyword');
      }(n2), t4(n2, r3, null);
    } };
  }, r2.prototype._compile = function(t4, e3) {
    throw new Error("Method _compile should be implemented by type " + this.type);
  }, r2.prototype.forEach = function(t4) {
    throw new Error("Cannot run forEach on a Node interface");
  }, r2.prototype.map = function(t4) {
    throw new Error("Cannot run map on a Node interface");
  }, r2.prototype._ifNode = function(t4) {
    if (!dr(t4))
      throw new TypeError("Callback function must return a Node");
    return t4;
  }, r2.prototype.traverse = function(t4) {
    t4(this, null, null), function t5(e3, r3) {
      e3.forEach(function(e4, n2, i2) {
        r3(e4, n2, i2), t5(e4, r3);
      });
    }(this, t4);
  }, r2.prototype.transform = function(t4) {
    return function e3(r3, n2, i2) {
      var s2 = t4(r3, n2, i2);
      return s2 !== r3 ? s2 : r3.map(e3);
    }(this, null, null);
  }, r2.prototype.filter = function(t4) {
    var e3 = [];
    return this.traverse(function(r3, n2, i2) {
      t4(r3, n2, i2) && e3.push(r3);
    }), e3;
  }, r2.prototype.clone = function() {
    throw new Error("Cannot clone a Node interface");
  }, r2.prototype.cloneDeep = function() {
    return this.map(function(t4) {
      return t4.cloneDeep();
    });
  }, r2.prototype.equals = function(t4) {
    return !!t4 && Sr(this, t4);
  }, r2.prototype.toString = function(t4) {
    var e3;
    if (t4 && typeof t4 == "object")
      switch (typeof t4.handler) {
        case "object":
        case "undefined":
          break;
        case "function":
          e3 = t4.handler(this, t4);
          break;
        default:
          throw new TypeError("Object or function expected as callback");
      }
    return e3 !== void 0 ? e3 : this._toString(t4);
  }, r2.prototype.toJSON = function() {
    throw new Error("Cannot serialize object: toJSON not implemented by " + this.type);
  }, r2.prototype.toHTML = function(t4) {
    var e3;
    if (t4 && typeof t4 == "object")
      switch (typeof t4.handler) {
        case "object":
        case "undefined":
          break;
        case "function":
          e3 = t4.handler(this, t4);
          break;
        default:
          throw new TypeError("Object or function expected as callback");
      }
    return e3 !== void 0 ? e3 : this.toHTML(t4);
  }, r2.prototype._toString = function() {
    throw new Error("_toString not implemented for " + this.type);
  }, r2.prototype.toTex = function(t4) {
    var e3;
    if (t4 && typeof t4 == "object")
      switch (typeof t4.handler) {
        case "object":
        case "undefined":
          break;
        case "function":
          e3 = t4.handler(this, t4);
          break;
        default:
          throw new TypeError("Object or function expected as callback");
      }
    return e3 !== void 0 ? e3 : this._toTex(t4);
  }, r2.prototype._toTex = function(t4) {
    throw new Error("_toTex not implemented for " + this.type);
  }, r2.prototype.getIdentifier = function() {
    return this.type;
  }, r2.prototype.getContent = function() {
    return this;
  }, r2;
}, { isClass: true, isNode: true });
function Ja(t3) {
  return t3 && t3.isIndexError ? new sn(t3.index + 1, t3.min + 1, t3.max !== void 0 ? t3.max + 1 : void 0) : t3;
}
function Qa(t3) {
  var { subset: e2 } = t3;
  return function(t4, r2) {
    try {
      if (Array.isArray(t4))
        return e2(t4, r2);
      if (t4 && typeof t4.subset == "function")
        return t4.subset(r2);
      if (typeof t4 == "string")
        return e2(t4, r2);
      if (typeof t4 == "object") {
        if (!r2.isObjectProperty())
          throw new TypeError("Cannot apply a numeric index as object property");
        return ca(t4, r2.getObjectProperty());
      }
      throw new TypeError("Cannot apply index: unsupported type of object");
    } catch (n2) {
      throw Ja(n2);
    }
  };
}
var Ka = wn("AccessorNode", ["subset", "Node"], (t3) => {
  var { subset: e2, Node: r2 } = t3, n2 = Qa({ subset: e2 });
  function i2(t4, e3) {
    if (!(this instanceof i2))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (!dr(t4))
      throw new TypeError('Node expected for parameter "object"');
    if (!fr(e3))
      throw new TypeError('IndexNode expected for parameter "index"');
    this.object = t4 || null, this.index = e3, Object.defineProperty(this, "name", { get: function() {
      return this.index ? this.index.isObjectProperty() ? this.index.getObjectProperty() : "" : this.object.name || "";
    }.bind(this), set: function() {
      throw new Error("Cannot assign a new name, name is read-only");
    } });
  }
  function s2(t4) {
    return !(sr(t4) || ar(t4) || cr(t4) || pr(t4) || mr(t4) || gr(t4) || xr(t4));
  }
  return i2.prototype = new r2(), i2.prototype.type = "AccessorNode", i2.prototype.isAccessorNode = true, i2.prototype._compile = function(t4, e3) {
    var r3 = this.object._compile(t4, e3), i3 = this.index._compile(t4, e3);
    if (this.index.isObjectProperty()) {
      var s3 = this.index.getObjectProperty();
      return function(t5, e4, n3) {
        return ca(r3(t5, e4, n3), s3);
      };
    }
    return function(t5, e4, s4) {
      var a2 = r3(t5, e4, s4), o2 = i3(t5, e4, a2);
      return n2(a2, o2);
    };
  }, i2.prototype.forEach = function(t4) {
    t4(this.object, "object", this), t4(this.index, "index", this);
  }, i2.prototype.map = function(t4) {
    return new i2(this._ifNode(t4(this.object, "object", this)), this._ifNode(t4(this.index, "index", this)));
  }, i2.prototype.clone = function() {
    return new i2(this.object, this.index);
  }, i2.prototype._toString = function(t4) {
    var e3 = this.object.toString(t4);
    return s2(this.object) && (e3 = "(" + e3 + ")"), e3 + this.index.toString(t4);
  }, i2.prototype.toHTML = function(t4) {
    var e3 = this.object.toHTML(t4);
    return s2(this.object) && (e3 = '<span class="math-parenthesis math-round-parenthesis">(</span>' + e3 + '<span class="math-parenthesis math-round-parenthesis">)</span>'), e3 + this.index.toHTML(t4);
  }, i2.prototype._toTex = function(t4) {
    var e3 = this.object.toTex(t4);
    return s2(this.object) && (e3 = "\\left(' + object + '\\right)"), e3 + this.index.toTex(t4);
  }, i2.prototype.toJSON = function() {
    return { mathjs: "AccessorNode", object: this.object, index: this.index };
  }, i2.fromJSON = function(t4) {
    return new i2(t4.object, t4.index);
  }, i2;
}, { isClass: true, isNode: true }), to = wn("ArrayNode", ["Node"], (t3) => {
  var { Node: e2 } = t3;
  function r2(t4) {
    if (!(this instanceof r2))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (this.items = t4 || [], !Array.isArray(this.items) || !this.items.every(dr))
      throw new TypeError("Array containing Nodes expected");
  }
  return r2.prototype = new e2(), r2.prototype.type = "ArrayNode", r2.prototype.isArrayNode = true, r2.prototype._compile = function(t4, e3) {
    var r3 = mn(this.items, function(r4) {
      return r4._compile(t4, e3);
    });
    if (t4.config.matrix !== "Array") {
      var n2 = t4.matrix;
      return function(t5, e4, i2) {
        return n2(mn(r3, function(r4) {
          return r4(t5, e4, i2);
        }));
      };
    }
    return function(t5, e4, n3) {
      return mn(r3, function(r4) {
        return r4(t5, e4, n3);
      });
    };
  }, r2.prototype.forEach = function(t4) {
    for (var e3 = 0; e3 < this.items.length; e3++) {
      t4(this.items[e3], "items[" + e3 + "]", this);
    }
  }, r2.prototype.map = function(t4) {
    for (var e3 = [], n2 = 0; n2 < this.items.length; n2++)
      e3[n2] = this._ifNode(t4(this.items[n2], "items[" + n2 + "]", this));
    return new r2(e3);
  }, r2.prototype.clone = function() {
    return new r2(this.items.slice(0));
  }, r2.prototype._toString = function(t4) {
    return "[" + this.items.map(function(e3) {
      return e3.toString(t4);
    }).join(", ") + "]";
  }, r2.prototype.toJSON = function() {
    return { mathjs: "ArrayNode", items: this.items };
  }, r2.fromJSON = function(t4) {
    return new r2(t4.items);
  }, r2.prototype.toHTML = function(t4) {
    return '<span class="math-parenthesis math-square-parenthesis">[</span>' + this.items.map(function(e3) {
      return e3.toHTML(t4);
    }).join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
  }, r2.prototype._toTex = function(t4) {
    var e3 = "\\begin{bmatrix}";
    return this.items.forEach(function(r3) {
      r3.items ? e3 += r3.items.map(function(e4) {
        return e4.toTex(t4);
      }).join("&") : e3 += r3.toTex(t4), e3 += "\\\\";
    }), e3 += "\\end{bmatrix}";
  }, r2;
}, { isClass: true, isNode: true });
var eo = [{ AssignmentNode: {}, FunctionAssignmentNode: {} }, { ConditionalNode: { latexLeftParens: false, latexRightParens: false, latexParens: false } }, { "OperatorNode:or": { associativity: "left", associativeWith: [] } }, { "OperatorNode:xor": { associativity: "left", associativeWith: [] } }, { "OperatorNode:and": { associativity: "left", associativeWith: [] } }, { "OperatorNode:bitOr": { associativity: "left", associativeWith: [] } }, { "OperatorNode:bitXor": { associativity: "left", associativeWith: [] } }, { "OperatorNode:bitAnd": { associativity: "left", associativeWith: [] } }, { "OperatorNode:equal": { associativity: "left", associativeWith: [] }, "OperatorNode:unequal": { associativity: "left", associativeWith: [] }, "OperatorNode:smaller": { associativity: "left", associativeWith: [] }, "OperatorNode:larger": { associativity: "left", associativeWith: [] }, "OperatorNode:smallerEq": { associativity: "left", associativeWith: [] }, "OperatorNode:largerEq": { associativity: "left", associativeWith: [] }, RelationalNode: { associativity: "left", associativeWith: [] } }, { "OperatorNode:leftShift": { associativity: "left", associativeWith: [] }, "OperatorNode:rightArithShift": { associativity: "left", associativeWith: [] }, "OperatorNode:rightLogShift": { associativity: "left", associativeWith: [] } }, { "OperatorNode:to": { associativity: "left", associativeWith: [] } }, { RangeNode: {} }, { "OperatorNode:add": { associativity: "left", associativeWith: ["OperatorNode:add", "OperatorNode:subtract"] }, "OperatorNode:subtract": { associativity: "left", associativeWith: [] } }, { "OperatorNode:multiply": { associativity: "left", associativeWith: ["OperatorNode:multiply", "OperatorNode:divide", "Operator:dotMultiply", "Operator:dotDivide"] }, "OperatorNode:divide": { associativity: "left", associativeWith: [], latexLeftParens: false, latexRightParens: false, latexParens: false }, "OperatorNode:dotMultiply": { associativity: "left", associativeWith: ["OperatorNode:multiply", "OperatorNode:divide", "OperatorNode:dotMultiply", "OperatorNode:doDivide"] }, "OperatorNode:dotDivide": { associativity: "left", associativeWith: [] }, "OperatorNode:mod": { associativity: "left", associativeWith: [] } }, { "OperatorNode:unaryPlus": { associativity: "right" }, "OperatorNode:unaryMinus": { associativity: "right" }, "OperatorNode:bitNot": { associativity: "right" }, "OperatorNode:not": { associativity: "right" } }, { "OperatorNode:pow": { associativity: "right", associativeWith: [], latexRightParens: false }, "OperatorNode:dotPow": { associativity: "right", associativeWith: [] } }, { "OperatorNode:factorial": { associativity: "left" } }, { "OperatorNode:transpose": { associativity: "left" } }];
function ro(t3, e2) {
  var r2 = t3;
  e2 !== "keep" && (r2 = t3.getContent());
  for (var n2 = r2.getIdentifier(), i2 = 0; i2 < eo.length; i2++)
    if (n2 in eo[i2])
      return i2;
  return null;
}
function no(t3, e2) {
  var r2 = t3;
  e2 !== "keep" && (r2 = t3.getContent());
  var n2 = r2.getIdentifier(), i2 = ro(r2, e2);
  if (i2 === null)
    return null;
  var s2 = eo[i2][n2];
  if (Cr(s2, "associativity")) {
    if (s2.associativity === "left")
      return "left";
    if (s2.associativity === "right")
      return "right";
    throw Error("'" + n2 + "' has the invalid associativity '" + s2.associativity + "'.");
  }
  return null;
}
function io(t3, e2, r2) {
  var n2 = r2 !== "keep" ? t3.getContent() : t3, i2 = r2 !== "keep" ? t3.getContent() : e2, s2 = n2.getIdentifier(), a2 = i2.getIdentifier(), o2 = ro(n2, r2);
  if (o2 === null)
    return null;
  var u2 = eo[o2][s2];
  if (Cr(u2, "associativeWith") && u2.associativeWith instanceof Array) {
    for (var h = 0; h < u2.associativeWith.length; h++)
      if (u2.associativeWith[h] === a2)
        return true;
    return false;
  }
  return null;
}
var so = wn("AssignmentNode", ["subset", "?matrix", "Node"], (t3) => {
  var { subset: e2, matrix: r2, Node: n2 } = t3, i2 = Qa({ subset: e2 }), s2 = function(t4) {
    var { subset: e3, matrix: r3 } = t4;
    return function(t5, n3, i3) {
      try {
        if (Array.isArray(t5))
          return r3(t5).subset(n3, i3).valueOf();
        if (t5 && typeof t5.subset == "function")
          return t5.subset(n3, i3);
        if (typeof t5 == "string")
          return e3(t5, n3, i3);
        if (typeof t5 == "object") {
          if (!n3.isObjectProperty())
            throw TypeError("Cannot apply a numeric index as object property");
          return la(t5, n3.getObjectProperty(), i3), t5;
        }
        throw new TypeError("Cannot apply index: unsupported type of object");
      } catch (s3) {
        throw Ja(s3);
      }
    };
  }({ subset: e2, matrix: r2 });
  function a2(t4, e3, r3) {
    if (!(this instanceof a2))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (this.object = t4, this.index = r3 ? e3 : null, this.value = r3 || e3, !xr(t4) && !sr(t4))
      throw new TypeError('SymbolNode or AccessorNode expected as "object"');
    if (xr(t4) && t4.name === "end")
      throw new Error('Cannot assign to symbol "end"');
    if (this.index && !fr(this.index))
      throw new TypeError('IndexNode expected as "index"');
    if (!dr(this.value))
      throw new TypeError('Node expected as "value"');
    Object.defineProperty(this, "name", { get: function() {
      return this.index ? this.index.isObjectProperty() ? this.index.getObjectProperty() : "" : this.object.name || "";
    }.bind(this), set: function() {
      throw new Error("Cannot assign a new name, name is read-only");
    } });
  }
  function o2(t4, e3) {
    e3 || (e3 = "keep");
    var r3 = ro(t4, e3), n3 = ro(t4.value, e3);
    return e3 === "all" || n3 !== null && n3 <= r3;
  }
  return a2.prototype = new n2(), a2.prototype.type = "AssignmentNode", a2.prototype.isAssignmentNode = true, a2.prototype._compile = function(t4, e3) {
    var r3 = this.object._compile(t4, e3), n3 = this.index ? this.index._compile(t4, e3) : null, a3 = this.value._compile(t4, e3), o3 = this.object.name;
    if (this.index) {
      if (this.index.isObjectProperty()) {
        var u2 = this.index.getObjectProperty();
        return function(t5, e4, n4) {
          var i3 = r3(t5, e4, n4), s3 = a3(t5, e4, n4);
          return la(i3, u2, s3);
        };
      }
      if (xr(this.object))
        return function(t5, e4, i3) {
          var u3 = r3(t5, e4, i3), h2 = a3(t5, e4, i3), c3 = n3(t5, e4, u3);
          return la(t5, o3, s2(u3, c3, h2)), h2;
        };
      var h = this.object.object._compile(t4, e3);
      if (this.object.index.isObjectProperty()) {
        var c2 = this.object.index.getObjectProperty();
        return function(t5, e4, r4) {
          var i3 = h(t5, e4, r4), o4 = ca(i3, c2), u3 = n3(t5, e4, o4), l3 = a3(t5, e4, r4);
          return la(i3, c2, s2(o4, u3, l3)), l3;
        };
      }
      var l2 = this.object.index._compile(t4, e3);
      return function(t5, e4, r4) {
        var o4 = h(t5, e4, r4), u3 = l2(t5, e4, o4), c3 = i2(o4, u3), p2 = n3(t5, e4, c3), f2 = a3(t5, e4, r4);
        return s2(o4, u3, s2(c3, p2, f2)), f2;
      };
    }
    if (!xr(this.object))
      throw new TypeError("SymbolNode expected as object");
    return function(t5, e4, r4) {
      return la(t5, o3, a3(t5, e4, r4));
    };
  }, a2.prototype.forEach = function(t4) {
    t4(this.object, "object", this), this.index && t4(this.index, "index", this), t4(this.value, "value", this);
  }, a2.prototype.map = function(t4) {
    return new a2(this._ifNode(t4(this.object, "object", this)), this.index ? this._ifNode(t4(this.index, "index", this)) : null, this._ifNode(t4(this.value, "value", this)));
  }, a2.prototype.clone = function() {
    return new a2(this.object, this.index, this.value);
  }, a2.prototype._toString = function(t4) {
    var e3 = this.object.toString(t4), r3 = this.index ? this.index.toString(t4) : "", n3 = this.value.toString(t4);
    return o2(this, t4 && t4.parenthesis) && (n3 = "(" + n3 + ")"), e3 + r3 + " = " + n3;
  }, a2.prototype.toJSON = function() {
    return { mathjs: "AssignmentNode", object: this.object, index: this.index, value: this.value };
  }, a2.fromJSON = function(t4) {
    return new a2(t4.object, t4.index, t4.value);
  }, a2.prototype.toHTML = function(t4) {
    var e3 = this.object.toHTML(t4), r3 = this.index ? this.index.toHTML(t4) : "", n3 = this.value.toHTML(t4);
    return o2(this, t4 && t4.parenthesis) && (n3 = '<span class="math-paranthesis math-round-parenthesis">(</span>' + n3 + '<span class="math-paranthesis math-round-parenthesis">)</span>'), e3 + r3 + '<span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + n3;
  }, a2.prototype._toTex = function(t4) {
    var e3 = this.object.toTex(t4), r3 = this.index ? this.index.toTex(t4) : "", n3 = this.value.toTex(t4);
    return o2(this, t4 && t4.parenthesis) && (n3 = "\\left(".concat(n3, "\\right)")), e3 + r3 + ":=" + n3;
  }, a2;
}, { isClass: true, isNode: true }), ao = wn("BlockNode", ["ResultSet", "Node"], (t3) => {
  var { ResultSet: e2, Node: r2 } = t3;
  function n2(t4) {
    if (!(this instanceof n2))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (!Array.isArray(t4))
      throw new Error("Array expected");
    this.blocks = t4.map(function(t5) {
      var e3 = t5 && t5.node, r3 = !t5 || t5.visible === void 0 || t5.visible;
      if (!dr(e3))
        throw new TypeError('Property "node" must be a Node');
      if (typeof r3 != "boolean")
        throw new TypeError('Property "visible" must be a boolean');
      return { node: e3, visible: r3 };
    });
  }
  return n2.prototype = new r2(), n2.prototype.type = "BlockNode", n2.prototype.isBlockNode = true, n2.prototype._compile = function(t4, r3) {
    var n3 = mn(this.blocks, function(e3) {
      return { evaluate: e3.node._compile(t4, r3), visible: e3.visible };
    });
    return function(t5, r4, i2) {
      var s2 = [];
      return yn(n3, function(e3) {
        var n4 = e3.evaluate(t5, r4, i2);
        e3.visible && s2.push(n4);
      }), new e2(s2);
    };
  }, n2.prototype.forEach = function(t4) {
    for (var e3 = 0; e3 < this.blocks.length; e3++)
      t4(this.blocks[e3].node, "blocks[" + e3 + "].node", this);
  }, n2.prototype.map = function(t4) {
    for (var e3 = [], r3 = 0; r3 < this.blocks.length; r3++) {
      var i2 = this.blocks[r3], s2 = this._ifNode(t4(i2.node, "blocks[" + r3 + "].node", this));
      e3[r3] = { node: s2, visible: i2.visible };
    }
    return new n2(e3);
  }, n2.prototype.clone = function() {
    return new n2(this.blocks.map(function(t4) {
      return { node: t4.node, visible: t4.visible };
    }));
  }, n2.prototype._toString = function(t4) {
    return this.blocks.map(function(e3) {
      return e3.node.toString(t4) + (e3.visible ? "" : ";");
    }).join("\n");
  }, n2.prototype.toJSON = function() {
    return { mathjs: "BlockNode", blocks: this.blocks };
  }, n2.fromJSON = function(t4) {
    return new n2(t4.blocks);
  }, n2.prototype.toHTML = function(t4) {
    return this.blocks.map(function(e3) {
      return e3.node.toHTML(t4) + (e3.visible ? "" : '<span class="math-separator">;</span>');
    }).join('<span class="math-separator"><br /></span>');
  }, n2.prototype._toTex = function(t4) {
    return this.blocks.map(function(e3) {
      return e3.node.toTex(t4) + (e3.visible ? "" : ";");
    }).join("\\;\\;\n");
  }, n2;
}, { isClass: true, isNode: true }), oo = wn("ConditionalNode", ["Node"], (t3) => {
  var { Node: e2 } = t3;
  function r2(t4, e3, n2) {
    if (!(this instanceof r2))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (!dr(t4))
      throw new TypeError("Parameter condition must be a Node");
    if (!dr(e3))
      throw new TypeError("Parameter trueExpr must be a Node");
    if (!dr(n2))
      throw new TypeError("Parameter falseExpr must be a Node");
    this.condition = t4, this.trueExpr = e3, this.falseExpr = n2;
  }
  return r2.prototype = new e2(), r2.prototype.type = "ConditionalNode", r2.prototype.isConditionalNode = true, r2.prototype._compile = function(t4, e3) {
    var r3 = this.condition._compile(t4, e3), n2 = this.trueExpr._compile(t4, e3), i2 = this.falseExpr._compile(t4, e3);
    return function(t5, e4, s2) {
      return function(t6) {
        if (typeof t6 == "number" || typeof t6 == "boolean" || typeof t6 == "string")
          return !!t6;
        if (t6) {
          if (Fe(t6))
            return !t6.isZero();
          if (Pe(t6))
            return !(!t6.re && !t6.im);
          if (je(t6))
            return !!t6.value;
        }
        if (t6 == null)
          return false;
        throw new TypeError('Unsupported type of condition "' + br(t6) + '"');
      }(r3(t5, e4, s2)) ? n2(t5, e4, s2) : i2(t5, e4, s2);
    };
  }, r2.prototype.forEach = function(t4) {
    t4(this.condition, "condition", this), t4(this.trueExpr, "trueExpr", this), t4(this.falseExpr, "falseExpr", this);
  }, r2.prototype.map = function(t4) {
    return new r2(this._ifNode(t4(this.condition, "condition", this)), this._ifNode(t4(this.trueExpr, "trueExpr", this)), this._ifNode(t4(this.falseExpr, "falseExpr", this)));
  }, r2.prototype.clone = function() {
    return new r2(this.condition, this.trueExpr, this.falseExpr);
  }, r2.prototype._toString = function(t4) {
    var e3 = t4 && t4.parenthesis ? t4.parenthesis : "keep", r3 = ro(this, e3), n2 = this.condition.toString(t4), i2 = ro(this.condition, e3);
    (e3 === "all" || this.condition.type === "OperatorNode" || i2 !== null && i2 <= r3) && (n2 = "(" + n2 + ")");
    var s2 = this.trueExpr.toString(t4), a2 = ro(this.trueExpr, e3);
    (e3 === "all" || this.trueExpr.type === "OperatorNode" || a2 !== null && a2 <= r3) && (s2 = "(" + s2 + ")");
    var o2 = this.falseExpr.toString(t4), u2 = ro(this.falseExpr, e3);
    return (e3 === "all" || this.falseExpr.type === "OperatorNode" || u2 !== null && u2 <= r3) && (o2 = "(" + o2 + ")"), n2 + " ? " + s2 + " : " + o2;
  }, r2.prototype.toJSON = function() {
    return { mathjs: "ConditionalNode", condition: this.condition, trueExpr: this.trueExpr, falseExpr: this.falseExpr };
  }, r2.fromJSON = function(t4) {
    return new r2(t4.condition, t4.trueExpr, t4.falseExpr);
  }, r2.prototype.toHTML = function(t4) {
    var e3 = t4 && t4.parenthesis ? t4.parenthesis : "keep", r3 = ro(this, e3), n2 = this.condition.toHTML(t4), i2 = ro(this.condition, e3);
    (e3 === "all" || this.condition.type === "OperatorNode" || i2 !== null && i2 <= r3) && (n2 = '<span class="math-parenthesis math-round-parenthesis">(</span>' + n2 + '<span class="math-parenthesis math-round-parenthesis">)</span>');
    var s2 = this.trueExpr.toHTML(t4), a2 = ro(this.trueExpr, e3);
    (e3 === "all" || this.trueExpr.type === "OperatorNode" || a2 !== null && a2 <= r3) && (s2 = '<span class="math-parenthesis math-round-parenthesis">(</span>' + s2 + '<span class="math-parenthesis math-round-parenthesis">)</span>');
    var o2 = this.falseExpr.toHTML(t4), u2 = ro(this.falseExpr, e3);
    return (e3 === "all" || this.falseExpr.type === "OperatorNode" || u2 !== null && u2 <= r3) && (o2 = '<span class="math-parenthesis math-round-parenthesis">(</span>' + o2 + '<span class="math-parenthesis math-round-parenthesis">)</span>'), n2 + '<span class="math-operator math-conditional-operator">?</span>' + s2 + '<span class="math-operator math-conditional-operator">:</span>' + o2;
  }, r2.prototype._toTex = function(t4) {
    return "\\begin{cases} {" + this.trueExpr.toTex(t4) + "}, &\\quad{\\text{if }\\;" + this.condition.toTex(t4) + "}\\\\{" + this.falseExpr.toTex(t4) + "}, &\\quad{\\text{otherwise}}\\end{cases}";
  }, r2;
}, { isClass: true, isNode: true }), uo = Object.assign || function(t3) {
  for (var e2 = 1; e2 < arguments.length; e2++) {
    var r2 = arguments[e2];
    for (var n2 in r2)
      Object.prototype.hasOwnProperty.call(r2, n2) && (t3[n2] = r2[n2]);
  }
  return t3;
}, ho = { "{": "\\{", "}": "\\}", "\\": "\\textbackslash{}", "#": "\\#", $: "\\$", "%": "\\%", "&": "\\&", "^": "\\textasciicircum{}", _: "\\_", "~": "\\textasciitilde{}" }, co = { "\u2013": "\\--", "\u2014": "\\---", " ": "~", "	": "\\qquad{}", "\r\n": "\\newline{}", "\n": "\\newline{}" }, lo = function(t3, e2) {
  return uo({}, t3, e2);
}, po = { Alpha: "A", alpha: "\\alpha", Beta: "B", beta: "\\beta", Gamma: "\\Gamma", gamma: "\\gamma", Delta: "\\Delta", delta: "\\delta", Epsilon: "E", epsilon: "\\epsilon", varepsilon: "\\varepsilon", Zeta: "Z", zeta: "\\zeta", Eta: "H", eta: "\\eta", Theta: "\\Theta", theta: "\\theta", vartheta: "\\vartheta", Iota: "I", iota: "\\iota", Kappa: "K", kappa: "\\kappa", varkappa: "\\varkappa", Lambda: "\\Lambda", lambda: "\\lambda", Mu: "M", mu: "\\mu", Nu: "N", nu: "\\nu", Xi: "\\Xi", xi: "\\xi", Omicron: "O", omicron: "o", Pi: "\\Pi", pi: "\\pi", varpi: "\\varpi", Rho: "P", rho: "\\rho", varrho: "\\varrho", Sigma: "\\Sigma", sigma: "\\sigma", varsigma: "\\varsigma", Tau: "T", tau: "\\tau", Upsilon: "\\Upsilon", upsilon: "\\upsilon", Phi: "\\Phi", phi: "\\phi", varphi: "\\varphi", Chi: "X", chi: "\\chi", Psi: "\\Psi", psi: "\\psi", Omega: "\\Omega", omega: "\\omega", true: "\\mathrm{True}", false: "\\mathrm{False}", i: "i", inf: "\\infty", Inf: "\\infty", infinity: "\\infty", Infinity: "\\infty", oo: "\\infty", lim: "\\lim", undefined: "\\mathbf{?}" }, fo = { transpose: "^\\top", ctranspose: "^H", factorial: "!", pow: "^", dotPow: ".^\\wedge", unaryPlus: "+", unaryMinus: "-", bitNot: "\\~", not: "\\neg", multiply: "\\cdot", divide: "\\frac", dotMultiply: ".\\cdot", dotDivide: ".:", mod: "\\mod", add: "+", subtract: "-", to: "\\rightarrow", leftShift: "<<", rightArithShift: ">>", rightLogShift: ">>>", equal: "=", unequal: "\\neq", smaller: "<", larger: ">", smallerEq: "\\leq", largerEq: "\\geq", bitAnd: "\\&", bitXor: "\\underline{|}", bitOr: "|", and: "\\wedge", xor: "\\veebar", or: "\\vee" }, mo = { abs: { 1: "\\left|${args[0]}\\right|" }, add: { 2: "\\left(${args[0]}".concat(fo.add, "${args[1]}\\right)") }, cbrt: { 1: "\\sqrt[3]{${args[0]}}" }, ceil: { 1: "\\left\\lceil${args[0]}\\right\\rceil" }, cube: { 1: "\\left(${args[0]}\\right)^3" }, divide: { 2: "\\frac{${args[0]}}{${args[1]}}" }, dotDivide: { 2: "\\left(${args[0]}".concat(fo.dotDivide, "${args[1]}\\right)") }, dotMultiply: { 2: "\\left(${args[0]}".concat(fo.dotMultiply, "${args[1]}\\right)") }, dotPow: { 2: "\\left(${args[0]}".concat(fo.dotPow, "${args[1]}\\right)") }, exp: { 1: "\\exp\\left(${args[0]}\\right)" }, expm1: "\\left(e".concat(fo.pow, "{${args[0]}}-1\\right)"), fix: { 1: "\\mathrm{${name}}\\left(${args[0]}\\right)" }, floor: { 1: "\\left\\lfloor${args[0]}\\right\\rfloor" }, gcd: "\\gcd\\left(${args}\\right)", hypot: "\\hypot\\left(${args}\\right)", log: { 1: "\\ln\\left(${args[0]}\\right)", 2: "\\log_{${args[1]}}\\left(${args[0]}\\right)" }, log10: { 1: "\\log_{10}\\left(${args[0]}\\right)" }, log1p: { 1: "\\ln\\left(${args[0]}+1\\right)", 2: "\\log_{${args[1]}}\\left(${args[0]}+1\\right)" }, log2: "\\log_{2}\\left(${args[0]}\\right)", mod: { 2: "\\left(${args[0]}".concat(fo.mod, "${args[1]}\\right)") }, multiply: { 2: "\\left(${args[0]}".concat(fo.multiply, "${args[1]}\\right)") }, norm: { 1: "\\left\\|${args[0]}\\right\\|", 2: void 0 }, nthRoot: { 2: "\\sqrt[${args[1]}]{${args[0]}}" }, nthRoots: { 2: "\\{y : $y^{args[1]} = {${args[0]}}\\}" }, pow: { 2: "\\left(${args[0]}\\right)".concat(fo.pow, "{${args[1]}}") }, round: { 1: "\\left\\lfloor${args[0]}\\right\\rceil", 2: void 0 }, sign: { 1: "\\mathrm{${name}}\\left(${args[0]}\\right)" }, sqrt: { 1: "\\sqrt{${args[0]}}" }, square: { 1: "\\left(${args[0]}\\right)^2" }, subtract: { 2: "\\left(${args[0]}".concat(fo.subtract, "${args[1]}\\right)") }, unaryMinus: { 1: "".concat(fo.unaryMinus, "\\left(${args[0]}\\right)") }, unaryPlus: { 1: "".concat(fo.unaryPlus, "\\left(${args[0]}\\right)") }, bitAnd: { 2: "\\left(${args[0]}".concat(fo.bitAnd, "${args[1]}\\right)") }, bitNot: { 1: fo.bitNot + "\\left(${args[0]}\\right)" }, bitOr: { 2: "\\left(${args[0]}".concat(fo.bitOr, "${args[1]}\\right)") }, bitXor: { 2: "\\left(${args[0]}".concat(fo.bitXor, "${args[1]}\\right)") }, leftShift: { 2: "\\left(${args[0]}".concat(fo.leftShift, "${args[1]}\\right)") }, rightArithShift: { 2: "\\left(${args[0]}".concat(fo.rightArithShift, "${args[1]}\\right)") }, rightLogShift: { 2: "\\left(${args[0]}".concat(fo.rightLogShift, "${args[1]}\\right)") }, bellNumbers: { 1: "\\mathrm{B}_{${args[0]}}" }, catalan: { 1: "\\mathrm{C}_{${args[0]}}" }, stirlingS2: { 2: "\\mathrm{S}\\left(${args}\\right)" }, arg: { 1: "\\arg\\left(${args[0]}\\right)" }, conj: { 1: "\\left(${args[0]}\\right)^*" }, im: { 1: "\\Im\\left\\lbrace${args[0]}\\right\\rbrace" }, re: { 1: "\\Re\\left\\lbrace${args[0]}\\right\\rbrace" }, and: { 2: "\\left(${args[0]}".concat(fo.and, "${args[1]}\\right)") }, not: { 1: fo.not + "\\left(${args[0]}\\right)" }, or: { 2: "\\left(${args[0]}".concat(fo.or, "${args[1]}\\right)") }, xor: { 2: "\\left(${args[0]}".concat(fo.xor, "${args[1]}\\right)") }, cross: { 2: "\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)" }, ctranspose: { 1: "\\left(${args[0]}\\right)".concat(fo.ctranspose) }, det: { 1: "\\det\\left(${args[0]}\\right)" }, dot: { 2: "\\left(${args[0]}\\cdot${args[1]}\\right)" }, expm: { 1: "\\exp\\left(${args[0]}\\right)" }, inv: { 1: "\\left(${args[0]}\\right)^{-1}" }, sqrtm: { 1: "{${args[0]}}".concat(fo.pow, "{\\frac{1}{2}}") }, trace: { 1: "\\mathrm{tr}\\left(${args[0]}\\right)" }, transpose: { 1: "\\left(${args[0]}\\right)".concat(fo.transpose) }, combinations: { 2: "\\binom{${args[0]}}{${args[1]}}" }, combinationsWithRep: { 2: "\\left(\\!\\!{\\binom{${args[0]}}{${args[1]}}}\\!\\!\\right)" }, factorial: { 1: "\\left(${args[0]}\\right)".concat(fo.factorial) }, gamma: { 1: "\\Gamma\\left(${args[0]}\\right)" }, equal: { 2: "\\left(${args[0]}".concat(fo.equal, "${args[1]}\\right)") }, larger: { 2: "\\left(${args[0]}".concat(fo.larger, "${args[1]}\\right)") }, largerEq: { 2: "\\left(${args[0]}".concat(fo.largerEq, "${args[1]}\\right)") }, smaller: { 2: "\\left(${args[0]}".concat(fo.smaller, "${args[1]}\\right)") }, smallerEq: { 2: "\\left(${args[0]}".concat(fo.smallerEq, "${args[1]}\\right)") }, unequal: { 2: "\\left(${args[0]}".concat(fo.unequal, "${args[1]}\\right)") }, erf: { 1: "erf\\left(${args[0]}\\right)" }, max: "\\max\\left(${args}\\right)", min: "\\min\\left(${args}\\right)", variance: "\\mathrm{Var}\\left(${args}\\right)", acos: { 1: "\\cos^{-1}\\left(${args[0]}\\right)" }, acosh: { 1: "\\cosh^{-1}\\left(${args[0]}\\right)" }, acot: { 1: "\\cot^{-1}\\left(${args[0]}\\right)" }, acoth: { 1: "\\coth^{-1}\\left(${args[0]}\\right)" }, acsc: { 1: "\\csc^{-1}\\left(${args[0]}\\right)" }, acsch: { 1: "\\mathrm{csch}^{-1}\\left(${args[0]}\\right)" }, asec: { 1: "\\sec^{-1}\\left(${args[0]}\\right)" }, asech: { 1: "\\mathrm{sech}^{-1}\\left(${args[0]}\\right)" }, asin: { 1: "\\sin^{-1}\\left(${args[0]}\\right)" }, asinh: { 1: "\\sinh^{-1}\\left(${args[0]}\\right)" }, atan: { 1: "\\tan^{-1}\\left(${args[0]}\\right)" }, atan2: { 2: "\\mathrm{atan2}\\left(${args}\\right)" }, atanh: { 1: "\\tanh^{-1}\\left(${args[0]}\\right)" }, cos: { 1: "\\cos\\left(${args[0]}\\right)" }, cosh: { 1: "\\cosh\\left(${args[0]}\\right)" }, cot: { 1: "\\cot\\left(${args[0]}\\right)" }, coth: { 1: "\\coth\\left(${args[0]}\\right)" }, csc: { 1: "\\csc\\left(${args[0]}\\right)" }, csch: { 1: "\\mathrm{csch}\\left(${args[0]}\\right)" }, sec: { 1: "\\sec\\left(${args[0]}\\right)" }, sech: { 1: "\\mathrm{sech}\\left(${args[0]}\\right)" }, sin: { 1: "\\sin\\left(${args[0]}\\right)" }, sinh: { 1: "\\sinh\\left(${args[0]}\\right)" }, tan: { 1: "\\tan\\left(${args[0]}\\right)" }, tanh: { 1: "\\tanh\\left(${args[0]}\\right)" }, to: { 2: "\\left(${args[0]}".concat(fo.to, "${args[1]}\\right)") }, numeric: function(t3, e2) {
  return t3.args[0].toTex();
}, number: { 0: "0", 1: "\\left(${args[0]}\\right)", 2: "\\left(\\left(${args[0]}\\right)${args[1]}\\right)" }, string: { 0: '\\mathtt{""}', 1: "\\mathrm{string}\\left(${args[0]}\\right)" }, bignumber: { 0: "0", 1: "\\left(${args[0]}\\right)" }, complex: { 0: "0", 1: "\\left(${args[0]}\\right)", 2: "\\left(\\left(${args[0]}\\right)+".concat(po.i, "\\cdot\\left(${args[1]}\\right)\\right)") }, matrix: { 0: "\\begin{bmatrix}\\end{bmatrix}", 1: "\\left(${args[0]}\\right)", 2: "\\left(${args[0]}\\right)" }, sparse: { 0: "\\begin{bsparse}\\end{bsparse}", 1: "\\left(${args[0]}\\right)" }, unit: { 1: "\\left(${args[0]}\\right)", 2: "\\left(\\left(${args[0]}\\right)${args[1]}\\right)" } }, yo = { deg: "^\\circ" };
function go(t3) {
  return function(t4) {
    for (var e2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, r2 = e2.preserveFormatting, n2 = r2 !== void 0 && r2, i2 = e2.escapeMapFn, s2 = i2 === void 0 ? lo : i2, a2 = String(t4), o2 = "", u2 = s2(uo({}, ho), n2 ? uo({}, co) : {}), h = Object.keys(u2), c2 = function() {
      var t5 = false;
      h.forEach(function(e3, r3) {
        t5 || a2.length >= e3.length && a2.slice(0, e3.length) === e3 && (o2 += u2[h[r3]], a2 = a2.slice(e3.length, a2.length), t5 = true);
      }), t5 || (o2 += a2.slice(0, 1), a2 = a2.slice(1, a2.length));
    }; a2; )
      c2();
    return o2;
  }(t3, { preserveFormatting: true });
}
function vo(t3, e2) {
  return (e2 = e2 !== void 0 && e2) ? Cr(yo, t3) ? yo[t3] : "\\mathrm{" + go(t3) + "}" : Cr(po, t3) ? po[t3] : go(t3);
}
var xo = wn("ConstantNode", ["Node"], (t3) => {
  var { Node: e2 } = t3;
  function r2(t4) {
    if (!(this instanceof r2))
      throw new SyntaxError("Constructor must be called with the new operator");
    this.value = t4;
  }
  return r2.prototype = new e2(), r2.prototype.type = "ConstantNode", r2.prototype.isConstantNode = true, r2.prototype._compile = function(t4, e3) {
    var r3 = this.value;
    return function() {
      return r3;
    };
  }, r2.prototype.forEach = function(t4) {
  }, r2.prototype.map = function(t4) {
    return this.clone();
  }, r2.prototype.clone = function() {
    return new r2(this.value);
  }, r2.prototype._toString = function(t4) {
    return Kr(this.value, t4);
  }, r2.prototype.toHTML = function(t4) {
    var e3 = this._toString(t4);
    switch (br(this.value)) {
      case "number":
      case "BigNumber":
      case "Fraction":
        return '<span class="math-number">' + e3 + "</span>";
      case "string":
        return '<span class="math-string">' + e3 + "</span>";
      case "boolean":
        return '<span class="math-boolean">' + e3 + "</span>";
      case "null":
        return '<span class="math-null-symbol">' + e3 + "</span>";
      case "undefined":
        return '<span class="math-undefined">' + e3 + "</span>";
      default:
        return '<span class="math-symbol">' + e3 + "</span>";
    }
  }, r2.prototype.toJSON = function() {
    return { mathjs: "ConstantNode", value: this.value };
  }, r2.fromJSON = function(t4) {
    return new r2(t4.value);
  }, r2.prototype._toTex = function(t4) {
    var e3 = this._toString(t4);
    switch (br(this.value)) {
      case "string":
        return "\\mathtt{" + go(e3) + "}";
      case "number":
      case "BigNumber":
        if (!isFinite(this.value))
          return this.value.valueOf() < 0 ? "-\\infty" : "\\infty";
        var r3 = e3.toLowerCase().indexOf("e");
        return r3 !== -1 ? e3.substring(0, r3) + "\\cdot10^{" + e3.substring(r3 + 1) + "}" : e3;
      case "Fraction":
        return this.value.toLatex();
      default:
        return e3;
    }
  }, r2;
}, { isClass: true, isNode: true }), wo = wn("FunctionAssignmentNode", ["typed", "Node"], (t3) => {
  var { typed: e2, Node: r2 } = t3;
  function n2(t4, e3, r3) {
    if (!(this instanceof n2))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (typeof t4 != "string")
      throw new TypeError('String expected for parameter "name"');
    if (!Array.isArray(e3))
      throw new TypeError('Array containing strings or objects expected for parameter "params"');
    if (!dr(r3))
      throw new TypeError('Node expected for parameter "expr"');
    if (t4 in Za)
      throw new Error('Illegal function name, "' + t4 + '" is a reserved keyword');
    this.name = t4, this.params = e3.map(function(t5) {
      return t5 && t5.name || t5;
    }), this.types = e3.map(function(t5) {
      return t5 && t5.type || "any";
    }), this.expr = r3;
  }
  function i2(t4, e3) {
    var r3 = ro(t4, e3), n3 = ro(t4.expr, e3);
    return e3 === "all" || n3 !== null && n3 <= r3;
  }
  return n2.prototype = new r2(), n2.prototype.type = "FunctionAssignmentNode", n2.prototype.isFunctionAssignmentNode = true, n2.prototype._compile = function(t4, r3) {
    var n3 = Object.create(r3);
    yn(this.params, function(t5) {
      n3[t5] = true;
    });
    var i3 = this.expr._compile(t4, n3), s2 = this.name, a2 = this.params, o2 = gn(this.types, ","), u2 = s2 + "(" + gn(this.params, ", ") + ")";
    return function(t5, r4, n4) {
      var h = {};
      h[o2] = function() {
        for (var e3 = Object.create(r4), s3 = 0; s3 < a2.length; s3++)
          e3[a2[s3]] = arguments[s3];
        return i3(t5, e3, n4);
      };
      var c2 = e2(s2, h);
      return c2.syntax = u2, la(t5, s2, c2), c2;
    };
  }, n2.prototype.forEach = function(t4) {
    t4(this.expr, "expr", this);
  }, n2.prototype.map = function(t4) {
    var e3 = this._ifNode(t4(this.expr, "expr", this));
    return new n2(this.name, this.params.slice(0), e3);
  }, n2.prototype.clone = function() {
    return new n2(this.name, this.params.slice(0), this.expr);
  }, n2.prototype._toString = function(t4) {
    var e3 = t4 && t4.parenthesis ? t4.parenthesis : "keep", r3 = this.expr.toString(t4);
    return i2(this, e3) && (r3 = "(" + r3 + ")"), this.name + "(" + this.params.join(", ") + ") = " + r3;
  }, n2.prototype.toJSON = function() {
    var t4 = this.types;
    return { mathjs: "FunctionAssignmentNode", name: this.name, params: this.params.map(function(e3, r3) {
      return { name: e3, type: t4[r3] };
    }), expr: this.expr };
  }, n2.fromJSON = function(t4) {
    return new n2(t4.name, t4.params, t4.expr);
  }, n2.prototype.toHTML = function(t4) {
    for (var e3 = t4 && t4.parenthesis ? t4.parenthesis : "keep", r3 = [], n3 = 0; n3 < this.params.length; n3++)
      r3.push('<span class="math-symbol math-parameter">' + en(this.params[n3]) + "</span>");
    var s2 = this.expr.toHTML(t4);
    return i2(this, e3) && (s2 = '<span class="math-parenthesis math-round-parenthesis">(</span>' + s2 + '<span class="math-parenthesis math-round-parenthesis">)</span>'), '<span class="math-function">' + en(this.name) + '</span><span class="math-parenthesis math-round-parenthesis">(</span>' + r3.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-round-parenthesis">)</span><span class="math-operator math-assignment-operator math-variable-assignment-operator math-binary-operator">=</span>' + s2;
  }, n2.prototype._toTex = function(t4) {
    var e3 = t4 && t4.parenthesis ? t4.parenthesis : "keep", r3 = this.expr.toTex(t4);
    return i2(this, e3) && (r3 = "\\left(".concat(r3, "\\right)")), "\\mathrm{" + this.name + "}\\left(" + this.params.map(vo).join(",") + "\\right):=" + r3;
  }, n2;
}, { isClass: true, isNode: true }), bo = wn("IndexNode", ["Range", "Node", "size"], (t3) => {
  var { Range: e2, Node: r2, size: n2 } = t3;
  function i2(t4, e3) {
    if (!(this instanceof i2))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (this.dimensions = t4, this.dotNotation = e3 || false, !Array.isArray(t4) || !t4.every(dr))
      throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
    if (this.dotNotation && !this.isObjectProperty())
      throw new Error("dotNotation only applicable for object properties");
  }
  function s2(t4, r3, n3) {
    return new e2(Fe(t4) ? t4.toNumber() : t4, Fe(r3) ? r3.toNumber() : r3, Fe(n3) ? n3.toNumber() : n3);
  }
  return i2.prototype = new r2(), i2.prototype.type = "IndexNode", i2.prototype.isIndexNode = true, i2.prototype._compile = function(t4, e3) {
    var r3 = mn(this.dimensions, function(r4, i4) {
      if (vr(r4)) {
        if (r4.needsEnd()) {
          var a2 = Object.create(e3);
          a2.end = true;
          var o2 = r4.start._compile(t4, a2), u2 = r4.end._compile(t4, a2), h = r4.step ? r4.step._compile(t4, a2) : function() {
            return 1;
          };
          return function(t5, e4, r5) {
            var a3 = n2(r5).valueOf(), c3 = Object.create(e4);
            return c3.end = a3[i4], s2(o2(t5, c3, r5), u2(t5, c3, r5), h(t5, c3, r5));
          };
        }
        var c2 = r4.start._compile(t4, e3), l2 = r4.end._compile(t4, e3), p2 = r4.step ? r4.step._compile(t4, e3) : function() {
          return 1;
        };
        return function(t5, e4, r5) {
          return s2(c2(t5, e4, r5), l2(t5, e4, r5), p2(t5, e4, r5));
        };
      }
      if (xr(r4) && r4.name === "end") {
        var f2 = Object.create(e3);
        f2.end = true;
        var d = r4._compile(t4, f2);
        return function(t5, e4, r5) {
          var s3 = n2(r5).valueOf(), a3 = Object.create(e4);
          return a3.end = s3[i4], d(t5, a3, r5);
        };
      }
      var m2 = r4._compile(t4, e3);
      return function(t5, e4, r5) {
        return m2(t5, e4, r5);
      };
    }), i3 = ca(t4, "index");
    return function(t5, e4, n3) {
      var s3 = mn(r3, function(r4) {
        return r4(t5, e4, n3);
      });
      return i3(...s3);
    };
  }, i2.prototype.forEach = function(t4) {
    for (var e3 = 0; e3 < this.dimensions.length; e3++)
      t4(this.dimensions[e3], "dimensions[" + e3 + "]", this);
  }, i2.prototype.map = function(t4) {
    for (var e3 = [], r3 = 0; r3 < this.dimensions.length; r3++)
      e3[r3] = this._ifNode(t4(this.dimensions[r3], "dimensions[" + r3 + "]", this));
    return new i2(e3, this.dotNotation);
  }, i2.prototype.clone = function() {
    return new i2(this.dimensions.slice(0), this.dotNotation);
  }, i2.prototype.isObjectProperty = function() {
    return this.dimensions.length === 1 && cr(this.dimensions[0]) && typeof this.dimensions[0].value == "string";
  }, i2.prototype.getObjectProperty = function() {
    return this.isObjectProperty() ? this.dimensions[0].value : null;
  }, i2.prototype._toString = function(t4) {
    return this.dotNotation ? "." + this.getObjectProperty() : "[" + this.dimensions.join(", ") + "]";
  }, i2.prototype.toJSON = function() {
    return { mathjs: "IndexNode", dimensions: this.dimensions, dotNotation: this.dotNotation };
  }, i2.fromJSON = function(t4) {
    return new i2(t4.dimensions, t4.dotNotation);
  }, i2.prototype.toHTML = function(t4) {
    for (var e3 = [], r3 = 0; r3 < this.dimensions.length; r3++)
      e3[r3] = this.dimensions[r3].toHTML();
    return this.dotNotation ? '<span class="math-operator math-accessor-operator">.</span><span class="math-symbol math-property">' + en(this.getObjectProperty()) + "</span>" : '<span class="math-parenthesis math-square-parenthesis">[</span>' + e3.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-square-parenthesis">]</span>';
  }, i2.prototype._toTex = function(t4) {
    var e3 = this.dimensions.map(function(e4) {
      return e4.toTex(t4);
    });
    return this.dotNotation ? "." + this.getObjectProperty() : "_{" + e3.join(",") + "}";
  }, i2;
}, { isClass: true, isNode: true }), _o = wn("ObjectNode", ["Node"], (t3) => {
  var { Node: e2 } = t3;
  function r2(t4) {
    if (!(this instanceof r2))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (this.properties = t4 || {}, t4 && (typeof t4 != "object" || !Object.keys(t4).every(function(e3) {
      return dr(t4[e3]);
    })))
      throw new TypeError("Object containing Nodes expected");
  }
  return r2.prototype = new e2(), r2.prototype.type = "ObjectNode", r2.prototype.isObjectNode = true, r2.prototype._compile = function(t4, e3) {
    var r3 = {};
    for (var n2 in this.properties)
      if (Cr(this.properties, n2)) {
        var i2 = tn(n2), s2 = JSON.parse(i2);
        if (!pa(this.properties, s2))
          throw new Error('No access to property "' + s2 + '"');
        r3[s2] = this.properties[n2]._compile(t4, e3);
      }
    return function(t5, e4, n3) {
      var i3 = {};
      for (var s3 in r3)
        Cr(r3, s3) && (i3[s3] = r3[s3](t5, e4, n3));
      return i3;
    };
  }, r2.prototype.forEach = function(t4) {
    for (var e3 in this.properties)
      Cr(this.properties, e3) && t4(this.properties[e3], "properties[" + tn(e3) + "]", this);
  }, r2.prototype.map = function(t4) {
    var e3 = {};
    for (var n2 in this.properties)
      Cr(this.properties, n2) && (e3[n2] = this._ifNode(t4(this.properties[n2], "properties[" + tn(n2) + "]", this)));
    return new r2(e3);
  }, r2.prototype.clone = function() {
    var t4 = {};
    for (var e3 in this.properties)
      Cr(this.properties, e3) && (t4[e3] = this.properties[e3]);
    return new r2(t4);
  }, r2.prototype._toString = function(t4) {
    var e3 = [];
    for (var r3 in this.properties)
      Cr(this.properties, r3) && e3.push(tn(r3) + ": " + this.properties[r3].toString(t4));
    return "{" + e3.join(", ") + "}";
  }, r2.prototype.toJSON = function() {
    return { mathjs: "ObjectNode", properties: this.properties };
  }, r2.fromJSON = function(t4) {
    return new r2(t4.properties);
  }, r2.prototype.toHTML = function(t4) {
    var e3 = [];
    for (var r3 in this.properties)
      Cr(this.properties, r3) && e3.push('<span class="math-symbol math-property">' + en(r3) + '</span><span class="math-operator math-assignment-operator math-property-assignment-operator math-binary-operator">:</span>' + this.properties[r3].toHTML(t4));
    return '<span class="math-parenthesis math-curly-parenthesis">{</span>' + e3.join('<span class="math-separator">,</span>') + '<span class="math-parenthesis math-curly-parenthesis">}</span>';
  }, r2.prototype._toTex = function(t4) {
    var e3 = [];
    for (var r3 in this.properties)
      Cr(this.properties, r3) && e3.push("\\mathbf{" + r3 + ":} & " + this.properties[r3].toTex(t4) + "\\\\");
    return "\\left\\{\\begin{array}{ll}".concat(e3.join("\n"), "\\end{array}\\right\\}");
  }, r2;
}, { isClass: true, isNode: true }), Mo = wn("OperatorNode", ["Node"], (t3) => {
  var { Node: e2 } = t3;
  function r2(t4, e3, n3, i2) {
    if (!(this instanceof r2))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (typeof t4 != "string")
      throw new TypeError('string expected for parameter "op"');
    if (typeof e3 != "string")
      throw new TypeError('string expected for parameter "fn"');
    if (!Array.isArray(n3) || !n3.every(dr))
      throw new TypeError('Array containing Nodes expected for parameter "args"');
    this.implicit = i2 === true, this.op = t4, this.fn = e3, this.args = n3 || [];
  }
  function n2(t4, e3, r3, n3, i2) {
    var s2, a2 = ro(t4, e3), o2 = no(t4, e3);
    if (e3 === "all" || n3.length > 2 && t4.getIdentifier() !== "OperatorNode:add" && t4.getIdentifier() !== "OperatorNode:multiply")
      return n3.map(function(t5) {
        switch (t5.getContent().type) {
          case "ArrayNode":
          case "ConstantNode":
          case "SymbolNode":
          case "ParenthesisNode":
            return false;
          default:
            return true;
        }
      });
    switch (n3.length) {
      case 0:
        s2 = [];
        break;
      case 1:
        var u2 = ro(n3[0], e3);
        if (i2 && u2 !== null) {
          var h, c2;
          if (e3 === "keep" ? (h = n3[0].getIdentifier(), c2 = t4.getIdentifier()) : (h = n3[0].getContent().getIdentifier(), c2 = t4.getContent().getIdentifier()), eo[a2][c2].latexLeftParens === false) {
            s2 = [false];
            break;
          }
          if (eo[u2][h].latexParens === false) {
            s2 = [false];
            break;
          }
        }
        if (u2 === null) {
          s2 = [false];
          break;
        }
        if (u2 <= a2) {
          s2 = [true];
          break;
        }
        s2 = [false];
        break;
      case 2:
        var l2, p2, f2 = ro(n3[0], e3), d = io(t4, n3[0], e3);
        l2 = f2 !== null && (f2 === a2 && o2 === "right" && !d || f2 < a2);
        var m2, y2, g2, v2 = ro(n3[1], e3), x2 = io(t4, n3[1], e3);
        if (p2 = v2 !== null && (v2 === a2 && o2 === "left" && !x2 || v2 < a2), i2)
          e3 === "keep" ? (m2 = t4.getIdentifier(), y2 = t4.args[0].getIdentifier(), g2 = t4.args[1].getIdentifier()) : (m2 = t4.getContent().getIdentifier(), y2 = t4.args[0].getContent().getIdentifier(), g2 = t4.args[1].getContent().getIdentifier()), f2 !== null && (eo[a2][m2].latexLeftParens === false && (l2 = false), eo[f2][y2].latexParens === false && (l2 = false)), v2 !== null && (eo[a2][m2].latexRightParens === false && (p2 = false), eo[v2][g2].latexParens === false && (p2 = false));
        s2 = [l2, p2];
        break;
      default:
        t4.getIdentifier() !== "OperatorNode:add" && t4.getIdentifier() !== "OperatorNode:multiply" || (s2 = n3.map(function(r4) {
          var n4 = ro(r4, e3), i3 = io(t4, r4, e3), s3 = no(r4, e3);
          return n4 !== null && (a2 === n4 && o2 === s3 && !i3 || n4 < a2);
        }));
    }
    return n3.length >= 2 && t4.getIdentifier() === "OperatorNode:multiply" && t4.implicit && e3 === "auto" && r3 === "hide" && (s2 = n3.map(function(t5, e4) {
      var r4 = t5.getIdentifier() === "ParenthesisNode";
      return !(!s2[e4] && !r4);
    })), s2;
  }
  return r2.prototype = new e2(), r2.prototype.type = "OperatorNode", r2.prototype.isOperatorNode = true, r2.prototype._compile = function(t4, e3) {
    if (typeof this.fn != "string" || !fa(t4, this.fn))
      throw t4[this.fn] ? new Error('No access to function "' + this.fn + '"') : new Error("Function " + this.fn + ' missing in provided namespace "math"');
    var r3 = ca(t4, this.fn), n3 = mn(this.args, function(r4) {
      return r4._compile(t4, e3);
    });
    if (n3.length === 1) {
      var i2 = n3[0];
      return function(t5, e4, n4) {
        return r3(i2(t5, e4, n4));
      };
    }
    if (n3.length === 2) {
      var s2 = n3[0], a2 = n3[1];
      return function(t5, e4, n4) {
        return r3(s2(t5, e4, n4), a2(t5, e4, n4));
      };
    }
    return function(t5, e4, i3) {
      return r3.apply(null, mn(n3, function(r4) {
        return r4(t5, e4, i3);
      }));
    };
  }, r2.prototype.forEach = function(t4) {
    for (var e3 = 0; e3 < this.args.length; e3++)
      t4(this.args[e3], "args[" + e3 + "]", this);
  }, r2.prototype.map = function(t4) {
    for (var e3 = [], n3 = 0; n3 < this.args.length; n3++)
      e3[n3] = this._ifNode(t4(this.args[n3], "args[" + n3 + "]", this));
    return new r2(this.op, this.fn, e3, this.implicit);
  }, r2.prototype.clone = function() {
    return new r2(this.op, this.fn, this.args.slice(0), this.implicit);
  }, r2.prototype.isUnary = function() {
    return this.args.length === 1;
  }, r2.prototype.isBinary = function() {
    return this.args.length === 2;
  }, r2.prototype._toString = function(t4) {
    var e3 = t4 && t4.parenthesis ? t4.parenthesis : "keep", r3 = t4 && t4.implicit ? t4.implicit : "hide", i2 = this.args, s2 = n2(this, e3, r3, i2, false);
    if (i2.length === 1) {
      var a2 = no(this, e3), o2 = i2[0].toString(t4);
      s2[0] && (o2 = "(" + o2 + ")");
      var u2 = /[a-zA-Z]+/.test(this.op);
      return a2 === "right" ? this.op + (u2 ? " " : "") + o2 : a2 === "left" ? o2 + (u2 ? " " : "") + this.op : o2 + this.op;
    }
    if (i2.length === 2) {
      var h = i2[0].toString(t4), c2 = i2[1].toString(t4);
      return s2[0] && (h = "(" + h + ")"), s2[1] && (c2 = "(" + c2 + ")"), this.implicit && this.getIdentifier() === "OperatorNode:multiply" && r3 === "hide" ? h + " " + c2 : h + " " + this.op + " " + c2;
    }
    if (i2.length > 2 && (this.getIdentifier() === "OperatorNode:add" || this.getIdentifier() === "OperatorNode:multiply")) {
      var l2 = i2.map(function(e4, r4) {
        return e4 = e4.toString(t4), s2[r4] && (e4 = "(" + e4 + ")"), e4;
      });
      return this.implicit && this.getIdentifier() === "OperatorNode:multiply" && r3 === "hide" ? l2.join(" ") : l2.join(" " + this.op + " ");
    }
    return this.fn + "(" + this.args.join(", ") + ")";
  }, r2.prototype.toJSON = function() {
    return { mathjs: "OperatorNode", op: this.op, fn: this.fn, args: this.args, implicit: this.implicit };
  }, r2.fromJSON = function(t4) {
    return new r2(t4.op, t4.fn, t4.args, t4.implicit);
  }, r2.prototype.toHTML = function(t4) {
    var e3 = t4 && t4.parenthesis ? t4.parenthesis : "keep", r3 = t4 && t4.implicit ? t4.implicit : "hide", i2 = this.args, s2 = n2(this, e3, r3, i2, false);
    if (i2.length === 1) {
      var a2 = no(this, e3), o2 = i2[0].toHTML(t4);
      return s2[0] && (o2 = '<span class="math-parenthesis math-round-parenthesis">(</span>' + o2 + '<span class="math-parenthesis math-round-parenthesis">)</span>'), a2 === "right" ? '<span class="math-operator math-unary-operator math-lefthand-unary-operator">' + en(this.op) + "</span>" + o2 : o2 + '<span class="math-operator math-unary-operator math-righthand-unary-operator">' + en(this.op) + "</span>";
    }
    if (i2.length === 2) {
      var u2 = i2[0].toHTML(t4), h = i2[1].toHTML(t4);
      return s2[0] && (u2 = '<span class="math-parenthesis math-round-parenthesis">(</span>' + u2 + '<span class="math-parenthesis math-round-parenthesis">)</span>'), s2[1] && (h = '<span class="math-parenthesis math-round-parenthesis">(</span>' + h + '<span class="math-parenthesis math-round-parenthesis">)</span>'), this.implicit && this.getIdentifier() === "OperatorNode:multiply" && r3 === "hide" ? u2 + '<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>' + h : u2 + '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + en(this.op) + "</span>" + h;
    }
    var c2 = i2.map(function(e4, r4) {
      return e4 = e4.toHTML(t4), s2[r4] && (e4 = '<span class="math-parenthesis math-round-parenthesis">(</span>' + e4 + '<span class="math-parenthesis math-round-parenthesis">)</span>'), e4;
    });
    return i2.length > 2 && (this.getIdentifier() === "OperatorNode:add" || this.getIdentifier() === "OperatorNode:multiply") ? this.implicit && this.getIdentifier() === "OperatorNode:multiply" && r3 === "hide" ? c2.join('<span class="math-operator math-binary-operator math-implicit-binary-operator"></span>') : c2.join('<span class="math-operator math-binary-operator math-explicit-binary-operator">' + en(this.op) + "</span>") : '<span class="math-function">' + en(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + c2.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
  }, r2.prototype._toTex = function(t4) {
    var e3 = t4 && t4.parenthesis ? t4.parenthesis : "keep", r3 = t4 && t4.implicit ? t4.implicit : "hide", i2 = this.args, s2 = n2(this, e3, r3, i2, true), a2 = fo[this.fn];
    if (a2 = a2 === void 0 ? this.op : a2, i2.length === 1) {
      var o2 = no(this, e3), u2 = i2[0].toTex(t4);
      return s2[0] && (u2 = "\\left(".concat(u2, "\\right)")), o2 === "right" ? a2 + u2 : u2 + a2;
    }
    if (i2.length === 2) {
      var h = i2[0], c2 = h.toTex(t4);
      s2[0] && (c2 = "\\left(".concat(c2, "\\right)"));
      var l2, p2 = i2[1].toTex(t4);
      switch (s2[1] && (p2 = "\\left(".concat(p2, "\\right)")), l2 = e3 === "keep" ? h.getIdentifier() : h.getContent().getIdentifier(), this.getIdentifier()) {
        case "OperatorNode:divide":
          return a2 + "{" + c2 + "}{" + p2 + "}";
        case "OperatorNode:pow":
          switch (c2 = "{" + c2 + "}", p2 = "{" + p2 + "}", l2) {
            case "ConditionalNode":
            case "OperatorNode:divide":
              c2 = "\\left(".concat(c2, "\\right)");
          }
          break;
        case "OperatorNode:multiply":
          if (this.implicit && r3 === "hide")
            return c2 + "~" + p2;
      }
      return c2 + a2 + p2;
    }
    if (i2.length > 2 && (this.getIdentifier() === "OperatorNode:add" || this.getIdentifier() === "OperatorNode:multiply")) {
      var f2 = i2.map(function(e4, r4) {
        return e4 = e4.toTex(t4), s2[r4] && (e4 = "\\left(".concat(e4, "\\right)")), e4;
      });
      return this.getIdentifier() === "OperatorNode:multiply" && this.implicit ? f2.join("~") : f2.join(a2);
    }
    return "\\mathrm{" + this.fn + "}\\left(" + i2.map(function(e4) {
      return e4.toTex(t4);
    }).join(",") + "\\right)";
  }, r2.prototype.getIdentifier = function() {
    return this.type + ":" + this.fn;
  }, r2;
}, { isClass: true, isNode: true }), No = wn("ParenthesisNode", ["Node"], (t3) => {
  var { Node: e2 } = t3;
  function r2(t4) {
    if (!(this instanceof r2))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (!dr(t4))
      throw new TypeError('Node expected for parameter "content"');
    this.content = t4;
  }
  return r2.prototype = new e2(), r2.prototype.type = "ParenthesisNode", r2.prototype.isParenthesisNode = true, r2.prototype._compile = function(t4, e3) {
    return this.content._compile(t4, e3);
  }, r2.prototype.getContent = function() {
    return this.content.getContent();
  }, r2.prototype.forEach = function(t4) {
    t4(this.content, "content", this);
  }, r2.prototype.map = function(t4) {
    return new r2(t4(this.content, "content", this));
  }, r2.prototype.clone = function() {
    return new r2(this.content);
  }, r2.prototype._toString = function(t4) {
    return !t4 || t4 && !t4.parenthesis || t4 && t4.parenthesis === "keep" ? "(" + this.content.toString(t4) + ")" : this.content.toString(t4);
  }, r2.prototype.toJSON = function() {
    return { mathjs: "ParenthesisNode", content: this.content };
  }, r2.fromJSON = function(t4) {
    return new r2(t4.content);
  }, r2.prototype.toHTML = function(t4) {
    return !t4 || t4 && !t4.parenthesis || t4 && t4.parenthesis === "keep" ? '<span class="math-parenthesis math-round-parenthesis">(</span>' + this.content.toHTML(t4) + '<span class="math-parenthesis math-round-parenthesis">)</span>' : this.content.toHTML(t4);
  }, r2.prototype._toTex = function(t4) {
    return !t4 || t4 && !t4.parenthesis || t4 && t4.parenthesis === "keep" ? "\\left(".concat(this.content.toTex(t4), "\\right)") : this.content.toTex(t4);
  }, r2;
}, { isClass: true, isNode: true }), Eo = wn("RangeNode", ["Node"], (t3) => {
  var { Node: e2 } = t3;
  function r2(t4, e3, n3) {
    if (!(this instanceof r2))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (!dr(t4))
      throw new TypeError("Node expected");
    if (!dr(e3))
      throw new TypeError("Node expected");
    if (n3 && !dr(n3))
      throw new TypeError("Node expected");
    if (arguments.length > 3)
      throw new Error("Too many arguments");
    this.start = t4, this.end = e3, this.step = n3 || null;
  }
  function n2(t4, e3) {
    var r3 = ro(t4, e3), n3 = {}, i2 = ro(t4.start, e3);
    if (n3.start = i2 !== null && i2 <= r3 || e3 === "all", t4.step) {
      var s2 = ro(t4.step, e3);
      n3.step = s2 !== null && s2 <= r3 || e3 === "all";
    }
    var a2 = ro(t4.end, e3);
    return n3.end = a2 !== null && a2 <= r3 || e3 === "all", n3;
  }
  return r2.prototype = new e2(), r2.prototype.type = "RangeNode", r2.prototype.isRangeNode = true, r2.prototype.needsEnd = function() {
    return this.filter(function(t4) {
      return xr(t4) && t4.name === "end";
    }).length > 0;
  }, r2.prototype._compile = function(t4, e3) {
    var r3 = t4.range, n3 = this.start._compile(t4, e3), i2 = this.end._compile(t4, e3);
    if (this.step) {
      var s2 = this.step._compile(t4, e3);
      return function(t5, e4, a2) {
        return r3(n3(t5, e4, a2), i2(t5, e4, a2), s2(t5, e4, a2));
      };
    }
    return function(t5, e4, s3) {
      return r3(n3(t5, e4, s3), i2(t5, e4, s3));
    };
  }, r2.prototype.forEach = function(t4) {
    t4(this.start, "start", this), t4(this.end, "end", this), this.step && t4(this.step, "step", this);
  }, r2.prototype.map = function(t4) {
    return new r2(this._ifNode(t4(this.start, "start", this)), this._ifNode(t4(this.end, "end", this)), this.step && this._ifNode(t4(this.step, "step", this)));
  }, r2.prototype.clone = function() {
    return new r2(this.start, this.end, this.step && this.step);
  }, r2.prototype._toString = function(t4) {
    var e3, r3 = n2(this, t4 && t4.parenthesis ? t4.parenthesis : "keep"), i2 = this.start.toString(t4);
    if (r3.start && (i2 = "(" + i2 + ")"), e3 = i2, this.step) {
      var s2 = this.step.toString(t4);
      r3.step && (s2 = "(" + s2 + ")"), e3 += ":" + s2;
    }
    var a2 = this.end.toString(t4);
    return r3.end && (a2 = "(" + a2 + ")"), e3 += ":" + a2;
  }, r2.prototype.toJSON = function() {
    return { mathjs: "RangeNode", start: this.start, end: this.end, step: this.step };
  }, r2.fromJSON = function(t4) {
    return new r2(t4.start, t4.end, t4.step);
  }, r2.prototype.toHTML = function(t4) {
    var e3, r3 = n2(this, t4 && t4.parenthesis ? t4.parenthesis : "keep"), i2 = this.start.toHTML(t4);
    if (r3.start && (i2 = '<span class="math-parenthesis math-round-parenthesis">(</span>' + i2 + '<span class="math-parenthesis math-round-parenthesis">)</span>'), e3 = i2, this.step) {
      var s2 = this.step.toHTML(t4);
      r3.step && (s2 = '<span class="math-parenthesis math-round-parenthesis">(</span>' + s2 + '<span class="math-parenthesis math-round-parenthesis">)</span>'), e3 += '<span class="math-operator math-range-operator">:</span>' + s2;
    }
    var a2 = this.end.toHTML(t4);
    return r3.end && (a2 = '<span class="math-parenthesis math-round-parenthesis">(</span>' + a2 + '<span class="math-parenthesis math-round-parenthesis">)</span>'), e3 += '<span class="math-operator math-range-operator">:</span>' + a2;
  }, r2.prototype._toTex = function(t4) {
    var e3 = n2(this, t4 && t4.parenthesis ? t4.parenthesis : "keep"), r3 = this.start.toTex(t4);
    if (e3.start && (r3 = "\\left(".concat(r3, "\\right)")), this.step) {
      var i2 = this.step.toTex(t4);
      e3.step && (i2 = "\\left(".concat(i2, "\\right)")), r3 += ":" + i2;
    }
    var s2 = this.end.toTex(t4);
    return e3.end && (s2 = "\\left(".concat(s2, "\\right)")), r3 += ":" + s2;
  }, r2;
}, { isClass: true, isNode: true }), So = wn("RelationalNode", ["Node"], (t3) => {
  var { Node: e2 } = t3;
  function r2(t4, e3) {
    if (!(this instanceof r2))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (!Array.isArray(t4))
      throw new TypeError("Parameter conditionals must be an array");
    if (!Array.isArray(e3))
      throw new TypeError("Parameter params must be an array");
    if (t4.length !== e3.length - 1)
      throw new TypeError("Parameter params must contain exactly one more element than parameter conditionals");
    this.conditionals = t4, this.params = e3;
  }
  return r2.prototype = new e2(), r2.prototype.type = "RelationalNode", r2.prototype.isRelationalNode = true, r2.prototype._compile = function(t4, e3) {
    var r3 = this, n2 = this.params.map((r4) => r4._compile(t4, e3));
    return function(e4, i2, s2) {
      for (var a2, o2 = n2[0](e4, i2, s2), u2 = 0; u2 < r3.conditionals.length; u2++) {
        if (a2 = o2, o2 = n2[u2 + 1](e4, i2, s2), !ca(t4, r3.conditionals[u2])(a2, o2))
          return false;
      }
      return true;
    };
  }, r2.prototype.forEach = function(t4) {
    this.params.forEach((e3, r3) => t4(e3, "params[" + r3 + "]", this), this);
  }, r2.prototype.map = function(t4) {
    return new r2(this.conditionals.slice(), this.params.map((e3, r3) => this._ifNode(t4(e3, "params[" + r3 + "]", this)), this));
  }, r2.prototype.clone = function() {
    return new r2(this.conditionals, this.params);
  }, r2.prototype._toString = function(t4) {
    for (var e3 = t4 && t4.parenthesis ? t4.parenthesis : "keep", r3 = ro(this, e3), n2 = this.params.map(function(n3, i3) {
      var s3 = ro(n3, e3);
      return e3 === "all" || s3 !== null && s3 <= r3 ? "(" + n3.toString(t4) + ")" : n3.toString(t4);
    }), i2 = { equal: "==", unequal: "!=", smaller: "<", larger: ">", smallerEq: "<=", largerEq: ">=" }, s2 = n2[0], a2 = 0; a2 < this.conditionals.length; a2++)
      s2 += " " + i2[this.conditionals[a2]] + " " + n2[a2 + 1];
    return s2;
  }, r2.prototype.toJSON = function() {
    return { mathjs: "RelationalNode", conditionals: this.conditionals, params: this.params };
  }, r2.fromJSON = function(t4) {
    return new r2(t4.conditionals, t4.params);
  }, r2.prototype.toHTML = function(t4) {
    for (var e3 = t4 && t4.parenthesis ? t4.parenthesis : "keep", r3 = ro(this, e3), n2 = this.params.map(function(n3, i3) {
      var s3 = ro(n3, e3);
      return e3 === "all" || s3 !== null && s3 <= r3 ? '<span class="math-parenthesis math-round-parenthesis">(</span>' + n3.toHTML(t4) + '<span class="math-parenthesis math-round-parenthesis">)</span>' : n3.toHTML(t4);
    }), i2 = { equal: "==", unequal: "!=", smaller: "<", larger: ">", smallerEq: "<=", largerEq: ">=" }, s2 = n2[0], a2 = 0; a2 < this.conditionals.length; a2++)
      s2 += '<span class="math-operator math-binary-operator math-explicit-binary-operator">' + en(i2[this.conditionals[a2]]) + "</span>" + n2[a2 + 1];
    return s2;
  }, r2.prototype._toTex = function(t4) {
    for (var e3 = t4 && t4.parenthesis ? t4.parenthesis : "keep", r3 = ro(this, e3), n2 = this.params.map(function(n3, i3) {
      var s3 = ro(n3, e3);
      return e3 === "all" || s3 !== null && s3 <= r3 ? "\\left(" + n3.toTex(t4) + "\right)" : n3.toTex(t4);
    }), i2 = n2[0], s2 = 0; s2 < this.conditionals.length; s2++)
      i2 += fo[this.conditionals[s2]] + n2[s2 + 1];
    return i2;
  }, r2;
}, { isClass: true, isNode: true });
function To() {
  return (To = Object.assign || function(t3) {
    for (var e2 = 1; e2 < arguments.length; e2++) {
      var r2 = arguments[e2];
      for (var n2 in r2)
        Object.prototype.hasOwnProperty.call(r2, n2) && (t3[n2] = r2[n2]);
    }
    return t3;
  }).apply(this, arguments);
}
function Oo() {
  return (Oo = Object.assign || function(t3) {
    for (var e2 = 1; e2 < arguments.length; e2++) {
      var r2 = arguments[e2];
      for (var n2 in r2)
        Object.prototype.hasOwnProperty.call(r2, n2) && (t3[n2] = r2[n2]);
    }
    return t3;
  }).apply(this, arguments);
}
var zo = { createBigNumberClass: is }, Co = { createComplexClass: os }, Ao = { createMatrixClass: ps }, Ro = { MatrixDependencies: Ao, createDenseMatrixClass: fs }, Do = { createFractionClass: cs }, ko = { BigNumberDependencies: zo, ComplexDependencies: Co, DenseMatrixDependencies: Ro, FractionDependencies: Do, createTyped: Nn }, Io = { typedDependencies: ko, createEqualScalar: Os }, Lo = { MatrixDependencies: Ao, equalScalarDependencies: Io, typedDependencies: ko, createSparseMatrixClass: zs }, Bo = { typedDependencies: ko, createNumber: Cs }, Fo = { FractionDependencies: Do, typedDependencies: ko, createFraction: Rs }, Po = { DenseMatrixDependencies: Ro, MatrixDependencies: Ao, SparseMatrixDependencies: Lo, typedDependencies: ko, createMatrix: Ds }, Uo = { typedDependencies: ko, createUnaryMinus: ks }, jo = { typedDependencies: ko, createAbs: Is }, qo = { typedDependencies: ko, createAddScalar: Ls }, Ho = { BigNumberDependencies: zo, DenseMatrixDependencies: Ro, equalScalarDependencies: Io, matrixDependencies: Po, typedDependencies: ko, zerosDependencies: { BigNumberDependencies: zo, matrixDependencies: Po, typedDependencies: ko, createZeros: _a }, createRound: Aa }, Vo = { DenseMatrixDependencies: Ro, equalScalarDependencies: Io, matrixDependencies: Po, typedDependencies: ko, createMod: Xs }, $o = { typedDependencies: ko, createMultiplyScalar: Js }, Go = { matrixDependencies: Po, typedDependencies: ko, createSize: ha }, Wo = { addScalarDependencies: qo, dotDependencies: { addScalarDependencies: qo, conjDependencies: { typedDependencies: ko, createConj: ra }, multiplyScalarDependencies: $o, sizeDependencies: Go, typedDependencies: ko, createDot: Ya }, equalScalarDependencies: Io, matrixDependencies: Po, multiplyScalarDependencies: $o, typedDependencies: ko, createMultiply: Qs }, Yo = { DenseMatrixDependencies: Ro, addScalarDependencies: qo, equalScalarDependencies: Io, matrixDependencies: Po, typedDependencies: ko, unaryMinusDependencies: Uo, createSubtract: Ks }, Zo = { DenseMatrixDependencies: Ro, matrixDependencies: Po, typedDependencies: ko, createLarger: Ia }, Xo = { BigNumberDependencies: zo, DenseMatrixDependencies: Ro, SparseMatrixDependencies: Lo, matrixDependencies: Po, typedDependencies: ko, createIdentity: sa }, Jo = { DenseMatrixDependencies: Ro, SparseMatrixDependencies: Lo, addScalarDependencies: qo, equalScalarDependencies: Io, matrixDependencies: Po, typedDependencies: ko, createAdd: Wa }, Qo = { bignumberDependencies: { BigNumberDependencies: zo, typedDependencies: ko, createBignumber: As }, fractionDependencies: Fo, numberDependencies: Bo, createNumeric: Na }, Ko = { numericDependencies: Qo, typedDependencies: ko, createDivideScalar: Ea }, tu = { matrixDependencies: Po, typedDependencies: ko, createSubset: ga }, eu = { BigNumberDependencies: zo, ComplexDependencies: Co, FractionDependencies: Do, absDependencies: jo, addScalarDependencies: qo, divideScalarDependencies: Ko, equalDependencies: { DenseMatrixDependencies: Ro, equalScalarDependencies: Io, matrixDependencies: Po, typedDependencies: ko, createEqual: Da }, fixDependencies: { ComplexDependencies: Co, ceilDependencies: { equalScalarDependencies: Io, matrixDependencies: Po, roundDependencies: Ho, typedDependencies: ko, createCeil: Ps }, floorDependencies: { equalScalarDependencies: Io, matrixDependencies: Po, roundDependencies: Ho, typedDependencies: ko, createFloor: js }, matrixDependencies: Po, typedDependencies: ko, createFix: Us }, formatDependencies: { typedDependencies: ko, createFormat: Ma }, isNumericDependencies: { typedDependencies: ko, createIsNumeric: Es }, multiplyScalarDependencies: $o, numberDependencies: Bo, powDependencies: { ComplexDependencies: Co, fractionDependencies: Fo, identityDependencies: Xo, matrixDependencies: Po, multiplyDependencies: Wo, numberDependencies: Bo, typedDependencies: ko, createPow: Sa }, roundDependencies: Ho, subtractDependencies: Yo, createUnitClass: Va }, ru = { UnitDependencies: eu, typedDependencies: ko, createUnitFunction: $a }, nu = { UnitDependencies: eu, typedDependencies: ko, createCreateUnit: Ga }, iu = { createNode: Xa }, su = { UnitDependencies: eu, NodeDependencies: iu, createSymbolNode: wn("SymbolNode", ["math", "?Unit", "Node"], (t3) => {
  var { math: e2, Unit: r2, Node: n2 } = t3;
  function i2(t4) {
    return !!r2 && r2.isValuelessUnit(t4);
  }
  function s2(t4) {
    if (!(this instanceof s2))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (typeof t4 != "string")
      throw new TypeError('String expected for parameter "name"');
    this.name = t4;
  }
  return s2.prototype = new n2(), s2.prototype.type = "SymbolNode", s2.prototype.isSymbolNode = true, s2.prototype._compile = function(t4, e3) {
    var n3 = this.name;
    if (e3[n3] === true)
      return function(t5, e4, r3) {
        return e4[n3];
      };
    if (n3 in t4)
      return function(e4, r3, i3) {
        return ca(n3 in e4 ? e4 : t4, n3);
      };
    var s3 = i2(n3);
    return function(t5, e4, i3) {
      return n3 in t5 ? ca(t5, n3) : s3 ? new r2(null, n3) : function(t6) {
        throw new Error("Undefined symbol " + t6);
      }(n3);
    };
  }, s2.prototype.forEach = function(t4) {
  }, s2.prototype.map = function(t4) {
    return this.clone();
  }, s2.prototype.clone = function() {
    return new s2(this.name);
  }, s2.prototype._toString = function(t4) {
    return this.name;
  }, s2.prototype.toHTML = function(t4) {
    var e3 = en(this.name);
    return e3 === "true" || e3 === "false" ? '<span class="math-symbol math-boolean">' + e3 + "</span>" : e3 === "i" ? '<span class="math-symbol math-imaginary-symbol">' + e3 + "</span>" : e3 === "Infinity" ? '<span class="math-symbol math-infinity-symbol">' + e3 + "</span>" : e3 === "NaN" ? '<span class="math-symbol math-nan-symbol">' + e3 + "</span>" : e3 === "null" ? '<span class="math-symbol math-null-symbol">' + e3 + "</span>" : e3 === "undefined" ? '<span class="math-symbol math-undefined-symbol">' + e3 + "</span>" : '<span class="math-symbol">' + e3 + "</span>";
  }, s2.prototype.toJSON = function() {
    return { mathjs: "SymbolNode", name: this.name };
  }, s2.fromJSON = function(t4) {
    return new s2(t4.name);
  }, s2.prototype._toTex = function(t4) {
    var r3 = false;
    e2[this.name] === void 0 && i2(this.name) && (r3 = true);
    var n3 = vo(this.name, r3);
    return n3[0] === "\\" ? n3 : " " + n3;
  }, s2;
}, { isClass: true, isNode: true }) }, au = { parseDependencies: { AccessorNodeDependencies: { NodeDependencies: iu, subsetDependencies: tu, createAccessorNode: Ka }, ArrayNodeDependencies: { NodeDependencies: iu, createArrayNode: to }, AssignmentNodeDependencies: { matrixDependencies: Po, NodeDependencies: iu, subsetDependencies: tu, createAssignmentNode: so }, BlockNodeDependencies: { NodeDependencies: iu, ResultSetDependencies: { createResultSet: Cn }, createBlockNode: ao }, ConditionalNodeDependencies: { NodeDependencies: iu, createConditionalNode: oo }, ConstantNodeDependencies: { NodeDependencies: iu, createConstantNode: xo }, FunctionAssignmentNodeDependencies: { NodeDependencies: iu, typedDependencies: ko, createFunctionAssignmentNode: wo }, FunctionNodeDependencies: { NodeDependencies: iu, SymbolNodeDependencies: su, createFunctionNode: wn("FunctionNode", ["math", "Node", "SymbolNode"], (t3) => {
  var { math: e2, Node: r2, SymbolNode: n2 } = t3;
  function i2(t4, e3) {
    if (!(this instanceof i2))
      throw new SyntaxError("Constructor must be called with the new operator");
    if (typeof t4 == "string" && (t4 = new n2(t4)), !dr(t4))
      throw new TypeError('Node expected as parameter "fn"');
    if (!Array.isArray(e3) || !e3.every(dr))
      throw new TypeError('Array containing Nodes expected for parameter "args"');
    this.fn = t4, this.args = e3 || [], Object.defineProperty(this, "name", { get: function() {
      return this.fn.name || "";
    }.bind(this), set: function() {
      throw new Error("Cannot assign a new name, name is read-only");
    } });
  }
  i2.prototype = new r2(), i2.prototype.type = "FunctionNode", i2.prototype.isFunctionNode = true, i2.prototype._compile = function(t4, e3) {
    if (!(this instanceof i2))
      throw new TypeError("No valid FunctionNode");
    var r3 = mn(this.args, function(r4) {
      return r4._compile(t4, e3);
    });
    if (xr(this.fn)) {
      var n3 = this.fn.name, s3 = n3 in t4 ? ca(t4, n3) : void 0;
      if (typeof s3 == "function" && s3.rawArgs === true) {
        var a3 = this.args;
        return function(e4, r4, i3) {
          return (n3 in e4 ? ca(e4, n3) : s3)(a3, t4, To({}, e4, r4));
        };
      }
      if (r3.length === 1) {
        var o3 = r3[0];
        return function(t5, e4, r4) {
          return (n3 in t5 ? ca(t5, n3) : s3)(o3(t5, e4, r4));
        };
      }
      if (r3.length === 2) {
        var u2 = r3[0], h = r3[1];
        return function(t5, e4, r4) {
          return (n3 in t5 ? ca(t5, n3) : s3)(u2(t5, e4, r4), h(t5, e4, r4));
        };
      }
      return function(t5, e4, i3) {
        return (n3 in t5 ? ca(t5, n3) : s3).apply(null, mn(r3, function(r4) {
          return r4(t5, e4, i3);
        }));
      };
    }
    if (sr(this.fn) && fr(this.fn.index) && this.fn.index.isObjectProperty()) {
      var c2 = this.fn.object._compile(t4, e3), l2 = this.fn.index.getObjectProperty(), p2 = this.args;
      return function(e4, n4, i3) {
        var s4 = c2(e4, n4, i3);
        return function(t5, e5) {
          if (!fa(t5, e5))
            throw new Error('No access to method "' + e5 + '"');
        }(s4, l2), s4[l2] && s4[l2].rawArgs ? s4[l2](p2, t4, To({}, e4, n4)) : s4[l2].apply(s4, mn(r3, function(t5) {
          return t5(e4, n4, i3);
        }));
      };
    }
    var f2 = this.fn._compile(t4, e3), d = this.args;
    return function(e4, n4, i3) {
      var s4 = f2(e4, n4, i3);
      return s4 && s4.rawArgs ? s4(d, t4, To({}, e4, n4)) : s4.apply(s4, mn(r3, function(t5) {
        return t5(e4, n4, i3);
      }));
    };
  }, i2.prototype.forEach = function(t4) {
    t4(this.fn, "fn", this);
    for (var e3 = 0; e3 < this.args.length; e3++)
      t4(this.args[e3], "args[" + e3 + "]", this);
  }, i2.prototype.map = function(t4) {
    for (var e3 = this._ifNode(t4(this.fn, "fn", this)), r3 = [], n3 = 0; n3 < this.args.length; n3++)
      r3[n3] = this._ifNode(t4(this.args[n3], "args[" + n3 + "]", this));
    return new i2(e3, r3);
  }, i2.prototype.clone = function() {
    return new i2(this.fn, this.args.slice(0));
  };
  var s2 = i2.prototype.toString;
  function a2(t4, e3, r3) {
    for (var n3, i3 = "", s3 = /\$(?:\{([a-z_][a-z_0-9]*)(?:\[([0-9]+)\])?\}|\$)/gi, a3 = 0; (n3 = s3.exec(t4)) !== null; )
      if (i3 += t4.substring(a3, n3.index), a3 = n3.index, n3[0] === "$$")
        i3 += "$", a3++;
      else {
        a3 += n3[0].length;
        var o3 = e3[n3[1]];
        if (!o3)
          throw new ReferenceError("Template: Property " + n3[1] + " does not exist.");
        if (n3[2] === void 0)
          switch (typeof o3) {
            case "string":
              i3 += o3;
              break;
            case "object":
              if (dr(o3))
                i3 += o3.toTex(r3);
              else {
                if (!Array.isArray(o3))
                  throw new TypeError("Template: " + n3[1] + " has to be a Node, String or array of Nodes");
                i3 += o3.map(function(t5, e4) {
                  if (dr(t5))
                    return t5.toTex(r3);
                  throw new TypeError("Template: " + n3[1] + "[" + e4 + "] is not a Node.");
                }).join(",");
              }
              break;
            default:
              throw new TypeError("Template: " + n3[1] + " has to be a Node, String or array of Nodes");
          }
        else {
          if (!dr(o3[n3[2]] && o3[n3[2]]))
            throw new TypeError("Template: " + n3[1] + "[" + n3[2] + "] is not a Node.");
          i3 += o3[n3[2]].toTex(r3);
        }
      }
    return i3 += t4.slice(a3);
  }
  i2.prototype.toString = function(t4) {
    var e3, r3 = this.fn.toString(t4);
    return t4 && typeof t4.handler == "object" && Cr(t4.handler, r3) && (e3 = t4.handler[r3](this, t4)), e3 !== void 0 ? e3 : s2.call(this, t4);
  }, i2.prototype._toString = function(t4) {
    var e3 = this.args.map(function(e4) {
      return e4.toString(t4);
    });
    return (lr(this.fn) ? "(" + this.fn.toString(t4) + ")" : this.fn.toString(t4)) + "(" + e3.join(", ") + ")";
  }, i2.prototype.toJSON = function() {
    return { mathjs: "FunctionNode", fn: this.fn, args: this.args };
  }, i2.fromJSON = function(t4) {
    return new i2(t4.fn, t4.args);
  }, i2.prototype.toHTML = function(t4) {
    var e3 = this.args.map(function(e4) {
      return e4.toHTML(t4);
    });
    return '<span class="math-function">' + en(this.fn) + '</span><span class="math-paranthesis math-round-parenthesis">(</span>' + e3.join('<span class="math-separator">,</span>') + '<span class="math-paranthesis math-round-parenthesis">)</span>';
  };
  var o2 = i2.prototype.toTex;
  return i2.prototype.toTex = function(t4) {
    var e3;
    return t4 && typeof t4.handler == "object" && Cr(t4.handler, this.name) && (e3 = t4.handler[this.name](this, t4)), e3 !== void 0 ? e3 : o2.call(this, t4);
  }, i2.prototype._toTex = function(t4) {
    var r3, n3, i3 = this.args.map(function(e3) {
      return e3.toTex(t4);
    });
    switch (mo[this.name] && (r3 = mo[this.name]), !e2[this.name] || typeof e2[this.name].toTex != "function" && typeof e2[this.name].toTex != "object" && typeof e2[this.name].toTex != "string" || (r3 = e2[this.name].toTex), typeof r3) {
      case "function":
        n3 = r3(this, t4);
        break;
      case "string":
        n3 = a2(r3, this, t4);
        break;
      case "object":
        switch (typeof r3[i3.length]) {
          case "function":
            n3 = r3[i3.length](this, t4);
            break;
          case "string":
            n3 = a2(r3[i3.length], this, t4);
        }
    }
    return n3 !== void 0 ? n3 : a2("\\mathrm{${name}}\\left(${args}\\right)", this, t4);
  }, i2.prototype.getIdentifier = function() {
    return this.type + ":" + this.name;
  }, i2;
}, { isClass: true, isNode: true }) }, IndexNodeDependencies: { NodeDependencies: iu, RangeDependencies: { createRangeClass: ls }, sizeDependencies: Go, createIndexNode: bo }, ObjectNodeDependencies: { NodeDependencies: iu, createObjectNode: _o }, OperatorNodeDependencies: { NodeDependencies: iu, createOperatorNode: Mo }, ParenthesisNodeDependencies: { NodeDependencies: iu, createParenthesisNode: No }, RangeNodeDependencies: { NodeDependencies: iu, createRangeNode: Eo }, RelationalNodeDependencies: { NodeDependencies: iu, createRelationalNode: So }, SymbolNodeDependencies: su, numericDependencies: Qo, typedDependencies: ko, createParse: wn("parse", ["typed", "numeric", "config", "AccessorNode", "ArrayNode", "AssignmentNode", "BlockNode", "ConditionalNode", "ConstantNode", "FunctionAssignmentNode", "FunctionNode", "IndexNode", "ObjectNode", "OperatorNode", "ParenthesisNode", "RangeNode", "RelationalNode", "SymbolNode"], (t3) => {
  var { typed: e2, numeric: r2, config: n2, AccessorNode: i2, ArrayNode: s2, AssignmentNode: a2, BlockNode: o2, ConditionalNode: u2, ConstantNode: h, FunctionAssignmentNode: c2, FunctionNode: l2, IndexNode: p2, ObjectNode: f2, OperatorNode: d, ParenthesisNode: m2, RangeNode: y2, RelationalNode: g2, SymbolNode: v2 } = t3, x2 = e2("parse", { string: function(t4) {
    return P2(t4, {});
  }, "Array | Matrix": function(t4) {
    return w2(t4, {});
  }, "string, Object": function(t4, e3) {
    return P2(t4, e3.nodes !== void 0 ? e3.nodes : {});
  }, "Array | Matrix, Object": w2 });
  function w2(t4) {
    var e3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, r3 = e3.nodes !== void 0 ? e3.nodes : {};
    return ds(t4, function(t5) {
      if (typeof t5 != "string")
        throw new TypeError("String expected");
      return P2(t5, r3);
    });
  }
  var b2 = 0, _2 = 1, M2 = 2, N2 = 3, E2 = 4, S2 = { ",": true, "(": true, ")": true, "[": true, "]": true, "{": true, "}": true, '"': true, "'": true, ";": true, "+": true, "-": true, "*": true, ".*": true, "/": true, "./": true, "%": true, "^": true, ".^": true, "~": true, "!": true, "&": true, "|": true, "^|": true, "=": true, ":": true, "?": true, "==": true, "!=": true, "<": true, ">": true, "<=": true, ">=": true, "<<": true, ">>": true, ">>>": true }, T2 = { mod: true, to: true, in: true, and: true, xor: true, or: true, not: true }, O2 = { true: true, false: false, null: null, undefined: void 0 }, z2 = ["NaN", "Infinity"];
  function C2(t4, e3) {
    return t4.expression.substr(t4.index, e3);
  }
  function A2(t4) {
    return C2(t4, 1);
  }
  function R2(t4) {
    t4.index++;
  }
  function D2(t4) {
    return t4.expression.charAt(t4.index - 1);
  }
  function k2(t4) {
    return t4.expression.charAt(t4.index + 1);
  }
  function I2(t4) {
    for (t4.tokenType = b2, t4.token = "", t4.comment = ""; x2.isWhitespace(A2(t4), t4.nestingLevel); )
      R2(t4);
    if (A2(t4) === "#")
      for (; A2(t4) !== "\n" && A2(t4) !== ""; )
        t4.comment += A2(t4), R2(t4);
    if (A2(t4) !== "") {
      if (A2(t4) === "\n" && !t4.nestingLevel)
        return t4.tokenType = _2, t4.token = A2(t4), void R2(t4);
      var e3 = A2(t4), r3 = C2(t4, 2), n3 = C2(t4, 3);
      if (n3.length === 3 && S2[n3])
        return t4.tokenType = _2, t4.token = n3, R2(t4), R2(t4), void R2(t4);
      if (r3.length === 2 && S2[r3])
        return t4.tokenType = _2, t4.token = r3, R2(t4), void R2(t4);
      if (S2[e3])
        return t4.tokenType = _2, t4.token = e3, void R2(t4);
      if (x2.isDigitDot(e3)) {
        t4.tokenType = M2;
        var i3 = C2(t4, 2);
        if (i3 === "0b" || i3 === "0o" || i3 === "0x") {
          for (t4.token += A2(t4), R2(t4), t4.token += A2(t4), R2(t4); x2.isHexDigit(A2(t4)); )
            t4.token += A2(t4), R2(t4);
          return;
        }
        if (A2(t4) === ".")
          t4.token += A2(t4), R2(t4), x2.isDigit(A2(t4)) || (t4.tokenType = _2);
        else {
          for (; x2.isDigit(A2(t4)); )
            t4.token += A2(t4), R2(t4);
          x2.isDecimalMark(A2(t4), k2(t4)) && (t4.token += A2(t4), R2(t4));
        }
        for (; x2.isDigit(A2(t4)); )
          t4.token += A2(t4), R2(t4);
        if (A2(t4) === "E" || A2(t4) === "e") {
          if (x2.isDigit(k2(t4)) || k2(t4) === "-" || k2(t4) === "+") {
            if (t4.token += A2(t4), R2(t4), A2(t4) !== "+" && A2(t4) !== "-" || (t4.token += A2(t4), R2(t4)), !x2.isDigit(A2(t4)))
              throw at(t4, 'Digit expected, got "' + A2(t4) + '"');
            for (; x2.isDigit(A2(t4)); )
              t4.token += A2(t4), R2(t4);
            if (x2.isDecimalMark(A2(t4), k2(t4)))
              throw at(t4, 'Digit expected, got "' + A2(t4) + '"');
          } else if (k2(t4) === ".")
            throw R2(t4), at(t4, 'Digit expected, got "' + A2(t4) + '"');
        }
      } else {
        if (!x2.isAlpha(A2(t4), D2(t4), k2(t4))) {
          for (t4.tokenType = E2; A2(t4) !== ""; )
            t4.token += A2(t4), R2(t4);
          throw at(t4, 'Syntax error in part "' + t4.token + '"');
        }
        for (; x2.isAlpha(A2(t4), D2(t4), k2(t4)) || x2.isDigit(A2(t4)); )
          t4.token += A2(t4), R2(t4);
        Cr(T2, t4.token) ? t4.tokenType = _2 : t4.tokenType = N2;
      }
    } else
      t4.tokenType = _2;
  }
  function L2(t4) {
    do {
      I2(t4);
    } while (t4.token === "\n");
  }
  function B2(t4) {
    t4.nestingLevel++;
  }
  function F2(t4) {
    t4.nestingLevel--;
  }
  function P2(t4, e3) {
    var r3 = { extraNodes: {}, expression: "", comment: "", index: 0, token: "", tokenType: b2, nestingLevel: 0, conditionalLevel: null };
    Oo(r3, { expression: t4, extraNodes: e3 }), I2(r3);
    var n3 = function(t5) {
      var e4, r4, n4 = [];
      t5.token !== "" && t5.token !== "\n" && t5.token !== ";" && ((e4 = U2(t5)).comment = t5.comment);
      for (; t5.token === "\n" || t5.token === ";"; )
        n4.length === 0 && e4 && (r4 = t5.token !== ";", n4.push({ node: e4, visible: r4 })), I2(t5), t5.token !== "\n" && t5.token !== ";" && t5.token !== "" && ((e4 = U2(t5)).comment = t5.comment, r4 = t5.token !== ";", n4.push({ node: e4, visible: r4 }));
      return n4.length > 0 ? new o2(n4) : (e4 || ((e4 = new h(void 0)).comment = t5.comment), e4);
    }(r3);
    if (r3.token !== "")
      throw r3.tokenType === _2 ? ot2(r3, "Unexpected operator " + r3.token) : at(r3, 'Unexpected part "' + r3.token + '"');
    return n3;
  }
  function U2(t4) {
    var e3, r3, n3, i3, s3 = function(t5) {
      var e4 = function(t6) {
        var e5 = j2(t6);
        for (; t6.token === "or"; )
          L2(t6), e5 = new d("or", "or", [e5, j2(t6)]);
        return e5;
      }(t5);
      for (; t5.token === "?"; ) {
        var r4 = t5.conditionalLevel;
        t5.conditionalLevel = t5.nestingLevel, L2(t5);
        var n4 = e4, i4 = U2(t5);
        if (t5.token !== ":")
          throw at(t5, "False part of conditional expression expected");
        t5.conditionalLevel = null, L2(t5);
        var s4 = U2(t5);
        e4 = new u2(n4, i4, s4), t5.conditionalLevel = r4;
      }
      return e4;
    }(t4);
    if (t4.token === "=") {
      if (xr(s3))
        return e3 = s3.name, L2(t4), n3 = U2(t4), new a2(new v2(e3), n3);
      if (sr(s3))
        return L2(t4), n3 = U2(t4), new a2(s3.object, s3.index, n3);
      if (pr(s3) && xr(s3.fn) && (i3 = true, r3 = [], e3 = s3.name, s3.args.forEach(function(t5, e4) {
        xr(t5) ? r3[e4] = t5.name : i3 = false;
      }), i3))
        return L2(t4), n3 = U2(t4), new c2(e3, r3, n3);
      throw at(t4, "Invalid left hand side of assignment operator =");
    }
    return s3;
  }
  function j2(t4) {
    for (var e3 = q2(t4); t4.token === "xor"; )
      L2(t4), e3 = new d("xor", "xor", [e3, q2(t4)]);
    return e3;
  }
  function q2(t4) {
    for (var e3 = H2(t4); t4.token === "and"; )
      L2(t4), e3 = new d("and", "and", [e3, H2(t4)]);
    return e3;
  }
  function H2(t4) {
    for (var e3 = V2(t4); t4.token === "|"; )
      L2(t4), e3 = new d("|", "bitOr", [e3, V2(t4)]);
    return e3;
  }
  function V2(t4) {
    for (var e3 = $2(t4); t4.token === "^|"; )
      L2(t4), e3 = new d("^|", "bitXor", [e3, $2(t4)]);
    return e3;
  }
  function $2(t4) {
    for (var e3 = G2(t4); t4.token === "&"; )
      L2(t4), e3 = new d("&", "bitAnd", [e3, G2(t4)]);
    return e3;
  }
  function G2(t4) {
    for (var e3 = [W2(t4)], r3 = [], n3 = { "==": "equal", "!=": "unequal", "<": "smaller", ">": "larger", "<=": "smallerEq", ">=": "largerEq" }; Cr(n3, t4.token); ) {
      var i3 = { name: t4.token, fn: n3[t4.token] };
      r3.push(i3), L2(t4), e3.push(W2(t4));
    }
    return e3.length === 1 ? e3[0] : e3.length === 2 ? new d(r3[0].name, r3[0].fn, e3) : new g2(r3.map((t5) => t5.fn), e3);
  }
  function W2(t4) {
    var e3, r3, n3, i3;
    e3 = Y2(t4);
    for (var s3 = { "<<": "leftShift", ">>": "rightArithShift", ">>>": "rightLogShift" }; Cr(s3, t4.token); )
      n3 = s3[r3 = t4.token], L2(t4), i3 = [e3, Y2(t4)], e3 = new d(r3, n3, i3);
    return e3;
  }
  function Y2(t4) {
    var e3, r3, n3, i3;
    e3 = Z2(t4);
    for (var s3 = { to: "to", in: "to" }; Cr(s3, t4.token); )
      n3 = s3[r3 = t4.token], L2(t4), r3 === "in" && t4.token === "" ? e3 = new d("*", "multiply", [e3, new v2("in")], true) : (i3 = [e3, Z2(t4)], e3 = new d(r3, n3, i3));
    return e3;
  }
  function Z2(t4) {
    var e3, r3 = [];
    if (e3 = t4.token === ":" ? new h(1) : X(t4), t4.token === ":" && t4.conditionalLevel !== t4.nestingLevel) {
      for (r3.push(e3); t4.token === ":" && r3.length < 3; )
        L2(t4), t4.token === ")" || t4.token === "]" || t4.token === "," || t4.token === "" ? r3.push(new v2("end")) : r3.push(X(t4));
      e3 = r3.length === 3 ? new y2(r3[0], r3[2], r3[1]) : new y2(r3[0], r3[1]);
    }
    return e3;
  }
  function X(t4) {
    var e3, r3, n3, i3;
    e3 = J(t4);
    for (var s3 = { "+": "add", "-": "subtract" }; Cr(s3, t4.token); )
      n3 = s3[r3 = t4.token], L2(t4), i3 = [e3, J(t4)], e3 = new d(r3, n3, i3);
    return e3;
  }
  function J(t4) {
    var e3, r3, n3, i3;
    r3 = e3 = Q(t4);
    for (var s3 = { "*": "multiply", ".*": "dotMultiply", "/": "divide", "./": "dotDivide", "%": "mod", mod: "mod" }; Cr(s3, t4.token); )
      i3 = s3[n3 = t4.token], L2(t4), r3 = Q(t4), e3 = new d(n3, i3, [e3, r3]);
    return e3;
  }
  function Q(t4) {
    var e3, r3;
    for (r3 = e3 = K(t4); t4.tokenType === N2 || t4.token === "in" && cr(e3) || !(t4.tokenType !== M2 || cr(r3) || yr(r3) && r3.op !== "!") || t4.token === "("; )
      r3 = K(t4), e3 = new d("*", "multiply", [e3, r3], true);
    return e3;
  }
  function K(t4) {
    for (var e3 = tt(t4), r3 = e3, n3 = []; t4.token === "/" && cr(r3); ) {
      if (n3.push(Oo({}, t4)), L2(t4), t4.tokenType !== M2) {
        Oo(t4, n3.pop());
        break;
      }
      if (n3.push(Oo({}, t4)), L2(t4), t4.tokenType !== N2 && t4.token !== "(") {
        n3.pop(), Oo(t4, n3.pop());
        break;
      }
      Oo(t4, n3.pop()), n3.pop(), r3 = tt(t4), e3 = new d("/", "divide", [e3, r3]);
    }
    return e3;
  }
  function tt(t4) {
    var e3, i3, a3, o3 = { "-": "unaryMinus", "+": "unaryPlus", "~": "bitNot", not: "not" };
    return Cr(o3, t4.token) ? (a3 = o3[t4.token], e3 = t4.token, L2(t4), i3 = [tt(t4)], new d(e3, a3, i3)) : function(t5) {
      var e4, i4, a4, o4;
      e4 = function(t6) {
        var e5, i5, a5;
        e5 = function(t7) {
          var e6 = [];
          if (t7.tokenType === N2 && Cr(t7.extraNodes, t7.token)) {
            var i6 = t7.extraNodes[t7.token];
            if (I2(t7), t7.token === "(") {
              if (e6 = [], B2(t7), I2(t7), t7.token !== ")")
                for (e6.push(U2(t7)); t7.token === ","; )
                  I2(t7), e6.push(U2(t7));
              if (t7.token !== ")")
                throw at(t7, "Parenthesis ) expected");
              F2(t7), I2(t7);
            }
            return new i6(e6);
          }
          return function(t8) {
            var e7;
            if (t8.tokenType === N2 || t8.tokenType === _2 && t8.token in T2)
              return e7 = t8.token, I2(t8), et(t8, Cr(O2, e7) ? new h(O2[e7]) : z2.indexOf(e7) !== -1 ? new h(r2(e7, "number")) : new v2(e7));
            return function(t9) {
              var e8;
              if (t9.token === '"')
                return e8 = rt(t9), et(t9, new h(e8));
              return function(t10) {
                var e9;
                if (t10.token === "'")
                  return e9 = nt(t10), et(t10, new h(e9));
                return function(t11) {
                  var e10, i7, a6, o6;
                  if (t11.token === "[") {
                    if (B2(t11), I2(t11), t11.token !== "]") {
                      var u3 = it(t11);
                      if (t11.token === ";") {
                        for (a6 = 1, i7 = [u3]; t11.token === ";"; )
                          I2(t11), i7[a6] = it(t11), a6++;
                        if (t11.token !== "]")
                          throw at(t11, "End of matrix ] expected");
                        F2(t11), I2(t11), o6 = i7[0].items.length;
                        for (var c3 = 1; c3 < a6; c3++)
                          if (i7[c3].items.length !== o6)
                            throw ot2(t11, "Column dimensions mismatch (" + i7[c3].items.length + " !== " + o6 + ")");
                        e10 = new s2(i7);
                      } else {
                        if (t11.token !== "]")
                          throw at(t11, "End of matrix ] expected");
                        F2(t11), I2(t11), e10 = u3;
                      }
                    } else
                      F2(t11), I2(t11), e10 = new s2([]);
                    return et(t11, e10);
                  }
                  return function(t12) {
                    if (t12.token === "{") {
                      var e11;
                      B2(t12);
                      var i8 = {};
                      do {
                        if (I2(t12), t12.token !== "}") {
                          if (t12.token === '"')
                            e11 = rt(t12);
                          else if (t12.token === "'")
                            e11 = nt(t12);
                          else {
                            if (!(t12.tokenType === N2 || t12.tokenType === _2 && t12.token in T2))
                              throw at(t12, "Symbol or string expected as object key");
                            e11 = t12.token, I2(t12);
                          }
                          if (t12.token !== ":")
                            throw at(t12, "Colon : expected after object key");
                          I2(t12), i8[e11] = U2(t12);
                        }
                      } while (t12.token === ",");
                      if (t12.token !== "}")
                        throw at(t12, "Comma , or bracket } expected after object value");
                      F2(t12), I2(t12);
                      var s3 = new f2(i8);
                      return s3 = et(t12, s3);
                    }
                    return function(t13) {
                      var e12;
                      if (t13.tokenType === M2)
                        return e12 = t13.token, I2(t13), new h(r2(e12, n2.number));
                      return function(t14) {
                        var e13;
                        if (t14.token === "(") {
                          if (B2(t14), I2(t14), e13 = U2(t14), t14.token !== ")")
                            throw at(t14, "Parenthesis ) expected");
                          return F2(t14), I2(t14), e13 = et(t14, e13 = new m2(e13));
                        }
                        return function(t15) {
                          throw t15.token === "" ? at(t15, "Unexpected end of expression") : at(t15, "Value expected");
                        }(t14);
                      }(t13);
                    }(t12);
                  }(t11);
                }(t10);
              }(t9);
            }(t8);
          }(t7);
        }(t6);
        var o5 = { "!": "factorial", "'": "ctranspose" };
        for (; Cr(o5, t6.token); )
          a5 = o5[i5 = t6.token], I2(t6), e5 = et(t6, e5 = new d(i5, a5, [e5]));
        return e5;
      }(t5), (t5.token === "^" || t5.token === ".^") && (a4 = (i4 = t5.token) === "^" ? "pow" : "dotPow", L2(t5), o4 = [e4, tt(t5)], e4 = new d(i4, a4, o4));
      return e4;
    }(t4);
  }
  function et(t4, e3, r3) {
    for (var n3; !(t4.token !== "(" && t4.token !== "[" && t4.token !== "." || r3 && r3.indexOf(t4.token) === -1); )
      if (n3 = [], t4.token === "(") {
        if (!xr(e3) && !sr(e3))
          return e3;
        if (B2(t4), I2(t4), t4.token !== ")")
          for (n3.push(U2(t4)); t4.token === ","; )
            I2(t4), n3.push(U2(t4));
        if (t4.token !== ")")
          throw at(t4, "Parenthesis ) expected");
        F2(t4), I2(t4), e3 = new l2(e3, n3);
      } else if (t4.token === "[") {
        if (B2(t4), I2(t4), t4.token !== "]")
          for (n3.push(U2(t4)); t4.token === ","; )
            I2(t4), n3.push(U2(t4));
        if (t4.token !== "]")
          throw at(t4, "Parenthesis ] expected");
        F2(t4), I2(t4), e3 = new i2(e3, new p2(n3));
      } else {
        if (I2(t4), t4.tokenType !== N2)
          throw at(t4, "Property name expected after dot");
        n3.push(new h(t4.token)), I2(t4);
        e3 = new i2(e3, new p2(n3, true));
      }
    return e3;
  }
  function rt(t4) {
    for (var e3 = ""; A2(t4) !== "" && A2(t4) !== '"'; )
      A2(t4) === "\\" && (e3 += A2(t4), R2(t4)), e3 += A2(t4), R2(t4);
    if (I2(t4), t4.token !== '"')
      throw at(t4, 'End of string " expected');
    return I2(t4), JSON.parse('"' + e3 + '"');
  }
  function nt(t4) {
    for (var e3 = ""; A2(t4) !== "" && A2(t4) !== "'"; )
      A2(t4) === "\\" && (e3 += A2(t4), R2(t4)), e3 += A2(t4), R2(t4);
    if (I2(t4), t4.token !== "'")
      throw at(t4, "End of string ' expected");
    return I2(t4), JSON.parse('"' + e3 + '"');
  }
  function it(t4) {
    for (var e3 = [U2(t4)], r3 = 1; t4.token === ","; )
      I2(t4), e3[r3] = U2(t4), r3++;
    return new s2(e3);
  }
  function st(t4) {
    return t4.index - t4.token.length + 1;
  }
  function at(t4, e3) {
    var r3 = st(t4), n3 = new SyntaxError(e3 + " (char " + r3 + ")");
    return n3.char = r3, n3;
  }
  function ot2(t4, e3) {
    var r3 = st(t4), n3 = new SyntaxError(e3 + " (char " + r3 + ")");
    return n3.char = r3, n3;
  }
  return x2.isAlpha = function(t4, e3, r3) {
    return x2.isValidLatinOrGreek(t4) || x2.isValidMathSymbol(t4, r3) || x2.isValidMathSymbol(e3, t4);
  }, x2.isValidLatinOrGreek = function(t4) {
    return /^[a-zA-Z_$\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(t4);
  }, x2.isValidMathSymbol = function(t4, e3) {
    return /^[\uD835]$/.test(t4) && /^[\uDC00-\uDFFF]$/.test(e3) && /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(e3);
  }, x2.isWhitespace = function(t4, e3) {
    return t4 === " " || t4 === "	" || t4 === "\n" && e3 > 0;
  }, x2.isDecimalMark = function(t4, e3) {
    return t4 === "." && e3 !== "/" && e3 !== "*" && e3 !== "^";
  }, x2.isDigitDot = function(t4) {
    return t4 >= "0" && t4 <= "9" || t4 === ".";
  }, x2.isDigit = function(t4) {
    return t4 >= "0" && t4 <= "9";
  }, x2.isHexDigit = function(t4) {
    return t4 >= "0" && t4 <= "9" || t4 >= "a" && t4 <= "f" || t4 >= "A" && t4 <= "F";
  }, x2;
}) }, typedDependencies: ko, createEvaluate: wn("evaluate", ["typed", "parse"], (t3) => {
  var { typed: e2, parse: r2 } = t3;
  return e2("evaluate", { string: function(t4) {
    return r2(t4).compile().evaluate({});
  }, "string, Object": function(t4, e3) {
    return r2(t4).compile().evaluate(e3);
  }, "Array | Matrix": function(t4) {
    var e3 = {};
    return ds(t4, function(t5) {
      return r2(t5).compile().evaluate(e3);
    });
  }, "Array | Matrix, Object": function(t4, e3) {
    return ds(t4, function(t5) {
      return r2(t5).compile().evaluate(e3);
    });
  } });
}) }, ou = { divideScalarDependencies: Ko, equalScalarDependencies: Io, invDependencies: { absDependencies: jo, addScalarDependencies: qo, detDependencies: { lupDependencies: { DenseMatrixDependencies: Ro, SpaDependencies: { FibonacciHeapDependencies: { largerDependencies: Zo, smallerDependencies: { DenseMatrixDependencies: Ro, matrixDependencies: Po, typedDependencies: ko, createSmaller: ka }, createFibonacciHeapClass: La }, addScalarDependencies: qo, equalScalarDependencies: Io, createSpaClass: Ba }, SparseMatrixDependencies: Lo, absDependencies: jo, addScalarDependencies: qo, divideScalarDependencies: Ko, equalScalarDependencies: Io, largerDependencies: Zo, matrixDependencies: Po, multiplyScalarDependencies: $o, subtractDependencies: Yo, typedDependencies: ko, unaryMinusDependencies: Uo, createLup: wn("lup", ["typed", "matrix", "abs", "addScalar", "divideScalar", "multiplyScalar", "subtract", "larger", "equalScalar", "unaryMinus", "DenseMatrix", "SparseMatrix", "Spa"], (t3) => {
  var { typed: e2, matrix: r2, abs: n2, addScalar: i2, divideScalar: s2, multiplyScalar: a2, subtract: o2, larger: u2, equalScalar: h, unaryMinus: c2, DenseMatrix: l2, SparseMatrix: p2, Spa: f2 } = t3;
  return e2("lup", { DenseMatrix: function(t4) {
    return d(t4);
  }, SparseMatrix: function(t4) {
    return function(t5) {
      var e3, r3, i3, o3 = t5._size[0], l3 = t5._size[1], d2 = Math.min(o3, l3), m2 = t5._values, y2 = t5._index, g2 = t5._ptr, v2 = [], x2 = [], w2 = [], b2 = [o3, d2], _2 = [], M2 = [], N2 = [], E2 = [d2, l3], S2 = [], T2 = [];
      for (e3 = 0; e3 < o3; e3++)
        S2[e3] = e3, T2[e3] = e3;
      var O2 = function(t6, e4) {
        var r4 = T2[t6], n3 = T2[e4];
        S2[r4] = e4, S2[n3] = t6, T2[t6] = n3, T2[e4] = r4;
      }, z2 = function() {
        var t6 = new f2();
        r3 < o3 && (w2.push(v2.length), v2.push(1), x2.push(r3)), N2.push(_2.length);
        var l4 = g2[r3], d3 = g2[r3 + 1];
        for (i3 = l4; i3 < d3; i3++)
          e3 = y2[i3], t6.set(S2[e3], m2[i3]);
        r3 > 0 && t6.forEach(0, r3 - 1, function(e4, r4) {
          p2._forEachRow(e4, v2, x2, w2, function(n3, i4) {
            n3 > e4 && t6.accumulate(n3, c2(a2(i4, r4)));
          });
        });
        var T3 = r3, z3 = t6.get(r3), C2 = n2(z3);
        t6.forEach(r3 + 1, o3 - 1, function(t7, e4) {
          var r4 = n2(e4);
          u2(r4, C2) && (T3 = t7, C2 = r4, z3 = e4);
        }), r3 !== T3 && (p2._swapRows(r3, T3, b2[1], v2, x2, w2), p2._swapRows(r3, T3, E2[1], _2, M2, N2), t6.swap(r3, T3), O2(r3, T3)), t6.forEach(0, o3 - 1, function(t7, e4) {
          t7 <= r3 ? (_2.push(e4), M2.push(t7)) : (e4 = s2(e4, z3), h(e4, 0) || (v2.push(e4), x2.push(t7)));
        });
      };
      for (r3 = 0; r3 < l3; r3++)
        z2();
      return N2.push(_2.length), w2.push(v2.length), { L: new p2({ values: v2, index: x2, ptr: w2, size: b2 }), U: new p2({ values: _2, index: M2, ptr: N2, size: E2 }), p: S2, toString: function() {
        return "L: " + this.L.toString() + "\nU: " + this.U.toString() + "\nP: " + this.p;
      } };
    }(t4);
  }, Array: function(t4) {
    var e3 = d(r2(t4));
    return { L: e3.L.valueOf(), U: e3.U.valueOf(), p: e3.p };
  } });
  function d(t4) {
    var e3, r3, c3, p3 = t4._size[0], f3 = t4._size[1], d2 = Math.min(p3, f3), m2 = _r(t4._data), y2 = [], g2 = [p3, d2], v2 = [], x2 = [d2, f3], w2 = [];
    for (e3 = 0; e3 < p3; e3++)
      w2[e3] = e3;
    for (r3 = 0; r3 < f3; r3++) {
      if (r3 > 0)
        for (e3 = 0; e3 < p3; e3++) {
          var b2 = Math.min(e3, r3), _2 = 0;
          for (c3 = 0; c3 < b2; c3++)
            _2 = i2(_2, a2(m2[e3][c3], m2[c3][r3]));
          m2[e3][r3] = o2(m2[e3][r3], _2);
        }
      var M2 = r3, N2 = 0, E2 = 0;
      for (e3 = r3; e3 < p3; e3++) {
        var S2 = m2[e3][r3], T2 = n2(S2);
        u2(T2, N2) && (M2 = e3, N2 = T2, E2 = S2);
      }
      if (r3 !== M2 && (w2[r3] = [w2[M2], w2[M2] = w2[r3]][0], l2._swapRows(r3, M2, m2)), r3 < p3)
        for (e3 = r3 + 1; e3 < p3; e3++) {
          var O2 = m2[e3][r3];
          h(O2, 0) || (m2[e3][r3] = s2(m2[e3][r3], E2));
        }
    }
    for (r3 = 0; r3 < f3; r3++)
      for (e3 = 0; e3 < p3; e3++)
        r3 === 0 && (e3 < f3 && (v2[e3] = []), y2[e3] = []), e3 < r3 ? (e3 < f3 && (v2[e3][r3] = m2[e3][r3]), r3 < p3 && (y2[e3][r3] = 0)) : e3 !== r3 ? (e3 < f3 && (v2[e3][r3] = 0), r3 < p3 && (y2[e3][r3] = m2[e3][r3])) : (e3 < f3 && (v2[e3][r3] = m2[e3][r3]), r3 < p3 && (y2[e3][r3] = 1));
    var z2 = new l2({ data: y2, size: g2 }), C2 = new l2({ data: v2, size: x2 }), A2 = [];
    for (e3 = 0, d2 = w2.length; e3 < d2; e3++)
      A2[w2[e3]] = e3;
    return { L: z2, U: C2, p: A2, toString: function() {
      return "L: " + this.L.toString() + "\nU: " + this.U.toString() + "\nP: " + this.p;
    } };
  }
}) }, matrixDependencies: Po, multiplyDependencies: Wo, subtractDependencies: Yo, typedDependencies: ko, unaryMinusDependencies: Uo, createDet: wn("det", ["typed", "matrix", "subtract", "multiply", "unaryMinus", "lup"], (t3) => {
  var { typed: e2, matrix: r2, subtract: n2, multiply: i2, unaryMinus: s2, lup: a2 } = t3;
  return e2("det", { any: function(t4) {
    return _r(t4);
  }, "Array | Matrix": function(t4) {
    var e3;
    switch ((e3 = Ve(t4) ? t4.size() : Array.isArray(t4) ? (t4 = r2(t4)).size() : []).length) {
      case 0:
        return _r(t4);
      case 1:
        if (e3[0] === 1)
          return _r(t4.valueOf()[0]);
        throw new RangeError("Matrix must be square (size: " + Kr(e3) + ")");
      case 2:
        var o2 = e3[0];
        if (o2 === e3[1])
          return function(t5, e4, r3) {
            if (e4 === 1)
              return _r(t5[0][0]);
            if (e4 === 2)
              return n2(i2(t5[0][0], t5[1][1]), i2(t5[1][0], t5[0][1]));
            for (var o3 = a2(t5), u2 = o3.U[0][0], h = 1; h < e4; h++)
              u2 = i2(u2, o3.U[h][h]);
            for (var c2 = 0, l2 = 0, p2 = []; ; ) {
              for (; p2[l2]; )
                l2++;
              if (l2 >= e4)
                break;
              for (var f2 = l2, d = 0; !p2[o3.p[f2]]; )
                p2[o3.p[f2]] = true, f2 = o3.p[f2], d++;
              d % 2 == 0 && c2++;
            }
            return c2 % 2 == 0 ? u2 : s2(u2);
          }(t4.clone().valueOf(), o2);
        throw new RangeError("Matrix must be square (size: " + Kr(e3) + ")");
      default:
        throw new RangeError("Matrix must be two dimensional (size: " + Kr(e3) + ")");
    }
  } });
}) }, divideScalarDependencies: Ko, identityDependencies: Xo, matrixDependencies: Po, multiplyDependencies: Wo, typedDependencies: ko, unaryMinusDependencies: Uo, createInv: wn("inv", ["typed", "matrix", "divideScalar", "addScalar", "multiply", "unaryMinus", "det", "identity", "abs"], (t3) => {
  var { typed: e2, matrix: r2, divideScalar: n2, addScalar: i2, multiply: s2, unaryMinus: a2, det: o2, identity: u2, abs: h } = t3;
  return e2("inv", { "Array | Matrix": function(t4) {
    var e3 = Ve(t4) ? t4.size() : an(t4);
    switch (e3.length) {
      case 1:
        if (e3[0] === 1)
          return Ve(t4) ? r2([n2(1, t4.valueOf()[0])]) : [n2(1, t4[0])];
        throw new RangeError("Matrix must be square (size: " + Kr(e3) + ")");
      case 2:
        var i3 = e3[0], s3 = e3[1];
        if (i3 === s3)
          return Ve(t4) ? r2(c2(t4.valueOf(), i3, s3), t4.storage()) : c2(t4, i3, s3);
        throw new RangeError("Matrix must be square (size: " + Kr(e3) + ")");
      default:
        throw new RangeError("Matrix must be two dimensional (size: " + Kr(e3) + ")");
    }
  }, any: function(t4) {
    return n2(1, t4);
  } });
  function c2(t4, e3, r3) {
    var c3, l2, p2, f2, d;
    if (e3 === 1) {
      if ((f2 = t4[0][0]) === 0)
        throw Error("Cannot calculate inverse, determinant is zero");
      return [[n2(1, f2)]];
    }
    if (e3 === 2) {
      var m2 = o2(t4);
      if (m2 === 0)
        throw Error("Cannot calculate inverse, determinant is zero");
      return [[n2(t4[1][1], m2), n2(a2(t4[0][1]), m2)], [n2(a2(t4[1][0]), m2), n2(t4[0][0], m2)]];
    }
    var y2 = t4.concat();
    for (c3 = 0; c3 < e3; c3++)
      y2[c3] = y2[c3].concat();
    for (var g2 = u2(e3).valueOf(), v2 = 0; v2 < r3; v2++) {
      var x2 = h(y2[v2][v2]), w2 = v2;
      for (c3 = v2 + 1; c3 < e3; )
        h(y2[c3][v2]) > x2 && (x2 = h(y2[c3][v2]), w2 = c3), c3++;
      if (x2 === 0)
        throw Error("Cannot calculate inverse, determinant is zero");
      (c3 = w2) !== v2 && (d = y2[v2], y2[v2] = y2[c3], y2[c3] = d, d = g2[v2], g2[v2] = g2[c3], g2[c3] = d);
      var b2 = y2[v2], _2 = g2[v2];
      for (c3 = 0; c3 < e3; c3++) {
        var M2 = y2[c3], N2 = g2[c3];
        if (c3 !== v2) {
          if (M2[v2] !== 0) {
            for (p2 = n2(a2(M2[v2]), b2[v2]), l2 = v2; l2 < r3; l2++)
              M2[l2] = i2(M2[l2], s2(p2, b2[l2]));
            for (l2 = 0; l2 < r3; l2++)
              N2[l2] = i2(N2[l2], s2(p2, _2[l2]));
          }
        } else {
          for (p2 = b2[v2], l2 = v2; l2 < r3; l2++)
            M2[l2] = n2(M2[l2], p2);
          for (l2 = 0; l2 < r3; l2++)
            N2[l2] = n2(N2[l2], p2);
        }
      }
    }
    return g2;
  }
}) }, matrixDependencies: Po, multiplyDependencies: Wo, typedDependencies: ko, createDivide: wn("divide", ["typed", "matrix", "multiply", "equalScalar", "divideScalar", "inv"], (t3) => {
  var { typed: e2, matrix: r2, multiply: n2, equalScalar: i2, divideScalar: s2, inv: a2 } = t3, o2 = Bs({ typed: e2, equalScalar: i2 }), u2 = Fs({ typed: e2 });
  return e2("divide", Nr({ "Array | Matrix, Array | Matrix": function(t4, e3) {
    return n2(t4, a2(e3));
  }, "DenseMatrix, any": function(t4, e3) {
    return u2(t4, e3, s2, false);
  }, "SparseMatrix, any": function(t4, e3) {
    return o2(t4, e3, s2, false);
  }, "Array, any": function(t4, e3) {
    return u2(r2(t4), e3, s2, false).valueOf();
  }, "any, Array | Matrix": function(t4, e3) {
    return n2(t4, a2(e3));
  } }, s2.signatures));
}) }, uu = { exports: {} };
function hu() {
}
hu.prototype = { on: function(t3, e2, r2) {
  var n2 = this.e || (this.e = {});
  return (n2[t3] || (n2[t3] = [])).push({ fn: e2, ctx: r2 }), this;
}, once: function(t3, e2, r2) {
  var n2 = this;
  function i2() {
    n2.off(t3, i2), e2.apply(r2, arguments);
  }
  return i2._ = e2, this.on(t3, i2, r2);
}, emit: function(t3) {
  for (var e2 = [].slice.call(arguments, 1), r2 = ((this.e || (this.e = {}))[t3] || []).slice(), n2 = 0, i2 = r2.length; n2 < i2; n2++)
    r2[n2].fn.apply(r2[n2].ctx, e2);
  return this;
}, off: function(t3, e2) {
  var r2 = this.e || (this.e = {}), n2 = r2[t3], i2 = [];
  if (n2 && e2)
    for (var s2 = 0, a2 = n2.length; s2 < a2; s2++)
      n2[s2].fn !== e2 && n2[s2].fn._ !== e2 && i2.push(n2[s2]);
  return i2.length ? r2[t3] = i2 : delete r2[t3], this;
} }, uu.exports = hu, uu.exports.TinyEmitter = hu;
var cu = uu.exports;
function lu(t3, e2, r2, n2) {
  function i2(e3, i3, a3) {
    var o3;
    if (a3.wrap && typeof i3 == "function" && (i3 = function(t4) {
      var e4 = function() {
        for (var e5 = [], n3 = 0, i4 = arguments.length; n3 < i4; n3++) {
          var s3 = arguments[n3];
          e5[n3] = s3 && s3.valueOf();
        }
        return t4.apply(r2, e5);
      };
      t4.transform && (e4.transform = t4.transform);
      return e4;
    }(i3)), typeof (o3 = i3) == "function" && typeof o3.signature == "string" && (i3 = t3(e3, { [i3.signature]: i3 })), h(r2[e3]) && h(i3))
      return i3 = a3.override ? t3(e3, i3.signatures) : t3(r2[e3], i3), r2[e3] = i3, delete n2[e3], s2(e3, i3), void r2.emit("import", e3, function() {
        return i3;
      });
    if (r2[e3] === void 0 || a3.override)
      return r2[e3] = i3, delete n2[e3], s2(e3, i3), void r2.emit("import", e3, function() {
        return i3;
      });
    if (!a3.silent)
      throw new Error('Cannot import "' + e3 + '": already exists');
  }
  function s2(t4, e3) {
    e3 && typeof e3.transform == "function" ? (r2.expression.transform[t4] = e3.transform, c2(t4) && (r2.expression.mathWithTransform[t4] = e3.transform)) : (delete r2.expression.transform[t4], c2(t4) && (r2.expression.mathWithTransform[t4] = e3));
  }
  function a2(t4) {
    delete r2.expression.transform[t4], c2(t4) ? r2.expression.mathWithTransform[t4] = r2[t4] : delete r2.expression.mathWithTransform[t4];
  }
  function o2(e3, i3) {
    var s3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : e3.fn;
    if (xn(s3, "."))
      throw new Error("Factory name should not contain a nested path. Name: " + JSON.stringify(s3));
    var o3 = p2(e3) ? r2.expression.transform : r2, u3 = s3 in r2.expression.transform, c3 = Cr(o3, s3) ? o3[s3] : void 0, f3 = function() {
      var n3 = {};
      e3.dependencies.map(_n).forEach((t4) => {
        if (xn(t4, "."))
          throw new Error("Factory dependency should not contain a nested path. Name: " + JSON.stringify(t4));
        t4 === "math" ? n3.math = r2 : t4 === "mathWithTransform" ? n3.mathWithTransform = r2.expression.mathWithTransform : t4 === "classes" ? n3.classes = r2 : n3[t4] = r2[t4];
      });
      var a3 = e3(n3);
      if (a3 && typeof a3.transform == "function")
        throw new Error('Transforms cannot be attached to factory functions. Please create a separate function for it with exports.path="expression.transform"');
      if (c3 === void 0 || i3.override)
        return a3;
      if (h(c3) && h(a3))
        return t3(c3, a3);
      if (i3.silent)
        return c3;
      throw new Error('Cannot import "' + s3 + '": already exists');
    };
    e3.meta && e3.meta.lazy === false ? (o3[s3] = f3(), c3 && u3 ? a2(s3) : (p2(e3) || l2(e3)) && zr(r2.expression.mathWithTransform, s3, () => o3[s3])) : (zr(o3, s3, f3), c3 && u3 ? a2(s3) : (p2(e3) || l2(e3)) && zr(r2.expression.mathWithTransform, s3, () => o3[s3])), n2[s3] = e3, r2.emit("import", s3, f3);
  }
  function u2(t4) {
    return typeof t4 == "function" || typeof t4 == "number" || typeof t4 == "string" || typeof t4 == "boolean" || t4 === null || je(t4) || Pe(t4) || Fe(t4) || Ue(t4) || Ve(t4) || Array.isArray(t4);
  }
  function h(t4) {
    return typeof t4 == "function" && typeof t4.signatures == "object";
  }
  function c2(t4) {
    return !Cr(f2, t4);
  }
  function l2(t4) {
    return !(t4.fn.indexOf(".") !== -1 || Cr(f2, t4.fn) || t4.meta && t4.meta.isClass);
  }
  function p2(t4) {
    return t4 !== void 0 && t4.meta !== void 0 && t4.meta.isTransformFunction === true || false;
  }
  var f2 = { expression: true, type: true, docs: true, error: true, json: true, chain: true };
  return function(t4, e3) {
    var r3 = arguments.length;
    if (r3 !== 1 && r3 !== 2)
      throw new ua("import", r3, 1, 2);
    function n3(t5, r4, i3) {
      if (Array.isArray(r4))
        r4.forEach((e4) => n3(t5, e4));
      else if (typeof r4 == "object")
        for (var s4 in r4)
          Cr(r4, s4) && n3(t5, r4[s4], s4);
      else if (bn(r4) || i3 !== void 0) {
        var a4 = bn(r4) ? p2(r4) ? r4.fn + ".transform" : r4.fn : i3;
        if (Cr(t5, a4) && t5[a4] !== r4 && !e3.silent)
          throw new Error('Cannot import "' + a4 + '" twice');
        t5[a4] = r4;
      } else if (!e3.silent)
        throw new TypeError("Factory, Object, or Array expected");
    }
    e3 || (e3 = {});
    var s3 = {};
    for (var a3 in n3(s3, t4), s3)
      if (Cr(s3, a3)) {
        var h2 = s3[a3];
        if (bn(h2))
          o2(h2, e3);
        else if (u2(h2))
          i2(a3, h2, e3);
        else if (!e3.silent)
          throw new TypeError("Factory, Object, or Array expected");
      }
  };
}
function pu() {
  return (pu = Object.assign || function(t3) {
    for (var e2 = 1; e2 < arguments.length; e2++) {
      var r2 = arguments[e2];
      for (var n2 in r2)
        Object.prototype.hasOwnProperty.call(r2, n2) && (t3[n2] = r2[n2]);
    }
    return t3;
  }).apply(this, arguments);
}
function fu(t3, e2) {
  var r2 = pu({}, Le, e2);
  if (typeof Object.create != "function")
    throw new Error("ES5 not supported by this JavaScript engine. Please load the es5-shim and es5-sham library for compatibility.");
  var n2, i2, s2 = (n2 = { isNumber: Be, isComplex: Pe, isBigNumber: Fe, isFraction: Ue, isUnit: je, isString: qe, isArray: He, isMatrix: Ve, isCollection: $e, isDenseMatrix: Ge, isSparseMatrix: We, isRange: Ye, isIndex: Ze, isBoolean: Xe, isResultSet: Je, isHelp: Qe, isFunction: Ke, isDate: tr, isRegExp: er, isObject: rr, isNull: nr, isUndefined: ir, isAccessorNode: sr, isArrayNode: ar, isAssignmentNode: or, isBlockNode: ur, isConditionalNode: hr, isConstantNode: cr, isFunctionAssignmentNode: lr, isFunctionNode: pr, isIndexNode: fr, isNode: dr, isObjectNode: mr, isOperatorNode: yr, isParenthesisNode: gr, isRangeNode: vr, isSymbolNode: xr, isChain: wr }, i2 = new cu(), n2.on = i2.on.bind(i2), n2.off = i2.off.bind(i2), n2.once = i2.once.bind(i2), n2.emit = i2.emit.bind(i2), n2);
  s2.config = kr(r2, s2.emit), s2.expression = { transform: {}, mathWithTransform: { config: s2.config } };
  var a2 = {};
  var o2 = lu(function() {
    for (var t4 = arguments.length, e3 = new Array(t4), r3 = 0; r3 < t4; r3++)
      e3[r3] = arguments[r3];
    return s2.typed.apply(s2.typed, e3);
  }, 0, s2, a2);
  return s2.import = o2, s2.on("config", () => {
    Ar(a2).forEach((t4) => {
      t4 && t4.meta && t4.meta.recreateOnConfigChange && o2(t4, { override: true });
    });
  }), s2.create = fu.bind(null, t3), s2.factory = wn, s2.import(Ar(Tr(t3))), s2.ArgumentsError = ua, s2.DimensionError = nn, s2.IndexError = sn, s2;
}
class du {
  constructor(t3, r2) {
    this.viewNode = t3, this.bindings = r2, this.math = fu({ evaluateDependencies: au, addDependencies: Jo, subtractDependencies: Yo, multiplyDependencies: Wo, divideDependencies: ou, modDependencies: Vo, numberDependencies: Bo, createUnitDependencies: nu, unitDependencies: ru }, { predictable: true }), this.mathCompiledExpressions = new Map(), this.mathScope = { ratio: void 0, degree: this.math.unit("degree"), meter: this.math.unit("meter"), pixel: this.math.createUnit("pixel", { aliases: ["pixels", "px"] }), percent: void 0, vdeg: void 0, vw: void 0, vh: void 0 }, this.epsillonMeters = 1e-10, this.epsillonRadians = 1e-10, this.epsillonRatio = 1e-10, this.transition = new Se({ multiplier: 1, duration: 0, easing: Ne.easeInOut, threshold: 0, delay: 0, debounce: 0, maxWait: 10, blend: true }), this.optimize = new Pt({ minFeasibleTime: 0.02, maxInfeasibleTime: 5, relativeTolerance: 1e-3, maxIterationsPerFrame: 10, swarmSize: 10, pulseFrequencyMin: 0, pulseFrequencyMax: 1, pulseRate: 0.4, stepSizeMin: 1e-4, stepSizeMax: 4, stepSizeStart: 1.5 }), this.optimizer = new Ut(this), this.viewFrustum = new Ie(), this.viewResolution = new e(1e3, 1e3), this.deltaTime = 1 / 60, this.time = 0, this.maxDeltaTime = 1 / 60, this.nodeMetrics = new Map(), this.nodeAdapters = new Map(), this.transitionables = [], this.getMetrics = (t4) => {
      if (!t4)
        throw new Error("node must be defined");
      let e2 = this.nodeMetrics.get(t4);
      return e2 || (e2 = new Ft(this, t4), this.nodeMetrics.set(t4, e2)), e2;
    }, this.getState = (t4) => {
      if (!t4)
        throw new Error("node must be defined");
      return this.getMetrics(t4).target;
    }, this.getAdapter = (t4) => {
      let e2 = this.nodeAdapters.get(t4);
      return e2 || (e2 = new ke(this, t4), this.nodeAdapters.set(t4, e2)), e2;
    }, this.createTransitionable = (t4, e2) => {
      const r3 = new De(this, t4, e2, this.transition);
      return this.transitionables.push(r3), r3;
    }, this._prevResolution = new e(), this._prevSize = new e(), this.measureNumberCache = {};
  }
  get viewMetrics() {
    if (!this.viewNode)
      throw new Error("EtherealSystem.viewNode must be defined");
    return this.getMetrics(this.viewNode);
  }
  update(t3, e2) {
    this.deltaTime = Math.max(t3, this.maxDeltaTime), this.time = e2, this._prevResolution.equals(this.viewResolution) && this._prevSize.equals(this.viewFrustum.sizeDegrees) || (this.mathScope.vdeg = this.math.unit(this.viewResolution.y / this.viewFrustum.sizeDegrees.y, "px"), this.mathScope.vw = this.math.unit(this.viewResolution.x / 100, "px"), this.mathScope.vh = this.math.unit(this.viewResolution.y / 100, "px"), this.measureNumberCache = {}), this._prevResolution.copy(this.viewResolution), this._prevSize.copy(this.viewFrustum.sizeDegrees);
    for (const r2 of this.nodeMetrics.values()) {
      r2.needsUpdate = true;
      const t4 = this.nodeAdapters.get(r2.node);
      t4 && (t4.opacity.needsUpdate = true, t4.orientation.needsUpdate = true, t4.bounds.needsUpdate = true, t4.outerOrigin.needsUpdate = true, t4.outerOrientation.needsUpdate = true, t4.outerBounds.needsUpdate = true, t4.outerVisualBounds.needsUpdate = true);
    }
    for (const r2 of this.transitionables)
      r2.needsUpdate = true;
    for (const r2 of this.transitionables)
      r2.update();
    this.viewMetrics.update();
    for (const r2 of this.nodeAdapters.values())
      r2.metrics.update();
  }
  measureNumber(t3, e2) {
    if (typeof t3 == "number")
      return t3;
    if (t3 in this.measureNumberCache)
      return this.measureNumberCache[t3];
    if (!this.mathCompiledExpressions.has(t3)) {
      const e3 = this.math.parse(t3).compile();
      this.mathCompiledExpressions.set(t3, e3);
    }
    const r2 = this.mathCompiledExpressions.get(t3), n2 = r2.evaluate(this.mathScope), i2 = typeof n2 == "number" ? n2 : this.math.number(r2.evaluate(this.mathScope), e2);
    return this.measureNumberCache[t3] = i2, i2;
  }
}
new l();
function gu(t3, e2, r2, n2 = 0) {
  var i2;
  n2++;
  for (let s2 = (t3 = t3.shadowRoot || t3).firstElementChild; s2; s2 = s2.nextElementSibling) {
    if (s2.assignedSlot)
      continue;
    const t4 = (i2 = s2.assignedElements) == null ? void 0 : i2.call(s2, { flatten: true });
    if (t4)
      for (const i3 of t4)
        e2.call(r2, i3, n2) && gu(s2, e2, r2, n2);
    e2.call(r2, s2, n2) && gu(s2, e2, r2, n2);
  }
}
!function(t3) {
  function e2() {
  }
  function r2(t4, e3) {
    if (t4 = t4 === void 0 ? "utf-8" : t4, e3 = e3 === void 0 ? { fatal: false } : e3, i2.indexOf(t4.toLowerCase()) === -1)
      throw new RangeError("Failed to construct 'TextDecoder': The encoding label provided ('" + t4 + "') is invalid.");
    if (e3.fatal)
      throw Error("Failed to construct 'TextDecoder': the 'fatal' option is unsupported.");
  }
  function n2(t4) {
    for (var e3 = 0, r3 = Math.min(65536, t4.length + 1), n3 = new Uint16Array(r3), i3 = [], s3 = 0; ; ) {
      var a2 = e3 < t4.length;
      if (!a2 || s3 >= r3 - 1) {
        if (i3.push(String.fromCharCode.apply(null, n3.subarray(0, s3))), !a2)
          return i3.join("");
        t4 = t4.subarray(e3), s3 = e3 = 0;
      }
      if ((128 & (a2 = t4[e3++])) == 0)
        n3[s3++] = a2;
      else if ((224 & a2) == 192) {
        var o2 = 63 & t4[e3++];
        n3[s3++] = (31 & a2) << 6 | o2;
      } else if ((240 & a2) == 224) {
        o2 = 63 & t4[e3++];
        var u2 = 63 & t4[e3++];
        n3[s3++] = (31 & a2) << 12 | o2 << 6 | u2;
      } else if ((248 & a2) == 240) {
        65535 < (a2 = (7 & a2) << 18 | (o2 = 63 & t4[e3++]) << 12 | (u2 = 63 & t4[e3++]) << 6 | 63 & t4[e3++]) && (a2 -= 65536, n3[s3++] = a2 >>> 10 & 1023 | 55296, a2 = 56320 | 1023 & a2), n3[s3++] = a2;
      }
    }
  }
  if (t3.TextEncoder && t3.TextDecoder)
    return false;
  var i2 = ["utf-8", "utf8", "unicode-1-1-utf-8"];
  Object.defineProperty(e2.prototype, "encoding", { value: "utf-8" }), e2.prototype.encode = function(t4, e3) {
    if ((e3 = e3 === void 0 ? { stream: false } : e3).stream)
      throw Error("Failed to encode: the 'stream' option is unsupported.");
    e3 = 0;
    for (var r3 = t4.length, n3 = 0, i3 = Math.max(32, r3 + (r3 >>> 1) + 7), s3 = new Uint8Array(i3 >>> 3 << 3); e3 < r3; ) {
      var a2 = t4.charCodeAt(e3++);
      if (55296 <= a2 && 56319 >= a2) {
        if (e3 < r3) {
          var o2 = t4.charCodeAt(e3);
          (64512 & o2) == 56320 && (++e3, a2 = ((1023 & a2) << 10) + (1023 & o2) + 65536);
        }
        if (55296 <= a2 && 56319 >= a2)
          continue;
      }
      if (n3 + 4 > s3.length && (i3 += 8, i3 = (i3 *= 1 + e3 / t4.length * 2) >>> 3 << 3, (o2 = new Uint8Array(i3)).set(s3), s3 = o2), (4294967168 & a2) == 0)
        s3[n3++] = a2;
      else {
        if ((4294965248 & a2) == 0)
          s3[n3++] = a2 >>> 6 & 31 | 192;
        else if ((4294901760 & a2) == 0)
          s3[n3++] = a2 >>> 12 & 15 | 224, s3[n3++] = a2 >>> 6 & 63 | 128;
        else {
          if ((4292870144 & a2) != 0)
            continue;
          s3[n3++] = a2 >>> 18 & 7 | 240, s3[n3++] = a2 >>> 12 & 63 | 128, s3[n3++] = a2 >>> 6 & 63 | 128;
        }
        s3[n3++] = 63 & a2 | 128;
      }
    }
    return s3.slice ? s3.slice(0, n3) : s3.subarray(0, n3);
  }, Object.defineProperty(r2.prototype, "encoding", { value: "utf-8" }), Object.defineProperty(r2.prototype, "fatal", { value: false }), Object.defineProperty(r2.prototype, "ignoreBOM", { value: false });
  var s2 = n2;
  typeof Buffer == "function" && Buffer.from ? s2 = function(t4) {
    return Buffer.from(t4.buffer, t4.byteOffset, t4.byteLength).toString("utf-8");
  } : typeof Blob == "function" && typeof URL == "function" && typeof URL.createObjectURL == "function" && (s2 = function(t4) {
    var e3 = URL.createObjectURL(new Blob([t4], { type: "text/plain;charset=UTF-8" }));
    try {
      var r3 = new XMLHttpRequest();
      return r3.open("GET", e3, false), r3.send(), r3.responseText;
    } catch (i3) {
      return n2(t4);
    } finally {
      URL.revokeObjectURL(e3);
    }
  }), r2.prototype.decode = function(t4, e3) {
    if ((e3 = e3 === void 0 ? { stream: false } : e3).stream)
      throw Error("Failed to decode: the 'stream' option is unsupported.");
    return t4 = t4 instanceof Uint8Array ? t4 : t4.buffer instanceof ArrayBuffer ? new Uint8Array(t4.buffer) : new Uint8Array(t4), s2(t4);
  }, t3.TextEncoder = e2, t3.TextDecoder = r2;
}(typeof window != "undefined" ? window : Lr);
class vu {
  constructor() {
    this.left = 0, this.top = 0, this.width = 0, this.height = 0;
  }
  copy(t3) {
    return this.top = t3.top, this.left = t3.left, this.width = t3.width, this.height = t3.height, this;
  }
}
class xu {
  constructor() {
    this.left = 0, this.top = 0, this.right = 0, this.bottom = 0;
  }
  copy(t3) {
    return this.top = t3.top, this.left = t3.left, this.right = t3.right, this.bottom = t3.bottom, this;
  }
}
function wu(t3, e2 = new vu(), r2) {
  const n2 = t3.ownerDocument, i2 = n2.documentElement, s2 = n2.body;
  if (t3 === i2)
    return function(t4, e3) {
      const r3 = t4.documentElement, n3 = t4.body, i3 = getComputedStyle(r3), s3 = getComputedStyle(n3);
      return e3.top = n3.offsetTop + parseFloat(i3.marginTop) || 0 + parseFloat(s3.marginTop) || 0, e3.left = n3.offsetLeft + parseFloat(i3.marginLeft) || 0 + parseFloat(s3.marginLeft) || 0, e3.width = Math.max(Math.max(n3.scrollWidth, r3.scrollWidth), Math.max(n3.offsetWidth, r3.offsetWidth), Math.max(n3.clientWidth, r3.clientWidth)), e3.height = Math.max(Math.max(n3.scrollHeight, r3.scrollHeight), Math.max(n3.offsetHeight, r3.offsetHeight), Math.max(n3.clientHeight, r3.clientHeight)), e3;
    }(n2, e2);
  if (r2 === t3)
    return e2.left = 0, e2.top = 0, e2.width = t3.offsetWidth, void (e2.height = t3.offsetHeight);
  const a2 = t3.ownerDocument.defaultView;
  let o2, u2 = t3, h = u2.offsetParent, c2 = a2.getComputedStyle(u2, null), l2 = u2.offsetTop, p2 = u2.offsetLeft;
  for (h && r2 && h.contains(r2) && h !== r2 && (wu(r2, e2, h), p2 -= e2.left, l2 -= e2.top); (u2 = u2.parentElement) && u2 !== s2 && u2 !== i2 && u2 !== r2 && c2.position !== "fixed"; )
    o2 = a2.getComputedStyle(u2, null), l2 -= u2.scrollTop, p2 -= u2.scrollLeft, u2 === h && (l2 += u2.offsetTop, p2 += u2.offsetLeft, l2 += parseFloat(o2.borderTopWidth) || 0, p2 += parseFloat(o2.borderLeftWidth) || 0, h = u2.offsetParent), c2 = o2;
  return c2.position === "fixed" && (l2 += Math.max(i2.scrollTop, s2.scrollTop), p2 += Math.max(i2.scrollLeft, s2.scrollLeft)), e2.left = p2, e2.top = l2, e2.width = t3.offsetWidth, e2.height = t3.offsetHeight, e2;
}
function bu(t3, e2) {
  if (t3.offsetParent === null)
    return void (e2.left = e2.right = e2.top = e2.bottom = 0);
  let r2 = getComputedStyle(t3);
  e2.left = parseFloat(r2.marginLeft) || 0, e2.right = parseFloat(r2.marginRight) || 0, e2.top = parseFloat(r2.marginTop) || 0, e2.bottom = parseFloat(r2.marginBottom) || 0;
}
const _u = document.createElement("div");
function Mu(t3) {
  const e2 = document.createElement("div");
  e2.innerHTML = t3;
  const r2 = e2.firstElementChild;
  return e2.removeChild(r2), r2;
}
_u.id = "VIEWPORT", _u.style.position = "fixed", _u.style.width = "100vw", _u.style.height = "100vh", _u.style.visibility = "hidden", _u.style.pointerEvents = "none";
var Nu = {};
!function(t3) {
  const e2 = Symbol("newer"), r2 = Symbol("older");
  function n2(t4, e3) {
    typeof t4 != "number" && (e3 = t4, t4 = 0), this.size = 0, this.limit = t4, this.oldest = this.newest = void 0, this._keymap = new Map(), e3 && (this.assign(e3), t4 < 1 && (this.limit = this.size));
  }
  function i2(t4, n3) {
    this.key = t4, this.value = n3, this[e2] = void 0, this[r2] = void 0;
  }
  function s2(t4) {
    this.entry = t4;
  }
  function a2(t4) {
    this.entry = t4;
  }
  function o2(t4) {
    this.entry = t4;
  }
  t3.LRUMap = n2, n2.prototype._markEntryAsUsed = function(t4) {
    t4 !== this.newest && (t4[e2] && (t4 === this.oldest && (this.oldest = t4[e2]), t4[e2][r2] = t4[r2]), t4[r2] && (t4[r2][e2] = t4[e2]), t4[e2] = void 0, t4[r2] = this.newest, this.newest && (this.newest[e2] = t4), this.newest = t4);
  }, n2.prototype.assign = function(t4) {
    let n3, s3 = this.limit || Number.MAX_VALUE;
    this._keymap.clear();
    let a3 = t4[Symbol.iterator]();
    for (let o3 = a3.next(); !o3.done; o3 = a3.next()) {
      let t5 = new i2(o3.value[0], o3.value[1]);
      if (this._keymap.set(t5.key, t5), n3 ? (n3[e2] = t5, t5[r2] = n3) : this.oldest = t5, n3 = t5, s3-- == 0)
        throw new Error("overflow");
    }
    this.newest = n3, this.size = this._keymap.size;
  }, n2.prototype.get = function(t4) {
    var e3 = this._keymap.get(t4);
    if (e3)
      return this._markEntryAsUsed(e3), e3.value;
  }, n2.prototype.set = function(t4, n3) {
    var s3 = this._keymap.get(t4);
    return s3 ? (s3.value = n3, this._markEntryAsUsed(s3), this) : (this._keymap.set(t4, s3 = new i2(t4, n3)), this.newest ? (this.newest[e2] = s3, s3[r2] = this.newest) : this.oldest = s3, this.newest = s3, ++this.size, this.size > this.limit && this.shift(), this);
  }, n2.prototype.shift = function() {
    var t4 = this.oldest;
    if (t4)
      return this.oldest[e2] ? (this.oldest = this.oldest[e2], this.oldest[r2] = void 0) : (this.oldest = void 0, this.newest = void 0), t4[e2] = t4[r2] = void 0, this._keymap.delete(t4.key), --this.size, [t4.key, t4.value];
  }, n2.prototype.find = function(t4) {
    let e3 = this._keymap.get(t4);
    return e3 ? e3.value : void 0;
  }, n2.prototype.has = function(t4) {
    return this._keymap.has(t4);
  }, n2.prototype.delete = function(t4) {
    var n3 = this._keymap.get(t4);
    if (n3)
      return this._keymap.delete(n3.key), n3[e2] && n3[r2] ? (n3[r2][e2] = n3[e2], n3[e2][r2] = n3[r2]) : n3[e2] ? (n3[e2][r2] = void 0, this.oldest = n3[e2]) : n3[r2] ? (n3[r2][e2] = void 0, this.newest = n3[r2]) : this.oldest = this.newest = void 0, this.size--, n3.value;
  }, n2.prototype.clear = function() {
    this.oldest = this.newest = void 0, this.size = 0, this._keymap.clear();
  }, s2.prototype[Symbol.iterator] = function() {
    return this;
  }, s2.prototype.next = function() {
    let t4 = this.entry;
    return t4 ? (this.entry = t4[e2], { done: false, value: [t4.key, t4.value] }) : { done: true, value: void 0 };
  }, a2.prototype[Symbol.iterator] = function() {
    return this;
  }, a2.prototype.next = function() {
    let t4 = this.entry;
    return t4 ? (this.entry = t4[e2], { done: false, value: t4.key }) : { done: true, value: void 0 };
  }, o2.prototype[Symbol.iterator] = function() {
    return this;
  }, o2.prototype.next = function() {
    let t4 = this.entry;
    return t4 ? (this.entry = t4[e2], { done: false, value: t4.value }) : { done: true, value: void 0 };
  }, n2.prototype.keys = function() {
    return new a2(this.oldest);
  }, n2.prototype.values = function() {
    return new o2(this.oldest);
  }, n2.prototype.entries = function() {
    return this;
  }, n2.prototype[Symbol.iterator] = function() {
    return new s2(this.oldest);
  }, n2.prototype.forEach = function(t4, r3) {
    typeof r3 != "object" && (r3 = this);
    let n3 = this.oldest;
    for (; n3; )
      t4.call(r3, n3.value, n3.key, this), n3 = n3[e2];
  }, n2.prototype.toJSON = function() {
    for (var t4 = new Array(this.size), r3 = 0, n3 = this.oldest; n3; )
      t4[r3++] = { key: n3.key, value: n3.value }, n3 = n3[e2];
    return t4;
  }, n2.prototype.toString = function() {
    for (var t4 = "", r3 = this.oldest; r3; )
      t4 += String(r3.key) + ":" + r3.value, (r3 = r3[e2]) && (t4 += " < ");
    return t4;
  };
}(Nu);
var Eu = { exports: {} };
function Su(t3) {
  return t3.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
}
function Tu(t3, e2) {
  return " " + t3 + '="' + Su(e2) + '"';
}
async function Ou(t3, e2) {
  let r2 = [];
  for (const n2 of t3.childNodes)
    r2.push(zu(n2, e2));
  return Promise.all(r2).then((t4) => t4.join(""));
}
async function zu(t3, e2) {
  var r2;
  const n2 = (r2 = e2.replacer) == null ? void 0 : r2.call(e2, t3);
  if (typeof n2 == "string")
    return n2;
  if (t3.nodeName === "#document" || t3.nodeName === "#document-fragment")
    return Ou(t3, e2);
  if (t3.tagName)
    return async function(t4, e3) {
      const r3 = t4.tagName.toLowerCase();
      let n3 = "<" + r3;
      n3 += function(t5, e4) {
        return t5.hasAttribute("xmlns") || !e4 && t5.namespaceURI === t5.parentElement.namespaceURI ? "" : ' xmlns="' + t5.namespaceURI + '"';
      }(t4, e3.depth === 0);
      const i2 = Ou(t4, e3);
      for (const s2 of t4.attributes)
        s2.name === "src" ? n3 += Tu(s2.name, await Nh.getDataURL(s2.value)) : n3 += Tu(s2.name, s2.value);
      return t4.childNodes.length > 0 ? (e3.depth++, n3 += ">", n3 += await i2, n3 += "</" + r3 + ">", e3.depth--) : n3 += "/>", n3;
    }(t3, e2);
  if (t3.nodeName === "#text")
    return function(t4) {
      return (t4.nodeValue || "").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    }(t3);
  if (t3.nodeName === "#comment")
    ;
  else if (t3.nodeName === "#cdata-section")
    return function(t4) {
      return "<![CDATA[" + t4.nodeValue + "]]>";
    }(t3);
  return "";
}
!function(t3) {
  !function(e2, r2) {
    var n2 = {};
    !function(t4) {
      t4.__esModule = true, t4.digestLength = 32, t4.blockSize = 64;
      var e3 = new Uint32Array([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
      function r3(t5, r4, n4, i4, s4) {
        for (var a3, o3, u3, h2, c3, l2, p2, f2, d, m2, y2, g2, v2; s4 >= 64; ) {
          for (a3 = r4[0], o3 = r4[1], u3 = r4[2], h2 = r4[3], c3 = r4[4], l2 = r4[5], p2 = r4[6], f2 = r4[7], m2 = 0; m2 < 16; m2++)
            y2 = i4 + 4 * m2, t5[m2] = (255 & n4[y2]) << 24 | (255 & n4[y2 + 1]) << 16 | (255 & n4[y2 + 2]) << 8 | 255 & n4[y2 + 3];
          for (m2 = 16; m2 < 64; m2++)
            g2 = ((d = t5[m2 - 2]) >>> 17 | d << 15) ^ (d >>> 19 | d << 13) ^ d >>> 10, v2 = ((d = t5[m2 - 15]) >>> 7 | d << 25) ^ (d >>> 18 | d << 14) ^ d >>> 3, t5[m2] = (g2 + t5[m2 - 7] | 0) + (v2 + t5[m2 - 16] | 0);
          for (m2 = 0; m2 < 64; m2++)
            g2 = (((c3 >>> 6 | c3 << 26) ^ (c3 >>> 11 | c3 << 21) ^ (c3 >>> 25 | c3 << 7)) + (c3 & l2 ^ ~c3 & p2) | 0) + (f2 + (e3[m2] + t5[m2] | 0) | 0) | 0, v2 = ((a3 >>> 2 | a3 << 30) ^ (a3 >>> 13 | a3 << 19) ^ (a3 >>> 22 | a3 << 10)) + (a3 & o3 ^ a3 & u3 ^ o3 & u3) | 0, f2 = p2, p2 = l2, l2 = c3, c3 = h2 + g2 | 0, h2 = u3, u3 = o3, o3 = a3, a3 = g2 + v2 | 0;
          r4[0] += a3, r4[1] += o3, r4[2] += u3, r4[3] += h2, r4[4] += c3, r4[5] += l2, r4[6] += p2, r4[7] += f2, i4 += 64, s4 -= 64;
        }
        return i4;
      }
      var n3 = function() {
        function e4() {
          this.digestLength = t4.digestLength, this.blockSize = t4.blockSize, this.state = new Int32Array(8), this.temp = new Int32Array(64), this.buffer = new Uint8Array(128), this.bufferLength = 0, this.bytesHashed = 0, this.finished = false, this.reset();
        }
        return e4.prototype.reset = function() {
          return this.state[0] = 1779033703, this.state[1] = 3144134277, this.state[2] = 1013904242, this.state[3] = 2773480762, this.state[4] = 1359893119, this.state[5] = 2600822924, this.state[6] = 528734635, this.state[7] = 1541459225, this.bufferLength = 0, this.bytesHashed = 0, this.finished = false, this;
        }, e4.prototype.clean = function() {
          for (var t5 = 0; t5 < this.buffer.length; t5++)
            this.buffer[t5] = 0;
          for (t5 = 0; t5 < this.temp.length; t5++)
            this.temp[t5] = 0;
          this.reset();
        }, e4.prototype.update = function(t5, e5) {
          if (e5 === void 0 && (e5 = t5.length), this.finished)
            throw new Error("SHA256: can't update because hash was finished.");
          var n4 = 0;
          if (this.bytesHashed += e5, this.bufferLength > 0) {
            for (; this.bufferLength < 64 && e5 > 0; )
              this.buffer[this.bufferLength++] = t5[n4++], e5--;
            this.bufferLength === 64 && (r3(this.temp, this.state, this.buffer, 0, 64), this.bufferLength = 0);
          }
          for (e5 >= 64 && (n4 = r3(this.temp, this.state, t5, n4, e5), e5 %= 64); e5 > 0; )
            this.buffer[this.bufferLength++] = t5[n4++], e5--;
          return this;
        }, e4.prototype.finish = function(t5) {
          if (!this.finished) {
            var e5 = this.bytesHashed, n4 = this.bufferLength, i4 = e5 / 536870912 | 0, s4 = e5 << 3, a3 = e5 % 64 < 56 ? 64 : 128;
            this.buffer[n4] = 128;
            for (var o3 = n4 + 1; o3 < a3 - 8; o3++)
              this.buffer[o3] = 0;
            this.buffer[a3 - 8] = i4 >>> 24 & 255, this.buffer[a3 - 7] = i4 >>> 16 & 255, this.buffer[a3 - 6] = i4 >>> 8 & 255, this.buffer[a3 - 5] = i4 >>> 0 & 255, this.buffer[a3 - 4] = s4 >>> 24 & 255, this.buffer[a3 - 3] = s4 >>> 16 & 255, this.buffer[a3 - 2] = s4 >>> 8 & 255, this.buffer[a3 - 1] = s4 >>> 0 & 255, r3(this.temp, this.state, this.buffer, 0, a3), this.finished = true;
          }
          for (o3 = 0; o3 < 8; o3++)
            t5[4 * o3 + 0] = this.state[o3] >>> 24 & 255, t5[4 * o3 + 1] = this.state[o3] >>> 16 & 255, t5[4 * o3 + 2] = this.state[o3] >>> 8 & 255, t5[4 * o3 + 3] = this.state[o3] >>> 0 & 255;
          return this;
        }, e4.prototype.digest = function() {
          var t5 = new Uint8Array(this.digestLength);
          return this.finish(t5), t5;
        }, e4.prototype._saveState = function(t5) {
          for (var e5 = 0; e5 < this.state.length; e5++)
            t5[e5] = this.state[e5];
        }, e4.prototype._restoreState = function(t5, e5) {
          for (var r4 = 0; r4 < this.state.length; r4++)
            this.state[r4] = t5[r4];
          this.bytesHashed = e5, this.finished = false, this.bufferLength = 0;
        }, e4;
      }();
      t4.Hash = n3;
      var i3 = function() {
        function t5(t6) {
          this.inner = new n3(), this.outer = new n3(), this.blockSize = this.inner.blockSize, this.digestLength = this.inner.digestLength;
          var e4 = new Uint8Array(this.blockSize);
          if (t6.length > this.blockSize)
            new n3().update(t6).finish(e4).clean();
          else
            for (var r4 = 0; r4 < t6.length; r4++)
              e4[r4] = t6[r4];
          for (r4 = 0; r4 < e4.length; r4++)
            e4[r4] ^= 54;
          this.inner.update(e4);
          for (r4 = 0; r4 < e4.length; r4++)
            e4[r4] ^= 106;
          this.outer.update(e4), this.istate = new Uint32Array(8), this.ostate = new Uint32Array(8), this.inner._saveState(this.istate), this.outer._saveState(this.ostate);
          for (r4 = 0; r4 < e4.length; r4++)
            e4[r4] = 0;
        }
        return t5.prototype.reset = function() {
          return this.inner._restoreState(this.istate, this.inner.blockSize), this.outer._restoreState(this.ostate, this.outer.blockSize), this;
        }, t5.prototype.clean = function() {
          for (var t6 = 0; t6 < this.istate.length; t6++)
            this.ostate[t6] = this.istate[t6] = 0;
          this.inner.clean(), this.outer.clean();
        }, t5.prototype.update = function(t6) {
          return this.inner.update(t6), this;
        }, t5.prototype.finish = function(t6) {
          return this.outer.finished ? this.outer.finish(t6) : (this.inner.finish(t6), this.outer.update(t6, this.digestLength).finish(t6)), this;
        }, t5.prototype.digest = function() {
          var t6 = new Uint8Array(this.digestLength);
          return this.finish(t6), t6;
        }, t5;
      }();
      function s3(t5) {
        var e4 = new n3().update(t5), r4 = e4.digest();
        return e4.clean(), r4;
      }
      function a2(t5, e4) {
        var r4 = new i3(t5).update(e4), n4 = r4.digest();
        return r4.clean(), n4;
      }
      function o2(t5, e4, r4, n4) {
        var i4 = n4[0];
        if (i4 === 0)
          throw new Error("hkdf: cannot expand more");
        e4.reset(), i4 > 1 && e4.update(t5), r4 && e4.update(r4), e4.update(n4), e4.finish(t5), n4[0]++;
      }
      t4.HMAC = i3, t4.hash = s3, t4.default = s3, t4.hmac = a2;
      var u2 = new Uint8Array(t4.digestLength);
      function h(t5, e4, r4, n4) {
        e4 === void 0 && (e4 = u2), n4 === void 0 && (n4 = 32);
        for (var s4 = new Uint8Array([1]), h2 = a2(e4, t5), c3 = new i3(h2), l2 = new Uint8Array(c3.digestLength), p2 = l2.length, f2 = new Uint8Array(n4), d = 0; d < n4; d++)
          p2 === l2.length && (o2(l2, c3, r4, s4), p2 = 0), f2[d] = l2[p2++];
        return c3.clean(), l2.fill(0), s4.fill(0), f2;
      }
      function c2(t5, e4, r4, n4) {
        for (var s4 = new i3(t5), a3 = s4.digestLength, o3 = new Uint8Array(4), u3 = new Uint8Array(a3), h2 = new Uint8Array(a3), c3 = new Uint8Array(n4), l2 = 0; l2 * a3 < n4; l2++) {
          var p2 = l2 + 1;
          o3[0] = p2 >>> 24 & 255, o3[1] = p2 >>> 16 & 255, o3[2] = p2 >>> 8 & 255, o3[3] = p2 >>> 0 & 255, s4.reset(), s4.update(e4), s4.update(o3), s4.finish(h2);
          for (var f2 = 0; f2 < a3; f2++)
            u3[f2] = h2[f2];
          for (f2 = 2; f2 <= r4; f2++) {
            s4.reset(), s4.update(h2).finish(h2);
            for (var d = 0; d < a3; d++)
              u3[d] ^= h2[d];
          }
          for (f2 = 0; f2 < a3 && l2 * a3 + f2 < n4; f2++)
            c3[l2 * a3 + f2] = u3[f2];
        }
        for (l2 = 0; l2 < a3; l2++)
          u3[l2] = h2[l2] = 0;
        for (l2 = 0; l2 < 4; l2++)
          o3[l2] = 0;
        return s4.clean(), c3;
      }
      t4.hkdf = h, t4.pbkdf2 = c2;
    }(n2);
    var i2 = n2.default;
    for (var s2 in n2)
      i2[s2] = n2[s2];
    t3.exports = i2;
  }();
}(Eu);
const Cu = new TextEncoder(), Au = class {
  constructor(t3, e2) {
    this.element = t3, this.eventCallback = e2, this.needsRefresh = true, this.needsRemoval = false, this.pseudoStates = { hover: false, active: false, focus: false, target: false }, this.svgImage = new Image(), this.bounds = new vu(), this.padding = new xu(), this.margin = new xu(), this.border = new xu(), this.childLayers = [], this.rasterizationCount = new Map(), this.cachedBounds = new Map(), this.cachedMargin = new Map(), this._dynamicAttributes = "", this._svgHash = "", this._svgDocument = "", this._svgHashRasterizing = "", this._svgSrc = "", this._hashingCanvas = document.createElement("canvas"), this.serializationReplacer = (t4) => {
      var e3;
      if (this.element === t4)
        return;
      const r2 = t4, n2 = (e3 = r2.tagName) == null ? void 0 : e3.toLowerCase();
      if (n2 === "style" || n2 === "link")
        return "";
      const i2 = Nh.layers.get(r2);
      if (i2) {
        const t5 = i2.bounds;
        let e4 = "";
        const n3 = `box-sizing:border-box;max-width:${t5.width + 1}px;max-height:${t5.height + 1}px;min-width:${t5.width}px;min-height:${t5.height}px;visibility:hidden`;
        let s2 = false;
        for (const r3 of i2.element.attributes)
          r3.name !== "src" && (r3.name == "style" ? (e4 += Tu(r3.name, r3.value + ";" + n3), s2 = true) : e4 += Tu(r3.name, r3.value));
        s2 || (e4 += Tu("style", n3));
        const a2 = r2.tagName.toLowerCase();
        return `<${a2} ${e4}></${a2}>`;
      }
    }, Nh.layers.set(t3, this), this.id = t3.getAttribute(Nh.ELEMENT_UID_ATTRIBUTE) || Nh.generateElementUID(), t3.setAttribute(Nh.ELEMENT_UID_ATTRIBUTE, this.id), t3.setAttribute(Nh.LAYER_ATTRIBUTE, ""), this.parentLayer = Nh.getClosestLayer(this.element, false), this.eventCallback("layercreated", { target: t3 }), Au.cachedCanvases.limit = Nh.layers.size * Au.DEFAULT_CACHE_SIZE, this._hashingCanvas.width = 20, this._hashingCanvas.height = 20;
  }
  trySetFromSVGHash(t3) {
    const e2 = this.cachedBounds.get(t3), r2 = this.cachedMargin.get(t3);
    if (t3 == this._currentSVGHash)
      return e2 && r2 && (this._currentBounds = e2, this._currentMargin = r2), true;
    {
      const n2 = Au.svgCanvasHash.get(this._currentSVGHash), i2 = Au.svgCanvasHash.get(t3), s2 = Au.cachedCanvases.get(i2);
      if (s2 && e2 && r2)
        return this._currentSVGHash = t3, this._currentCanvas = s2, this._currentBounds = e2, this._currentMargin = r2, n2 !== i2 && this.eventCallback && this.eventCallback("layerpainted", { target: this.element }), true;
    }
    return false;
  }
  get currentCanvas() {
    return this._currentCanvas;
  }
  get currentBounds() {
    return this._currentBounds;
  }
  get currentMargin() {
    return this._currentMargin;
  }
  get depth() {
    let t3 = 0, e2 = this;
    for (; e2.parentLayer; )
      e2 = e2.parentLayer, t3++;
    return t3;
  }
  get rootLayer() {
    let t3 = this;
    for (; t3.parentLayer; )
      t3 = t3.parentLayer;
    return t3;
  }
  traverseParentLayers(t3) {
    const e2 = this.parentLayer;
    e2 && (e2.traverseParentLayers(t3), t3(e2));
  }
  traverseLayers(t3) {
    t3(this), this.traverseChildLayers(t3);
  }
  traverseChildLayers(t3) {
    for (const e2 of this.childLayers)
      e2.traverseLayers(t3);
  }
  refresh() {
    this._currentSVGHash || (wu(this.element, this.bounds, this.parentLayer && this.parentLayer.element), bu(this.element, this.margin), this._currentBounds = this.bounds, this._currentMargin = this.margin), this.needsRefresh = false, this._updateParentAndChildLayers(), Nh.addToSerializeQueue(this);
  }
  _updateParentAndChildLayers() {
    const t3 = this.element, e2 = this.childLayers, r2 = e2.slice(), n2 = this.parentLayer;
    this.parentLayer = Nh.getClosestLayer(this.element, false), n2 !== this.parentLayer && (this.parentLayer && this.parentLayer.childLayers.push(this), this.eventCallback("layermoved", { target: t3 })), e2.length = 0, gu(t3, this._tryConvertElementToWebLayer, this);
    for (const i2 of r2) {
      Nh.getClosestLayer(i2.element, false) || (i2.needsRemoval = true, e2.push(i2));
    }
  }
  _tryConvertElementToWebLayer(t3) {
    if (this.needsRemoval)
      return false;
    const e2 = t3, r2 = getComputedStyle(e2);
    e2.getAttribute(Nh.ELEMENT_UID_ATTRIBUTE) || e2.setAttribute(Nh.ELEMENT_UID_ATTRIBUTE, Nh.generateElementUID());
    if (e2.hasAttribute(Nh.LAYER_ATTRIBUTE) || e2.nodeName === "VIDEO" || r2.transform !== "none") {
      let t4 = Nh.layers.get(e2);
      return t4 || (t4 = new Au(e2, this.eventCallback)), this.childLayers.push(t4), false;
    }
    return true;
  }
  async serialize() {
    var t3;
    const e2 = this.element;
    if (e2.nodeName === "VIDEO")
      return;
    wu(e2, this.bounds, (t3 = this.parentLayer) == null ? void 0 : t3.element), bu(e2, this.margin);
    let { width: r2, height: n2 } = this.bounds;
    if (r2 += Math.max(this.margin.left, 0) + Math.max(this.margin.right, 0), n2 += Math.max(this.margin.top, 0) + Math.max(this.margin.bottom, 0), r2 * n2 > 0) {
      !function(t5, e3) {
        let r3 = getComputedStyle(t5);
        e3.left = parseFloat(r3.paddingLeft) || 0, e3.right = parseFloat(r3.paddingRight) || 0, e3.top = parseFloat(r3.paddingTop) || 0, e3.bottom = parseFloat(r3.paddingBottom) || 0;
      }(e2, this.padding), function(t5, e3) {
        let r3 = getComputedStyle(t5);
        e3.left = parseFloat(r3.borderLeftWidth) || 0, e3.right = parseFloat(r3.borderRightWidth) || 0, e3.top = parseFloat(r3.borderTopWidth) || 0, e3.bottom = parseFloat(r3.borderBottomWidth) || 0;
      }(e2, this.border);
      const t4 = Nh.attributeHTML(Nh.ELEMENT_UID_ATTRIBUTE, "" + this.id), i2 = getComputedStyle(e2).display === "inline";
      Nh.updateInputAttributes(e2);
      const s2 = this._getParentsHTML(e2);
      s2[0] = s2[0].replace("html", "html " + Nh.RENDERING_DOCUMENT_ATTRIBUTE + '="" ');
      const a2 = await Nh.getAllEmbeddedStyles(e2);
      let o2 = await async function(t5, e3) {
        return (await zu(t5, { depth: 0, replacer: e3 })).replace(/[\x00-\x08\x0B\x0C\x0E-\x1F]/g, "");
      }(e2, this.serializationReplacer);
      o2 = o2.replace(t4, `${t4} ${Nh.RENDERING_ATTRIBUTE}="" ${i2 ? `${Nh.RENDERING_INLINE_ATTRIBUTE}="" ` : " "} ` + Nh.getPsuedoAttributes(this.pseudoStates));
      const u2 = '<svg width="' + r2 + '" height="' + n2 + '" xmlns="http://www.w3.org/2000/svg"><defs><style type="text/css"><![CDATA[\n' + a2.join("\n") + ']]></style></defs><foreignObject x="0" y="0" width="' + (r2 + 1) + '" height="' + (n2 + 1) + '">' + s2[0] + o2 + s2[1] + "</foreignObject></svg>", h = this._svgDocument = u2, c2 = this._svgHash = Nh.arrayBufferToBase64(Eu.exports.hash(Cu.encode(h))) + "?w=" + r2 + ";h=" + n2;
      if (this.cachedBounds.set(c2, new vu().copy(this.bounds)), this.cachedMargin.set(c2, new xu().copy(this.margin)), this.trySetFromSVGHash(c2))
        return;
      Nh.addToRasterizeQueue(this);
    } else
      this._currentBounds.copy(this.bounds), this._currentMargin.copy(this.margin);
  }
  async rasterize() {
    return new Promise((t3, e2) => {
      const r2 = () => {
        Nh.addToRenderQueue(this), this.svgImage.onload = null, t3();
      };
      this.svgImage.onload = () => {
        setTimeout(r2, 10);
      }, this.svgImage.onerror = (t4) => {
        e2(t4);
      }, this._svgHashRasterizing = this._svgHash, this.svgImage.src = this._svgSrc = "data:image/svg+xml;utf8," + encodeURIComponent(this._svgDocument);
    });
  }
  render() {
    if (!this.svgImage.complete || this.svgImage.currentSrc !== this.svgImage.src)
      return void setTimeout(() => Nh.addToRenderQueue(this), 100);
    const t3 = this._svgHashRasterizing;
    if (!this.cachedBounds.has(t3) || !this.cachedMargin.has(t3))
      return void (this.needsRefresh = true);
    let { width: e2, height: r2 } = this.cachedBounds.get(t3), { left: n2, top: i2, right: s2, bottom: a2 } = this.cachedMargin.get(t3);
    const o2 = e2 + n2 + s2, u2 = r2 + i2 + a2, h = this._hashingCanvas;
    let c2 = h.width, l2 = h.height;
    const p2 = h.getContext("2d");
    p2.clearRect(0, 0, c2, l2), p2.imageSmoothingEnabled = false, p2.drawImage(this.svgImage, 0, 0, o2, u2, 0, 0, c2, l2);
    const f2 = p2.getImageData(0, 0, c2, l2).data, d = Nh.arrayBufferToBase64(Eu.exports.hash(new Uint8Array(f2))), m2 = Au.svgCanvasHash.get(t3);
    Au.svgCanvasHash.set(t3, d), m2 !== d && Au.svgRetryCount.set(t3, 0);
    const y2 = Au.svgRetryCount.get(t3) || 0;
    if (Au.svgRetryCount.set(t3, y2 + 1), y2 > 3 && Au.cachedCanvases.has(d))
      return void (this._svgHash === this._svgHashRasterizing && this.trySetFromSVGHash(this._svgHash));
    if (setTimeout(() => Nh.addToRenderQueue(this), 2 * (500 + 1e3 * Math.random()) ^ y2), m2 === d && Au.cachedCanvases.has(m2))
      return;
    const g2 = this.pixelRatio || parseFloat(this.element.getAttribute(Nh.PIXEL_RATIO_ATTRIBUTE)) || window.devicePixelRatio, v2 = Au.cachedCanvases.size === Au.cachedCanvases.limit ? Au.cachedCanvases.shift()[1] : document.createElement("canvas");
    let x2 = v2.width = o2 * g2, w2 = v2.height = u2 * g2;
    const b2 = v2.getContext("2d");
    b2.imageSmoothingEnabled = false, b2.clearRect(0, 0, x2, w2), b2.drawImage(this.svgImage, 0, 0, o2, u2, 0, 0, x2, w2), Au.cachedCanvases.set(d, v2), this._svgHash === this._svgHashRasterizing && this.trySetFromSVGHash(t3);
  }
  _getParentsHTML(t3) {
    const e2 = [], r2 = [];
    let n2 = t3.parentElement;
    n2 || (n2 = document.documentElement);
    do {
      let t4 = n2.tagName.toLowerCase(), i2 = " ", s2 = "";
      for (const e3 of n2.attributes) {
        const t5 = Su(e3.value);
        e3.name !== "style" ? i2 += `${e3.name}="${t5}" ` : s2 = t5;
      }
      const a2 = "<" + t4 + (t4 === "html" ? ` xmlns="http://www.w3.org/1999/xhtml" style="--x-width:${this.bounds.width}px;--x-height:${this.bounds.height}px;--x-inline-top:${this.border.top + this.margin.top + this.padding.top}px; ${s2}" ` : ` style="${s2}" ${Nh.RENDERING_PARENT_ATTRIBUTE}="" `) + i2 + " >";
      e2.unshift(a2);
      const o2 = "</" + t4 + ">";
      if (r2.push(o2), t4 == "html")
        break;
    } while (n2 = n2 !== document.documentElement ? n2.parentElement || document.documentElement : null);
    return [e2.join(""), r2.join("")];
  }
};
let Ru = Au;
Ru.DEFAULT_CACHE_SIZE = 4, Ru.svgRetryCount = new Map(), Ru.svgCanvasHash = new Nu.LRUMap(1e3), Ru.cachedCanvases = new Nu.LRUMap(Au.DEFAULT_CACHE_SIZE);
var Du, ku, Iu = [], Lu = "ResizeObserver loop completed with undelivered notifications.";
(ku = Du || (Du = {})).BORDER_BOX = "border-box", ku.CONTENT_BOX = "content-box", ku.DEVICE_PIXEL_CONTENT_BOX = "device-pixel-content-box";
var Bu, Fu = function(t3) {
  return Object.freeze(t3);
}, Pu = function(t3, e2) {
  this.inlineSize = t3, this.blockSize = e2, Fu(this);
}, Uu = function() {
  function t3(t4, e2, r2, n2) {
    return this.x = t4, this.y = e2, this.width = r2, this.height = n2, this.top = this.y, this.left = this.x, this.bottom = this.top + this.height, this.right = this.left + this.width, Fu(this);
  }
  return t3.prototype.toJSON = function() {
    var t4 = this;
    return { x: t4.x, y: t4.y, top: t4.top, right: t4.right, bottom: t4.bottom, left: t4.left, width: t4.width, height: t4.height };
  }, t3.fromRect = function(e2) {
    return new t3(e2.x, e2.y, e2.width, e2.height);
  }, t3;
}(), ju = function(t3) {
  return t3 instanceof SVGElement && "getBBox" in t3;
}, qu = function(t3) {
  if (ju(t3)) {
    var e2 = t3.getBBox(), r2 = e2.width, n2 = e2.height;
    return !r2 && !n2;
  }
  var i2 = t3, s2 = i2.offsetWidth, a2 = i2.offsetHeight;
  return !(s2 || a2 || t3.getClientRects().length);
}, Hu = function(t3) {
  var e2, r2;
  if (t3 instanceof Element)
    return true;
  var n2 = (r2 = (e2 = t3) === null || e2 === void 0 ? void 0 : e2.ownerDocument) === null || r2 === void 0 ? void 0 : r2.defaultView;
  return !!(n2 && t3 instanceof n2.Element);
}, Vu = typeof window != "undefined" ? window : {}, $u = new WeakMap(), Gu = /auto|scroll/, Wu = /^tb|vertical/, Yu = /msie|trident/i.test(Vu.navigator && Vu.navigator.userAgent), Zu = function(t3) {
  return parseFloat(t3 || "0");
}, Xu = function(t3, e2, r2) {
  return t3 === void 0 && (t3 = 0), e2 === void 0 && (e2 = 0), r2 === void 0 && (r2 = false), new Pu((r2 ? e2 : t3) || 0, (r2 ? t3 : e2) || 0);
}, Ju = Fu({ devicePixelContentBoxSize: Xu(), borderBoxSize: Xu(), contentBoxSize: Xu(), contentRect: new Uu(0, 0, 0, 0) }), Qu = function(t3, e2) {
  if (e2 === void 0 && (e2 = false), $u.has(t3) && !e2)
    return $u.get(t3);
  if (qu(t3))
    return $u.set(t3, Ju), Ju;
  var r2 = getComputedStyle(t3), n2 = ju(t3) && t3.ownerSVGElement && t3.getBBox(), i2 = !Yu && r2.boxSizing === "border-box", s2 = Wu.test(r2.writingMode || ""), a2 = !n2 && Gu.test(r2.overflowY || ""), o2 = !n2 && Gu.test(r2.overflowX || ""), u2 = n2 ? 0 : Zu(r2.paddingTop), h = n2 ? 0 : Zu(r2.paddingRight), c2 = n2 ? 0 : Zu(r2.paddingBottom), l2 = n2 ? 0 : Zu(r2.paddingLeft), p2 = n2 ? 0 : Zu(r2.borderTopWidth), f2 = n2 ? 0 : Zu(r2.borderRightWidth), d = n2 ? 0 : Zu(r2.borderBottomWidth), m2 = l2 + h, y2 = u2 + c2, g2 = (n2 ? 0 : Zu(r2.borderLeftWidth)) + f2, v2 = p2 + d, x2 = o2 ? t3.offsetHeight - v2 - t3.clientHeight : 0, w2 = a2 ? t3.offsetWidth - g2 - t3.clientWidth : 0, b2 = i2 ? m2 + g2 : 0, _2 = i2 ? y2 + v2 : 0, M2 = n2 ? n2.width : Zu(r2.width) - b2 - w2, N2 = n2 ? n2.height : Zu(r2.height) - _2 - x2, E2 = M2 + m2 + w2 + g2, S2 = N2 + y2 + x2 + v2, T2 = Fu({ devicePixelContentBoxSize: Xu(Math.round(M2 * devicePixelRatio), Math.round(N2 * devicePixelRatio), s2), borderBoxSize: Xu(E2, S2, s2), contentBoxSize: Xu(M2, N2, s2), contentRect: new Uu(l2, u2, M2, N2) });
  return $u.set(t3, T2), T2;
}, Ku = function(t3, e2, r2) {
  var n2 = Qu(t3, r2), i2 = n2.borderBoxSize, s2 = n2.contentBoxSize, a2 = n2.devicePixelContentBoxSize;
  switch (e2) {
    case Du.DEVICE_PIXEL_CONTENT_BOX:
      return a2;
    case Du.BORDER_BOX:
      return i2;
    default:
      return s2;
  }
}, th = function(t3) {
  var e2 = Qu(t3);
  this.target = t3, this.contentRect = e2.contentRect, this.borderBoxSize = Fu([e2.borderBoxSize]), this.contentBoxSize = Fu([e2.contentBoxSize]), this.devicePixelContentBoxSize = Fu([e2.devicePixelContentBoxSize]);
}, eh = function(t3) {
  if (qu(t3))
    return 1 / 0;
  for (var e2 = 0, r2 = t3.parentNode; r2; )
    e2 += 1, r2 = r2.parentNode;
  return e2;
}, rh = function() {
  var t3 = 1 / 0, e2 = [];
  Iu.forEach(function(r3) {
    if (r3.activeTargets.length !== 0) {
      var n3 = [];
      r3.activeTargets.forEach(function(e3) {
        var r4 = new th(e3.target), i2 = eh(e3.target);
        n3.push(r4), e3.lastReportedSize = Ku(e3.target, e3.observedBox), i2 < t3 && (t3 = i2);
      }), e2.push(function() {
        r3.callback.call(r3.observer, n3, r3.observer);
      }), r3.activeTargets.splice(0, r3.activeTargets.length);
    }
  });
  for (var r2 = 0, n2 = e2; r2 < n2.length; r2++) {
    (0, n2[r2])();
  }
  return t3;
}, nh = function(t3) {
  Iu.forEach(function(e2) {
    e2.activeTargets.splice(0, e2.activeTargets.length), e2.skippedTargets.splice(0, e2.skippedTargets.length), e2.observationTargets.forEach(function(r2) {
      r2.isActive() && (eh(r2.target) > t3 ? e2.activeTargets.push(r2) : e2.skippedTargets.push(r2));
    });
  });
}, ih = function() {
  var t3, e2 = 0;
  for (nh(e2); Iu.some(function(t4) {
    return t4.activeTargets.length > 0;
  }); )
    e2 = rh(), nh(e2);
  return Iu.some(function(t4) {
    return t4.skippedTargets.length > 0;
  }) && (typeof ErrorEvent == "function" ? t3 = new ErrorEvent("error", { message: Lu }) : ((t3 = document.createEvent("Event")).initEvent("error", false, false), t3.message = Lu), window.dispatchEvent(t3)), e2 > 0;
}, sh = [], ah = function(t3) {
  if (!Bu) {
    var e2 = 0, r2 = document.createTextNode("");
    new MutationObserver(function() {
      return sh.splice(0).forEach(function(t4) {
        return t4();
      });
    }).observe(r2, { characterData: true }), Bu = function() {
      r2.textContent = "" + (e2 ? e2-- : e2++);
    };
  }
  sh.push(t3), Bu();
}, oh = 0, uh = { attributes: true, characterData: true, childList: true, subtree: true }, hh = ["resize", "load", "transitionend", "animationend", "animationstart", "animationiteration", "keyup", "keydown", "mouseup", "mousedown", "mouseover", "mouseout", "blur", "focus"], ch = function(t3) {
  return t3 === void 0 && (t3 = 0), Date.now() + t3;
}, lh = false, ph = new (function() {
  function t3() {
    var t4 = this;
    this.stopped = true, this.listener = function() {
      return t4.schedule();
    };
  }
  return t3.prototype.run = function(t4) {
    var e2 = this;
    if (t4 === void 0 && (t4 = 250), !lh) {
      lh = true;
      var r2, n2 = ch(t4);
      r2 = function() {
        var r3 = false;
        try {
          r3 = ih();
        } finally {
          if (lh = false, t4 = n2 - ch(), !oh)
            return;
          r3 ? e2.run(1e3) : t4 > 0 ? e2.run(t4) : e2.start();
        }
      }, ah(function() {
        requestAnimationFrame(r2);
      });
    }
  }, t3.prototype.schedule = function() {
    this.stop(), this.run();
  }, t3.prototype.observe = function() {
    var t4 = this, e2 = function() {
      return t4.observer && t4.observer.observe(document.body, uh);
    };
    document.body ? e2() : Vu.addEventListener("DOMContentLoaded", e2);
  }, t3.prototype.start = function() {
    var t4 = this;
    this.stopped && (this.stopped = false, this.observer = new MutationObserver(this.listener), this.observe(), hh.forEach(function(e2) {
      return Vu.addEventListener(e2, t4.listener, true);
    }));
  }, t3.prototype.stop = function() {
    var t4 = this;
    this.stopped || (this.observer && this.observer.disconnect(), hh.forEach(function(e2) {
      return Vu.removeEventListener(e2, t4.listener, true);
    }), this.stopped = true);
  }, t3;
}())(), fh = function(t3) {
  !oh && t3 > 0 && ph.start(), !(oh += t3) && ph.stop();
}, dh = function() {
  function t3(t4, e2) {
    this.target = t4, this.observedBox = e2 || Du.CONTENT_BOX, this.lastReportedSize = { inlineSize: 0, blockSize: 0 };
  }
  return t3.prototype.isActive = function() {
    var t4, e2 = Ku(this.target, this.observedBox, true);
    return t4 = this.target, ju(t4) || function(t5) {
      switch (t5.tagName) {
        case "INPUT":
          if (t5.type !== "image")
            break;
        case "VIDEO":
        case "AUDIO":
        case "EMBED":
        case "OBJECT":
        case "CANVAS":
        case "IFRAME":
        case "IMG":
          return true;
      }
      return false;
    }(t4) || getComputedStyle(t4).display !== "inline" || (this.lastReportedSize = e2), this.lastReportedSize.inlineSize !== e2.inlineSize || this.lastReportedSize.blockSize !== e2.blockSize;
  }, t3;
}(), mh = function(t3, e2) {
  this.activeTargets = [], this.skippedTargets = [], this.observationTargets = [], this.observer = t3, this.callback = e2;
}, yh = new WeakMap(), gh = function(t3, e2) {
  for (var r2 = 0; r2 < t3.length; r2 += 1)
    if (t3[r2].target === e2)
      return r2;
  return -1;
}, vh = function() {
  function t3() {
  }
  return t3.connect = function(t4, e2) {
    var r2 = new mh(t4, e2);
    yh.set(t4, r2);
  }, t3.observe = function(t4, e2, r2) {
    var n2 = yh.get(t4), i2 = n2.observationTargets.length === 0;
    gh(n2.observationTargets, e2) < 0 && (i2 && Iu.push(n2), n2.observationTargets.push(new dh(e2, r2 && r2.box)), fh(1), ph.schedule());
  }, t3.unobserve = function(t4, e2) {
    var r2 = yh.get(t4), n2 = gh(r2.observationTargets, e2), i2 = r2.observationTargets.length === 1;
    n2 >= 0 && (i2 && Iu.splice(Iu.indexOf(r2), 1), r2.observationTargets.splice(n2, 1), fh(-1));
  }, t3.disconnect = function(t4) {
    var e2 = this, r2 = yh.get(t4);
    r2.observationTargets.slice().forEach(function(r3) {
      return e2.unobserve(t4, r3.target);
    }), r2.activeTargets.splice(0, r2.activeTargets.length);
  }, t3;
}(), xh = function() {
  function t3(t4) {
    if (arguments.length === 0)
      throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
    if (typeof t4 != "function")
      throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
    vh.connect(this, t4);
  }
  return t3.prototype.observe = function(t4, e2) {
    if (arguments.length === 0)
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
    if (!Hu(t4))
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
    vh.observe(this, t4, e2);
  }, t3.prototype.unobserve = function(t4) {
    if (arguments.length === 0)
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
    if (!Hu(t4))
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
    vh.unobserve(this, t4);
  }, t3.prototype.disconnect = function() {
    vh.disconnect(this);
  }, t3.toString = function() {
    return "function ResizeObserver () { [polyfill code] }";
  }, t3;
}();
const wh = self.ResizeObserver || xh;
const bh = new m(), _h = new m();
new TextDecoder(), Promise.resolve();
const Mh = class {
  static get ELEMENT_UID_ATTRIBUTE() {
    return this.ATTRIBUTE_PREFIX + "-uid";
  }
  static get HOVER_ATTRIBUTE() {
    return this.ATTRIBUTE_PREFIX + "-hover";
  }
  static get ACTIVE_ATTRIBUTE() {
    return this.ATTRIBUTE_PREFIX + "-active";
  }
  static get FOCUS_ATTRIBUTE() {
    return this.ATTRIBUTE_PREFIX + "-focus";
  }
  static get TARGET_ATTRIBUTE() {
    return this.ATTRIBUTE_PREFIX + "-target";
  }
  static get LAYER_ATTRIBUTE() {
    return this.ATTRIBUTE_PREFIX + "-layer";
  }
  static get PIXEL_RATIO_ATTRIBUTE() {
    return this.ATTRIBUTE_PREFIX + "-pixel-ratio";
  }
  static get RENDERING_ATTRIBUTE() {
    return this.ATTRIBUTE_PREFIX + "-rendering";
  }
  static get RENDERING_PARENT_ATTRIBUTE() {
    return this.ATTRIBUTE_PREFIX + "-rendering-parent";
  }
  static get RENDERING_CONTAINER_ATTRIBUTE() {
    return this.ATTRIBUTE_PREFIX + "-rendering-container";
  }
  static get RENDERING_INLINE_ATTRIBUTE() {
    return this.ATTRIBUTE_PREFIX + "-rendering-inline";
  }
  static get RENDERING_DOCUMENT_ATTRIBUTE() {
    return this.ATTRIBUTE_PREFIX + "-rendering-document";
  }
  static generateElementUID() {
    return "" + this._nextUID++;
  }
  static getPsuedoAttributes(t3) {
    return `${t3.hover ? `${this.HOVER_ATTRIBUTE}="" ` : " "}${t3.focus ? `${this.FOCUS_ATTRIBUTE}="" ` : " "}${t3.active ? `${this.ACTIVE_ATTRIBUTE}="" ` : " "}${t3.target ? `${this.TARGET_ATTRIBUTE}="" ` : " "}`;
  }
  static initRootNodeObservation(t3) {
    const e2 = t3.ownerDocument, r2 = t3.getRootNode(), n2 = "head" in r2 ? r2.head : r2;
    if (this.rootNodeObservers.get(r2))
      return;
    const i2 = this.containerStyleElement = e2.createElement("style");
    e2.head.appendChild(i2), i2.innerHTML = `
      [${Mh.RENDERING_CONTAINER_ATTRIBUTE}] {
        all: initial;
        position: fixed;
        width: 100%;
        height: 100%;
        top: 0px;
      }
    `;
    const s2 = `
    [${Mh.RENDERING_DOCUMENT_ATTRIBUTE}] * {
      transform: none !important;
    }

    [${Mh.RENDERING_ATTRIBUTE}], [${Mh.RENDERING_ATTRIBUTE}] * {
      visibility: visible !important;
      /* the following is a hack for Safari; 
      without some kind of css filter active, 
      any box-shadow effect will fail to rasterize properly */
      filter: opacity(1);
    }
    
    [${Mh.RENDERING_ATTRIBUTE}] [${Mh.LAYER_ATTRIBUTE}], [${Mh.RENDERING_ATTRIBUTE}] [${Mh.LAYER_ATTRIBUTE}] * {
      visibility: hidden !important;
    }

    [${Mh.RENDERING_ATTRIBUTE}] {
      position: relative !important;
      top: 0 !important;
      left: 0 !important;
      float: left !important; /* prevent margin-collapse in SVG foreign-element for Webkit */
      box-sizing:border-box;
      min-width:var(--x-width);
      min-height:var(--x-height);
    }
    
    [${Mh.RENDERING_INLINE_ATTRIBUTE}] {
      top: var(--x-inline-top) !important;
      width:auto !important;
    }

    [${Mh.RENDERING_PARENT_ATTRIBUTE}] {
      transform: none !important;
      left: 0 !important;
      top: 0 !important;
      margin: 0 !important;
      border:0 !important;
      border-radius:0 !important;
      width: 100% !important;
      height:100% !important;
      padding:0 !important;
      visibility:hidden !important;
      filter:none !important;
    }
    
    [${Mh.RENDERING_PARENT_ATTRIBUTE}]::before, [${Mh.RENDERING_PARENT_ATTRIBUTE}]::after {
      content:none !important;
      box-shadow:none !important;
    }
    `, a2 = e2.createElement("style");
    if (a2.textContent = s2, n2.append(a2), r2 === e2) {
      let t4 = "";
      const e3 = () => {
        if (t4 != window.location.hash && window.location.hash)
          try {
            this.targetElement = r2.querySelector(window.location.hash);
          } catch {
          }
        t4 = window.location.hash;
      };
      window.addEventListener("hashchange", e3, false), e3(), window.addEventListener("focusin", (t5) => {
        this.focusElement = t5.target;
      }, false), window.addEventListener("focusout", (t5) => {
        this.focusElement = null;
      }, false), window.addEventListener("load", (t5) => {
        o2();
      });
    }
    const o2 = () => {
      for (const [t4, e3] of this.layers)
        e3.needsRefresh = true;
    }, u2 = (t4) => {
      var e3 = t4.nodeName.toUpperCase();
      h.indexOf(e3) !== -1 && t4.addEventListener("load", o2);
    }, h = ["STYLE", "LINK"], c2 = new MutationObserver((t4) => {
      for (const e3 of t4) {
        h.indexOf(e3.target.nodeName.toUpperCase()) !== -1 && o2();
        for (const t5 of e3.addedNodes)
          u2(t5);
      }
    });
    c2.observe(e2, { childList: true, attributes: true, characterData: true, subtree: true, attributeOldValue: true, characterDataOldValue: true }), this.rootNodeObservers.set(r2, c2);
  }
  static addToSerializeQueue(t3) {
    this.serializeQueue.indexOf(t3) === -1 && this.serializeQueue.push(t3);
  }
  static addToRasterizeQueue(t3) {
    this.rasterizeQueue.indexOf(t3) === -1 && this.rasterizeQueue.push(t3);
  }
  static addToRenderQueue(t3) {
    this.renderQueue.indexOf(t3) === -1 && this.renderQueue.push(t3);
  }
  static _runTasks() {
    Mh.tasksPending = false;
    const t3 = Mh.serializeQueue, e2 = Mh.rasterizeQueue, r2 = Mh.renderQueue, n2 = Mh.TASK_SYNC_MAX_TIME / 2;
    let i2 = performance.now();
    for (; r2.length && performance.now() - i2 < n2; )
      r2.shift().render();
    for (i2 = performance.now(); t3.length && performance.now() - i2 < n2; )
      t3.shift().serialize();
    e2.length && Mh.rasterizeTaskCount < Mh.TASK_ASYNC_MAX_COUNT && (Mh.rasterizeTaskCount++, e2.shift().rasterize().finally(() => {
      Mh.rasterizeTaskCount--;
    }));
  }
  static scheduleTasksIfNeeded() {
    this.tasksPending || Mh.serializeQueue.length === 0 && Mh.renderQueue.length === 0 && (Mh.rasterizeQueue.length === 0 || Mh.rasterizeTaskCount === Mh.TASK_ASYNC_MAX_COUNT) || (this.tasksPending = true, Mh.scheduleIdle(Mh._runTasks));
  }
  static scheduleIdle(t3) {
    setTimeout(t3, 1);
  }
  static setLayerNeedsRefresh(t3) {
    t3.needsRefresh = true;
  }
  static createLayerTree(t3, e2, r2) {
    if (Mh.getClosestLayer(t3))
      throw new Error("A root WebLayer for the given element already exists");
    !function(t4, e3) {
      if (document.contains(t4))
        return t4;
      const r3 = document.createElement("div");
      r3.setAttribute(Nh.RENDERING_CONTAINER_ATTRIBUTE, ""), r3.style.visibility = "hidden", r3.style.pointerEvents = "none", r3.style.touchAction = "none", r3.attachShadow({ mode: "open" }).appendChild(t4), document.documentElement.appendChild(r3);
    }(t3), Mh.initRootNodeObservation(t3);
    const n2 = new MutationObserver(Mh._handleMutations);
    this.mutationObservers.set(t3, n2), this.startMutationObserver(t3);
    const i2 = new wh((t4) => {
      for (const e3 of t4) {
        const t5 = this.getClosestLayer(e3.target);
        t5.traverseLayers(Mh.setLayerNeedsRefresh), t5.traverseParentLayers(Mh.setLayerNeedsRefresh);
      }
    });
    i2.observe(t3), this.resizeObservers.set(t3, i2), t3.addEventListener("input", this._triggerRefresh, { capture: true }), t3.addEventListener("keydown", this._triggerRefresh, { capture: true }), t3.addEventListener("submit", this._triggerRefresh, { capture: true }), t3.addEventListener("change", this._triggerRefresh, { capture: true }), t3.addEventListener("focus", this._triggerRefresh, { capture: true }), t3.addEventListener("blur", this._triggerRefresh, { capture: true }), t3.addEventListener("transitionend", this._triggerRefresh, { capture: true });
    const s2 = new Ru(t3, r2);
    return this.rootLayers.set(t3, s2), s2;
  }
  static disposeLayer(t3) {
    if (this.rootLayers.has(t3.element)) {
      this.rootLayers.delete(t3.element);
      this.mutationObservers.get(t3.element).disconnect(), this.mutationObservers.delete(t3.element);
      this.resizeObservers.get(t3.element).disconnect(), this.resizeObservers.delete(t3.element), t3.element.removeEventListener("input", this._triggerRefresh, { capture: true }), t3.element.removeEventListener("keydown", this._triggerRefresh, { capture: true }), t3.element.removeEventListener("submit", this._triggerRefresh, { capture: true }), t3.element.removeEventListener("change", this._triggerRefresh, { capture: true }), t3.element.removeEventListener("focus", this._triggerRefresh, { capture: true }), t3.element.removeEventListener("blur", this._triggerRefresh, { capture: true }), t3.element.removeEventListener("transitionend", this._triggerRefresh, { capture: true });
    }
  }
  static getClosestLayer(t3, e2 = true) {
    let r2 = e2 ? t3 : t3.parentElement;
    const n2 = r2 == null ? void 0 : r2.closest(`[${Mh.LAYER_ATTRIBUTE}]`);
    if (!n2) {
      const r3 = (t3 == null ? void 0 : t3.getRootNode()).host;
      if (r3)
        return this.getClosestLayer(r3, e2);
    }
    return this.layers.get(n2);
  }
  static parseCSSTransform(t3, e2, r2, n2, i2 = new m()) {
    const s2 = t3.transform, a2 = t3.transformOrigin;
    if (s2.indexOf("matrix(") == 0) {
      i2.identity();
      var o2 = s2.substring(7, s2.length - 1).split(", ").map(parseFloat);
      i2.elements[0] = o2[0], i2.elements[1] = o2[1], i2.elements[4] = o2[2], i2.elements[5] = o2[3], i2.elements[12] = o2[4], i2.elements[13] = o2[5];
    } else {
      if (s2.indexOf("matrix3d(") != 0)
        return null;
      o2 = s2.substring(9, s2.length - 1).split(", ").map(parseFloat);
      i2.fromArray(o2);
    }
    i2.elements[0] === 0 && (i2.elements[0] = 1e-15), i2.elements[5] === 0 && (i2.elements[5] = 1e-15), i2.elements[10] === 0 && (i2.elements[10] = 1e-15), i2.elements[12] *= n2, i2.elements[13] *= -1 * n2;
    var u2 = a2.split(" ").map(parseFloat), h = (u2[0] - e2 / 2) * n2, c2 = (u2[1] - r2 / 2) * n2 * -1, l2 = u2[2] || 0, p2 = bh.identity().makeTranslation(-h, -c2, -l2), f2 = _h.identity().makeTranslation(h, c2, l2);
    for (const d of i2.elements)
      if (isNaN(d))
        return null;
    return i2.premultiply(f2).multiply(p2);
  }
  static pauseMutationObservers() {
    const t3 = Mh.mutationObservers.values();
    for (const e2 of t3)
      Mh._handleMutations(e2.takeRecords()), e2.disconnect();
  }
  static resumeMutationObservers() {
    for (const [t3] of Mh.mutationObservers)
      this.startMutationObserver(t3);
  }
  static startMutationObserver(t3) {
    Mh.mutationObservers.get(t3).observe(t3, { attributes: true, childList: true, subtree: true, characterData: true, characterDataOldValue: true, attributeOldValue: true });
  }
  static _addDynamicPseudoClassRules(t3) {
    const e2 = t3.styleSheets;
    for (let s2 = 0; s2 < e2.length; s2++)
      try {
        const t4 = e2[s2], i2 = t4.cssRules;
        if (!i2)
          continue;
        const a2 = [];
        for (var r2 = 0; r2 < i2.length; r2++) {
          i2[r2].cssText.indexOf(":hover") > -1 && a2.push(i2[r2].cssText.replace(new RegExp(":hover", "g"), `[${Mh.HOVER_ATTRIBUTE}]`)), i2[r2].cssText.indexOf(":active") > -1 && a2.push(i2[r2].cssText.replace(new RegExp(":active", "g"), `[${Mh.ACTIVE_ATTRIBUTE}]`)), i2[r2].cssText.indexOf(":focus") > -1 && a2.push(i2[r2].cssText.replace(new RegExp(":focus", "g"), `[${Mh.FOCUS_ATTRIBUTE}]`)), i2[r2].cssText.indexOf(":target") > -1 && a2.push(i2[r2].cssText.replace(new RegExp(":target", "g"), `[${Mh.TARGET_ATTRIBUTE}]`));
          var n2 = a2.indexOf(i2[r2].cssText);
          n2 > -1 && a2.splice(n2, 1);
        }
        for (r2 = 0; r2 < a2.length; r2++)
          t4.insertRule(a2[r2]);
      } catch (i2) {
      }
  }
  static arrayBufferToBase64(t3) {
    for (var e2 = "", r2 = t3.byteLength, n2 = 0; n2 < r2; n2++)
      e2 += String.fromCharCode(t3[n2]);
    return window.btoa(e2);
  }
  static attributeCSS(t3, e2) {
    return e2 ? `[${t3}]=${e2}` : `[${t3}]`;
  }
  static attributeHTML(t3, e2) {
    return e2 ? `${t3}="${e2}"` : `${t3}=""`;
  }
  static async generateEmbeddedCSS(t3, e2) {
    let r2;
    const n2 = [];
    e2 = (e2 = (e2 = (e2 = e2.replace(new RegExp(":hover", "g"), this.attributeCSS(this.HOVER_ATTRIBUTE))).replace(new RegExp(":active", "g"), this.attributeCSS(this.ACTIVE_ATTRIBUTE))).replace(new RegExp(":focus", "g"), this.attributeCSS(this.FOCUS_ATTRIBUTE))).replace(new RegExp(":target", "g"), this.attributeCSS(this.TARGET_ATTRIBUTE));
    const i2 = RegExp(/(@import.*?["']([^"']+)["'].*?|url\((?!['"]?(?:data):)['"]?([^'"\)]*)['"]?\))/gi);
    for (; r2 = i2.exec(e2); ) {
      const i3 = !!r2[2] ? "type/css" : void 0, s2 = r2[2] || r2[3];
      n2.push(this.getDataURL(new URL(s2, t3).href, i3).then((t4) => {
        e2 = e2.replace(s2, t4);
      }));
    }
    return await Promise.all(n2), e2;
  }
  static async getAllEmbeddedStyles(t3) {
    const e2 = t3.getRootNode(), r2 = this.embeddedStyles.get(e2) || new Map();
    this.embeddedStyles.set(e2, r2);
    const n2 = Array.from(e2.querySelectorAll("style, link[type='text/css'], link[rel='stylesheet']")), i2 = t3.getRootNode() instanceof ShadowRoot;
    for (const s2 of n2)
      r2.has(s2) || r2.set(s2, new Promise((t4) => {
        if (s2.tagName.toLowerCase() === "style")
          t4(s2.textContent || "");
        else {
          const e3 = s2;
          t4(this.getEmbeddedCSS(e3.href));
        }
      }).then((t4) => {
        const e3 = RegExp(/@font-face[^{]*{([^{}]|{[^{}]*})*}/gi), n3 = t4.match(e3);
        if (i2 && n3) {
          const t5 = document.createElement("style");
          t5.innerHTML = n3.reduce((t6, e4) => e4 + "\n\n" + t6, ""), document.head.appendChild(t5), r2.set(t5, Promise.resolve(""));
        }
        return this.generateEmbeddedCSS(window.location.href, t4);
      }));
    return Promise.all(r2.values());
  }
  static async getDataURL(t3, e2) {
    if (t3.startsWith("data"))
      return t3;
    if (this.dataURLMap.has(t3))
      return this.dataURLMap.get(t3);
    const r2 = new Promise(async (r3) => {
      const n2 = await fetch(t3, e2 ? { headers: { accept: e2 } } : void 0), i2 = n2.headers.get("content-type");
      if (i2 == "text/css") {
        const e3 = await this.generateEmbeddedCSS(t3, await n2.text());
        this.embeddedCSSMap.set(t3, e3), r3("data:" + i2 + ";base64," + window.btoa(e3));
      } else {
        const t4 = new Uint8Array(await n2.arrayBuffer());
        r3("data:" + i2 + ";base64," + this.arrayBufferToBase64(t4));
      }
    });
    return this.dataURLMap.set(t3, r2), r2;
  }
  static async getEmbeddedCSS(t3) {
    if (this.embeddedCSSMap.has(t3))
      return this.embeddedCSSMap.get(t3);
    const e2 = await fetch(t3, { headers: { accept: "text/css" } }), r2 = await this.generateEmbeddedCSS(t3, await e2.text());
    return this.embeddedCSSMap.set(t3, r2), this.embeddedCSSMap.get(t3);
  }
  static updateInputAttributes(t3) {
    t3.matches("input") && this._updateInputAttribute(t3);
    for (const e2 of t3.getElementsByTagName("input"))
      this._updateInputAttribute(e2);
  }
  static _updateInputAttribute(t3) {
    t3.hasAttribute("checked") ? t3.checked || t3.removeAttribute("checked") : t3.checked && t3.setAttribute("checked", ""), t3.getAttribute("value") !== t3.value && t3.setAttribute("value", t3.value);
  }
  static isBlankImage(t3) {
    return !new Uint32Array(t3.buffer).some((t4) => t4 !== 0);
  }
};
let Nh = Mh;
if (Nh.ATTRIBUTE_PREFIX = "xr", Nh._nextUID = 0, Nh.serializer = new XMLSerializer(), Nh.rootLayers = new Map(), Nh.layers = new Map(), Nh.mutationObservers = new Map(), Nh.resizeObservers = new Map(), Nh.serializeQueue = [], Nh.rasterizeQueue = [], Nh.renderQueue = [], Nh.focusElement = null, Nh.activeElement = null, Nh.targetElement = null, Nh.rootNodeObservers = new Map(), Nh.TASK_ASYNC_MAX_COUNT = 2, Nh.TASK_SYNC_MAX_TIME = 200, Nh.rasterizeTaskCount = 0, Nh.tasksPending = false, Nh._handleMutations = (t3) => {
  for (const e2 of t3) {
    if (e2.type === "attributes") {
      if (e2.target.getAttribute(e2.attributeName) === e2.oldValue)
        continue;
    }
    if (e2.type === "characterData") {
      if (e2.target.data === e2.oldValue)
        continue;
    }
    const t4 = e2.target.nodeType === Node.ELEMENT_NODE ? e2.target : e2.target.parentElement;
    if (!t4)
      continue;
    const r2 = Mh.getClosestLayer(t4);
    if (r2) {
      if (e2.type === "attributes" && e2.attributeName === "class") {
        if ((e2.oldValue ? e2.oldValue : "") === e2.target.className)
          continue;
      }
      r2.parentLayer ? r2.parentLayer.traverseChildLayers(Mh.setLayerNeedsRefresh) : r2.traverseLayers(Mh.setLayerNeedsRefresh);
    }
  }
}, Nh._triggerRefresh = async (t3) => {
  const e2 = Mh.getClosestLayer(t3.target);
  e2 && (e2.parentLayer ? e2.parentLayer.traverseChildLayers(Mh.setLayerNeedsRefresh) : e2.traverseLayers(Mh.setLayerNeedsRefresh));
}, Nh.embeddedStyles = new Map(), Nh.dataURLMap = new Map(), Nh.embeddedCSSMap = new Map(), self.THREE)
  var Eh = self.THREE;
else
  Eh = t;
const Sh = new Eh.Matrix4(), Th = new Eh.Vector3(), Oh = new Eh.Vector3(), zh = new vu(), Ch = new vu(), Ah = Symbol("ON_BEFORE_UPDATE");
class Rh extends Eh.Object3D {
  constructor(t3, e2 = {}) {
    super(), this.element = t3, this.options = e2, this.isRoot = false, this._localZ = 0, this._viewZ = 0, this._renderZ = 0, this.textures = new Map(), this.textureNeedsUpdate = false, this.contentMesh = new Eh.Mesh(kh.GEOMETRY, new Eh.MeshBasicMaterial({ side: Eh.DoubleSide, depthWrite: false, transparent: true, alphaTest: 1e-3, opacity: 1 })), this._boundsMesh = new Eh.Mesh(kh.GEOMETRY, new Eh.MeshBasicMaterial({ visible: false })), this.cursor = new Eh.Object3D(), this.depthMaterial = new Eh.MeshDepthMaterial({ depthPacking: Eh.RGBADepthPacking, alphaTest: 1e-3 }), this.domLayout = new Eh.Object3D(), this.domSize = new Eh.Vector3(1, 1, 1), this.bounds = new vu(), this.margin = new xu(), this.childWebLayers = [], this.shouldApplyDOMLayout = "auto", this.name = t3.id, this._webLayer = Nh.getClosestLayer(t3), t3.layer = this, this.add(this.contentMesh), this.add(this._boundsMesh), this.cursor.visible = false, this.matrixAutoUpdate = true, this.contentMesh.matrixAutoUpdate = true, this.contentMesh.visible = false, this.contentMesh.customDepthMaterial = this.depthMaterial, this.contentMesh.onBeforeRender = (t4, e3, r2) => {
      this._camera = r2;
    }, this._boundsMesh.matrixAutoUpdate = true, kh.layersByElement.set(this.element, this), kh.layersByMesh.set(this.contentMesh, this);
  }
  get currentTexture() {
    if (this._webLayer.element.tagName === "VIDEO") {
      const t4 = this._webLayer.element;
      let e3 = this.textures.get(t4);
      return e3 || (e3 = new Eh.VideoTexture(t4), e3.wrapS = Eh.ClampToEdgeWrapping, e3.wrapT = Eh.ClampToEdgeWrapping, e3.minFilter = Eh.LinearFilter, this.options.textureEncoding && (e3.encoding = this.options.textureEncoding), this.textures.set(t4, e3)), e3;
    }
    const t3 = this._webLayer.currentCanvas;
    let e2 = this.textures.get(t3);
    return t3 && !e2 && (e2 = new Eh.Texture(t3), e2.needsUpdate = true, e2.wrapS = Eh.ClampToEdgeWrapping, e2.wrapT = Eh.ClampToEdgeWrapping, e2.minFilter = Eh.LinearFilter, this.options.textureEncoding && (e2.encoding = this.options.textureEncoding), this.textures.set(t3, e2)), e2;
  }
  get pseudoStates() {
    return this._webLayer.pseudoStates;
  }
  get depth() {
    return this._webLayer.depth;
  }
  get index() {
    return this.parentWebLayer ? this.parentWebLayer.childWebLayers.indexOf(this) : 0;
  }
  get needsRefresh() {
    return this._webLayer.needsRefresh;
  }
  setNeedsRefresh() {
    this._webLayer.traverseLayers(Nh.setLayerNeedsRefresh);
  }
  get needsRemoval() {
    return this._webLayer.needsRemoval;
  }
  get parentWebLayer() {
    return this._webLayer.parentLayer && kh.layersByElement.get(this._webLayer.parentLayer.element);
  }
  refresh(t3 = false) {
    var e2;
    this._webLayer.refresh(), this.childWebLayers.length = 0;
    for (const r2 of this._webLayer.childLayers) {
      const n2 = kh.layersByElement.get((e2 = Nh.getClosestLayer(r2.element)) == null ? void 0 : e2.element);
      n2 && (this.childWebLayers.push(n2), t3 && n2.refresh(t3));
    }
    this._refreshVideoBounds();
  }
  updateLayout() {
    if (this._updateDOMLayout(), this._camera) {
      this._localZ = Math.abs(Th.setFromMatrixPosition(this.matrix).z + Th.setFromMatrixPosition(this.contentMesh.matrix).z), this._viewZ = Math.abs(this.contentMesh.getWorldPosition(Th).applyMatrix4(this._camera.matrixWorldInverse).z);
      let t3 = this.parentWebLayer ? this.parentWebLayer._renderZ : this._viewZ;
      this._localZ < 1e-3 ? this._renderZ = t3 : this._renderZ = this._viewZ, this.contentMesh.renderOrder = (this.options.renderOrderOffset || 0) + (1 - Math.log(this._renderZ + 1) / Math.log(this._camera.far + 1)) + 1e-7 * (this.depth + 1e-3 * this.index);
    }
  }
  updateContent() {
    const t3 = this.contentMesh, e2 = this.currentTexture, r2 = t3.material;
    if (e2 && (e2.image && r2.map !== e2 || this.textureNeedsUpdate)) {
      const t4 = this.contentMesh.scale, n3 = Math.abs(t4.x * this.scale.x / t4.y * this.scale.y), i2 = this.domSize.x / this.domSize.y;
      Math.abs(i2 - n3) < 1e3 && (r2.map = e2, this.depthMaterial.map = e2, this.textureNeedsUpdate = false, r2.needsUpdate = true, e2.needsUpdate = true, this.depthMaterial.needsUpdate = true);
    }
    r2.transparent = true;
    const n2 = t3.material.opacity < 5e-3;
    n2 ? t3.visible = false : t3.material.map && (t3.visible = true), this.needsRemoval && n2 && (this.parent && this.parent.remove(this), this.dispose());
  }
  get rootWebLayer() {
    return kh.layersByElement.get(this._webLayer.rootLayer.element);
  }
  [Ah]() {
  }
  _doUpdate() {
    this[Ah](), this.updateContent(), this.updateLayout(), this.position.copy(this.domLayout.position), this.quaternion.copy(this.domLayout.quaternion), this.scale.copy(this.domLayout.scale), this.contentMesh.position.set(0, 0, 0), this.contentMesh.scale.copy(this.domSize), this.contentMesh.quaternion.set(0, 0, 0, 1), this._boundsMesh.position.set(0, 0, 0), this._boundsMesh.scale.copy(this.domSize), this._boundsMesh.quaternion.set(0, 0, 0, 1), this.needsRefresh && this.options.autoRefresh !== false && this.refresh(), Nh.scheduleTasksIfNeeded();
  }
  update(t3 = false) {
    t3 ? this.traverseLayersPreOrder(this._doUpdate) : this._doUpdate();
  }
  querySelector(t3) {
    var e2;
    const r2 = this.element.querySelector(t3) || ((e2 = this.element.shadowRoot) == null ? void 0 : e2.querySelector(t3));
    if (r2)
      return kh.layersByElement.get(r2);
  }
  traverseLayerAncestors(t3) {
    const e2 = this.parentWebLayer;
    e2 && (e2.traverseLayerAncestors(t3), t3.call(this, e2));
  }
  traverseLayersPreOrder(t3) {
    if (t3.call(this, this) === false)
      return false;
    for (const e2 of this.childWebLayers)
      if (e2.traverseLayersPreOrder(t3) === false)
        return false;
    return true;
  }
  traverseLayersPostOrder(t3) {
    for (const e2 of this.childWebLayers)
      if (e2.traverseLayersPostOrder(t3) === false)
        return false;
    return t3.call(this, this) || true;
  }
  dispose() {
    for (const t3 of this.textures.values())
      t3.dispose();
    this.contentMesh.geometry.dispose(), this._boundsMesh.geometry.dispose(), Nh.disposeLayer(this._webLayer);
    for (const t3 of this.childWebLayers)
      t3.dispose();
  }
  _refreshVideoBounds() {
    if (this.element.nodeName === "VIDEO") {
      const t3 = this.element, e2 = this.currentTexture, r2 = getComputedStyle(this.element), { objectFit: n2 } = r2, { width: i2, height: s2 } = this.bounds.copy(this._webLayer.currentBounds), { videoWidth: a2, videoHeight: o2 } = t3, u2 = a2 / o2, h = i2 / s2;
      switch (e2.center.set(0.5, 0.5), n2) {
        case "none":
          e2.repeat.set(i2 / a2, s2 / o2).clampScalar(0, 1);
          break;
        case "contain":
        case "scale-down":
          if (e2.repeat.set(1, 1), h > u2) {
            const t4 = this.bounds.height * u2 || 0;
            this.bounds.left += (this.bounds.width - t4) / 2, this.bounds.width = t4;
          } else {
            const t4 = this.bounds.width / u2 || 0;
            this.bounds.top += (this.bounds.height - t4) / 2, this.bounds.height = t4;
          }
          break;
        case "cover":
          if (e2.repeat.set(i2 / a2, s2 / o2), h < u2) {
            const t4 = this.bounds.height * u2 || 0;
            this.bounds.left += (this.bounds.width - t4) / 2, this.bounds.width = t4;
          } else {
            const t4 = this.bounds.width / u2 || 0;
            this.bounds.top += (this.bounds.height - t4) / 2, this.bounds.height = t4;
          }
          break;
        default:
        case "fill":
          e2.repeat.set(1, 1);
      }
    }
  }
  _updateDOMLayout() {
    if (this.needsRemoval)
      return;
    const { currentBounds: t3, currentMargin: e2 } = this._webLayer;
    this.domLayout.position.set(0, 0, 0), this.domLayout.scale.set(1, 1, 1), this.domLayout.quaternion.set(0, 0, 0, 1);
    const r2 = this.element.nodeName === "VIDEO", n2 = r2 ? this.bounds : this.bounds.copy(t3), i2 = r2 ? this.margin : this.margin.copy(e2), s2 = n2.width + i2.left + i2.right, a2 = n2.height + i2.top + i2.bottom, o2 = n2.width, u2 = n2.height, h = 1 / kh.DEFAULT_PIXELS_PER_UNIT;
    if (this.domSize.set(Math.max(h * (o2 + i2.left + i2.right), 1e-5), Math.max(h * (u2 + i2.top + i2.bottom), 1e-5), 1), !kh.shouldApplyDOMLayout(this))
      return;
    const c2 = this.parentWebLayer;
    if (!c2)
      return;
    const l2 = c2.bounds, p2 = c2.margin, f2 = l2.width + p2.left + p2.right, d = l2.height + p2.bottom + p2.top, m2 = -f2 / 2 + p2.left, y2 = d / 2 - p2.top;
    this.domLayout.position.set(h * (m2 + s2 / 2 + n2.left - i2.left), h * (y2 - a2 / 2 - n2.top + i2.top), 0);
    const g2 = getComputedStyle(this.element), v2 = g2.transform;
    if (v2 && v2 !== "none") {
      const t4 = Nh.parseCSSTransform(g2, n2.width, n2.height, h, Sh);
      t4 && (this.domLayout.updateMatrix(), this.domLayout.matrix.multiply(t4), this.domLayout.matrix.decompose(this.domLayout.position, this.domLayout.quaternion, this.domLayout.scale));
    }
  }
}
const Dh = class extends Eh.Object3D {
  constructor(t3, e2 = {}) {
    super(), this.options = e2, this._interactionRays = [], this._raycaster = new Eh.Raycaster(), this._hitIntersections = [], this._previousHoverLayers = new Set(), this._contentMeshes = [], this._prepareHitTest = (t4) => {
      t4.pseudoStates.hover && this._previousHoverLayers.add(t4), t4.cursor.visible = false, t4.pseudoStates.hover = false, this._contentMeshes.push(t4.contentMesh);
    };
    const r2 = typeof t3 == "string" ? Mu(t3) : t3;
    Nh.createLayerTree(r2, e2, (t4, { target: e3 }) => {
      var n2, i2, s2, a2, o2, u2;
      if (t4 === "layercreated") {
        const t5 = new Rh(e3, this.options);
        e3 === r2 ? (t5[Ah] = () => this._updateInteractions(), t5.isRoot = true, this.rootLayer = t5, this.add(t5)) : (n2 = t5.parentWebLayer) == null || n2.add(t5), (s2 = (i2 = this.options).onLayerCreate) == null || s2.call(i2, t5);
      } else if (t4 === "layerpainted") {
        const t5 = Nh.layers.get(e3), r3 = Dh.layersByElement.get(t5.element);
        r3.textureNeedsUpdate = true, (o2 = (a2 = this.options).onLayerPaint) == null || o2.call(a2, r3);
      } else if (t4 === "layermoved") {
        const t5 = Dh.layersByElement.get(e3);
        (u2 = t5.parentWebLayer) == null || u2.add(t5);
      }
    }), this.refresh(), this.update();
  }
  static shouldApplyDOMLayout(t3) {
    const e2 = t3.shouldApplyDOMLayout;
    return e2 === "always" || e2 === true || e2 !== "never" && e2 !== false && !(e2 !== "auto" || !t3.parentWebLayer || t3.parent !== t3.parentWebLayer);
  }
  get interactionRays() {
    return this._interactionRays;
  }
  set interactionRays(t3) {
    this._interactionRays = t3;
  }
  querySelector(t3) {
    return this.rootLayer.querySelector(t3);
  }
  refresh() {
    this.rootLayer.refresh(true);
  }
  update() {
    this.rootLayer.update(true);
  }
  get contentMesh() {
    return this.rootLayer.contentMesh;
  }
  _intersectionSort(t3, e2) {
    const r2 = t3.object.parent, n2 = e2.object.parent;
    return r2.depth !== n2.depth ? n2.depth - r2.depth : n2.index - r2.index;
  }
  _updateInteractions() {
    const t3 = this._previousHoverLayers;
    t3.clear(), this._contentMeshes.length = 0, this.rootLayer.traverseLayersPreOrder(this._prepareHitTest);
    for (const e2 of this._interactionRays) {
      e2 instanceof Eh.Ray ? this._raycaster.ray.copy(e2) : this._raycaster.ray.set(e2.getWorldPosition(Th), e2.getWorldDirection(Oh).negate()), this._hitIntersections.length = 0;
      const r2 = this._raycaster.intersectObjects(this._contentMeshes, false, this._hitIntersections);
      r2.sort(this._intersectionSort);
      const n2 = r2[0];
      if (n2) {
        const e3 = n2.object.parent;
        e3.cursor.position.copy(n2.point), e3.cursor.visible = true, e3.pseudoStates.hover = true, t3.has(e3) || e3.setNeedsRefresh();
      }
    }
    for (const e2 of t3)
      e2.pseudoStates.hover || e2.setNeedsRefresh();
  }
  hitTest(t3) {
    const e2 = this._raycaster, r2 = this._hitIntersections, n2 = Dh.layersByMesh;
    t3 instanceof Eh.Ray ? this._raycaster.ray.copy(t3) : this._raycaster.ray.set(t3.getWorldPosition(Th), t3.getWorldDirection(Oh).negate()), r2.length = 0, e2.intersectObject(this, true, r2), r2.sort(this._intersectionSort);
    for (const i2 of r2) {
      const t4 = n2.get(i2.object);
      if (!t4)
        continue;
      const e3 = wu(t4.element, zh);
      if (!e3.width || !e3.height)
        continue;
      let r3 = t4.element;
      const s2 = i2.uv.x * e3.width, a2 = (1 - i2.uv.y) * e3.height;
      return gu(t4.element, (t5) => {
        if (!r3.contains(t5))
          return false;
        const n3 = wu(t5, Ch), i3 = n3.left - e3.left, o2 = n3.top - e3.top, { width: u2, height: h } = n3;
        return s2 > i3 && s2 < i3 + u2 && a2 > o2 && a2 < o2 + h && (r3 = t5, true);
      }), { layer: t4, intersection: i2, target: r3 };
    }
  }
};
let kh = Dh;
kh.layersByElement = new WeakMap(), kh.layersByMesh = new WeakMap(), kh.DEFAULT_LAYER_SEPARATION = 1e-3, kh.DEFAULT_PIXELS_PER_UNIT = 1e3, kh.GEOMETRY = new Eh.PlaneGeometry(1, 1, 2, 2);
const Ih = new m(), Lh = new m(), Bh = { getChildren(t3, e2) {
  const r2 = t3.node;
  if (r2.isObject3D) {
    e2.length = 0;
    for (let t4 = 0; t4 < r2.children.length; t4++)
      e2[t4] = r2.children[t4];
  }
}, getState(t3) {
  var e2;
  if (t3.system.viewNode === t3.node) {
    const e3 = t3.node;
    e3.updateMatrixWorld(), t3.system.viewFrustum.setFromPerspectiveProjectionMatrix(e3.projectionMatrix);
  }
  const r2 = t3.node;
  if (!r2.isObject3D)
    return;
  let n2, i2;
  if (t3.isAdaptive) {
    const s2 = (e2 = t3.referenceMetrics) == null ? void 0 : e2.target.worldMatrix;
    i2 = Ih.compose(r2.position, r2.quaternion, r2.scale), n2 = s2 ? Lh.multiplyMatrices(s2, i2) : i2;
  } else
    n2 = r2.matrixWorld, i2 = r2.matrix;
  t3.raw.parent = r2.parent, t3.raw.worldMatrix.copy(n2), t3.raw.relativeMatrix.copy(i2), t3.raw.opacity = Fh(t3) || 1;
}, getIntrinsicBounds(t3, e2) {
  const r2 = t3.node;
  if (r2.isObject3D)
    return r2.geometry ? (r2.geometry.boundingBox || r2.geometry.computeBoundingBox(), e2.copy(r2.geometry.boundingBox)) : e2;
}, apply(t3, e2) {
  const r2 = t3.node;
  if (!r2.isObject3D)
    return;
  if (e2.parent !== r2.parent) {
    const t4 = e2.parent;
    t4 && t4.add(r2);
  }
  let n2 = e2.localMatrix;
  if (isNaN(n2.elements[0]) || isNaN(n2.elements[13]) || isNaN(n2.elements[14]) || isNaN(n2.elements[15]) || n2.elements[0] === 0)
    throw new Error();
  if (n2 = e2.worldMatrix, isNaN(n2.elements[0]) || isNaN(n2.elements[13]) || isNaN(n2.elements[14]) || isNaN(n2.elements[15]) || n2.elements[0] === 0)
    throw new Error();
  r2.matrixAutoUpdate = false, r2.matrix.copy(e2.localMatrix), r2.matrixWorld.copy(e2.worldMatrix), Ph(t3, e2.opacity);
} };
function Fh(t3) {
  const e2 = t3.node;
  if (e2.material) {
    const t4 = e2.material;
    if (t4.length) {
      for (const e3 of t4)
        if (e3.opacity !== void 0)
          return e3.opacity;
    } else if ("opacity" in e2.material)
      return e2.material.opacity;
  }
  for (const r2 of t3.boundingChildMetrics) {
    const t4 = Fh(r2);
    if (t4 !== void 0)
      return t4;
  }
}
function Ph(t3, e2) {
  const r2 = t3.node;
  if (r2.material) {
    const t4 = r2.material;
    if (t4.length)
      for (const r3 of t4)
        "opacity" in r3 && (r3.opacity = e2);
    else
      r2.material.opacity = e2;
  }
  for (const n2 of t3.boundingChildMetrics)
    Ph(n2, e2);
}
const Uh = { getChildren(t3, e2) {
  t3.node.isObject3D && Bh.getChildren(t3, e2);
}, getState(t3) {
  t3.node.isObject3D && Bh.getState(t3);
}, getIntrinsicBounds: (t3, e2) => (t3.node.isObject3D && Bh.getIntrinsicBounds(t3, e2), e2), apply(t3, e2) {
  t3.node.isObject3D && Bh.apply(t3, e2);
} };
function jh(t3, e2 = Uh) {
  return new du(t3, e2);
}
export { Fragment as F, createVNode as a, createBaseVNode as b, createElementBlock as c, readonly as d, createApp as e, popScopeId as f, createTextVNode as g, inject as i, jh as j, kh as k, normalizeClass as n, openBlock as o, pushScopeId as p, reactive as r, toDisplayString as t, unref as u };
